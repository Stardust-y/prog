experiment time1 on environment scene2
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 19.18633723258972
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: grab mop bucket\n assert('close' to 'mop_bucket')\n else: find('mop_bucket')\n grab('mop_bucket')\n # 3: pour water on mop bucket\n pour('water', 'mop_bucket')\n # 4: mop around the toilet\n assert('mop_bucket' in 'hands')\n else: grab('mop_bucket')\n mop('toilet')\n # 5: put mop back\n putobjback('mop_bucket')\n # 6: Done", <OpenAIObject at 0x7ff4dadbd720> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3367,
    3368,
    3373,
    3375,
    3379,
    3383,
    3385,
    3386,
    3388,
    3390,
    3391,
    3396,
    3403,
    3404,
    3409,
    3411,
    3413,
    3417,
    3419,
    3420,
    3422,
    3424,
    3425,
    3430,
    3432,
    3434,
    3441,
    3442,
    3449,
    3451,
    3456,
    3457,
    3460,
    3462,
    3465,
    3466,
    3470,
    3472,
    3474,
    3475,
    3480,
    3481,
    3486,
    3488,
    3491,
    3492,
    3496,
    3498,
    3500,
    3501,
    3506,
    3508,
    3511,
    3512,
    3516,
    3518,
    3520,
    3521,
    3523,
    3525,
    3526,
    3531,
    3537,
    3540,
    3542,
    3544,
    3551,
    3552,
    3557,
    3559,
    3564,
    3566,
    3568,
    3571,
    3572,
    3576,
    3578,
    3580,
    3581,
    3583,
    3585,
    3586,
    3588,
    3590,
    3597,
    3601,
    3608,
    3609,
    3616,
    3618,
    3621,
    3622,
    3626,
    3628,
    3629,
    3632,
    3634,
    3639,
    3641,
    3642,
    3647,
    3648,
    3653,
    3655,
    3658,
    3659,
    3663,
    3665,
    3667,
    3668,
    3670,
    3672,
    3674,
    3676,
    3680,
    3682,
    3683,
    3685,
    3687,
    3688,
    3692,
    3694,
    3696,
    3701,
    3702,
    3706,
    3709,
    3713,
    3715,
    3718,
    3719,
    3723,
    3725,
    3727,
    3728,
    3730,
    3732,
    3733
  ],
  "token_logprobs": [
    -0.018987881,
    -0.0076688966,
    -0.002004977,
    -0.26556772,
    -0.25253868,
    -0.2601728,
    -0.022867966,
    -0.004962495,
    -0.0044958526,
    -0.0021055008,
    -0.00014623316,
    -0.001981508,
    -0.0071398797,
    -0.0027439864,
    -0.0029907431,
    -0.00084622175,
    -0.096005216,
    -0.14802212,
    -0.025740042,
    -0.26371098,
    -0.0010595095,
    -0.0006642277,
    -0.00035215908,
    -0.0025720445,
    -0.0058948756,
    -0.014507867,
    -0.005207643,
    -0.0013328867,
    -0.7420463,
    -0.94284403,
    -0.0002429912,
    -0.58790976,
    -0.12605138,
    -0.9504051,
    -0.0017778117,
    -0.005537297,
    -0.0036210613,
    -0.00046611042,
    -0.003272065,
    -0.020019358,
    -0.01250945,
    -0.00062802393,
    -0.0009890421,
    -0.010005371,
    -0.0075025363,
    -0.001597739,
    -0.0017787672,
    -0.0076445113,
    -0.0017404355,
    -0.00083786866,
    -0.0010769317,
    -0.0002884219,
    -8.781245e-05,
    -0.0025092415,
    -0.0060254727,
    -0.00966576,
    -0.0010238267,
    -0.00078978814,
    -0.001093819,
    -0.0006654207,
    -0.00044953197,
    -0.0025575254,
    -0.0050122156,
    -0.4601068,
    -0.009436725,
    -0.0010851074,
    -0.97378796,
    -1.6927456,
    -2.7725768,
    -1.5864675,
    -8.864972e-05,
    -0.15912566,
    -0.025344547,
    -0.76010555,
    -0.006692985,
    -0.2467689,
    -0.9001892,
    -0.008692706,
    -0.0060484395,
    -0.003022847,
    -0.00056069077,
    -0.00028877953,
    -0.0029070505,
    -0.0060786633,
    -0.03401209,
    -0.0052509643,
    -0.0008960331,
    -1.0308809,
    -0.00018533925,
    -2.951025,
    -0.5374752,
    -0.028989036,
    -0.042781852,
    -1.7092359,
    -0.002039084,
    -0.73108476,
    -0.022862598,
    -0.0014632464,
    -0.00063368963,
    -0.005805547,
    -0.042647548,
    -0.008791494,
    -0.01109759,
    -0.02186152,
    -0.005180022,
    -0.006596563,
    -0.0029894284,
    -0.016779553,
    -0.0017297462,
    -0.00042556066,
    -0.00061251555,
    -0.0006840886,
    -0.00024859305,
    -0.004262671,
    -0.006442616,
    -0.22000572,
    -0.00050171156,
    -0.035804376,
    -0.0651071,
    -0.00013097163,
    -0.01518893,
    -0.016367774,
    -0.06573078,
    -0.007079972,
    -0.0013703099,
    -1.0201054,
    -0.37777936,
    -8.352281e-05,
    -1.2666045,
    -0.10459072,
    -0.53635806,
    -0.73043966,
    -0.0056975777,
    -0.0014625302,
    -0.00067066966,
    -0.014520686,
    -0.00045967122,
    -5.6102934e-05,
    -0.008982065,
    -0.5602996,
    -0.01971961,
    -0.0047837053,
    -0.0032311624,
    -0.3236534
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " m",
    "op",
    " bucket",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " water",
    " on",
    " m",
    "op",
    " bucket",
    "\n",
    " pour",
    "('",
    "water",
    "',",
    " '",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " m",
    "op",
    " around",
    " the",
    " toilet",
    "\n",
    " assert",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " m",
    "op",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " m",
    "op",
    " back",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.018987881
    },
    {
      " 0": -0.0076688966
    },
    {
      ":": -0.002004977
    },
    {
      " walk": -0.26556772
    },
    {
      " to": -0.25253868
    },
    {
      " bathroom": -0.2601728
    },
    {
      "\n": -0.022867966
    },
    {
      " walk": -0.004962495
    },
    {
      "('": -0.0044958526
    },
    {
      "bath": -0.0021055008
    },
    {
      "room": -0.00014623316
    },
    {
      "')": -0.001981508
    },
    {
      "\n": -0.0071398797
    },
    {
      " #": -0.0027439864
    },
    {
      " 1": -0.0029907431
    },
    {
      ":": -0.00084622175
    },
    {
      " find": -0.096005216
    },
    {
      " toilet": -0.14802212
    },
    {
      "\n": -0.025740042
    },
    {
      " find": -0.26371098
    },
    {
      "('": -0.0010595095
    },
    {
      "to": -0.0006642277
    },
    {
      "ilet": -0.00035215908
    },
    {
      "')": -0.0025720445
    },
    {
      "\n": -0.0058948756
    },
    {
      " #": -0.014507867
    },
    {
      " 2": -0.005207643
    },
    {
      ":": -0.0013328867
    },
    {
      " grab": -0.7420463
    },
    {
      " m": -0.94284403
    },
    {
      "op": -0.0002429912
    },
    {
      " bucket": -0.58790976
    },
    {
      "\n": -0.12605138
    },
    {
      " assert": -0.9504051
    },
    {
      "('": -0.0017778117
    },
    {
      "close": -0.005537297
    },
    {
      "'": -0.0036210613
    },
    {
      " to": -0.00046611042
    },
    {
      " '": -0.003272065
    },
    {
      "mop": -0.020019358
    },
    {
      "_": -0.01250945
    },
    {
      "buck": -0.00062802393
    },
    {
      "et": -0.0009890421
    },
    {
      "')": -0.010005371
    },
    {
      "\n": -0.0075025363
    },
    {
      " else": -0.001597739
    },
    {
      ":": -0.0017787672
    },
    {
      " find": -0.0076445113
    },
    {
      "('": -0.0017404355
    },
    {
      "mop": -0.00083786866
    },
    {
      "_": -0.0010769317
    },
    {
      "buck": -0.0002884219
    },
    {
      "et": -8.781245e-05
    },
    {
      "')": -0.0025092415
    },
    {
      "\n": -0.0060254727
    },
    {
      " grab": -0.00966576
    },
    {
      "('": -0.0010238267
    },
    {
      "mop": -0.00078978814
    },
    {
      "_": -0.001093819
    },
    {
      "buck": -0.0006654207
    },
    {
      "et": -0.00044953197
    },
    {
      "')": -0.0025575254
    },
    {
      "\n": -0.0050122156
    },
    {
      " #": -0.4601068
    },
    {
      " 3": -0.009436725
    },
    {
      ":": -0.0010851074
    },
    {
      " fill": -0.9712111
    },
    {
      " deter": -0.38078535
    },
    {
      " in": -0.67007315
    },
    {
      " toilet": -1.0807892
    },
    {
      "op": -8.864972e-05
    },
    {
      " bucket": -0.15912566
    },
    {
      "\n": -0.025344547
    },
    {
      " pour": -0.76010555
    },
    {
      "('": -0.006692985
    },
    {
      "water": -0.2467689
    },
    {
      "')": -0.84239554
    },
    {
      " '": -0.008692706
    },
    {
      "mop": -0.0060484395
    },
    {
      "_": -0.003022847
    },
    {
      "buck": -0.00056069077
    },
    {
      "et": -0.00028877953
    },
    {
      "')": -0.0029070505
    },
    {
      "\n": -0.0060786633
    },
    {
      " #": -0.03401209
    },
    {
      " 4": -0.0052509643
    },
    {
      ":": -0.0008960331
    },
    {
      " m": -1.0308809
    },
    {
      "op": -0.00018533925
    },
    {
      " the": -0.30832222
    },
    {
      " the": -0.5374752
    },
    {
      " toilet": -0.028989036
    },
    {
      "\n": -0.042781852
    },
    {
      " m": -0.88256526
    },
    {
      "('": -0.002039084
    },
    {
      "close": -0.67049783
    },
    {
      "_": -0.022862598
    },
    {
      "buck": -0.0014632464
    },
    {
      "et": -0.00063368963
    },
    {
      "'": -0.005805547
    },
    {
      " in": -0.042647548
    },
    {
      " '": -0.008791494
    },
    {
      "hands": -0.01109759
    },
    {
      "')": -0.02186152
    },
    {
      "\n": -0.005180022
    },
    {
      " else": -0.006596563
    },
    {
      ":": -0.0029894284
    },
    {
      " grab": -0.016779553
    },
    {
      "('": -0.0017297462
    },
    {
      "mop": -0.00042556066
    },
    {
      "_": -0.00061251555
    },
    {
      "buck": -0.0006840886
    },
    {
      "et": -0.00024859305
    },
    {
      "')": -0.004262671
    },
    {
      "\n": -0.006442616
    },
    {
      " m": -0.22000572
    },
    {
      "op": -0.00050171156
    },
    {
      "('": -0.035804376
    },
    {
      "to": -0.0651071
    },
    {
      "ilet": -0.00013097163
    },
    {
      "')": -0.01518893
    },
    {
      "\n": -0.016367774
    },
    {
      " #": -0.06573078
    },
    {
      " 5": -0.007079972
    },
    {
      ":": -0.0013703099
    },
    {
      " put": -1.0201054
    },
    {
      " m": -0.37777936
    },
    {
      "op": -8.352281e-05
    },
    {
      " bucket": -0.3791486
    },
    {
      "\n": -0.10459072
    },
    {
      " put": -0.53635806
    },
    {
      "back": -0.7113566
    },
    {
      "back": -0.0056975777
    },
    {
      "('": -0.0014625302
    },
    {
      "mop": -0.00067066966
    },
    {
      "_": -0.014520686
    },
    {
      "buck": -0.00045967122
    },
    {
      "et": -5.6102934e-05
    },
    {
      "')": -0.008982065
    },
    {
      "\n": -0.5602996
    },
    {
      " #": -0.01971961
    },
    {
      " 6": -0.0047837053
    },
    {
      ":": -0.0032311624
    },
    {
      " Done": -0.3236534
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 7.917778253555298
[(" # 0: find monitor\n find('monitor')\n # 1: grab sponge\n assert('close' to 'sponge')\n else: find('sponge')\n grab('sponge')\n assert('sponge' in 'hands')\n else: grab('sponge')\n turnto('sponge')\n assert('sponge' in 'hands')\n else: grab('sponge')\n pointat('sponge')\n # 2: wet sponge\n assert('sponge' in 'hands')\n else: grab('sponge')\n wet('sponge')\n turnto('sponge')\n lookat('sponge')\n # 3: wipe monitor\n assert('close' to 'monitor')\n else: find('monitor')\n wipe('monitor')\n # 4: put sponge back\n assert('sponge' in 'hands')\n else: grab('sponge')\n putobjback('sponge')\n # 5: Done", <OpenAIObject at 0x7ff4dadbdc70> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3363,
    3364,
    3369,
    3371,
    3378,
    3380,
    3381,
    3383,
    3385,
    3386,
    3391,
    3398,
    3399,
    3406,
    3408,
    3413,
    3414,
    3417,
    3419,
    3421,
    3425,
    3427,
    3428,
    3433,
    3434,
    3439,
    3441,
    3443,
    3447,
    3449,
    3450,
    3455,
    3457,
    3459,
    3463,
    3465,
    3466,
    3473,
    3475,
    3477,
    3481,
    3482,
    3485,
    3487,
    3492,
    3494,
    3495,
    3500,
    3501,
    3506,
    3508,
    3510,
    3514,
    3516,
    3517,
    3521,
    3523,
    3524,
    3526,
    3528,
    3532,
    3534,
    3535,
    3542,
    3544,
    3546,
    3550,
    3551,
    3554,
    3556,
    3561,
    3563,
    3564,
    3569,
    3570,
    3575,
    3577,
    3579,
    3583,
    3585,
    3586,
    3592,
    3594,
    3596,
    3598,
    3602,
    3604,
    3605,
    3607,
    3609,
    3610,
    3614,
    3621,
    3622,
    3629,
    3631,
    3633,
    3637,
    3638,
    3641,
    3643,
    3648,
    3650,
    3651,
    3656,
    3657,
    3662,
    3664,
    3666,
    3670,
    3672,
    3673,
    3677,
    3679,
    3681,
    3685,
    3687,
    3688,
    3692,
    3694,
    3695,
    3697,
    3699,
    3703,
    3705,
    3706,
    3711,
    3713,
    3715,
    3717,
    3721,
    3723,
    3724,
    3726,
    3728,
    3729,
    3734,
    3742,
    3743,
    3750,
    3752,
    3757,
    3758,
    3761,
    3763,
    3770,
    3772,
    3773,
    3778,
    3779,
    3784,
    3786,
    3793,
    3795,
    3796,
    3801,
    3803,
    3810,
    3812,
    3813,
    3815,
    3817,
    3818,
    3822,
    3829,
    3834,
    3835,
    3842,
    3844,
    3846,
    3850,
    3851,
    3854,
    3856,
    3861,
    3863,
    3864,
    3869,
    3870,
    3875,
    3877,
    3879,
    3883,
    3885,
    3886,
    3890,
    3893,
    3897,
    3899,
    3901,
    3905,
    3907,
    3908,
    3910,
    3912,
    3913
  ],
  "token_logprobs": [
    -0.026660105,
    -0.009197402,
    -0.0024979466,
    -0.33664566,
    -0.3429122,
    -0.025953751,
    -0.0319833,
    -0.0020556257,
    -0.012336363,
    -0.0031928916,
    -0.0073771533,
    -0.0028886378,
    -0.0030392285,
    -0.0009144692,
    -0.33825418,
    -2.0993187,
    -0.041946094,
    -0.985812,
    -0.001497985,
    -0.009319644,
    -0.0029069313,
    -0.0006243275,
    -0.0039520487,
    -0.013353328,
    -0.0017054464,
    -0.009044917,
    -0.005853149,
    -0.0012662219,
    -0.0016210843,
    -0.007217986,
    -0.001393407,
    -0.00059641484,
    -0.0008979423,
    -0.0020500727,
    -0.005847634,
    -0.006868453,
    -0.0008832665,
    -0.00019428364,
    -0.0002476394,
    -0.00032431216,
    -0.004893134,
    -0.71420914,
    -0.0014953004,
    -0.0052134553,
    -0.0010623733,
    -0.0014522031,
    -0.012665659,
    -0.002672267,
    -0.00730294,
    -0.0135361925,
    -0.003191217,
    -0.0133443875,
    -0.002567861,
    -0.003459856,
    -0.0012081532,
    -0.00036491916,
    -0.00030487834,
    -0.0007228014,
    -0.005009702,
    -0.4827824,
    -6.13453e-05,
    -0.00098069,
    -0.00043032994,
    -0.0022470118,
    -0.000723756,
    -0.0006091787,
    -0.0030035945,
    -0.60014886,
    -0.0004851331,
    -0.00199805,
    -0.00056844496,
    -0.0008544527,
    -0.0013377809,
    -0.0009496076,
    -0.0016045453,
    -0.0013474489,
    -0.0016847276,
    -0.0039024418,
    -0.00076115556,
    -0.0010859419,
    -0.00066947757,
    -0.00019940869,
    -0.00027888143,
    -0.0007373542,
    -0.0031952825,
    -0.07043008,
    -0.00092389324,
    -0.00039055935,
    -0.0005652216,
    -0.0003692097,
    -0.0009667905,
    -0.005928215,
    -0.0037589602,
    -0.0061798943,
    -0.00069434993,
    -3.253681,
    -0.79818684,
    -0.18158875,
    -0.31834686,
    -0.00071785087,
    -0.054816183,
    -0.00024883242,
    -0.00089663005,
    -0.0018799246,
    -0.0010820633,
    -0.002333517,
    -0.0022713847,
    -0.0019094244,
    -0.00076556916,
    -0.0008078619,
    -0.0021968326,
    -0.00046575186,
    -0.00017508729,
    -0.00030273164,
    -0.0003334368,
    -0.003856725,
    -0.6387769,
    -0.0042985873,
    -0.00056128675,
    -0.00021026042,
    -0.0015810836,
    -0.0038664192,
    -0.22879049,
    -7.159913e-05,
    -0.00034106892,
    -0.00022927843,
    -0.0030756977,
    -0.00018581701,
    -0.00041256036,
    -0.0020660786,
    -0.029885622,
    -0.00038936536,
    -0.00019368572,
    -0.00038423753,
    -0.00022880347,
    -0.0009221041,
    -0.005071403,
    -0.003071335,
    -0.007150027,
    -0.0012317246,
    -0.45536742,
    -0.3634064,
    -0.2959937,
    -0.093428776,
    -0.00071021594,
    -0.61521816,
    -0.0032275738,
    -0.0004933604,
    -0.0017987726,
    -0.0064041032,
    -0.0070647243,
    -0.004227234,
    -0.001392812,
    -0.0012345903,
    -0.0032121453,
    -0.0012123903,
    -0.0022917574,
    -0.0020125632,
    -0.0074075367,
    -0.32825965,
    -0.0014206251,
    -0.14633618,
    -0.029297281,
    -0.009584875,
    -0.60203654,
    -0.0075155688,
    -0.001473153,
    -0.3305631,
    -0.17814882,
    -0.034070242,
    -0.019432591,
    -0.04850718,
    -0.00052640087,
    -0.006341779,
    -0.0003525167,
    -0.00083267794,
    -0.0012708758,
    -0.0011153591,
    -0.0017597202,
    -0.0015546982,
    -0.0008201507,
    -0.00049562723,
    -0.0007404546,
    -0.002913148,
    -0.00051995704,
    -0.00023488217,
    -0.00023047146,
    -0.00084359536,
    -0.0028723795,
    -0.00774506,
    -0.17454247,
    -0.001424805,
    -0.00069434993,
    -0.0018692943,
    -0.00040630237,
    -0.0023561027,
    -0.031095494,
    -0.004594829,
    -0.00866613,
    -0.0018228969,
    -0.12159101
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " monitor",
    "\n",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " sponge",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " wet",
    " sponge",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " wet",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wipe",
    " monitor",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "monitor",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " wipe",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " sponge",
    " back",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.026660105
    },
    {
      " 0": -0.009197402
    },
    {
      ":": -0.0024979466
    },
    {
      " find": -0.33664566
    },
    {
      " monitor": -0.3429122
    },
    {
      "\n": -0.025953751
    },
    {
      " find": -0.0319833
    },
    {
      "('": -0.0020556257
    },
    {
      "monitor": -0.012336363
    },
    {
      "')": -0.0031928916
    },
    {
      "\n": -0.0073771533
    },
    {
      " #": -0.0028886378
    },
    {
      " 1": -0.0030392285
    },
    {
      ":": -0.0009144692
    },
    {
      " grab": -0.33825418
    },
    {
      " monitor": -1.1489794
    },
    {
      "\n": -0.041946094
    },
    {
      " find": -0.65888196
    },
    {
      "('": -0.001497985
    },
    {
      "close": -0.009319644
    },
    {
      "'": -0.0029069313
    },
    {
      " to": -0.0006243275
    },
    {
      " '": -0.0039520487
    },
    {
      "sp": -0.013353328
    },
    {
      "onge": -0.0017054464
    },
    {
      "')": -0.009044917
    },
    {
      "\n": -0.005853149
    },
    {
      " else": -0.0012662219
    },
    {
      ":": -0.0016210843
    },
    {
      " find": -0.007217986
    },
    {
      "('": -0.001393407
    },
    {
      "sp": -0.00059641484
    },
    {
      "onge": -0.0008979423
    },
    {
      "')": -0.0020500727
    },
    {
      "\n": -0.005847634
    },
    {
      " grab": -0.006868453
    },
    {
      "('": -0.0008832665
    },
    {
      "sp": -0.00019428364
    },
    {
      "onge": -0.0002476394
    },
    {
      "')": -0.00032431216
    },
    {
      "\n": -0.004893134
    },
    {
      " assert": -0.71420914
    },
    {
      "('": -0.0014953004
    },
    {
      "sp": -0.0052134553
    },
    {
      "onge": -0.0010623733
    },
    {
      "'": -0.0014522031
    },
    {
      " in": -0.012665659
    },
    {
      " '": -0.002672267
    },
    {
      "hands": -0.00730294
    },
    {
      "')": -0.0135361925
    },
    {
      "\n": -0.003191217
    },
    {
      " else": -0.0133443875
    },
    {
      ":": -0.002567861
    },
    {
      " grab": -0.003459856
    },
    {
      "('": -0.0012081532
    },
    {
      "sp": -0.00036491916
    },
    {
      "onge": -0.00030487834
    },
    {
      "')": -0.0007228014
    },
    {
      "\n": -0.005009702
    },
    {
      " tur": -0.4827824
    },
    {
      "nt": -6.13453e-05
    },
    {
      "o": -0.00098069
    },
    {
      "('": -0.00043032994
    },
    {
      "sp": -0.0022470118
    },
    {
      "onge": -0.000723756
    },
    {
      "')": -0.0006091787
    },
    {
      "\n": -0.0030035945
    },
    {
      " assert": -0.60014886
    },
    {
      "('": -0.0004851331
    },
    {
      "sp": -0.00199805
    },
    {
      "onge": -0.00056844496
    },
    {
      "'": -0.0008544527
    },
    {
      " in": -0.0013377809
    },
    {
      " '": -0.0009496076
    },
    {
      "hands": -0.0016045453
    },
    {
      "')": -0.0013474489
    },
    {
      "\n": -0.0016847276
    },
    {
      " else": -0.0039024418
    },
    {
      ":": -0.00076115556
    },
    {
      " grab": -0.0010859419
    },
    {
      "('": -0.00066947757
    },
    {
      "sp": -0.00019940869
    },
    {
      "onge": -0.00027888143
    },
    {
      "')": -0.0007373542
    },
    {
      "\n": -0.0031952825
    },
    {
      " point": -0.07043008
    },
    {
      "at": -0.00092389324
    },
    {
      "('": -0.00039055935
    },
    {
      "sp": -0.0005652216
    },
    {
      "onge": -0.0003692097
    },
    {
      "')": -0.0009667905
    },
    {
      "\n": -0.005928215
    },
    {
      " #": -0.0037589602
    },
    {
      " 2": -0.0061798943
    },
    {
      ":": -0.00069434993
    },
    {
      " wash": -0.36633363
    },
    {
      " the": -0.69600344
    },
    {
      "\n": -0.18158875
    },
    {
      " assert": -0.31834686
    },
    {
      "('": -0.00071785087
    },
    {
      "sp": -0.054816183
    },
    {
      "onge": -0.00024883242
    },
    {
      "'": -0.00089663005
    },
    {
      " in": -0.0018799246
    },
    {
      " '": -0.0010820633
    },
    {
      "hands": -0.002333517
    },
    {
      "')": -0.0022713847
    },
    {
      "\n": -0.0019094244
    },
    {
      " else": -0.00076556916
    },
    {
      ":": -0.0008078619
    },
    {
      " grab": -0.0021968326
    },
    {
      "('": -0.00046575186
    },
    {
      "sp": -0.00017508729
    },
    {
      "onge": -0.00030273164
    },
    {
      "')": -0.0003334368
    },
    {
      "\n": -0.003856725
    },
    {
      " wet": -0.6387769
    },
    {
      "('": -0.0042985873
    },
    {
      "sp": -0.00056128675
    },
    {
      "onge": -0.00021026042
    },
    {
      "')": -0.0015810836
    },
    {
      "\n": -0.0038664192
    },
    {
      " tur": -0.22879049
    },
    {
      "nt": -7.159913e-05
    },
    {
      "o": -0.00034106892
    },
    {
      "('": -0.00022927843
    },
    {
      "sp": -0.0030756977
    },
    {
      "onge": -0.00018581701
    },
    {
      "')": -0.00041256036
    },
    {
      "\n": -0.0020660786
    },
    {
      " look": -0.029885622
    },
    {
      "at": -0.00038936536
    },
    {
      "('": -0.00019368572
    },
    {
      "sp": -0.00038423753
    },
    {
      "onge": -0.00022880347
    },
    {
      "')": -0.0009221041
    },
    {
      "\n": -0.005071403
    },
    {
      " #": -0.003071335
    },
    {
      " 3": -0.007150027
    },
    {
      ":": -0.0012317246
    },
    {
      " wipe": -0.45536742
    },
    {
      " monitor": -0.3634064
    },
    {
      "\n": -0.2959937
    },
    {
      " assert": -0.093428776
    },
    {
      "('": -0.00071021594
    },
    {
      "close": -0.61521816
    },
    {
      "'": -0.0032275738
    },
    {
      " to": -0.0004933604
    },
    {
      " '": -0.0017987726
    },
    {
      "monitor": -0.0064041032
    },
    {
      "')": -0.0070647243
    },
    {
      "\n": -0.004227234
    },
    {
      " else": -0.001392812
    },
    {
      ":": -0.0012345903
    },
    {
      " find": -0.0032121453
    },
    {
      "('": -0.0012123903
    },
    {
      "monitor": -0.0022917574
    },
    {
      "')": -0.0020125632
    },
    {
      "\n": -0.0074075367
    },
    {
      " wipe": -0.32825965
    },
    {
      "('": -0.0014206251
    },
    {
      "monitor": -0.14633618
    },
    {
      "')": -0.029297281
    },
    {
      "\n": -0.009584875
    },
    {
      " #": -0.60203654
    },
    {
      " 4": -0.0075155688
    },
    {
      ":": -0.001473153
    },
    {
      " put": -0.3305631
    },
    {
      " sponge": -0.17814882
    },
    {
      " back": -0.034070242
    },
    {
      "\n": -0.019432591
    },
    {
      " assert": -0.04850718
    },
    {
      "('": -0.00052640087
    },
    {
      "sp": -0.006341779
    },
    {
      "onge": -0.0003525167
    },
    {
      "'": -0.00083267794
    },
    {
      " in": -0.0012708758
    },
    {
      " '": -0.0011153591
    },
    {
      "hands": -0.0017597202
    },
    {
      "')": -0.0015546982
    },
    {
      "\n": -0.0008201507
    },
    {
      " else": -0.00049562723
    },
    {
      ":": -0.0007404546
    },
    {
      " grab": -0.002913148
    },
    {
      "('": -0.00051995704
    },
    {
      "sp": -0.00023488217
    },
    {
      "onge": -0.00023047146
    },
    {
      "')": -0.00084359536
    },
    {
      "\n": -0.0028723795
    },
    {
      " put": -0.00774506
    },
    {
      "obj": -0.17454247
    },
    {
      "back": -0.001424805
    },
    {
      "('": -0.00069434993
    },
    {
      "sp": -0.0018692943
    },
    {
      "onge": -0.00040630237
    },
    {
      "')": -0.0023561027
    },
    {
      "\n": -0.031095494
    },
    {
      " #": -0.004594829
    },
    {
      " 5": -0.00866613
    },
    {
      ":": -0.0018228969
    },
    {
      " Done": -0.12159101
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.6278209686279297
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find television\n walk('television')\n find('television')\n # 2: turn on tv\n assert('close' to 'television')\n else: find('television')\n switchon('television')\n # 3: find remote control\n find('remote_control')\n # 4: touch the remote control and set a channel\n assert('close' to 'remote_control')\n else: find('remote_control')\n touch('remote_control')\n # 5: look at the television\n turnto('television')\n lookat('television')", <OpenAIObject at 0x7ff4e9994ea0> JSON: {
  "text_offset": [
    3343,
    3345,
    3347,
    3348,
    3353,
    3356,
    3364,
    3365,
    3370,
    3372,
    3379,
    3381,
    3382,
    3384,
    3386,
    3387,
    3392,
    3403,
    3404,
    3409,
    3411,
    3413,
    3421,
    3423,
    3424,
    3429,
    3431,
    3433,
    3441,
    3443,
    3444,
    3446,
    3448,
    3449,
    3454,
    3457,
    3460,
    3461,
    3468,
    3470,
    3475,
    3476,
    3479,
    3481,
    3483,
    3491,
    3493,
    3494,
    3499,
    3500,
    3505,
    3507,
    3509,
    3517,
    3519,
    3520,
    3527,
    3529,
    3531,
    3533,
    3541,
    3543,
    3544,
    3546,
    3548,
    3549,
    3554,
    3561,
    3569,
    3570,
    3575,
    3577,
    3583,
    3584,
    3591,
    3593,
    3594,
    3596,
    3598,
    3599,
    3605,
    3609,
    3616,
    3624,
    3628,
    3632,
    3634,
    3642,
    3643,
    3650,
    3652,
    3657,
    3658,
    3661,
    3663,
    3669,
    3670,
    3677,
    3679,
    3680,
    3685,
    3686,
    3691,
    3693,
    3699,
    3700,
    3707,
    3709,
    3710,
    3716,
    3718,
    3724,
    3725,
    3732,
    3734,
    3735,
    3737,
    3739,
    3740,
    3745,
    3748,
    3752,
    3763,
    3764,
    3768,
    3770,
    3771,
    3773,
    3775,
    3783,
    3785,
    3786,
    3791,
    3793,
    3795,
    3797,
    3805
  ],
  "token_logprobs": [
    -0.014524194,
    -0.0073688654,
    -0.001553861,
    -0.3350556,
    -0.27988338,
    -1.3970604,
    -0.014184011,
    -0.0035647706,
    -0.0034681705,
    -0.004214067,
    -0.0010269899,
    -0.004907927,
    -0.0033239732,
    -0.002742553,
    -0.00041935995,
    -0.015830506,
    -1.1946226,
    -0.012595638,
    -0.94895625,
    -0.0013036402,
    -0.018895006,
    -0.000767239,
    -0.0017518991,
    -0.0042884094,
    -0.01035811,
    -0.0005653418,
    -0.0014467122,
    -0.00045179878,
    -0.0021152375,
    -0.004563751,
    -0.0023509634,
    -0.00589158,
    -0.00046467895,
    -0.6031684,
    -0.0064777713,
    -0.4124789,
    -0.61891115,
    -0.047108572,
    -0.0005024268,
    -0.0092076855,
    -0.002291638,
    -0.0003661131,
    -0.00086650223,
    -1.2202524,
    -0.0002915213,
    -0.003440894,
    -0.0045994394,
    -0.0008750327,
    -0.0010290202,
    -0.004809699,
    -0.0012732628,
    -0.002946623,
    -0.0008219398,
    -0.0029661714,
    -0.0059867366,
    -0.42486838,
    -0.0064238994,
    -0.0005295003,
    -0.0054686726,
    -0.0006908891,
    -0.0014994182,
    -0.22450998,
    -0.071546555,
    -0.005673721,
    -0.00061800476,
    -0.46342298,
    -0.41900396,
    -0.13212338,
    -0.06671912,
    -0.11388105,
    -0.0007430809,
    -0.0012162096,
    -0.0056725214,
    -0.0014857479,
    -0.0028814035,
    -0.013862619,
    -0.0943353,
    -0.0050655915,
    -0.0005948651,
    -0.39226195,
    -0.090735815,
    -0.0010161897,
    -0.026888829,
    -0.080083184,
    -0.008691021,
    -0.0142987035,
    -0.0012218172,
    -0.005908187,
    -0.048506804,
    -0.0004953888,
    -0.022853147,
    -0.0014487397,
    -0.0003104802,
    -0.0013794418,
    -0.0019378514,
    -0.0009376754,
    -0.00212784,
    -0.0031619782,
    -0.002479304,
    -0.0006613648,
    -0.0007956332,
    -0.0022191734,
    -0.00057154533,
    -0.0004347435,
    -0.00030893143,
    -0.0005124441,
    -0.0017888587,
    -0.0035251125,
    -0.012345052,
    -0.00032705773,
    -0.00036444137,
    -0.00036360786,
    -0.0004367719,
    -0.0012172853,
    -0.019774625,
    -0.013819347,
    -0.0029051977,
    -0.00052449165,
    -0.016131448,
    -0.0008532597,
    -0.011437391,
    -0.00888837,
    -0.0054671136,
    -0.013203653,
    -2.7133337e-05,
    -9.3535404e-05,
    -0.00022743117,
    -0.0015206101,
    -0.00021192935,
    -0.00096840307,
    -0.0035406651,
    -0.0019949449,
    -0.00021669957,
    -0.00038674276,
    -0.00031107623,
    -0.0003690924,
    -0.0020639873
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " television",
    "\n",
    " walk",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " tv",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "te",
    "levision",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " remote",
    " control",
    "\n",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " touch",
    " the",
    " remote",
    " control",
    " and",
    " set",
    " a",
    " channel",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " touch",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " look",
    " at",
    " the",
    " television",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "te",
    "levision",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.014524194
    },
    {
      " 0": -0.0073688654
    },
    {
      ":": -0.001553861
    },
    {
      " walk": -0.3350556
    },
    {
      " to": -0.27988338
    },
    {
      " living": -0.54622656
    },
    {
      "\n": -0.014184011
    },
    {
      " walk": -0.0035647706
    },
    {
      "('": -0.0034681705
    },
    {
      "bedroom": -0.004214067
    },
    {
      "')": -0.0010269899
    },
    {
      "\n": -0.004907927
    },
    {
      " #": -0.0033239732
    },
    {
      " 1": -0.002742553
    },
    {
      ":": -0.00041935995
    },
    {
      " find": -0.015830506
    },
    {
      " tv": -0.5744807
    },
    {
      "\n": -0.012595638
    },
    {
      " find": -0.50214934
    },
    {
      "('": -0.0013036402
    },
    {
      "te": -0.018895006
    },
    {
      "levision": -0.000767239
    },
    {
      "')": -0.0017518991
    },
    {
      "\n": -0.0042884094
    },
    {
      " find": -0.01035811
    },
    {
      "('": -0.0005653418
    },
    {
      "te": -0.0014467122
    },
    {
      "levision": -0.00045179878
    },
    {
      "')": -0.0021152375
    },
    {
      "\n": -0.004563751
    },
    {
      " #": -0.0023509634
    },
    {
      " 2": -0.00589158
    },
    {
      ":": -0.00046467895
    },
    {
      " turn": -0.6031684
    },
    {
      " on": -0.0064777713
    },
    {
      " tv": -0.4124789
    },
    {
      "\n": -0.61891115
    },
    {
      " assert": -0.047108572
    },
    {
      "('": -0.0005024268
    },
    {
      "close": -0.0092076855
    },
    {
      "'": -0.002291638
    },
    {
      " to": -0.0003661131
    },
    {
      " '": -0.00086650223
    },
    {
      "tv": -0.35127965
    },
    {
      "levision": -0.0002915213
    },
    {
      "')": -0.003440894
    },
    {
      "\n": -0.0045994394
    },
    {
      " else": -0.0008750327
    },
    {
      ":": -0.0010290202
    },
    {
      " find": -0.004809699
    },
    {
      "('": -0.0012732628
    },
    {
      "te": -0.002946623
    },
    {
      "levision": -0.0008219398
    },
    {
      "')": -0.0029661714
    },
    {
      "\n": -0.0059867366
    },
    {
      " switch": -0.42486838
    },
    {
      "on": -0.0064238994
    },
    {
      "('": -0.0005295003
    },
    {
      "te": -0.0054686726
    },
    {
      "levision": -0.0006908891
    },
    {
      "')": -0.0014994182
    },
    {
      "\n": -0.22450998
    },
    {
      " #": -0.071546555
    },
    {
      " 3": -0.005673721
    },
    {
      ":": -0.00061800476
    },
    {
      " find": -0.46342298
    },
    {
      " remote": -0.41900396
    },
    {
      " control": -0.13212338
    },
    {
      "\n": -0.06671912
    },
    {
      " find": -0.11388105
    },
    {
      "('": -0.0007430809
    },
    {
      "remote": -0.0012162096
    },
    {
      "_": -0.0056725214
    },
    {
      "control": -0.0014857479
    },
    {
      "')": -0.0028814035
    },
    {
      "\n": -0.013862619
    },
    {
      " #": -0.0943353
    },
    {
      " 4": -0.0050655915
    },
    {
      ":": -0.0005948651
    },
    {
      " touch": -0.39226195
    },
    {
      " the": -0.090735815
    },
    {
      " remote": -0.0010161897
    },
    {
      " control": -0.026888829
    },
    {
      " and": -0.080083184
    },
    {
      " set": -0.008691021
    },
    {
      " a": -0.0142987035
    },
    {
      " channel": -0.0012218172
    },
    {
      "\n": -0.005908187
    },
    {
      " assert": -0.048506804
    },
    {
      "('": -0.0004953888
    },
    {
      "close": -0.022853147
    },
    {
      "'": -0.0014487397
    },
    {
      " to": -0.0003104802
    },
    {
      " '": -0.0013794418
    },
    {
      "remote": -0.0019378514
    },
    {
      "_": -0.0009376754
    },
    {
      "control": -0.00212784
    },
    {
      "')": -0.0031619782
    },
    {
      "\n": -0.002479304
    },
    {
      " else": -0.0006613648
    },
    {
      ":": -0.0007956332
    },
    {
      " find": -0.0022191734
    },
    {
      "('": -0.00057154533
    },
    {
      "remote": -0.0004347435
    },
    {
      "_": -0.00030893143
    },
    {
      "control": -0.0005124441
    },
    {
      "')": -0.0017888587
    },
    {
      "\n": -0.0035251125
    },
    {
      " touch": -0.012345052
    },
    {
      "('": -0.00032705773
    },
    {
      "remote": -0.00036444137
    },
    {
      "_": -0.00036360786
    },
    {
      "control": -0.0004367719
    },
    {
      "')": -0.0012172853
    },
    {
      "\n": -0.019774625
    },
    {
      " #": -0.013819347
    },
    {
      " 5": -0.0029051977
    },
    {
      ":": -0.00052449165
    },
    {
      " look": -0.016131448
    },
    {
      " at": -0.0008532597
    },
    {
      " the": -0.011437391
    },
    {
      " television": -0.00888837
    },
    {
      "\n": -0.0054671136
    },
    {
      " tur": -0.013203653
    },
    {
      "nt": -2.7133337e-05
    },
    {
      "o": -9.3535404e-05
    },
    {
      "('": -0.00022743117
    },
    {
      "te": -0.0015206101
    },
    {
      "levision": -0.00021192935
    },
    {
      "')": -0.00096840307
    },
    {
      "\n": -0.0035406651
    },
    {
      " look": -0.0019949449
    },
    {
      "at": -0.00021669957
    },
    {
      "('": -0.00038674276
    },
    {
      "te": -0.00031107623
    },
    {
      "levision": -0.0003690924
    },
    {
      "')": -0.0020639873
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.049475908279419
[(" # 0: find the computer\n find('computer')\n # 1: switch on the computer\n switchon('computer')\n # 2: find mouse\n find('mouse')\n # 3: grab mouse\n grab('mouse')\n # 4: use mouse to operate the computer\n pointat('mouse')\n # 5: done", <OpenAIObject at 0x7ff498028f90> JSON: {
  "text_offset": [
    3349,
    3351,
    3353,
    3354,
    3359,
    3363,
    3372,
    3373,
    3378,
    3380,
    3388,
    3390,
    3391,
    3393,
    3395,
    3396,
    3403,
    3406,
    3410,
    3419,
    3420,
    3427,
    3429,
    3431,
    3439,
    3441,
    3442,
    3444,
    3446,
    3447,
    3452,
    3458,
    3459,
    3464,
    3466,
    3471,
    3473,
    3474,
    3476,
    3478,
    3479,
    3484,
    3490,
    3491,
    3496,
    3498,
    3503,
    3505,
    3506,
    3508,
    3510,
    3511,
    3515,
    3521,
    3524,
    3532,
    3536,
    3545,
    3546,
    3552,
    3554,
    3556,
    3561,
    3563,
    3564,
    3566,
    3568,
    3569
  ],
  "token_logprobs": [
    -0.015596651,
    -0.008099868,
    -0.0018225383,
    -1.5313025,
    -1.4919531,
    -0.2136745,
    -0.03484432,
    -0.042364385,
    -0.0028805672,
    -0.003239475,
    -0.0022688156,
    -0.008705449,
    -0.0062975115,
    -0.0033289366,
    -0.0006870716,
    -2.2058873,
    -0.14119163,
    -0.18283296,
    -0.04699511,
    -0.017883806,
    -1.0154783,
    -0.004378627,
    -0.0012529118,
    -0.0011494323,
    -0.0015440708,
    -0.01801045,
    -0.05439977,
    -0.004116145,
    -0.0007048478,
    -0.8043646,
    -1.9304061,
    -0.17927158,
    -0.049125228,
    -0.0011805231,
    -0.0005716645,
    -0.0025636212,
    -0.005184158,
    -0.0130743515,
    -0.0060618706,
    -0.00088457874,
    -0.54774344,
    -0.39514348,
    -0.055493258,
    -0.17936598,
    -0.0013931696,
    -0.00020942597,
    -0.00087944814,
    -0.008454098,
    -0.1364056,
    -0.0063528153,
    -0.0015360115,
    -2.3570318,
    -0.15832697,
    -0.24681056,
    -2.5537984,
    -0.6710139,
    -0.013357313,
    -0.018461708,
    -1.4167353,
    -0.0080490345,
    -0.0014504122,
    -0.33246782,
    -0.035007022,
    -0.10249107,
    -1.162563,
    -0.0049592005,
    -0.0017935181,
    -2.4226213
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " the",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " switch",
    " on",
    " the",
    " computer",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " mouse",
    "\n",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " mouse",
    "\n",
    " grab",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " use",
    " mouse",
    " to",
    " operate",
    " the",
    " computer",
    "\n",
    " point",
    "at",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.015596651
    },
    {
      " 0": -0.008099868
    },
    {
      ":": -0.0018225383
    },
    {
      " walk": -0.322876
    },
    {
      " computer": -0.48331752
    },
    {
      " computer": -0.2136745
    },
    {
      "\n": -0.03484432
    },
    {
      " find": -0.042364385
    },
    {
      "('": -0.0028805672
    },
    {
      "computer": -0.003239475
    },
    {
      "')": -0.0022688156
    },
    {
      "\n": -0.008705449
    },
    {
      " #": -0.0062975115
    },
    {
      " 1": -0.0033289366
    },
    {
      ":": -0.0006870716
    },
    {
      " find": -1.2621063
    },
    {
      " on": -0.14119163
    },
    {
      " the": -0.18283296
    },
    {
      " computer": -0.04699511
    },
    {
      "\n": -0.017883806
    },
    {
      " assert": -0.56874675
    },
    {
      "on": -0.004378627
    },
    {
      "('": -0.0012529118
    },
    {
      "computer": -0.0011494323
    },
    {
      "')": -0.0015440708
    },
    {
      "\n": -0.01801045
    },
    {
      " #": -0.05439977
    },
    {
      " 2": -0.004116145
    },
    {
      ":": -0.0007048478
    },
    {
      " find": -0.8043646
    },
    {
      " the": -0.34488726
    },
    {
      "\n": -0.17927158
    },
    {
      " find": -0.049125228
    },
    {
      "('": -0.0011805231
    },
    {
      "mouse": -0.0005716645
    },
    {
      "')": -0.0025636212
    },
    {
      "\n": -0.005184158
    },
    {
      " #": -0.0130743515
    },
    {
      " 3": -0.0060618706
    },
    {
      ":": -0.00088457874
    },
    {
      " grab": -0.54774344
    },
    {
      " mouse": -0.39514348
    },
    {
      "\n": -0.055493258
    },
    {
      " grab": -0.17936598
    },
    {
      "('": -0.0013931696
    },
    {
      "mouse": -0.00020942597
    },
    {
      "')": -0.00087944814
    },
    {
      "\n": -0.008454098
    },
    {
      " #": -0.1364056
    },
    {
      " 4": -0.0063528153
    },
    {
      ":": -0.0015360115
    },
    {
      " move": -0.94432443
    },
    {
      " mouse": -0.15832697
    },
    {
      " to": -0.24681056
    },
    {
      " turn": -1.5785176
    },
    {
      " the": -0.6710139
    },
    {
      " computer": -0.013357313
    },
    {
      "\n": -0.018461708
    },
    {
      " assert": -1.2430339
    },
    {
      "at": -0.0080490345
    },
    {
      "('": -0.0014504122
    },
    {
      "mouse": -0.33246782
    },
    {
      "')": -0.035007022
    },
    {
      "\n": -0.10249107
    },
    {
      " #": -1.162563
    },
    {
      " 5": -0.0049592005
    },
    {
      ":": -0.0017935181
    },
    {
      " Done": -0.4809509
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 8.068602085113525
[(" # 0: find electric shaver\n find('electric_shaver')\n # 1: grab electric shaver\n grab('electric_shaver')\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n # 2: find shaving cream\n find('shaving_cream')\n # 3: grab shaving cream\n grab('shaving_cream')\n assert('shaving_cream' in 'hands')\n else: grab('shaving_cream')\n # 4: spread shaving cream on face\n assert('close' to 'face')\n else: turnto('face')\n pointat('shaving_cream')\n spread('shaving_cream', 'face')\n # 5: switch on electric shaver\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n switchon('electric_shaver')\n # 6: shave with electric shaver\n turnto('electric_shaver')\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n shave('electric_shaver', 'face')\n # 7: switch off electric shaver\n switchoff('electric_shaver')\n # 8: put back electric shaver\n putobjback('electric_shaver')\n # 9: wash face\n assert('close' to 'face')\n else: turnto('face')\n pointat('face')\n wash('face')\n # 10: Done", <OpenAIObject at 0x7ff49803ce50> JSON: {
  "text_offset": [
    3338,
    3340,
    3342,
    3343,
    3348,
    3357,
    3360,
    3364,
    3365,
    3370,
    3372,
    3380,
    3381,
    3383,
    3387,
    3389,
    3390,
    3392,
    3394,
    3395,
    3400,
    3409,
    3412,
    3416,
    3417,
    3422,
    3424,
    3432,
    3433,
    3435,
    3439,
    3441,
    3442,
    3449,
    3451,
    3459,
    3460,
    3462,
    3466,
    3467,
    3470,
    3472,
    3477,
    3479,
    3480,
    3485,
    3486,
    3491,
    3493,
    3501,
    3502,
    3504,
    3508,
    3510,
    3511,
    3513,
    3515,
    3516,
    3521,
    3529,
    3535,
    3536,
    3541,
    3543,
    3545,
    3550,
    3551,
    3556,
    3558,
    3559,
    3561,
    3563,
    3564,
    3569,
    3577,
    3583,
    3584,
    3589,
    3591,
    3593,
    3598,
    3599,
    3604,
    3606,
    3607,
    3614,
    3616,
    3618,
    3623,
    3624,
    3629,
    3630,
    3633,
    3635,
    3640,
    3642,
    3643,
    3648,
    3649,
    3654,
    3656,
    3658,
    3663,
    3664,
    3669,
    3671,
    3672,
    3674,
    3676,
    3677,
    3684,
    3692,
    3698,
    3701,
    3706,
    3707,
    3714,
    3716,
    3721,
    3722,
    3725,
    3727,
    3731,
    3733,
    3734,
    3739,
    3740,
    3744,
    3746,
    3747,
    3749,
    3753,
    3755,
    3756,
    3762,
    3764,
    3766,
    3768,
    3773,
    3774,
    3779,
    3781,
    3782,
    3789,
    3791,
    3793,
    3798,
    3799,
    3804,
    3806,
    3808,
    3812,
    3814,
    3815,
    3817,
    3819,
    3820,
    3827,
    3830,
    3839,
    3842,
    3846,
    3847,
    3854,
    3856,
    3864,
    3865,
    3867,
    3871,
    3872,
    3875,
    3877,
    3882,
    3884,
    3885,
    3890,
    3891,
    3896,
    3898,
    3906,
    3907,
    3909,
    3913,
    3915,
    3916,
    3923,
    3925,
    3927,
    3935,
    3936,
    3938,
    3942,
    3944,
    3945,
    3947,
    3949,
    3950,
    3956,
    3961,
    3970,
    3973,
    3977,
    3978,
    3982,
    3984,
    3985,
    3987,
    3995,
    3996,
    3998,
    4002,
    4004,
    4005,
    4012,
    4014,
    4022,
    4023,
    4025,
    4029,
    4030,
    4033,
    4035,
    4040,
    4042,
    4043,
    4048,
    4049,
    4054,
    4056,
    4064,
    4065,
    4067,
    4071,
    4073,
    4074,
    4080,
    4082,
    4090,
    4091,
    4093,
    4097,
    4099,
    4101,
    4105,
    4107,
    4108,
    4110,
    4112,
    4113,
    4120,
    4124,
    4133,
    4136,
    4140,
    4141,
    4148,
    4151,
    4153,
    4161,
    4162,
    4164,
    4168,
    4170,
    4171,
    4173,
    4175,
    4176,
    4180,
    4185,
    4194,
    4197,
    4201,
    4202,
    4206,
    4209,
    4213,
    4215,
    4223,
    4224,
    4226,
    4230,
    4232,
    4233,
    4235,
    4237,
    4238,
    4243,
    4248,
    4249,
    4256,
    4258,
    4263,
    4264,
    4267,
    4269,
    4273,
    4275,
    4276,
    4281,
    4282,
    4286,
    4288,
    4289,
    4291,
    4295,
    4297,
    4298,
    4304,
    4306,
    4308,
    4312,
    4314,
    4315,
    4320,
    4322,
    4326,
    4328,
    4329,
    4331,
    4334,
    4335
  ],
  "token_logprobs": [
    -0.025353165,
    -0.012602702,
    -0.0024463793,
    -0.4679298,
    -0.3051662,
    -0.1730889,
    -0.0021676817,
    -0.030729964,
    -0.024781657,
    -0.0032001268,
    -0.015561538,
    -0.006149548,
    -0.0018712055,
    -0.00082217914,
    -0.0039032802,
    -0.0091585405,
    -0.0074176234,
    -0.004351806,
    -0.0011006205,
    -0.30970386,
    -0.12077191,
    -0.0060662497,
    -0.003284504,
    -0.0147426,
    -1.0776803,
    -0.0015771451,
    -0.0016315324,
    -0.0015872938,
    -0.001553384,
    -0.0006323192,
    -0.0021121297,
    -0.0050948868,
    -1.0450815,
    -0.0018464833,
    -0.21023473,
    -0.0035983901,
    -0.001152894,
    -0.0011366637,
    -0.0028482291,
    -0.020135388,
    -0.0060479,
    -0.008899494,
    -0.03154592,
    -0.0051743304,
    -0.02623879,
    -0.0035447932,
    -0.011185046,
    -0.0018311372,
    -0.0011154774,
    -0.0013947221,
    -0.00037386353,
    -0.0023026916,
    -0.0031739976,
    -0.006564942,
    -1.0961791,
    -0.008463534,
    -0.0010077166,
    -2.1801782,
    -0.26306456,
    -0.01075634,
    -0.021243965,
    -0.026108833,
    -0.00095807976,
    -0.0005998747,
    -0.00038244936,
    -0.004739928,
    -0.00036873287,
    -0.0021999357,
    -0.005043067,
    -0.04951278,
    -0.0066896253,
    -0.0009295016,
    -0.9712306,
    -0.038351506,
    -0.0024921524,
    -0.014975148,
    -0.036282405,
    -0.0011195361,
    -0.00065337407,
    -3.023464e-05,
    -0.0017829479,
    -0.0002968876,
    -0.001203857,
    -0.0031021272,
    -0.120202,
    -0.0008772995,
    -0.0074955695,
    -0.0006750832,
    -0.002782,
    -0.00041578274,
    -0.002130469,
    -0.002928691,
    -0.0022660692,
    -0.0010497823,
    -0.0041407454,
    -0.0028348994,
    -0.003113607,
    -0.0022047763,
    -0.007520912,
    -0.0023093822,
    -0.002087401,
    -0.00015302899,
    -0.0013866047,
    -0.0005222258,
    -0.0021147588,
    -0.006286595,
    -0.045753133,
    -0.009442262,
    -0.00095020543,
    -3.4958622,
    -0.38595936,
    -0.002542587,
    -1.0053538,
    -0.075582765,
    -0.012480598,
    -2.033702,
    -0.002087999,
    -1.2167009,
    -0.005831625,
    -0.0011808807,
    -0.013530574,
    -0.24049847,
    -0.005925456,
    -0.003979753,
    -0.041601487,
    -0.002773095,
    -0.99747807,
    -0.00021479129,
    -0.0012786355,
    -0.0013743065,
    -0.005459742,
    -0.0028042353,
    -0.0074567776,
    -1.9578832,
    -0.0020814266,
    -0.00074618217,
    -0.47479078,
    -0.0007494018,
    -0.0032947296,
    -0.00044488095,
    -0.0036507938,
    -0.007673522,
    -2.0412495,
    -0.018287104,
    -0.0039822077,
    -0.00036277244,
    -0.0025775433,
    -0.00040868655,
    -2.9597976,
    -0.030556774,
    -0.0048801964,
    -0.0031886452,
    -0.0070314696,
    -0.13377023,
    -0.005249287,
    -0.0008804027,
    -1.5142828,
    -0.028938357,
    -0.20359977,
    -0.007874018,
    -0.0005385048,
    -0.0282231,
    -1.1561105,
    -0.001152894,
    -0.70853347,
    -0.0021494036,
    -0.0012745768,
    -0.0016639505,
    -0.003166404,
    -0.014259827,
    -0.0037048152,
    -0.004560159,
    -0.0074112,
    -0.0033709197,
    -0.008129793,
    -0.002401629,
    -0.0094747525,
    -0.001002707,
    -0.0015163721,
    -0.0005897354,
    -0.00029724615,
    -0.0034799534,
    -0.004232382,
    -0.005621811,
    -0.15102056,
    -0.0012720687,
    -0.0006050035,
    -0.0025828616,
    -0.0008353625,
    -0.0012085127,
    -0.00076902803,
    -0.0016902215,
    -0.005733726,
    -0.07209623,
    -0.0044589695,
    -0.0014099415,
    -0.37966594,
    -1.2540976,
    -0.03672251,
    -0.006230934,
    -0.00039115347,
    -0.0067859376,
    -2.153409,
    -7.20769e-05,
    -0.002301017,
    -0.00051292183,
    -0.13893265,
    -0.0013022078,
    -0.0003324822,
    -0.00059832406,
    -0.0026019858,
    -0.004283262,
    -2.704243,
    -0.0010731133,
    -0.38563806,
    -0.00090635545,
    -0.0012525523,
    -0.00047988512,
    -0.0043281596,
    -0.0929303,
    -0.0018794468,
    -0.0038544515,
    -0.004222264,
    -0.0028881594,
    -0.0038952022,
    -0.0013159948,
    -0.0032694337,
    -0.0010178615,
    -0.00065599853,
    -0.00041035545,
    -1.7953334e-05,
    -0.00049288356,
    -0.0021464147,
    -0.005185356,
    -0.13374904,
    -0.05724694,
    -0.04928051,
    -0.00069601886,
    -0.00031143386,
    -0.00070974004,
    -1.3306226,
    -0.0039088456,
    -0.010553921,
    -0.002555196,
    -0.010345223,
    -0.035294037,
    -0.010430983,
    -0.0018636212,
    -0.18010107,
    -0.029359456,
    -0.020704556,
    -0.0025838183,
    -0.00060154457,
    -0.020262139,
    -0.1703485,
    -0.0032275738,
    -0.0008917378,
    -0.00076211017,
    -0.0021711465,
    -0.0004914521,
    -0.00091721094,
    -0.0028280246,
    -0.031933885,
    -0.022229984,
    -0.0018770588,
    -0.002347559,
    -0.5710083,
    -0.9549357,
    -0.14119706,
    -0.0045169885,
    -0.0007974823,
    -0.18618375,
    -0.6381415,
    -0.73827195,
    -0.0032160932,
    -0.0010672655,
    -0.0011058722,
    -0.000919001,
    -0.00046992695,
    -0.0006735307,
    -0.007905197,
    -0.23149411,
    -0.08870433,
    -0.010324202,
    -0.00379103,
    -2.9288623,
    -0.29707786,
    -0.1416866,
    -0.90141106,
    -0.000903609,
    -0.013693773,
    -0.0028756647,
    -0.0006202707,
    -0.0015392948,
    -0.082987845,
    -0.0025027283,
    -0.0030413796,
    -0.001445397,
    -0.0019649626,
    -0.017423168,
    -6.563869e-05,
    -0.00062074844,
    -0.000522344,
    -0.00038042187,
    -0.0015139843,
    -0.004760829,
    -1.3988727,
    -0.0011750339,
    -0.00070460845,
    -0.09177309,
    -0.0017877847,
    -0.005895236,
    -0.09854243,
    -0.0012151367,
    -0.0020211032,
    -0.002853968,
    -0.13733649,
    -0.053802297,
    -0.011134839,
    -0.005590401,
    -0.44385794
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " electric",
    " sh",
    "aver",
    "\n",
    " find",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " electric",
    " sh",
    "aver",
    "\n",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " shaving",
    " cream",
    "\n",
    " find",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " shaving",
    " cream",
    "\n",
    " grab",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "')",
    "\n",
    " assert",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " spread",
    " shaving",
    " cream",
    " on",
    " face",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "face",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "face",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "')",
    "\n",
    " spread",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "',",
    " '",
    "face",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " switch",
    " on",
    " electric",
    " sh",
    "aver",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " shave",
    " with",
    " electric",
    " sh",
    "aver",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " shave",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "',",
    " '",
    "face",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " switch",
    " off",
    " electric",
    " sh",
    "aver",
    "\n",
    " switch",
    "off",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " put",
    " back",
    " electric",
    " sh",
    "aver",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 9",
    ":",
    " wash",
    " face",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "face",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "face",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "face",
    "')",
    "\n",
    " wash",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 10",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.025353165
    },
    {
      " 0": -0.012602702
    },
    {
      ":": -0.0024463793
    },
    {
      " find": -0.4679298
    },
    {
      " electric": -0.3051662
    },
    {
      " sh": -0.1730889
    },
    {
      "aver": -0.0021676817
    },
    {
      "\n": -0.030729964
    },
    {
      " find": -0.024781657
    },
    {
      "('": -0.0032001268
    },
    {
      "electric": -0.015561538
    },
    {
      "_": -0.006149548
    },
    {
      "sh": -0.0018712055
    },
    {
      "aver": -0.00082217914
    },
    {
      "')": -0.0039032802
    },
    {
      "\n": -0.0091585405
    },
    {
      " #": -0.0074176234
    },
    {
      " 1": -0.004351806
    },
    {
      ":": -0.0011006205
    },
    {
      " grab": -0.30970386
    },
    {
      " electric": -0.12077191
    },
    {
      " sh": -0.0060662497
    },
    {
      "aver": -0.003284504
    },
    {
      "\n": -0.0147426
    },
    {
      " assert": -0.4318617
    },
    {
      "('": -0.0015771451
    },
    {
      "electric": -0.0016315324
    },
    {
      "_": -0.0015872938
    },
    {
      "sh": -0.001553384
    },
    {
      "aver": -0.0006323192
    },
    {
      "')": -0.0021121297
    },
    {
      "\n": -0.0050948868
    },
    {
      " #": -0.53705347
    },
    {
      "('": -0.0018464833
    },
    {
      "electric": -0.21023473
    },
    {
      "_": -0.0035983901
    },
    {
      "sh": -0.001152894
    },
    {
      "aver": -0.0011366637
    },
    {
      "'": -0.0028482291
    },
    {
      " in": -0.020135388
    },
    {
      " '": -0.0060479
    },
    {
      "hands": -0.008899494
    },
    {
      "')": -0.03154592
    },
    {
      "\n": -0.0051743304
    },
    {
      " else": -0.02623879
    },
    {
      ":": -0.0035447932
    },
    {
      " grab": -0.011185046
    },
    {
      "('": -0.0018311372
    },
    {
      "electric": -0.0011154774
    },
    {
      "_": -0.0013947221
    },
    {
      "sh": -0.00037386353
    },
    {
      "aver": -0.0023026916
    },
    {
      "')": -0.0031739976
    },
    {
      "\n": -0.006564942
    },
    {
      " tur": -0.48758134
    },
    {
      " 2": -0.008463534
    },
    {
      ":": -0.0010077166
    },
    {
      " turn": -0.7768303
    },
    {
      " shaving": -0.26306456
    },
    {
      " cream": -0.01075634
    },
    {
      "\n": -0.021243965
    },
    {
      " find": -0.026108833
    },
    {
      "('": -0.00095807976
    },
    {
      "sh": -0.0005998747
    },
    {
      "aving": -0.00038244936
    },
    {
      "_": -0.004739928
    },
    {
      "cream": -0.00036873287
    },
    {
      "')": -0.0021999357
    },
    {
      "\n": -0.005043067
    },
    {
      " #": -0.04951278
    },
    {
      " 3": -0.0066896253
    },
    {
      ":": -0.0009295016
    },
    {
      " grab": -0.9712306
    },
    {
      " shaving": -0.038351506
    },
    {
      " cream": -0.0024921524
    },
    {
      "\n": -0.014975148
    },
    {
      " grab": -0.036282405
    },
    {
      "('": -0.0011195361
    },
    {
      "sh": -0.00065337407
    },
    {
      "aving": -3.023464e-05
    },
    {
      "_": -0.0017829479
    },
    {
      "cream": -0.0002968876
    },
    {
      "')": -0.001203857
    },
    {
      "\n": -0.0031021272
    },
    {
      " assert": -0.120202
    },
    {
      "('": -0.0008772995
    },
    {
      "sh": -0.0074955695
    },
    {
      "aving": -0.0006750832
    },
    {
      "_": -0.002782
    },
    {
      "cream": -0.00041578274
    },
    {
      "'": -0.002130469
    },
    {
      " in": -0.002928691
    },
    {
      " '": -0.0022660692
    },
    {
      "hands": -0.0010497823
    },
    {
      "')": -0.0041407454
    },
    {
      "\n": -0.0028348994
    },
    {
      " else": -0.003113607
    },
    {
      ":": -0.0022047763
    },
    {
      " grab": -0.007520912
    },
    {
      "('": -0.0023093822
    },
    {
      "sh": -0.002087401
    },
    {
      "aving": -0.00015302899
    },
    {
      "_": -0.0013866047
    },
    {
      "cream": -0.0005222258
    },
    {
      "')": -0.0021147588
    },
    {
      "\n": -0.006286595
    },
    {
      " #": -0.045753133
    },
    {
      " 4": -0.009442262
    },
    {
      ":": -0.00095020543
    },
    {
      " apply": -0.86947185
    },
    {
      " shaving": -0.38595936
    },
    {
      " cream": -0.002542587
    },
    {
      "\n": -0.5548676
    },
    {
      " face": -0.075582765
    },
    {
      "\n": -0.012480598
    },
    {
      " tur": -1.0149527
    },
    {
      "('": -0.002087999
    },
    {
      "sh": -0.40561622
    },
    {
      "'": -0.005831625
    },
    {
      " to": -0.0011808807
    },
    {
      " '": -0.013530574
    },
    {
      "face": -0.24049847
    },
    {
      "')": -0.005925456
    },
    {
      "\n": -0.003979753
    },
    {
      " else": -0.041601487
    },
    {
      ":": -0.002773095
    },
    {
      " tur": -0.99747807
    },
    {
      "nt": -0.00021479129
    },
    {
      "o": -0.0012786355
    },
    {
      "('": -0.0013743065
    },
    {
      "face": -0.005459742
    },
    {
      "')": -0.0028042353
    },
    {
      "\n": -0.0074567776
    },
    {
      " spread": -1.2580453
    },
    {
      "at": -0.0020814266
    },
    {
      "('": -0.00074618217
    },
    {
      "sh": -0.47479078
    },
    {
      "aving": -0.0007494018
    },
    {
      "_": -0.0032947296
    },
    {
      "cream": -0.00044488095
    },
    {
      "')": -0.0036507938
    },
    {
      "\n": -0.007673522
    },
    {
      " #": -0.9590486
    },
    {
      "('": -0.018287104
    },
    {
      "sh": -0.0039822077
    },
    {
      "aving": -0.00036277244
    },
    {
      "_": -0.0025775433
    },
    {
      "cream": -0.00040868655
    },
    {
      "')": -0.07480125
    },
    {
      " '": -0.030556774
    },
    {
      "face": -0.0048801964
    },
    {
      "')": -0.0031886452
    },
    {
      "\n": -0.0070314696
    },
    {
      " #": -0.13377023
    },
    {
      " 5": -0.005249287
    },
    {
      ":": -0.0008804027
    },
    {
      " turn": -1.0122992
    },
    {
      " on": -0.028938357
    },
    {
      " electric": -0.20359977
    },
    {
      " sh": -0.007874018
    },
    {
      "aver": -0.0005385048
    },
    {
      "\n": -0.0282231
    },
    {
      " switch": -0.5294759
    },
    {
      "('": -0.001152894
    },
    {
      "electric": -0.70853347
    },
    {
      "_": -0.0021494036
    },
    {
      "sh": -0.0012745768
    },
    {
      "aver": -0.0016639505
    },
    {
      "'": -0.003166404
    },
    {
      " in": -0.014259827
    },
    {
      " '": -0.0037048152
    },
    {
      "hands": -0.004560159
    },
    {
      "')": -0.0074112
    },
    {
      "\n": -0.0033709197
    },
    {
      " else": -0.008129793
    },
    {
      ":": -0.002401629
    },
    {
      " grab": -0.0094747525
    },
    {
      "('": -0.001002707
    },
    {
      "electric": -0.0015163721
    },
    {
      "_": -0.0005897354
    },
    {
      "sh": -0.00029724615
    },
    {
      "aver": -0.0034799534
    },
    {
      "')": -0.004232382
    },
    {
      "\n": -0.005621811
    },
    {
      " switch": -0.15102056
    },
    {
      "on": -0.0012720687
    },
    {
      "('": -0.0006050035
    },
    {
      "electric": -0.0025828616
    },
    {
      "_": -0.0008353625
    },
    {
      "sh": -0.0012085127
    },
    {
      "aver": -0.00076902803
    },
    {
      "')": -0.0016902215
    },
    {
      "\n": -0.005733726
    },
    {
      " #": -0.07209623
    },
    {
      " 6": -0.0044589695
    },
    {
      ":": -0.0014099415
    },
    {
      " shave": -0.37966594
    },
    {
      "\n": -1.075749
    },
    {
      " electric": -0.03672251
    },
    {
      " sh": -0.006230934
    },
    {
      "aver": -0.00039115347
    },
    {
      "\n": -0.0067859376
    },
    {
      " assert": -0.44736296
    },
    {
      "nt": -7.20769e-05
    },
    {
      "o": -0.002301017
    },
    {
      "('": -0.00051292183
    },
    {
      "electric": -0.13893265
    },
    {
      "_": -0.0013022078
    },
    {
      "sh": -0.0003324822
    },
    {
      "aver": -0.00059832406
    },
    {
      "')": -0.0026019858
    },
    {
      "\n": -0.004283262
    },
    {
      " point": -0.97900134
    },
    {
      "('": -0.0010731133
    },
    {
      "electric": -0.38563806
    },
    {
      "_": -0.00090635545
    },
    {
      "sh": -0.0012525523
    },
    {
      "aver": -0.00047988512
    },
    {
      "'": -0.0043281596
    },
    {
      " in": -0.0929303
    },
    {
      " '": -0.0018794468
    },
    {
      "hands": -0.0038544515
    },
    {
      "')": -0.004222264
    },
    {
      "\n": -0.0028881594
    },
    {
      " else": -0.0038952022
    },
    {
      ":": -0.0013159948
    },
    {
      " grab": -0.0032694337
    },
    {
      "('": -0.0010178615
    },
    {
      "electric": -0.00065599853
    },
    {
      "_": -0.00041035545
    },
    {
      "sh": -1.7953334e-05
    },
    {
      "aver": -0.00049288356
    },
    {
      "')": -0.0021464147
    },
    {
      "\n": -0.005185356
    },
    {
      " shave": -0.13374904
    },
    {
      "('": -0.05724694
    },
    {
      "electric": -0.04928051
    },
    {
      "_": -0.00069601886
    },
    {
      "sh": -0.00031143386
    },
    {
      "aver": -0.00070974004
    },
    {
      "')": -0.31761926
    },
    {
      " '": -0.0039088456
    },
    {
      "face": -0.010553921
    },
    {
      "')": -0.002555196
    },
    {
      "\n": -0.010345223
    },
    {
      " #": -0.035294037
    },
    {
      " 7": -0.010430983
    },
    {
      ":": -0.0018636212
    },
    {
      " switch": -0.18010107
    },
    {
      " off": -0.029359456
    },
    {
      " electric": -0.020704556
    },
    {
      " sh": -0.0025838183
    },
    {
      "aver": -0.00060154457
    },
    {
      "\n": -0.020262139
    },
    {
      " switch": -0.1703485
    },
    {
      "off": -0.0032275738
    },
    {
      "('": -0.0008917378
    },
    {
      "electric": -0.00076211017
    },
    {
      "_": -0.0021711465
    },
    {
      "sh": -0.0004914521
    },
    {
      "aver": -0.00091721094
    },
    {
      "')": -0.0028280246
    },
    {
      "\n": -0.031933885
    },
    {
      " #": -0.022229984
    },
    {
      " 8": -0.0018770588
    },
    {
      ":": -0.002347559
    },
    {
      " put": -0.5710083
    },
    {
      " electric": -0.8499532
    },
    {
      " electric": -0.14119706
    },
    {
      " sh": -0.0045169885
    },
    {
      "aver": -0.0007974823
    },
    {
      "\n": -0.18618375
    },
    {
      " put": -0.6381415
    },
    {
      "back": -0.67310935
    },
    {
      "back": -0.0032160932
    },
    {
      "('": -0.0010672655
    },
    {
      "electric": -0.0011058722
    },
    {
      "_": -0.000919001
    },
    {
      "sh": -0.00046992695
    },
    {
      "aver": -0.0006735307
    },
    {
      "')": -0.007905197
    },
    {
      "\n": -0.23149411
    },
    {
      " #": -0.08870433
    },
    {
      " 9": -0.010324202
    },
    {
      ":": -0.00379103
    },
    {
      " Done": -0.9621418
    },
    {
      " face": -0.29707786
    },
    {
      "\n": -0.1416866
    },
    {
      " assert": -0.90141106
    },
    {
      "('": -0.000903609
    },
    {
      "close": -0.013693773
    },
    {
      "'": -0.0028756647
    },
    {
      " to": -0.0006202707
    },
    {
      " '": -0.0015392948
    },
    {
      "face": -0.082987845
    },
    {
      "')": -0.0025027283
    },
    {
      "\n": -0.0030413796
    },
    {
      " else": -0.001445397
    },
    {
      ":": -0.0019649626
    },
    {
      " tur": -0.017423168
    },
    {
      "nt": -6.563869e-05
    },
    {
      "o": -0.00062074844
    },
    {
      "('": -0.000522344
    },
    {
      "face": -0.00038042187
    },
    {
      "')": -0.0015139843
    },
    {
      "\n": -0.004760829
    },
    {
      " wash": -0.530289
    },
    {
      "at": -0.0011750339
    },
    {
      "('": -0.00070460845
    },
    {
      "face": -0.09177309
    },
    {
      "')": -0.0017877847
    },
    {
      "\n": -0.005895236
    },
    {
      " wash": -0.09854243
    },
    {
      "('": -0.0012151367
    },
    {
      "face": -0.0020211032
    },
    {
      "')": -0.002853968
    },
    {
      "\n": -0.13733649
    },
    {
      " #": -0.053802297
    },
    {
      " 10": -0.011134839
    },
    {
      ":": -0.005590401
    },
    {
      " Done": -0.44385794
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.677258014678955
[(" # 0: find hanger\n find('hanger')\n # 1: grab hanger\n assert('close' to 'hanger')\n else: find('hanger')\n grab('hanger')\n # 2: find jacket\n find('jacket')\n # 3: grab jacket\n assert('close' to 'jacket')\n else: find('jacket')\n grab('jacket')\n # 4: hang up jacket\n assert('hanger' in 'hands')\n else: grab('hanger')\n assert('jacket' in 'hands')\n else: grab('jacket')\n puton('jacket', 'hanger')", <OpenAIObject at 0x7ff4a80441d0> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3359,
    3364,
    3365,
    3370,
    3372,
    3373,
    3378,
    3380,
    3381,
    3383,
    3385,
    3386,
    3391,
    3393,
    3398,
    3399,
    3406,
    3408,
    3413,
    3414,
    3417,
    3419,
    3420,
    3425,
    3427,
    3428,
    3433,
    3434,
    3439,
    3441,
    3442,
    3447,
    3449,
    3450,
    3455,
    3457,
    3458,
    3463,
    3465,
    3466,
    3468,
    3470,
    3471,
    3476,
    3483,
    3484,
    3489,
    3491,
    3492,
    3497,
    3499,
    3500,
    3502,
    3504,
    3505,
    3510,
    3517,
    3518,
    3525,
    3527,
    3532,
    3533,
    3536,
    3538,
    3539,
    3544,
    3546,
    3547,
    3552,
    3553,
    3558,
    3560,
    3561,
    3566,
    3568,
    3569,
    3574,
    3576,
    3577,
    3582,
    3584,
    3585,
    3587,
    3589,
    3590,
    3595,
    3598,
    3605,
    3606,
    3613,
    3615,
    3616,
    3621,
    3622,
    3625,
    3627,
    3632,
    3634,
    3635,
    3640,
    3641,
    3646,
    3648,
    3649,
    3654,
    3656,
    3657,
    3664,
    3666,
    3667,
    3672,
    3673,
    3676,
    3678,
    3683,
    3685,
    3686,
    3691,
    3692,
    3697,
    3699,
    3700,
    3705,
    3707,
    3708,
    3712,
    3714,
    3716,
    3717,
    3722,
    3724,
    3726,
    3727,
    3732
  ],
  "token_logprobs": [
    -0.015799984,
    -0.007666433,
    -0.0019291934,
    -0.78317004,
    -0.4245183,
    -0.0030908268,
    -0.030860769,
    -0.048318174,
    -0.00196771,
    -0.00039735518,
    -0.00015278964,
    -0.00181376,
    -0.0075875157,
    -0.005537537,
    -0.0025507729,
    -0.0005379106,
    -0.27551553,
    -0.20888072,
    -0.0010408321,
    -0.021007884,
    -0.42873344,
    -0.0017695139,
    -0.005769874,
    -0.0023489322,
    -0.00059319526,
    -0.0027011926,
    -0.00077785796,
    -0.00029867573,
    -0.004646805,
    -0.0058415784,
    -0.0010928644,
    -0.0013932897,
    -0.0029639006,
    -0.0017564958,
    -0.00059200136,
    -0.0003642048,
    -0.0024301903,
    -0.0063143047,
    -0.004119258,
    -0.00096523983,
    -0.0003033258,
    -8.065993e-05,
    -0.0016369043,
    -0.004981365,
    -0.85886174,
    -0.008611058,
    -0.00057571946,
    -0.82825804,
    -0.07524758,
    -0.030279167,
    -0.07498536,
    -0.00078668504,
    -0.0031394358,
    -9.5562886e-05,
    -0.0020349612,
    -0.0032791807,
    -0.023545042,
    -0.0058274884,
    -0.0007991522,
    -0.990995,
    -0.05141313,
    -0.024082376,
    -0.14613038,
    -0.00098069,
    -0.0028672384,
    -0.0015945159,
    -0.0010477529,
    -0.0013050736,
    -0.0017742289,
    -5.197998e-06,
    -0.0041560074,
    -0.002878416,
    -0.00058251905,
    -0.0011761058,
    -0.0028138575,
    -0.0010981162,
    -0.0011321864,
    -4.1320116e-05,
    -0.0022568104,
    -0.0047712494,
    -0.004442564,
    -0.0011920412,
    -0.0006807489,
    -3.6670972e-05,
    -0.0015777412,
    -0.0038341691,
    -0.0196635,
    -0.008870808,
    -0.0007270957,
    -0.37635213,
    -0.4954462,
    -0.2322096,
    -0.36981887,
    -0.43504757,
    -0.0024012714,
    -0.6844033,
    -0.0007421263,
    -0.0033130287,
    -0.095309846,
    -0.0067062466,
    -0.011636431,
    -0.13617752,
    -0.010510372,
    -0.047955014,
    -0.0038852084,
    -0.065090366,
    -0.0017554219,
    -0.0017446134,
    -0.00036563535,
    -0.0045362073,
    -0.0059947716,
    -0.9392763,
    -0.0012439599,
    -0.0063353,
    -0.00023190197,
    -0.0010809904,
    -0.002013042,
    -0.0015743976,
    -0.0015423981,
    -0.0043574935,
    -0.004561237,
    -0.0009296208,
    -0.0018475571,
    -0.010012355,
    -0.0023989407,
    -0.0023646462,
    -0.00015255497,
    -0.0027395645,
    -0.00528308,
    -1.0508144,
    -0.04123507,
    -0.0021849454,
    -0.42996788,
    -2.7371756e-05,
    -0.730727,
    -0.011436004,
    -0.0008595825,
    -0.00027673383,
    -0.0024941827
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " h",
    "anger",
    "\n",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " h",
    "anger",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " jacket",
    "\n",
    " find",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " jacket",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "j",
    "acket",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " grab",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " hang",
    " up",
    " jacket",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "j",
    "acket",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "j",
    "acket",
    "',",
    " '",
    "h",
    "anger",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.015799984
    },
    {
      " 0": -0.007666433
    },
    {
      ":": -0.0019291934
    },
    {
      " find": -0.78317004
    },
    {
      " h": -0.4245183
    },
    {
      "anger": -0.0030908268
    },
    {
      "\n": -0.030860769
    },
    {
      " find": -0.048318174
    },
    {
      "('": -0.00196771
    },
    {
      "h": -0.00039735518
    },
    {
      "anger": -0.00015278964
    },
    {
      "')": -0.00181376
    },
    {
      "\n": -0.0075875157
    },
    {
      " #": -0.005537537
    },
    {
      " 1": -0.0025507729
    },
    {
      ":": -0.0005379106
    },
    {
      " grab": -0.27551553
    },
    {
      " h": -0.20888072
    },
    {
      "anger": -0.0010408321
    },
    {
      "\n": -0.021007884
    },
    {
      " assert": -0.42873344
    },
    {
      "('": -0.0017695139
    },
    {
      "close": -0.005769874
    },
    {
      "'": -0.0023489322
    },
    {
      " to": -0.00059319526
    },
    {
      " '": -0.0027011926
    },
    {
      "h": -0.00077785796
    },
    {
      "anger": -0.00029867573
    },
    {
      "')": -0.004646805
    },
    {
      "\n": -0.0058415784
    },
    {
      " else": -0.0010928644
    },
    {
      ":": -0.0013932897
    },
    {
      " find": -0.0029639006
    },
    {
      "('": -0.0017564958
    },
    {
      "h": -0.00059200136
    },
    {
      "anger": -0.0003642048
    },
    {
      "')": -0.0024301903
    },
    {
      "\n": -0.0063143047
    },
    {
      " grab": -0.004119258
    },
    {
      "('": -0.00096523983
    },
    {
      "h": -0.0003033258
    },
    {
      "anger": -8.065993e-05
    },
    {
      "')": -0.0016369043
    },
    {
      "\n": -0.004981365
    },
    {
      " assert": -0.61324954
    },
    {
      " 2": -0.008611058
    },
    {
      ":": -0.00057571946
    },
    {
      " find": -0.82825804
    },
    {
      " jacket": -0.07524758
    },
    {
      "\n": -0.030279167
    },
    {
      " find": -0.07498536
    },
    {
      "('": -0.00078668504
    },
    {
      "j": -0.0031394358
    },
    {
      "acket": -9.5562886e-05
    },
    {
      "')": -0.0020349612
    },
    {
      "\n": -0.0032791807
    },
    {
      " #": -0.023545042
    },
    {
      " 3": -0.0058274884
    },
    {
      ":": -0.0007991522
    },
    {
      " hang": -0.9759678
    },
    {
      " jacket": -0.05141313
    },
    {
      "\n": -0.024082376
    },
    {
      " assert": -0.14613038
    },
    {
      "('": -0.00098069
    },
    {
      "close": -0.0028672384
    },
    {
      "'": -0.0015945159
    },
    {
      " to": -0.0010477529
    },
    {
      " '": -0.0013050736
    },
    {
      "j": -0.0017742289
    },
    {
      "acket": -5.197998e-06
    },
    {
      "')": -0.0041560074
    },
    {
      "\n": -0.002878416
    },
    {
      " else": -0.00058251905
    },
    {
      ":": -0.0011761058
    },
    {
      " find": -0.0028138575
    },
    {
      "('": -0.0010981162
    },
    {
      "j": -0.0011321864
    },
    {
      "acket": -4.1320116e-05
    },
    {
      "')": -0.0022568104
    },
    {
      "\n": -0.0047712494
    },
    {
      " grab": -0.004442564
    },
    {
      "('": -0.0011920412
    },
    {
      "j": -0.0006807489
    },
    {
      "acket": -3.6670972e-05
    },
    {
      "')": -0.0015777412
    },
    {
      "\n": -0.0038341691
    },
    {
      " #": -0.0196635
    },
    {
      " 4": -0.008870808
    },
    {
      ":": -0.0007270957
    },
    {
      " hang": -0.37635213
    },
    {
      " up": -0.4954462
    },
    {
      " jacket": -0.2322096
    },
    {
      "\n": -0.36981887
    },
    {
      " assert": -0.43504757
    },
    {
      "('": -0.0024012714
    },
    {
      "h": -0.6844033
    },
    {
      "anger": -0.0007421263
    },
    {
      "'": -0.0033130287
    },
    {
      " in": -0.095309846
    },
    {
      " '": -0.0067062466
    },
    {
      "hands": -0.011636431
    },
    {
      "')": -0.13617752
    },
    {
      "\n": -0.010510372
    },
    {
      " else": -0.047955014
    },
    {
      ":": -0.0038852084
    },
    {
      " grab": -0.065090366
    },
    {
      "('": -0.0017554219
    },
    {
      "h": -0.0017446134
    },
    {
      "anger": -0.00036563535
    },
    {
      "')": -0.0045362073
    },
    {
      "\n": -0.0059947716
    },
    {
      " assert": -0.9392763
    },
    {
      "('": -0.0012439599
    },
    {
      "j": -0.0063353
    },
    {
      "acket": -0.00023190197
    },
    {
      "'": -0.0010809904
    },
    {
      " in": -0.002013042
    },
    {
      " '": -0.0015743976
    },
    {
      "hands": -0.0015423981
    },
    {
      "')": -0.0043574935
    },
    {
      "\n": -0.004561237
    },
    {
      " else": -0.0009296208
    },
    {
      ":": -0.0018475571
    },
    {
      " grab": -0.010012355
    },
    {
      "('": -0.0023989407
    },
    {
      "j": -0.0023646462
    },
    {
      "acket": -0.00015255497
    },
    {
      "')": -0.0027395645
    },
    {
      "\n": -0.00528308
    },
    {
      " hang": -0.6713875
    },
    {
      "on": -0.04123507
    },
    {
      "('": -0.0021849454
    },
    {
      "j": -0.42996788
    },
    {
      "acket": -2.7371756e-05
    },
    {
      "',": -0.730727
    },
    {
      " '": -0.011436004
    },
    {
      "h": -0.0008595825
    },
    {
      "anger": -0.00027673383
    },
    {
      "')": -0.0024941827
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.144526720046997
[(" # 0: find the newspaper\n find('newspaper')\n # 1: grab newspaper\n grab('newspaper')\n # 2: find a chair to sit on\n find('chair')\n # 3: sit on chair\n sit('chair')\n # 4: read the newspaper\n read('newspaper')", <OpenAIObject at 0x7ff4a0055ae0> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3361,
    3371,
    3372,
    3377,
    3379,
    3382,
    3384,
    3388,
    3390,
    3391,
    3393,
    3395,
    3396,
    3401,
    3411,
    3412,
    3417,
    3419,
    3422,
    3424,
    3428,
    3430,
    3431,
    3433,
    3435,
    3436,
    3441,
    3443,
    3449,
    3452,
    3456,
    3459,
    3460,
    3465,
    3467,
    3472,
    3474,
    3475,
    3477,
    3479,
    3480,
    3484,
    3487,
    3493,
    3494,
    3498,
    3500,
    3505,
    3507,
    3508,
    3510,
    3512,
    3513,
    3518,
    3522,
    3532,
    3533,
    3538,
    3540,
    3543,
    3545,
    3549
  ],
  "token_logprobs": [
    -0.01758033,
    -0.008371208,
    -0.0018675635,
    -0.5560805,
    -1.5691426,
    -0.041616153,
    -0.028668372,
    -0.032280955,
    -0.0026355723,
    -0.0020070693,
    -0.00050421304,
    -0.0005466157,
    -0.002707946,
    -0.008456803,
    -0.004974356,
    -0.002221444,
    -0.0004225786,
    -0.235751,
    -1.994508,
    -0.019288989,
    -0.80891645,
    -0.0012425266,
    -0.00077332335,
    -0.00021562482,
    -0.0004642021,
    -0.001533265,
    -0.005203868,
    -0.6090468,
    -0.007942812,
    -0.0005772701,
    -0.8749188,
    -1.1989425,
    -0.67155707,
    -2.6321204,
    -0.016863324,
    -0.4241543,
    -0.042185556,
    -0.11587787,
    -0.0013000594,
    -0.001124908,
    -0.0017634239,
    -0.0050164703,
    -0.25560787,
    -0.0074182246,
    -0.0004814367,
    -0.033215247,
    -0.10403353,
    -0.8634704,
    -0.058539376,
    -0.61733955,
    -0.0013519244,
    -0.0006040489,
    -0.00081645243,
    -0.0047297464,
    -0.010058594,
    -0.0063768676,
    -0.00067245873,
    -0.58406836,
    -0.5144903,
    -0.018618425,
    -0.010868831,
    -0.8076829,
    -0.0020856091,
    -0.00084288017,
    -0.00033749174,
    -0.00026027925,
    -0.0018582473
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " the",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " newspaper",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " a",
    " chair",
    " to",
    " sit",
    " on",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " read",
    " the",
    " newspaper",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01758033
    },
    {
      " 0": -0.008371208
    },
    {
      ":": -0.0018675635
    },
    {
      " find": -0.5560805
    },
    {
      " newspaper": -0.3382083
    },
    {
      " newspaper": -0.041616153
    },
    {
      "\n": -0.028668372
    },
    {
      " find": -0.032280955
    },
    {
      "('": -0.0026355723
    },
    {
      "new": -0.0020070693
    },
    {
      "sp": -0.00050421304
    },
    {
      "aper": -0.0005466157
    },
    {
      "')": -0.002707946
    },
    {
      "\n": -0.008456803
    },
    {
      " #": -0.004974356
    },
    {
      " 1": -0.002221444
    },
    {
      ":": -0.0004225786
    },
    {
      " grab": -0.235751
    },
    {
      " the": -0.17091604
    },
    {
      "\n": -0.019288989
    },
    {
      " assert": -0.60804117
    },
    {
      "('": -0.0012425266
    },
    {
      "new": -0.00077332335
    },
    {
      "sp": -0.00021562482
    },
    {
      "aper": -0.0004642021
    },
    {
      "')": -0.001533265
    },
    {
      "\n": -0.005203868
    },
    {
      " #": -0.6090468
    },
    {
      " 2": -0.007942812
    },
    {
      ":": -0.0005772701
    },
    {
      " find": -0.8749188
    },
    {
      " a": -1.1989425
    },
    {
      " chair": -0.67155707
    },
    {
      "\n": -0.35987395
    },
    {
      " sit": -0.016863324
    },
    {
      " on": -0.4241543
    },
    {
      "\n": -0.042185556
    },
    {
      " find": -0.11587787
    },
    {
      "('": -0.0013000594
    },
    {
      "chair": -0.001124908
    },
    {
      "')": -0.0017634239
    },
    {
      "\n": -0.0050164703
    },
    {
      " #": -0.25560787
    },
    {
      " 3": -0.0074182246
    },
    {
      ":": -0.0004814367
    },
    {
      " sit": -0.033215247
    },
    {
      " on": -0.10403353
    },
    {
      " the": -0.5740932
    },
    {
      "\n": -0.058539376
    },
    {
      " sit": -0.61733955
    },
    {
      "('": -0.0013519244
    },
    {
      "chair": -0.0006040489
    },
    {
      "')": -0.00081645243
    },
    {
      "\n": -0.0047297464
    },
    {
      " #": -0.010058594
    },
    {
      " 4": -0.0063768676
    },
    {
      ":": -0.00067245873
    },
    {
      " read": -0.58406836
    },
    {
      " the": -0.5144903
    },
    {
      " newspaper": -0.018618425
    },
    {
      "\n": -0.010868831
    },
    {
      " read": -0.8076829
    },
    {
      "('": -0.0020856091
    },
    {
      "new": -0.00084288017
    },
    {
      "sp": -0.00033749174
    },
    {
      "aper": -0.00026027925
    },
    {
      "')": -0.0018582473
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.8147578239440918
[(" # 0: walk to a chair\n walk('chair')\n # 1: find the chair\n find('chair')\n # 2: sit on the chair\n turnto('chair')\n lookat('chair')\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')", <OpenAIObject at 0x7ff4a007d6d0> JSON: {
  "text_offset": [
    3336,
    3338,
    3340,
    3341,
    3346,
    3349,
    3351,
    3357,
    3358,
    3363,
    3365,
    3370,
    3372,
    3373,
    3375,
    3377,
    3378,
    3383,
    3387,
    3393,
    3394,
    3399,
    3401,
    3406,
    3408,
    3409,
    3411,
    3413,
    3414,
    3418,
    3421,
    3425,
    3431,
    3432,
    3436,
    3438,
    3439,
    3441,
    3446,
    3448,
    3449,
    3454,
    3456,
    3458,
    3463,
    3465,
    3466,
    3473,
    3475,
    3480,
    3481,
    3484,
    3486,
    3491,
    3493,
    3494,
    3499,
    3500,
    3505,
    3507,
    3512,
    3514,
    3515,
    3519,
    3521,
    3526
  ],
  "token_logprobs": [
    -0.17559677,
    -0.04149642,
    -0.004342648,
    -2.0436292,
    -0.28705993,
    -2.7353253,
    -0.38148662,
    -0.09893684,
    -0.069064125,
    -0.009348401,
    -0.0048205997,
    -0.0018411076,
    -0.012386152,
    -0.01788435,
    -0.004076703,
    -0.00092293863,
    -0.17018567,
    -1.0594317,
    -0.004344803,
    -0.026259348,
    -0.06657354,
    -0.0014887346,
    -0.0007205946,
    -0.0020196107,
    -0.0059330715,
    -0.005009702,
    -0.004899659,
    -0.00081466336,
    -0.05553648,
    -0.22948171,
    -0.081941195,
    -0.0015530264,
    -0.011162747,
    -1.0662923,
    -4.7399757e-05,
    -0.000116070536,
    -0.00077726186,
    -0.00059319526,
    -0.0014177603,
    -0.005456205,
    -0.25798157,
    -0.00073794933,
    -0.0005391018,
    -0.0005701139,
    -0.0014638434,
    -0.003981249,
    -0.06054648,
    -0.0015345801,
    -0.0035248732,
    -0.0028888774,
    -0.0006543287,
    -0.0019349849,
    -0.00094686385,
    -0.003990643,
    -0.0038733608,
    -0.0011931151,
    -0.0014769132,
    -0.006071587,
    -0.0017668859,
    -0.00063464424,
    -0.0019884352,
    -0.0069612423,
    -0.4207109,
    -0.003460095,
    -0.0008880386,
    -0.0024552841
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " a",
    " chair",
    "\n",
    " walk",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " the",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " the",
    " chair",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "chair",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.17559677
    },
    {
      " 0": -0.04149642
    },
    {
      ":": -0.004342648
    },
    {
      " find": -0.43500555
    },
    {
      " to": -0.28705993
    },
    {
      " chair": -1.2855363
    },
    {
      " chair": -0.38148662
    },
    {
      "\n": -0.09893684
    },
    {
      " walk": -0.069064125
    },
    {
      "('": -0.009348401
    },
    {
      "chair": -0.0048205997
    },
    {
      "')": -0.0018411076
    },
    {
      "\n": -0.012386152
    },
    {
      " #": -0.01788435
    },
    {
      " 1": -0.004076703
    },
    {
      ":": -0.00092293863
    },
    {
      " find": -0.17018567
    },
    {
      " chair": -0.923288
    },
    {
      " chair": -0.004344803
    },
    {
      "\n": -0.026259348
    },
    {
      " find": -0.06657354
    },
    {
      "('": -0.0014887346
    },
    {
      "chair": -0.0007205946
    },
    {
      "')": -0.0020196107
    },
    {
      "\n": -0.0059330715
    },
    {
      " #": -0.005009702
    },
    {
      " 2": -0.004899659
    },
    {
      ":": -0.00081466336
    },
    {
      " sit": -0.05553648
    },
    {
      " on": -0.22948171
    },
    {
      " the": -0.081941195
    },
    {
      " chair": -0.0015530264
    },
    {
      "\n": -0.011162747
    },
    {
      " assert": -0.64127684
    },
    {
      "nt": -4.7399757e-05
    },
    {
      "o": -0.000116070536
    },
    {
      "('": -0.00077726186
    },
    {
      "chair": -0.00059319526
    },
    {
      "')": -0.0014177603
    },
    {
      "\n": -0.005456205
    },
    {
      " look": -0.25798157
    },
    {
      "at": -0.00073794933
    },
    {
      "('": -0.0005391018
    },
    {
      "chair": -0.0005701139
    },
    {
      "')": -0.0014638434
    },
    {
      "\n": -0.003981249
    },
    {
      " assert": -0.06054648
    },
    {
      "('": -0.0015345801
    },
    {
      "close": -0.0035248732
    },
    {
      "'": -0.0028888774
    },
    {
      " to": -0.0006543287
    },
    {
      " '": -0.0019349849
    },
    {
      "chair": -0.00094686385
    },
    {
      "')": -0.003990643
    },
    {
      "\n": -0.0038733608
    },
    {
      " else": -0.0011931151
    },
    {
      ":": -0.0014769132
    },
    {
      " find": -0.006071587
    },
    {
      "('": -0.0017668859
    },
    {
      "chair": -0.00063464424
    },
    {
      "')": -0.0019884352
    },
    {
      "\n": -0.0069612423
    },
    {
      " sit": -0.4207109
    },
    {
      "('": -0.003460095
    },
    {
      "chair": -0.0008880386
    },
    {
      "')": -0.0024552841
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.015890121459961
[(' # 0: close eyes\n closeeyes()\n # 1: relax body\n relaxbody()\n # 2: drift off to sleep\n driftofftosleep()', <OpenAIObject at 0x7ff4a8052450> JSON: {
  "text_offset": [
    3338,
    3340,
    3342,
    3343,
    3349,
    3354,
    3355,
    3361,
    3365,
    3367,
    3368,
    3370,
    3372,
    3373,
    3379,
    3384,
    3385,
    3391,
    3395,
    3397,
    3398,
    3400,
    3402,
    3403,
    3409,
    3413,
    3416,
    3422,
    3423,
    3429,
    3432,
    3433,
    3435,
    3439
  ],
  "token_logprobs": [
    -0.25707194,
    -0.057736263,
    -0.0026986825,
    -3.9759266,
    -0.2436443,
    -0.053951506,
    -0.17661326,
    -2.5495214,
    -0.023481213,
    -0.016032174,
    -0.006241851,
    -0.002956248,
    -0.00048167605,
    -0.80647844,
    -0.8781583,
    -0.047829334,
    -0.027763437,
    -0.33910087,
    -0.0022727,
    -0.011283603,
    -0.0027198386,
    -0.0042903856,
    -0.0004281842,
    -1.7415456,
    -0.29043132,
    -0.254421,
    -0.009444846,
    -0.008368023,
    -0.40000775,
    -0.16836287,
    -0.39815807,
    -1.6521892e-05,
    -0.00027530332,
    -0.005021559
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " close",
    " eyes",
    "\n",
    " close",
    "eyes",
    "()",
    "\n",
    " #",
    " 1",
    ":",
    " relax",
    " body",
    "\n",
    " relax",
    "body",
    "()",
    "\n",
    " #",
    " 2",
    ":",
    " drift",
    " off",
    " to",
    " sleep",
    "\n",
    " drift",
    "off",
    "t",
    "os",
    "leep",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.25707194
    },
    {
      " 0": -0.057736263
    },
    {
      ":": -0.0026986825
    },
    {
      " find": -1.0493273
    },
    {
      " eyes": -0.2436443
    },
    {
      "\n": -0.053951506
    },
    {
      " close": -0.17661326
    },
    {
      "('": -0.27612868
    },
    {
      "()": -0.023481213
    },
    {
      "\n": -0.016032174
    },
    {
      " #": -0.006241851
    },
    {
      " 1": -0.002956248
    },
    {
      ":": -0.00048167605
    },
    {
      " relax": -0.80647844
    },
    {
      " body": -0.8781583
    },
    {
      "\n": -0.047829334
    },
    {
      " relax": -0.027763437
    },
    {
      "body": -0.33910087
    },
    {
      "()": -0.0022727
    },
    {
      "\n": -0.011283603
    },
    {
      " #": -0.0027198386
    },
    {
      " 2": -0.0042903856
    },
    {
      ":": -0.0004281842
    },
    {
      " drift": -1.7415456
    },
    {
      " off": -0.29043132
    },
    {
      " to": -0.254421
    },
    {
      " sleep": -0.009444846
    },
    {
      "\n": -0.008368023
    },
    {
      " drift": -0.40000775
    },
    {
      "off": -0.16836287
    },
    {
      "t": -0.39815807
    },
    {
      "os": -1.6521892e-05
    },
    {
      "leep": -0.00027530332
    },
    {
      "()": -0.005021559
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.126034736633301
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find alarm clock\n find('alarm_clock')\n # 2: grab alarm clock\n assert('close' to 'alarm_clock')\n else: find('alarm_clock')\n grab('alarm_clock')\n # 3: find nightstand\n walk('nightstand')\n find('nightstand')\n # 4: put alarm clock on nightstand\n assert('close' to 'nightstand')\n else: find('nightstand')\n puton('nightstand')", <OpenAIObject at 0x7ff4a80445e0> JSON: {
  "text_offset": [
    3359,
    3361,
    3363,
    3364,
    3369,
    3372,
    3380,
    3381,
    3386,
    3388,
    3395,
    3397,
    3398,
    3400,
    3402,
    3403,
    3408,
    3414,
    3420,
    3421,
    3426,
    3428,
    3430,
    3433,
    3434,
    3439,
    3441,
    3442,
    3444,
    3446,
    3447,
    3452,
    3458,
    3464,
    3465,
    3472,
    3474,
    3479,
    3480,
    3483,
    3485,
    3487,
    3490,
    3491,
    3496,
    3498,
    3499,
    3504,
    3505,
    3510,
    3512,
    3514,
    3517,
    3518,
    3523,
    3525,
    3526,
    3531,
    3533,
    3535,
    3538,
    3539,
    3544,
    3546,
    3547,
    3549,
    3551,
    3552,
    3557,
    3563,
    3568,
    3569,
    3574,
    3576,
    3581,
    3586,
    3588,
    3589,
    3594,
    3596,
    3601,
    3606,
    3608,
    3609,
    3611,
    3613,
    3614,
    3618,
    3624,
    3630,
    3633,
    3639,
    3644,
    3645,
    3652,
    3654,
    3659,
    3660,
    3663,
    3665,
    3670,
    3675,
    3677,
    3678,
    3683,
    3684,
    3689,
    3691,
    3696,
    3701,
    3703,
    3704,
    3708,
    3710,
    3712,
    3717,
    3722
  ],
  "token_logprobs": [
    -0.01898205,
    -0.0090441955,
    -0.0020858485,
    -0.6969472,
    -0.30358064,
    -0.0842947,
    -0.021816807,
    -0.00525498,
    -0.005140177,
    -0.0014856285,
    -0.0014741066,
    -0.0088032205,
    -0.0031278958,
    -0.0029165552,
    -0.00054399215,
    -0.04388732,
    -0.3100691,
    -0.07238844,
    -0.018422607,
    -0.3528263,
    -0.0010060486,
    -0.003370441,
    -0.0001792624,
    -0.02292761,
    -0.00043641243,
    -0.00283209,
    -0.005425162,
    -0.012583267,
    -0.0033825224,
    -0.0007491634,
    -0.555519,
    -0.336456,
    -0.008130154,
    -0.024937233,
    -1.1208926,
    -0.0016881911,
    -0.0052292743,
    -0.002681233,
    -0.0005018289,
    -0.0021691143,
    -0.0022851867,
    -0.00014718683,
    -0.0055816504,
    -0.00059975556,
    -0.007894027,
    -0.006426839,
    -0.0015392948,
    -0.0012756498,
    -0.003531512,
    -0.0010469183,
    -0.00042436953,
    -4.9308033e-05,
    -0.0020368125,
    -0.0010340326,
    -0.0034591376,
    -0.0056749196,
    -0.005076496,
    -0.0008992545,
    -0.00035311276,
    -5.675771e-06,
    -0.0023020937,
    -0.00038662262,
    -0.0018091024,
    -0.0045342916,
    -0.43050364,
    -0.0072385767,
    -0.0007924126,
    -1.5200547,
    -0.3375163,
    -0.23261696,
    -0.023622546,
    -1.9874153,
    -0.0023181662,
    -0.0024962157,
    -0.0033910754,
    -0.0014717197,
    -0.0062072426,
    -0.08993031,
    -0.00076425495,
    -0.0004899005,
    -0.00041578274,
    -0.0014874195,
    -0.0043117586,
    -0.009100313,
    -0.008940871,
    -0.00079384126,
    -0.08484527,
    -0.124585345,
    -0.005614498,
    -0.16773263,
    -0.043181576,
    -0.03303657,
    -0.009040104,
    -0.33361003,
    -0.0012281437,
    -0.35150942,
    -0.0024061692,
    -0.00078835577,
    -0.002001154,
    -0.035662547,
    -0.0004608624,
    -0.006579763,
    -0.0046197395,
    -0.0023168502,
    -0.0013694725,
    -0.052787863,
    -0.0009716236,
    -0.0014147162,
    -0.00046968853,
    -0.0024518187,
    -0.005494983,
    -0.19314416,
    -0.120142445,
    -0.001398243,
    -1.5966176,
    -0.0007827492,
    -0.7991856
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " alarm",
    " clock",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " night",
    "stand",
    "\n",
    " walk",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " find",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " alarm",
    " clock",
    " on",
    " night",
    "stand",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "night",
    "stand",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "night",
    "stand",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01898205
    },
    {
      " 0": -0.0090441955
    },
    {
      ":": -0.0020858485
    },
    {
      " walk": -0.6969472
    },
    {
      " to": -0.30358064
    },
    {
      " bedroom": -0.0842947
    },
    {
      "\n": -0.021816807
    },
    {
      " walk": -0.00525498
    },
    {
      "('": -0.005140177
    },
    {
      "bedroom": -0.0014856285
    },
    {
      "')": -0.0014741066
    },
    {
      "\n": -0.0088032205
    },
    {
      " #": -0.0031278958
    },
    {
      " 1": -0.0029165552
    },
    {
      ":": -0.00054399215
    },
    {
      " find": -0.04388732
    },
    {
      " alarm": -0.3100691
    },
    {
      " clock": -0.07238844
    },
    {
      "\n": -0.018422607
    },
    {
      " find": -0.3528263
    },
    {
      "('": -0.0010060486
    },
    {
      "al": -0.003370441
    },
    {
      "arm": -0.0001792624
    },
    {
      "_": -0.02292761
    },
    {
      "clock": -0.00043641243
    },
    {
      "')": -0.00283209
    },
    {
      "\n": -0.005425162
    },
    {
      " #": -0.012583267
    },
    {
      " 2": -0.0033825224
    },
    {
      ":": -0.0007491634
    },
    {
      " grab": -0.555519
    },
    {
      " alarm": -0.336456
    },
    {
      " clock": -0.008130154
    },
    {
      "\n": -0.024937233
    },
    {
      " grab": -0.41116914
    },
    {
      "('": -0.0016881911
    },
    {
      "close": -0.0052292743
    },
    {
      "'": -0.002681233
    },
    {
      " to": -0.0005018289
    },
    {
      " '": -0.0021691143
    },
    {
      "al": -0.0022851867
    },
    {
      "arm": -0.00014718683
    },
    {
      "_": -0.0055816504
    },
    {
      "clock": -0.00059975556
    },
    {
      "')": -0.007894027
    },
    {
      "\n": -0.006426839
    },
    {
      " else": -0.0015392948
    },
    {
      ":": -0.0012756498
    },
    {
      " find": -0.003531512
    },
    {
      "('": -0.0010469183
    },
    {
      "al": -0.00042436953
    },
    {
      "arm": -4.9308033e-05
    },
    {
      "_": -0.0020368125
    },
    {
      "clock": -0.0010340326
    },
    {
      "')": -0.0034591376
    },
    {
      "\n": -0.0056749196
    },
    {
      " grab": -0.005076496
    },
    {
      "('": -0.0008992545
    },
    {
      "al": -0.00035311276
    },
    {
      "arm": -5.675771e-06
    },
    {
      "_": -0.0023020937
    },
    {
      "clock": -0.00038662262
    },
    {
      "')": -0.0018091024
    },
    {
      "\n": -0.0045342916
    },
    {
      " #": -0.43050364
    },
    {
      " 3": -0.0072385767
    },
    {
      ":": -0.0007924126
    },
    {
      " put": -0.79299414
    },
    {
      " night": -0.3375163
    },
    {
      "stand": -0.23261696
    },
    {
      "\n": -0.023622546
    },
    {
      " find": -0.17195883
    },
    {
      "('": -0.0023181662
    },
    {
      "night": -0.0024962157
    },
    {
      "stand": -0.0033910754
    },
    {
      "')": -0.0014717197
    },
    {
      "\n": -0.0062072426
    },
    {
      " find": -0.08993031
    },
    {
      "('": -0.00076425495
    },
    {
      "night": -0.0004899005
    },
    {
      "stand": -0.00041578274
    },
    {
      "')": -0.0014874195
    },
    {
      "\n": -0.0043117586
    },
    {
      " #": -0.009100313
    },
    {
      " 4": -0.008940871
    },
    {
      ":": -0.00079384126
    },
    {
      " put": -0.08484527
    },
    {
      " alarm": -0.124585345
    },
    {
      " clock": -0.005614498
    },
    {
      " on": -0.16773263
    },
    {
      " night": -0.043181576
    },
    {
      "stand": -0.03303657
    },
    {
      "\n": -0.009040104
    },
    {
      " assert": -0.33361003
    },
    {
      "('": -0.0012281437
    },
    {
      "close": -0.35150942
    },
    {
      "'": -0.0024061692
    },
    {
      " to": -0.00078835577
    },
    {
      " '": -0.002001154
    },
    {
      "night": -0.035662547
    },
    {
      "stand": -0.0004608624
    },
    {
      "')": -0.006579763
    },
    {
      "\n": -0.0046197395
    },
    {
      " else": -0.0023168502
    },
    {
      ":": -0.0013694725
    },
    {
      " find": -0.052787863
    },
    {
      "('": -0.0009716236
    },
    {
      "night": -0.0014147162
    },
    {
      "stand": -0.00046968853
    },
    {
      "')": -0.0024518187
    },
    {
      "\n": -0.005494983
    },
    {
      " put": -0.19314416
    },
    {
      "on": -0.120142445
    },
    {
      "('": -0.001398243
    },
    {
      "al": -0.22743313
    },
    {
      "stand": -0.0007827492
    },
    {
      "')": -0.7991856
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.6066601276397705
[(" # 0: find chair\n find('chair')\n # 1: sit in chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n turnto('chair')\n lookat('chair')", <OpenAIObject at 0x7ff4a00a03b0> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3361,
    3362,
    3367,
    3369,
    3374,
    3376,
    3377,
    3379,
    3381,
    3382,
    3386,
    3389,
    3395,
    3396,
    3403,
    3405,
    3410,
    3411,
    3414,
    3416,
    3421,
    3423,
    3424,
    3429,
    3430,
    3435,
    3437,
    3442,
    3444,
    3445,
    3449,
    3451,
    3456,
    3458,
    3459,
    3463,
    3465,
    3466,
    3468,
    3473,
    3475,
    3476,
    3481,
    3483,
    3485,
    3490
  ],
  "token_logprobs": [
    -0.022850279,
    -0.008551962,
    -0.0017378073,
    -0.6448423,
    -0.15822607,
    -0.025902433,
    -0.044016927,
    -0.0019754744,
    -0.0011533718,
    -0.0015924263,
    -0.0076930434,
    -0.0036783114,
    -0.0026699372,
    -0.0006760368,
    -2.3877633,
    -0.643638,
    -0.20525077,
    -0.011614298,
    -0.19524251,
    -0.0015475345,
    -0.007505899,
    -0.002846436,
    -0.0011301578,
    -0.0023448106,
    -0.00069673505,
    -0.0044403505,
    -0.0041908408,
    -0.0012314853,
    -0.0014136416,
    -0.0031540252,
    -0.0012637138,
    -0.00063870015,
    -0.0017785287,
    -0.004506211,
    -0.1983811,
    -0.0019260873,
    -0.0005360014,
    -0.0019512892,
    -0.16749088,
    -1.5330192,
    -9.38949e-05,
    -0.00011320953,
    -0.0005850234,
    -0.00055186276,
    -0.0010807512,
    -0.079479344,
    -0.26207748,
    -0.000903072,
    -0.00054029573,
    -0.00039139285,
    -0.0022526286
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " sit",
    " in",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "chair",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.022850279
    },
    {
      " 0": -0.008551962
    },
    {
      ":": -0.0017378073
    },
    {
      " find": -0.6448423
    },
    {
      " chair": -0.15822607
    },
    {
      "\n": -0.025902433
    },
    {
      " find": -0.044016927
    },
    {
      "('": -0.0019754744
    },
    {
      "chair": -0.0011533718
    },
    {
      "')": -0.0015924263
    },
    {
      "\n": -0.0076930434
    },
    {
      " #": -0.0036783114
    },
    {
      " 1": -0.0026699372
    },
    {
      ":": -0.0006760368
    },
    {
      " walk": -0.7781366
    },
    {
      " in": -0.643638
    },
    {
      " chair": -0.20525077
    },
    {
      "\n": -0.011614298
    },
    {
      " assert": -0.19524251
    },
    {
      "('": -0.0015475345
    },
    {
      "close": -0.007505899
    },
    {
      "'": -0.002846436
    },
    {
      " to": -0.0011301578
    },
    {
      " '": -0.0023448106
    },
    {
      "chair": -0.00069673505
    },
    {
      "')": -0.0044403505
    },
    {
      "\n": -0.0041908408
    },
    {
      " else": -0.0012314853
    },
    {
      ":": -0.0014136416
    },
    {
      " find": -0.0031540252
    },
    {
      "('": -0.0012637138
    },
    {
      "chair": -0.00063870015
    },
    {
      "')": -0.0017785287
    },
    {
      "\n": -0.004506211
    },
    {
      " sit": -0.1983811
    },
    {
      "('": -0.0019260873
    },
    {
      "chair": -0.0005360014
    },
    {
      "')": -0.0019512892
    },
    {
      "\n": -0.16749088
    },
    {
      " #": -0.9674256
    },
    {
      "nt": -9.38949e-05
    },
    {
      "o": -0.00011320953
    },
    {
      "('": -0.0005850234
    },
    {
      "chair": -0.00055186276
    },
    {
      "')": -0.0010807512
    },
    {
      "\n": -0.079479344
    },
    {
      " look": -0.26207748
    },
    {
      "at": -0.000903072
    },
    {
      "('": -0.00054029573
    },
    {
      "chair": -0.00039139285
    },
    {
      "')": -0.0022526286
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.5165290832519531
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find window\n walk('window')\n find('window')\n # 2: open window\n assert('close' to 'window')\n else: find('window')\n open('window')", <OpenAIObject at 0x7ff4a00b0680> JSON: {
  "text_offset": [
    3353,
    3355,
    3357,
    3358,
    3363,
    3366,
    3375,
    3376,
    3381,
    3383,
    3387,
    3391,
    3393,
    3394,
    3396,
    3398,
    3399,
    3404,
    3411,
    3412,
    3417,
    3419,
    3425,
    3427,
    3428,
    3433,
    3435,
    3441,
    3443,
    3444,
    3446,
    3448,
    3449,
    3454,
    3461,
    3462,
    3469,
    3471,
    3476,
    3477,
    3480,
    3482,
    3488,
    3490,
    3491,
    3496,
    3497,
    3502,
    3504,
    3510,
    3512,
    3513,
    3518,
    3520,
    3526
  ],
  "token_logprobs": [
    -0.01963183,
    -0.009794321,
    -0.00253177,
    -0.11549993,
    -0.21116707,
    -0.177357,
    -0.025882551,
    -0.005289253,
    -0.0045725545,
    -0.0024135208,
    -0.00022230239,
    -0.002336327,
    -0.0078044687,
    -0.0028785341,
    -0.0028901924,
    -0.00050111365,
    -0.030252136,
    -0.08448906,
    -0.018901443,
    -1.8873895,
    -0.0018852401,
    -0.0032089183,
    -0.0016223975,
    -0.005116336,
    -0.017017365,
    -0.0009620174,
    -0.0005652216,
    -0.0013937666,
    -0.0041341023,
    -0.0041069877,
    -0.006351856,
    -0.0007110504,
    -0.022551822,
    -0.47915432,
    -0.011809753,
    -0.25990385,
    -0.0016477118,
    -0.012201867,
    -0.0030588368,
    -0.00067377003,
    -0.002845002,
    -0.0010377318,
    -0.0040877764,
    -0.0044779503,
    -0.0015290863,
    -0.001576429,
    -0.0046465667,
    -0.0015235961,
    -0.00070401334,
    -0.0025468287,
    -0.00680448,
    -0.12044717,
    -0.0015770249,
    -0.0008127541,
    -0.0030035945
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " window",
    "\n",
    " walk",
    "('",
    "window",
    "')",
    "\n",
    " find",
    "('",
    "window",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " window",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "window",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "window",
    "')",
    "\n",
    " open",
    "('",
    "window",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01963183
    },
    {
      " 0": -0.009794321
    },
    {
      ":": -0.00253177
    },
    {
      " walk": -0.11549993
    },
    {
      " to": -0.21116707
    },
    {
      " bathroom": -0.177357
    },
    {
      "\n": -0.025882551
    },
    {
      " walk": -0.005289253
    },
    {
      "('": -0.0045725545
    },
    {
      "bath": -0.0024135208
    },
    {
      "room": -0.00022230239
    },
    {
      "')": -0.002336327
    },
    {
      "\n": -0.0078044687
    },
    {
      " #": -0.0028785341
    },
    {
      " 1": -0.0028901924
    },
    {
      ":": -0.00050111365
    },
    {
      " find": -0.030252136
    },
    {
      " window": -0.08448906
    },
    {
      "\n": -0.018901443
    },
    {
      " find": -0.19503734
    },
    {
      "('": -0.0018852401
    },
    {
      "window": -0.0032089183
    },
    {
      "')": -0.0016223975
    },
    {
      "\n": -0.005116336
    },
    {
      " find": -0.017017365
    },
    {
      "('": -0.0009620174
    },
    {
      "window": -0.0005652216
    },
    {
      "')": -0.0013937666
    },
    {
      "\n": -0.0041341023
    },
    {
      " #": -0.0041069877
    },
    {
      " 2": -0.006351856
    },
    {
      ":": -0.0007110504
    },
    {
      " open": -0.022551822
    },
    {
      " window": -0.47915432
    },
    {
      "\n": -0.011809753
    },
    {
      " assert": -0.25990385
    },
    {
      "('": -0.0016477118
    },
    {
      "close": -0.012201867
    },
    {
      "'": -0.0030588368
    },
    {
      " to": -0.00067377003
    },
    {
      " '": -0.002845002
    },
    {
      "window": -0.0010377318
    },
    {
      "')": -0.0040877764
    },
    {
      "\n": -0.0044779503
    },
    {
      " else": -0.0015290863
    },
    {
      ":": -0.001576429
    },
    {
      " find": -0.0046465667
    },
    {
      "('": -0.0015235961
    },
    {
      "window": -0.00070401334
    },
    {
      "')": -0.0025468287
    },
    {
      "\n": -0.00680448
    },
    {
      " open": -0.12044717
    },
    {
      "('": -0.0015770249
    },
    {
      "window": -0.0008127541
    },
    {
      "')": -0.0030035945
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.090519666671753
[(" # 0: walk to the home office\n walk('home_office')\n # 1: find computer\n find('computer')\n # 2: switch on the computer\n switchon('computer')\n # 3: find keyboard and mouse\n find('keyboard')\n find('mouse')\n # 4: use keyboard and mouse\n grab('keyboard')\n grab('mouse')\n turnto('keyboard')\n pointat('keyboard')\n turnto('mouse')\n pointat('mouse')\n # 5: switch off the computer\n switchoff('computer')", <OpenAIObject at 0x7ff4a00c0b80> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3362,
    3367,
    3374,
    3375,
    3380,
    3382,
    3386,
    3387,
    3393,
    3395,
    3396,
    3398,
    3400,
    3401,
    3406,
    3415,
    3416,
    3421,
    3423,
    3431,
    3433,
    3434,
    3436,
    3438,
    3439,
    3446,
    3449,
    3453,
    3462,
    3463,
    3470,
    3472,
    3474,
    3482,
    3484,
    3485,
    3487,
    3489,
    3490,
    3495,
    3504,
    3508,
    3514,
    3515,
    3520,
    3522,
    3525,
    3530,
    3532,
    3533,
    3538,
    3540,
    3545,
    3547,
    3548,
    3550,
    3552,
    3553,
    3557,
    3566,
    3570,
    3576,
    3577,
    3582,
    3584,
    3587,
    3592,
    3594,
    3595,
    3600,
    3602,
    3607,
    3609,
    3610,
    3614,
    3616,
    3617,
    3619,
    3622,
    3627,
    3629,
    3630,
    3636,
    3638,
    3640,
    3643,
    3648,
    3650,
    3651,
    3655,
    3657,
    3658,
    3660,
    3665,
    3667,
    3668,
    3674,
    3676,
    3678,
    3683,
    3685,
    3686,
    3688,
    3690,
    3691,
    3698,
    3702,
    3706,
    3715,
    3716,
    3723,
    3726,
    3728,
    3736
  ],
  "token_logprobs": [
    -0.017765183,
    -0.0069322526,
    -0.0016996549,
    -0.3261038,
    -0.25657508,
    -2.7154288,
    -0.45377842,
    -0.04111917,
    -0.024752699,
    -0.006823085,
    -0.0052555776,
    -0.011418759,
    -0.042032562,
    -0.0007647328,
    -0.002536968,
    -0.010042939,
    -0.0024216457,
    -0.002755162,
    -0.0005343297,
    -0.061464615,
    -0.76363105,
    -0.04365797,
    -0.20038481,
    -0.0011982486,
    -0.0015366677,
    -0.0015377434,
    -0.0059798416,
    -0.0119361775,
    -0.0051691183,
    -0.0007105736,
    -2.543296,
    -0.065548874,
    -0.37930685,
    -0.019915558,
    -0.017548481,
    -0.83560973,
    -0.0044964496,
    -0.0012131074,
    -0.0012184783,
    -0.0016721308,
    -0.004365456,
    -0.019184237,
    -0.0034682907,
    -0.0005685613,
    -1.2127151,
    -1.895292,
    -1.8123461,
    -0.056177095,
    -0.032635044,
    -0.034306407,
    -0.0022373954,
    -0.014584492,
    -0.0006994787,
    -0.046654265,
    -0.013968811,
    -0.06653449,
    -0.0010622531,
    -0.0004232957,
    -0.006539985,
    -0.0050918916,
    -0.011723391,
    -0.006196928,
    -0.00066005444,
    -1.9154301,
    -1.6262391,
    -0.067447424,
    -0.0024377783,
    -0.2510997,
    -1.5660995,
    -0.0011761058,
    -0.06830529,
    -0.0005362389,
    -0.0025113919,
    -0.005568465,
    -0.16190034,
    -0.0007048478,
    -0.00035836172,
    -0.003602398,
    -0.0046726735,
    -1.2120816,
    -4.1320116e-05,
    -0.00028866032,
    -0.0008967502,
    -0.1415818,
    -0.0007936066,
    -0.003104039,
    -0.0035324695,
    -0.5710193,
    -0.0019753543,
    -0.0007554889,
    -0.06206384,
    -0.00045787936,
    -0.0019426292,
    -0.005843437,
    -1.5908889,
    -8.638288e-05,
    -0.0006370312,
    -0.0005746466,
    -0.007442786,
    -0.0051809805,
    -0.0030476593,
    -0.029544538,
    -0.0006670915,
    -0.000590093,
    -0.0010000797,
    -0.0026757345,
    -0.24282496,
    -0.22049588,
    -0.009162931,
    -0.0017655726,
    -3.854742,
    -0.047883976,
    -0.22599632,
    -0.0038668984,
    -0.040017072,
    -0.017890112,
    -0.003611549,
    -0.0012345903,
    -0.0012767253,
    -0.004406702
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " the",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " switch",
    " on",
    " the",
    " computer",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " keyboard",
    " and",
    " mouse",
    "\n",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " use",
    " keyboard",
    " and",
    " mouse",
    "\n",
    " grab",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " grab",
    "('",
    "mouse",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "mouse",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " switch",
    " off",
    " the",
    " computer",
    "\n",
    " switch",
    "off",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.017765183
    },
    {
      " 0": -0.0069322526
    },
    {
      ":": -0.0016996549
    },
    {
      " walk": -0.3261038
    },
    {
      " to": -0.25657508
    },
    {
      " home": -0.48492497
    },
    {
      " home": -0.45377842
    },
    {
      " office": -0.04111917
    },
    {
      "\n": -0.024752699
    },
    {
      " walk": -0.006823085
    },
    {
      "('": -0.0052555776
    },
    {
      "home": -0.011418759
    },
    {
      "_": -0.042032562
    },
    {
      "office": -0.0007647328
    },
    {
      "')": -0.002536968
    },
    {
      "\n": -0.010042939
    },
    {
      " #": -0.0024216457
    },
    {
      " 1": -0.002755162
    },
    {
      ":": -0.0005343297
    },
    {
      " find": -0.061464615
    },
    {
      " computer": -0.76363105
    },
    {
      "\n": -0.04365797
    },
    {
      " find": -0.20038481
    },
    {
      "('": -0.0011982486
    },
    {
      "computer": -0.0015366677
    },
    {
      "')": -0.0015377434
    },
    {
      "\n": -0.0059798416
    },
    {
      " #": -0.0119361775
    },
    {
      " 2": -0.0051691183
    },
    {
      ":": -0.0007105736
    },
    {
      " turn": -0.6186947
    },
    {
      " on": -0.065548874
    },
    {
      " the": -0.37930685
    },
    {
      " computer": -0.019915558
    },
    {
      "\n": -0.017548481
    },
    {
      " assert": -0.67973834
    },
    {
      "on": -0.0044964496
    },
    {
      "('": -0.0012131074
    },
    {
      "computer": -0.0012184783
    },
    {
      "')": -0.0016721308
    },
    {
      "\n": -0.004365456
    },
    {
      " #": -0.019184237
    },
    {
      " 3": -0.0034682907
    },
    {
      ":": -0.0005685613
    },
    {
      " sit": -1.1274203
    },
    {
      " mouse": -0.8213089
    },
    {
      "\n": -0.20264404
    },
    {
      " mouse": -0.056177095
    },
    {
      "\n": -0.032635044
    },
    {
      " find": -0.034306407
    },
    {
      "('": -0.0022373954
    },
    {
      "key": -0.014584492
    },
    {
      "board": -0.0006994787
    },
    {
      "')": -0.046654265
    },
    {
      "\n": -0.013968811
    },
    {
      " find": -0.06653449
    },
    {
      "('": -0.0010622531
    },
    {
      "mouse": -0.0004232957
    },
    {
      "')": -0.006539985
    },
    {
      "\n": -0.0050918916
    },
    {
      " #": -0.011723391
    },
    {
      " 4": -0.006196928
    },
    {
      ":": -0.00066005444
    },
    {
      " grab": -1.0821656
    },
    {
      " the": -0.41046077
    },
    {
      " and": -0.067447424
    },
    {
      " mouse": -0.0024377783
    },
    {
      "\n": -0.2510997
    },
    {
      " assert": -1.2531035
    },
    {
      "('": -0.0011761058
    },
    {
      "key": -0.06830529
    },
    {
      "board": -0.0005362389
    },
    {
      "')": -0.0025113919
    },
    {
      "\n": -0.005568465
    },
    {
      " grab": -0.16190034
    },
    {
      "('": -0.0007048478
    },
    {
      "mouse": -0.00035836172
    },
    {
      "')": -0.003602398
    },
    {
      "\n": -0.0046726735
    },
    {
      " #": -1.1124216
    },
    {
      "nt": -4.1320116e-05
    },
    {
      "o": -0.00028866032
    },
    {
      "('": -0.0008967502
    },
    {
      "key": -0.1415818
    },
    {
      "board": -0.0007936066
    },
    {
      "')": -0.003104039
    },
    {
      "\n": -0.0035324695
    },
    {
      " point": -0.5710193
    },
    {
      "at": -0.0019753543
    },
    {
      "('": -0.0007554889
    },
    {
      "key": -0.06206384
    },
    {
      "board": -0.00045787936
    },
    {
      "')": -0.0019426292
    },
    {
      "\n": -0.005843437
    },
    {
      " tur": -1.5908889
    },
    {
      "nt": -8.638288e-05
    },
    {
      "o": -0.0006370312
    },
    {
      "('": -0.0005746466
    },
    {
      "mouse": -0.007442786
    },
    {
      "')": -0.0051809805
    },
    {
      "\n": -0.0030476593
    },
    {
      " point": -0.029544538
    },
    {
      "at": -0.0006670915
    },
    {
      "('": -0.000590093
    },
    {
      "mouse": -0.0010000797
    },
    {
      "')": -0.0026757345
    },
    {
      "\n": -0.24282496
    },
    {
      " #": -0.22049588
    },
    {
      " 5": -0.009162931
    },
    {
      ":": -0.0017655726
    },
    {
      " Done": -0.7025636
    },
    {
      " off": -0.047883976
    },
    {
      " the": -0.22599632
    },
    {
      " computer": -0.0038668984
    },
    {
      "\n": -0.040017072
    },
    {
      " switch": -0.017890112
    },
    {
      "off": -0.003611549
    },
    {
      "('": -0.0012345903
    },
    {
      "computer": -0.0012767253
    },
    {
      "')": -0.004406702
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.7069780826568604
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find sink\n walk('sink')\n find('sink')\n # 2: turn on the faucet\n assert('close' to 'faucet')\n else: find('faucet')\n switchon('faucet')\n # 3: wash face\n grab('soap')\n pour('soap', 'hands')\n wash('hands')\n # 4: turn off the faucet\n switchoff('faucet')\n # 5: Done", <OpenAIObject at 0x7ff4a00b0f40> JSON: {
  "text_offset": [
    3342,
    3344,
    3346,
    3347,
    3352,
    3355,
    3364,
    3365,
    3370,
    3372,
    3376,
    3380,
    3382,
    3383,
    3385,
    3387,
    3388,
    3393,
    3398,
    3399,
    3404,
    3406,
    3407,
    3410,
    3412,
    3413,
    3418,
    3420,
    3421,
    3424,
    3426,
    3427,
    3429,
    3431,
    3432,
    3437,
    3440,
    3444,
    3446,
    3449,
    3451,
    3452,
    3459,
    3461,
    3466,
    3467,
    3470,
    3472,
    3473,
    3476,
    3478,
    3480,
    3481,
    3486,
    3487,
    3492,
    3494,
    3495,
    3498,
    3500,
    3502,
    3503,
    3510,
    3512,
    3514,
    3515,
    3518,
    3520,
    3522,
    3523,
    3525,
    3527,
    3528,
    3533,
    3538,
    3539,
    3544,
    3546,
    3548,
    3550,
    3552,
    3553,
    3558,
    3560,
    3562,
    3564,
    3566,
    3568,
    3573,
    3575,
    3576,
    3581,
    3583,
    3588,
    3590,
    3591,
    3593,
    3595,
    3596,
    3601,
    3605,
    3609,
    3611,
    3614,
    3616,
    3617,
    3624,
    3627,
    3629,
    3630,
    3633,
    3635,
    3637,
    3638,
    3640,
    3642,
    3643
  ],
  "token_logprobs": [
    -0.017167976,
    -0.0064241397,
    -0.0016977447,
    -0.63631636,
    -0.34176973,
    -0.14820693,
    -0.019205503,
    -0.005236464,
    -0.004378507,
    -0.002446858,
    -0.0001792624,
    -0.002780208,
    -0.0067102676,
    -0.00221768,
    -0.0028986207,
    -0.0007326985,
    -0.07958099,
    -0.17083712,
    -0.02603242,
    -1.1408759,
    -0.001765214,
    -0.0019353443,
    -0.00010092916,
    -0.0015489677,
    -0.005549525,
    -0.016744578,
    -0.0008706172,
    -0.00032288165,
    -4.1080762e-05,
    -0.0006631548,
    -0.0052216635,
    -0.0053062113,
    -0.0067309695,
    -0.0006802711,
    -0.5187788,
    -0.07984526,
    -0.9332695,
    -0.4931827,
    -0.0020234939,
    -0.0018593222,
    -0.036601506,
    -0.49220654,
    -0.0014720791,
    -0.005792716,
    -0.0028243188,
    -0.00037374342,
    -0.001274099,
    -0.07100762,
    -0.00049872854,
    -0.0004522747,
    -0.00570729,
    -0.006507166,
    -0.001528966,
    -0.0012091087,
    -0.0061118864,
    -0.0015178656,
    -0.0013675623,
    -0.0015626373,
    -0.00028579836,
    -0.0031695126,
    -0.0061090076,
    -0.65047824,
    -0.0025517275,
    -0.0010641633,
    -0.00078799913,
    -0.00022766957,
    -0.00021264647,
    -0.0018853584,
    -0.0055567166,
    -0.037080962,
    -0.0067269495,
    -0.00045919348,
    -1.2393351,
    -0.21660186,
    -0.27954268,
    -2.4327269,
    -0.0017778117,
    -1.3083426,
    -0.0027875004,
    -0.012712866,
    -0.0066157603,
    -1.8238866,
    -0.004860011,
    -0.54285204,
    -0.00022075453,
    -3.625672,
    -0.009484262,
    -1.0837882,
    -0.004448015,
    -0.0064512556,
    -0.66842115,
    -0.0031873293,
    -0.6103688,
    -0.028345542,
    -0.018535418,
    -1.2986773,
    -0.009547206,
    -0.0019607234,
    -0.32006064,
    -0.024391558,
    -0.61535686,
    -0.008118678,
    -0.0006901748,
    -0.0012402597,
    -0.022387477,
    -0.15029722,
    -0.0033432303,
    -0.0009393453,
    -0.000503143,
    -0.00028854018,
    -0.00024894974,
    -0.0024926302,
    -0.107764736,
    -0.029502852,
    -0.0050182645,
    -0.0019256097,
    -1.0686449
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " walk",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wash",
    " face",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " pour",
    "('",
    "so",
    "ap",
    "',",
    " '",
    "hands",
    "')",
    "\n",
    " wash",
    "('",
    "hands",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " off",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " switch",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.017167976
    },
    {
      " 0": -0.0064241397
    },
    {
      ":": -0.0016977447
    },
    {
      " walk": -0.63631636
    },
    {
      " to": -0.34176973
    },
    {
      " bathroom": -0.14820693
    },
    {
      "\n": -0.019205503
    },
    {
      " walk": -0.005236464
    },
    {
      "('": -0.004378507
    },
    {
      "bath": -0.002446858
    },
    {
      "room": -0.0001792624
    },
    {
      "')": -0.002780208
    },
    {
      "\n": -0.0067102676
    },
    {
      " #": -0.00221768
    },
    {
      " 1": -0.0028986207
    },
    {
      ":": -0.0007326985
    },
    {
      " find": -0.07958099
    },
    {
      " sink": -0.17083712
    },
    {
      "\n": -0.02603242
    },
    {
      " find": -0.4079982
    },
    {
      "('": -0.001765214
    },
    {
      "s": -0.0019353443
    },
    {
      "ink": -0.00010092916
    },
    {
      "')": -0.0015489677
    },
    {
      "\n": -0.005549525
    },
    {
      " find": -0.016744578
    },
    {
      "('": -0.0008706172
    },
    {
      "s": -0.00032288165
    },
    {
      "ink": -4.1080762e-05
    },
    {
      "')": -0.0006631548
    },
    {
      "\n": -0.0052216635
    },
    {
      " #": -0.0053062113
    },
    {
      " 2": -0.0067309695
    },
    {
      ":": -0.0006802711
    },
    {
      " turn": -0.5187788
    },
    {
      " on": -0.07984526
    },
    {
      " the": -0.9332695
    },
    {
      " f": -0.4931827
    },
    {
      "auc": -0.0020234939
    },
    {
      "et": -0.0018593222
    },
    {
      "\n": -0.036601506
    },
    {
      " assert": -0.49220654
    },
    {
      "('": -0.0014720791
    },
    {
      "close": -0.005792716
    },
    {
      "'": -0.0028243188
    },
    {
      " to": -0.00037374342
    },
    {
      " '": -0.001274099
    },
    {
      "f": -0.07100762
    },
    {
      "auc": -0.00049872854
    },
    {
      "et": -0.0004522747
    },
    {
      "')": -0.00570729
    },
    {
      "\n": -0.006507166
    },
    {
      " else": -0.001528966
    },
    {
      ":": -0.0012091087
    },
    {
      " find": -0.0061118864
    },
    {
      "('": -0.0015178656
    },
    {
      "f": -0.0013675623
    },
    {
      "auc": -0.0015626373
    },
    {
      "et": -0.00028579836
    },
    {
      "')": -0.0031695126
    },
    {
      "\n": -0.0061090076
    },
    {
      " switch": -0.65047824
    },
    {
      "on": -0.0025517275
    },
    {
      "('": -0.0010641633
    },
    {
      "f": -0.00078799913
    },
    {
      "auc": -0.00022766957
    },
    {
      "et": -0.00021264647
    },
    {
      "')": -0.0018853584
    },
    {
      "\n": -0.0055567166
    },
    {
      " #": -0.037080962
    },
    {
      " 3": -0.0067269495
    },
    {
      ":": -0.00045919348
    },
    {
      " wash": -1.2393351
    },
    {
      " face": -0.21660186
    },
    {
      "\n": -0.27954268
    },
    {
      " assert": -0.94293875
    },
    {
      "('": -0.0017778117
    },
    {
      "so": -1.3083426
    },
    {
      "ap": -0.0027875004
    },
    {
      "')": -0.012712866
    },
    {
      "\n": -0.0066157603
    },
    {
      " wash": -0.9302051
    },
    {
      "('": -0.004860011
    },
    {
      "so": -0.54285204
    },
    {
      "ap": -0.00022075453
    },
    {
      "')": -0.06770692
    },
    {
      " '": -0.009484262
    },
    {
      "hands": -1.0837882
    },
    {
      "')": -0.004448015
    },
    {
      "\n": -0.0064512556
    },
    {
      " wash": -0.66842115
    },
    {
      "('": -0.0031873293
    },
    {
      "hands": -0.6103688
    },
    {
      "')": -0.028345542
    },
    {
      "\n": -0.018535418
    },
    {
      " wipe": -1.2208651
    },
    {
      " 4": -0.009547206
    },
    {
      ":": -0.0019607234
    },
    {
      " turn": -0.32006064
    },
    {
      " off": -0.024391558
    },
    {
      " the": -0.61535686
    },
    {
      " f": -0.008118678
    },
    {
      "auc": -0.0006901748
    },
    {
      "et": -0.0012402597
    },
    {
      "\n": -0.022387477
    },
    {
      " switch": -0.15029722
    },
    {
      "off": -0.0033432303
    },
    {
      "('": -0.0009393453
    },
    {
      "f": -0.000503143
    },
    {
      "auc": -0.00028854018
    },
    {
      "et": -0.00024894974
    },
    {
      "')": -0.0024926302
    },
    {
      "\n": -0.107764736
    },
    {
      " #": -0.029502852
    },
    {
      " 5": -0.0050182645
    },
    {
      ":": -0.0019256097
    },
    {
      " Done": -1.0686449
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 7.182801246643066
[(" # 0: find computer\n find('computer')\n # 1: find desk\n find('desk')\n # 2: sit on chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 3: turn on the computer\n switchon('computer')\n # 4: point at the computer\n pointat('computer')\n # 5: open the computer\n open('computer')\n # 6: open homework\n find('homework')\n open('homework')\n # 7: read the homework\n read('homework')\n # 8: write homework\n write('homework')\n # 9: save and close the file\n save('homework')\n close('homework')\n # 10: turn off the computer\n switchoff('computer')\n # 11: stand up\n standup()", <OpenAIObject at 0x7ff4a00e3a90> JSON: {
  "text_offset": [
    3346,
    3348,
    3350,
    3351,
    3356,
    3365,
    3366,
    3371,
    3373,
    3381,
    3383,
    3384,
    3386,
    3388,
    3389,
    3394,
    3399,
    3400,
    3405,
    3407,
    3410,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3423,
    3426,
    3432,
    3433,
    3440,
    3442,
    3447,
    3448,
    3451,
    3453,
    3458,
    3460,
    3461,
    3466,
    3467,
    3472,
    3474,
    3479,
    3481,
    3482,
    3486,
    3488,
    3493,
    3495,
    3496,
    3498,
    3500,
    3501,
    3506,
    3509,
    3513,
    3522,
    3523,
    3530,
    3532,
    3534,
    3542,
    3544,
    3545,
    3547,
    3549,
    3550,
    3556,
    3559,
    3563,
    3572,
    3573,
    3579,
    3581,
    3583,
    3591,
    3593,
    3594,
    3596,
    3598,
    3599,
    3604,
    3608,
    3617,
    3618,
    3623,
    3625,
    3633,
    3635,
    3636,
    3638,
    3640,
    3641,
    3646,
    3655,
    3656,
    3661,
    3663,
    3666,
    3671,
    3673,
    3674,
    3679,
    3681,
    3684,
    3689,
    3691,
    3692,
    3694,
    3696,
    3697,
    3702,
    3706,
    3715,
    3716,
    3721,
    3723,
    3726,
    3731,
    3733,
    3734,
    3736,
    3738,
    3739,
    3745,
    3754,
    3755,
    3761,
    3763,
    3766,
    3771,
    3773,
    3774,
    3776,
    3778,
    3779,
    3784,
    3788,
    3794,
    3798,
    3803,
    3804,
    3809,
    3811,
    3814,
    3819,
    3821,
    3822,
    3828,
    3830,
    3833,
    3838,
    3840,
    3841,
    3843,
    3846,
    3847,
    3852,
    3856,
    3860,
    3869,
    3870,
    3877,
    3880,
    3882,
    3890,
    3892,
    3893,
    3895,
    3898,
    3899,
    3905,
    3908,
    3909,
    3915,
    3917
  ],
  "token_logprobs": [
    -0.017471388,
    -0.007754791,
    -0.0021207326,
    -1.5360459,
    -0.52981347,
    -0.06882536,
    -0.084457606,
    -0.0024197337,
    -0.0034286326,
    -0.0025316498,
    -0.0082477,
    -0.007732626,
    -0.0040540807,
    -0.0008772995,
    -2.2714033,
    -2.1001744,
    -0.0753139,
    -0.55603266,
    -0.0010256786,
    -0.0012657441,
    -0.0002423942,
    -0.0015283701,
    -0.0054272613,
    -0.04270042,
    -0.0052262777,
    -0.00077904906,
    -0.5200823,
    -0.6649503,
    -1.0114949,
    -0.13004334,
    -1.0804616,
    -0.0016631151,
    -0.031525128,
    -0.004040257,
    -0.0004489359,
    -0.0033112336,
    -0.34362602,
    -0.008991508,
    -0.005251325,
    -0.001887031,
    -0.0021327396,
    -0.0069282316,
    -0.001673443,
    -0.002049595,
    -0.0025698931,
    -0.00618805,
    -0.06055826,
    -0.0014710035,
    -0.0017986526,
    -0.0010023476,
    -0.006448554,
    -0.054744408,
    -0.008556772,
    -0.0010690555,
    -0.83166194,
    -0.16462491,
    -1.1727387,
    -0.036930785,
    -0.022079464,
    -2.3545187,
    -0.0066230814,
    -0.0012317246,
    -0.0020214617,
    -0.001740674,
    -0.0048491093,
    -0.03064189,
    -0.006413583,
    -0.0008294575,
    -3.565081,
    -0.62158215,
    -0.3653478,
    -0.42520362,
    -0.32308182,
    -0.71421725,
    -0.0025011757,
    -0.00092818943,
    -0.001114167,
    -0.0020684693,
    -0.0058267685,
    -0.010512661,
    -0.0048654615,
    -0.0008258774,
    -1.3121704,
    -0.7491072,
    -1.0743058,
    -0.11461325,
    -0.07897242,
    -0.0019860447,
    -0.0031056546,
    -0.0021727008,
    -0.010893838,
    -0.007016284,
    -0.004570878,
    -0.0011526573,
    -3.3060296,
    -5.4073,
    -0.13260625,
    -1.191182,
    -0.0015107628,
    -0.0034385032,
    -0.00020322429,
    -0.0032376815,
    -0.0055159596,
    -0.3979769,
    -0.0011025306,
    -0.0010570033,
    -7.899194e-05,
    -0.002297912,
    -0.00931435,
    -0.007249084,
    -0.011234111,
    -0.0013334837,
    -0.2591576,
    -0.6014261,
    -0.061235193,
    -0.013592081,
    -0.126813,
    -0.0025526842,
    -0.00096189824,
    -0.00018689176,
    -0.0021549584,
    -0.023338558,
    -0.021153072,
    -0.0021431907,
    -0.0021530474,
    -2.9847884,
    -2.9592347,
    -0.0515173,
    -0.14519887,
    -0.0040230798,
    -0.001688669,
    -0.0006023809,
    -0.0029369972,
    -0.013914959,
    -0.006610423,
    -0.0047253743,
    -0.0012838254,
    -1.1042045,
    -2.6151965,
    -0.04815617,
    -0.92454934,
    -2.2535946,
    -0.014646849,
    -0.02042802,
    -0.042657442,
    -0.012481564,
    -0.00040522762,
    -0.0045985407,
    -0.011520476,
    -0.021711303,
    -0.0010907168,
    -0.0037391556,
    -0.00042043283,
    -0.0025010554,
    -0.042114623,
    -0.02097027,
    -0.0072109015,
    -0.002547664,
    -0.9342603,
    -0.047512077,
    -0.18902843,
    -0.004658541,
    -0.013788768,
    -0.019123055,
    -0.0033292964,
    -0.0011691842,
    -0.001564309,
    -0.0036429572,
    -0.41279182,
    -0.0561097,
    -0.002846436,
    -0.0023360879,
    -0.5250005,
    -0.16341409,
    -0.36200988,
    -0.013498011,
    -0.005466754,
    -0.05852857
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " desk",
    "\n",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " turn",
    " on",
    " the",
    " computer",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " point",
    " at",
    " the",
    " computer",
    "\n",
    " point",
    "at",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " open",
    " the",
    " computer",
    "\n",
    " open",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " open",
    " homework",
    "\n",
    " find",
    "('",
    "hom",
    "ework",
    "')",
    "\n",
    " open",
    "('",
    "hom",
    "ework",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " read",
    " the",
    " homework",
    "\n",
    " read",
    "('",
    "hom",
    "ework",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " write",
    " homework",
    "\n",
    " write",
    "('",
    "hom",
    "ework",
    "')",
    "\n",
    " #",
    " 9",
    ":",
    " save",
    " and",
    " close",
    " the",
    " file",
    "\n",
    " save",
    "('",
    "hom",
    "ework",
    "')",
    "\n",
    " close",
    "('",
    "hom",
    "ework",
    "')",
    "\n",
    " #",
    " 10",
    ":",
    " turn",
    " off",
    " the",
    " computer",
    "\n",
    " switch",
    "off",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 11",
    ":",
    " stand",
    " up",
    "\n",
    " stand",
    "up",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.017471388
    },
    {
      " 0": -0.007754791
    },
    {
      ":": -0.0021207326
    },
    {
      " walk": -0.37481403
    },
    {
      " computer": -0.52981347
    },
    {
      "\n": -0.06882536
    },
    {
      " find": -0.084457606
    },
    {
      "('": -0.0024197337
    },
    {
      "computer": -0.0034286326
    },
    {
      "')": -0.0025316498
    },
    {
      "\n": -0.0082477
    },
    {
      " #": -0.007732626
    },
    {
      " 1": -0.0040540807
    },
    {
      ":": -0.0008772995
    },
    {
      " turn": -1.1058264
    },
    {
      " chair": -0.589891
    },
    {
      "\n": -0.0753139
    },
    {
      " find": -0.55603266
    },
    {
      "('": -0.0010256786
    },
    {
      "des": -0.0012657441
    },
    {
      "k": -0.0002423942
    },
    {
      "')": -0.0015283701
    },
    {
      "\n": -0.0054272613
    },
    {
      " #": -0.04270042
    },
    {
      " 2": -0.0052262777
    },
    {
      ":": -0.00077904906
    },
    {
      " sit": -0.5200823
    },
    {
      " on": -0.6649503
    },
    {
      " chair": -1.0114949
    },
    {
      "\n": -0.13004334
    },
    {
      " assert": -1.0804616
    },
    {
      "('": -0.0016631151
    },
    {
      "close": -0.031525128
    },
    {
      "'": -0.004040257
    },
    {
      " to": -0.0004489359
    },
    {
      " '": -0.0033112336
    },
    {
      "chair": -0.34362602
    },
    {
      "')": -0.008991508
    },
    {
      "\n": -0.005251325
    },
    {
      " else": -0.001887031
    },
    {
      ":": -0.0021327396
    },
    {
      " find": -0.0069282316
    },
    {
      "('": -0.001673443
    },
    {
      "chair": -0.002049595
    },
    {
      "')": -0.0025698931
    },
    {
      "\n": -0.00618805
    },
    {
      " sit": -0.06055826
    },
    {
      "('": -0.0014710035
    },
    {
      "chair": -0.0017986526
    },
    {
      "')": -0.0010023476
    },
    {
      "\n": -0.006448554
    },
    {
      " #": -0.054744408
    },
    {
      " 3": -0.008556772
    },
    {
      ":": -0.0010690555
    },
    {
      " turn": -0.83166194
    },
    {
      " on": -0.16462491
    },
    {
      " computer": -0.43341118
    },
    {
      " computer": -0.036930785
    },
    {
      "\n": -0.022079464
    },
    {
      " assert": -0.5181739
    },
    {
      "on": -0.0066230814
    },
    {
      "('": -0.0012317246
    },
    {
      "computer": -0.0020214617
    },
    {
      "')": -0.001740674
    },
    {
      "\n": -0.0048491093
    },
    {
      " #": -0.03064189
    },
    {
      " 4": -0.006413583
    },
    {
      ":": -0.0008294575
    },
    {
      " open": -1.3467638
    },
    {
      " at": -0.62158215
    },
    {
      " the": -0.3653478
    },
    {
      " computer": -0.42520362
    },
    {
      "\n": -0.32308182
    },
    {
      " point": -0.71421725
    },
    {
      "at": -0.0025011757
    },
    {
      "('": -0.00092818943
    },
    {
      "computer": -0.001114167
    },
    {
      "')": -0.0020684693
    },
    {
      "\n": -0.0058267685
    },
    {
      " #": -0.010512661
    },
    {
      " 5": -0.0048654615
    },
    {
      ":": -0.0008258774
    },
    {
      " open": -1.3121704
    },
    {
      " the": -0.7491072
    },
    {
      " computer": -1.0743058
    },
    {
      "\n": -0.11461325
    },
    {
      " open": -0.07897242
    },
    {
      "('": -0.0019860447
    },
    {
      "computer": -0.0031056546
    },
    {
      "')": -0.0021727008
    },
    {
      "\n": -0.010893838
    },
    {
      " #": -0.007016284
    },
    {
      " 6": -0.004570878
    },
    {
      ":": -0.0011526573
    },
    {
      " use": -1.6830341
    },
    {
      " the": -0.6339486
    },
    {
      "\n": -0.13260625
    },
    {
      " open": -0.4962643
    },
    {
      "('": -0.0015107628
    },
    {
      "hom": -0.0034385032
    },
    {
      "ework": -0.00020322429
    },
    {
      "')": -0.0032376815
    },
    {
      "\n": -0.0055159596
    },
    {
      " open": -0.3979769
    },
    {
      "('": -0.0011025306
    },
    {
      "hom": -0.0010570033
    },
    {
      "ework": -7.899194e-05
    },
    {
      "')": -0.002297912
    },
    {
      "\n": -0.00931435
    },
    {
      " #": -0.007249084
    },
    {
      " 7": -0.011234111
    },
    {
      ":": -0.0013334837
    },
    {
      " read": -0.2591576
    },
    {
      " the": -0.6014261
    },
    {
      " homework": -0.061235193
    },
    {
      "\n": -0.013592081
    },
    {
      " read": -0.126813
    },
    {
      "('": -0.0025526842
    },
    {
      "hom": -0.00096189824
    },
    {
      "ework": -0.00018689176
    },
    {
      "')": -0.0021549584
    },
    {
      "\n": -0.023338558
    },
    {
      " #": -0.021153072
    },
    {
      " 8": -0.0021431907
    },
    {
      ":": -0.0021530474
    },
    {
      " close": -0.9663915
    },
    {
      " the": -0.38381156
    },
    {
      "\n": -0.0515173
    },
    {
      " write": -0.14519887
    },
    {
      "('": -0.0040230798
    },
    {
      "hom": -0.001688669
    },
    {
      "ework": -0.0006023809
    },
    {
      "')": -0.0029369972
    },
    {
      "\n": -0.013914959
    },
    {
      " #": -0.006610423
    },
    {
      " 9": -0.0047253743
    },
    {
      ":": -0.0012838254
    },
    {
      " close": -0.75882465
    },
    {
      " homework": -0.81917787
    },
    {
      " close": -0.04815617
    },
    {
      " the": -0.92454934
    },
    {
      " homework": -0.39987022
    },
    {
      "\n": -0.014646849
    },
    {
      " save": -0.02042802
    },
    {
      "('": -0.042657442
    },
    {
      "hom": -0.012481564
    },
    {
      "ework": -0.00040522762
    },
    {
      "')": -0.0045985407
    },
    {
      "\n": -0.011520476
    },
    {
      " close": -0.021711303
    },
    {
      "('": -0.0010907168
    },
    {
      "hom": -0.0037391556
    },
    {
      "ework": -0.00042043283
    },
    {
      "')": -0.0025010554
    },
    {
      "\n": -0.042114623
    },
    {
      " #": -0.02097027
    },
    {
      " 10": -0.0072109015
    },
    {
      ":": -0.002547664
    },
    {
      " turn": -0.9342603
    },
    {
      " off": -0.047512077
    },
    {
      " the": -0.18902843
    },
    {
      " computer": -0.004658541
    },
    {
      "\n": -0.013788768
    },
    {
      " switch": -0.019123055
    },
    {
      "off": -0.0033292964
    },
    {
      "('": -0.0011691842
    },
    {
      "computer": -0.001564309
    },
    {
      "')": -0.0036429572
    },
    {
      "\n": -0.41279182
    },
    {
      " #": -0.0561097
    },
    {
      " 11": -0.002846436
    },
    {
      ":": -0.0023360879
    },
    {
      " stand": -0.5250005
    },
    {
      " up": -0.16341409
    },
    {
      "\n": -0.36200988
    },
    {
      " stand": -0.013498011
    },
    {
      "up": -0.005466754
    },
    {
      "()": -0.05852857
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.009481191635132
[(" # 0: walk in to bedroom\n walk('bedroom')\n # 1: find bed\n find('bed')\n # 2: lay down on bed\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n else: turnto('bed')\n sit('bed')\n sleep()\n # 3: Wake up\n wakeup()\n # 4: Sit up on bed\n assert('close' to 'bed')\n else: find('bed')\n else: turnto('bed')\n sit('bed')\n # 5: Stand up\n standup()\n # 6: Done\ndone()", <OpenAIObject at 0x7ff4a01347c0> JSON: {
  "text_offset": [
    3341,
    3343,
    3345,
    3346,
    3351,
    3354,
    3357,
    3365,
    3366,
    3371,
    3373,
    3380,
    3382,
    3383,
    3385,
    3387,
    3388,
    3393,
    3397,
    3398,
    3403,
    3405,
    3408,
    3410,
    3411,
    3413,
    3415,
    3416,
    3420,
    3425,
    3428,
    3432,
    3433,
    3437,
    3439,
    3440,
    3442,
    3445,
    3447,
    3448,
    3453,
    3455,
    3457,
    3460,
    3462,
    3463,
    3470,
    3472,
    3477,
    3478,
    3481,
    3483,
    3486,
    3488,
    3489,
    3494,
    3495,
    3500,
    3502,
    3505,
    3507,
    3508,
    3513,
    3514,
    3518,
    3520,
    3521,
    3523,
    3526,
    3528,
    3529,
    3533,
    3535,
    3538,
    3540,
    3541,
    3547,
    3549,
    3550,
    3552,
    3554,
    3555,
    3560,
    3563,
    3564,
    3569,
    3571,
    3573,
    3574,
    3576,
    3578,
    3579,
    3583,
    3586,
    3589,
    3593,
    3594,
    3601,
    3603,
    3608,
    3609,
    3612,
    3614,
    3617,
    3619,
    3620,
    3625,
    3626,
    3631,
    3633,
    3636,
    3638,
    3639,
    3644,
    3645,
    3649,
    3651,
    3652,
    3654,
    3657,
    3659,
    3660,
    3664,
    3666,
    3669,
    3671,
    3672,
    3674,
    3676,
    3677,
    3683,
    3686,
    3687,
    3693,
    3695,
    3697,
    3698,
    3700,
    3702,
    3703,
    3708,
    3709,
    3713
  ],
  "token_logprobs": [
    -0.018050991,
    -0.00949738,
    -0.0021565119,
    -0.49495482,
    -1.0357636,
    -0.02399812,
    -1.253363,
    -0.020398336,
    -0.005158093,
    -0.0061058304,
    -0.004103815,
    -0.0010929845,
    -0.0062080827,
    -0.005186792,
    -0.0035615417,
    -0.0005633143,
    -0.08935366,
    -0.0714205,
    -0.014537741,
    -0.7466902,
    -0.00089639076,
    -0.00040653892,
    -0.0015862199,
    -0.004050011,
    -0.019045047,
    -0.005372247,
    -0.0008046404,
    -0.24937835,
    -0.034031883,
    -0.042318493,
    -0.022895226,
    -0.008623563,
    -0.28325167,
    -3.8577375e-05,
    -0.00028066957,
    -0.00044857734,
    -0.00014360964,
    -0.0012237272,
    -0.002944051,
    -0.090495534,
    -0.00037457785,
    -0.0004351002,
    -0.00019404522,
    -0.0002620674,
    -0.002522327,
    -0.026716731,
    -0.000562599,
    -0.001173242,
    -0.0017513012,
    -0.00050087424,
    -0.001093223,
    -0.00013860193,
    -0.0025538797,
    -0.002558363,
    -0.0006674501,
    -0.00090540084,
    -0.0036804655,
    -0.0011465683,
    -0.00019714465,
    -0.00051280175,
    -0.0030960278,
    -0.4822326,
    -0.0014769132,
    -0.0072585708,
    -7.219704e-05,
    -0.00040272233,
    -0.0006215829,
    -0.0002735161,
    -0.00047726158,
    -0.0014711235,
    -0.3011062,
    -0.0005086275,
    -8.221057e-05,
    -0.00063333387,
    -0.0029813556,
    -0.95446706,
    -0.044158954,
    -0.042677656,
    -0.0843923,
    -0.01483987,
    -0.00189384,
    -2.5369554,
    -0.12596321,
    -0.84849644,
    -0.0835629,
    -0.002143429,
    -0.010207197,
    -0.16680402,
    -0.26878518,
    -0.00793584,
    -0.002667785,
    -2.3942626,
    -0.38396707,
    -2.09763,
    -0.30401498,
    -0.023560422,
    -2.5235102,
    -0.0024576748,
    -0.16062708,
    -0.0034735533,
    -0.0010944168,
    -0.003970119,
    -0.00037994413,
    -0.0037172586,
    -0.0034054893,
    -0.0018556202,
    -0.0015107628,
    -0.006129995,
    -0.0015492062,
    -0.00016125533,
    -0.0022591401,
    -0.0047683143,
    -0.48283994,
    -0.0018343596,
    -0.013667428,
    -5.9679198e-05,
    -0.0007597232,
    -0.0006911284,
    -0.00015887116,
    -0.0017110558,
    -0.0038861658,
    -0.0407014,
    -0.012736773,
    -0.00019487782,
    -0.0013250668,
    -0.12044119,
    -0.6300626,
    -0.010465679,
    -0.0040870584,
    -0.4422281,
    -0.09771518,
    -0.12453707,
    -0.049035706,
    -0.0017232986,
    -0.006109368,
    -1.297801,
    -0.23024096,
    -0.007935477,
    -0.0038347673,
    -0.16976374,
    -1.1994932,
    -3.3805273,
    -0.21704823
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " lay",
    " down",
    " on",
    " bed",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " sleep",
    "()",
    "\n",
    " #",
    " 3",
    ":",
    " Wake",
    " up",
    "\n",
    " wake",
    "up",
    "()",
    "\n",
    " #",
    " 4",
    ":",
    " Sit",
    " up",
    " on",
    " bed",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Stand",
    " up",
    "\n",
    " stand",
    "up",
    "()",
    "\n",
    " #",
    " 6",
    ":",
    " Done",
    "\n",
    "done",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.018050991
    },
    {
      " 0": -0.00949738
    },
    {
      ":": -0.0021565119
    },
    {
      " walk": -0.49495482
    },
    {
      " to": -0.54507643
    },
    {
      " to": -0.02399812
    },
    {
      " bed": -0.362963
    },
    {
      "\n": -0.020398336
    },
    {
      " walk": -0.005158093
    },
    {
      "('": -0.0061058304
    },
    {
      "bedroom": -0.004103815
    },
    {
      "')": -0.0010929845
    },
    {
      "\n": -0.0062080827
    },
    {
      " #": -0.005186792
    },
    {
      " 1": -0.0035615417
    },
    {
      ":": -0.0005633143
    },
    {
      " find": -0.08935366
    },
    {
      " bed": -0.0714205
    },
    {
      "\n": -0.014537741
    },
    {
      " walk": -0.65581447
    },
    {
      "('": -0.00089639076
    },
    {
      "bed": -0.00040653892
    },
    {
      "')": -0.0015862199
    },
    {
      "\n": -0.004050011
    },
    {
      " #": -0.019045047
    },
    {
      " 2": -0.005372247
    },
    {
      ":": -0.0008046404
    },
    {
      " lay": -0.24937835
    },
    {
      " down": -0.034031883
    },
    {
      " on": -0.042318493
    },
    {
      " bed": -0.022895226
    },
    {
      "\n": -0.008623563
    },
    {
      " tur": -0.28325167
    },
    {
      "nt": -3.8577375e-05
    },
    {
      "o": -0.00028066957
    },
    {
      "('": -0.00044857734
    },
    {
      "bed": -0.00014360964
    },
    {
      "')": -0.0012237272
    },
    {
      "\n": -0.002944051
    },
    {
      " look": -0.090495534
    },
    {
      "at": -0.00037457785
    },
    {
      "('": -0.0004351002
    },
    {
      "bed": -0.00019404522
    },
    {
      "')": -0.0002620674
    },
    {
      "\n": -0.002522327
    },
    {
      " assert": -0.026716731
    },
    {
      "('": -0.000562599
    },
    {
      "close": -0.001173242
    },
    {
      "'": -0.0017513012
    },
    {
      " to": -0.00050087424
    },
    {
      " '": -0.001093223
    },
    {
      "bed": -0.00013860193
    },
    {
      "')": -0.0025538797
    },
    {
      "\n": -0.002558363
    },
    {
      " else": -0.0006674501
    },
    {
      ":": -0.00090540084
    },
    {
      " find": -0.0036804655
    },
    {
      "('": -0.0011465683
    },
    {
      "bed": -0.00019714465
    },
    {
      "')": -0.00051280175
    },
    {
      "\n": -0.0030960278
    },
    {
      " else": -0.4822326
    },
    {
      ":": -0.0014769132
    },
    {
      " tur": -0.0072585708
    },
    {
      "nt": -7.219704e-05
    },
    {
      "o": -0.00040272233
    },
    {
      "('": -0.0006215829
    },
    {
      "bed": -0.0002735161
    },
    {
      "')": -0.00047726158
    },
    {
      "\n": -0.0014711235
    },
    {
      " sit": -0.3011062
    },
    {
      "('": -0.0005086275
    },
    {
      "bed": -8.221057e-05
    },
    {
      "')": -0.00063333387
    },
    {
      "\n": -0.0029813556
    },
    {
      " lie": -0.89034486
    },
    {
      "()": -0.044158954
    },
    {
      "\n": -0.042677656
    },
    {
      " #": -0.0843923
    },
    {
      " 3": -0.01483987
    },
    {
      ":": -0.00189384
    },
    {
      " wake": -1.0617654
    },
    {
      " up": -0.12596321
    },
    {
      " after": -0.82264805
    },
    {
      " wake": -0.0835629
    },
    {
      "up": -0.002143429
    },
    {
      "()": -0.010207197
    },
    {
      "\n": -0.16680402
    },
    {
      " #": -0.26878518
    },
    {
      " 4": -0.00793584
    },
    {
      ":": -0.002667785
    },
    {
      " Stand": -0.5310215
    },
    {
      " up": -0.38396707
    },
    {
      "\n": -0.2903657
    },
    {
      " bed": -0.30401498
    },
    {
      "\n": -0.023560422
    },
    {
      " sit": -0.31728786
    },
    {
      "('": -0.0024576748
    },
    {
      "close": -0.16062708
    },
    {
      "'": -0.0034735533
    },
    {
      " to": -0.0010944168
    },
    {
      " '": -0.003970119
    },
    {
      "bed": -0.00037994413
    },
    {
      "')": -0.0037172586
    },
    {
      "\n": -0.0034054893
    },
    {
      " else": -0.0018556202
    },
    {
      ":": -0.0015107628
    },
    {
      " find": -0.006129995
    },
    {
      "('": -0.0015492062
    },
    {
      "bed": -0.00016125533
    },
    {
      "')": -0.0022591401
    },
    {
      "\n": -0.0047683143
    },
    {
      " else": -0.48283994
    },
    {
      ":": -0.0018343596
    },
    {
      " tur": -0.013667428
    },
    {
      "nt": -5.9679198e-05
    },
    {
      "o": -0.0007597232
    },
    {
      "('": -0.0006911284
    },
    {
      "bed": -0.00015887116
    },
    {
      "')": -0.0017110558
    },
    {
      "\n": -0.0038861658
    },
    {
      " sit": -0.0407014
    },
    {
      "('": -0.012736773
    },
    {
      "bed": -0.00019487782
    },
    {
      "')": -0.0013250668
    },
    {
      "\n": -0.12044119
    },
    {
      " #": -0.6300626
    },
    {
      " 5": -0.010465679
    },
    {
      ":": -0.0040870584
    },
    {
      " Stand": -0.4422281
    },
    {
      " up": -0.09771518
    },
    {
      "\n": -0.12453707
    },
    {
      " stand": -0.049035706
    },
    {
      "up": -0.0017232986
    },
    {
      "()": -0.006109368
    },
    {
      "<|endoftext|>": -0.3363467
    },
    {
      " #": -0.23024096
    },
    {
      " 6": -0.007935477
    },
    {
      ":": -0.0038347673
    },
    {
      " Done": -0.16976374
    },
    {
      "<|endoftext|>": -0.41742775
    },
    {
      "<|endoftext|>": -0.78482157
    },
    {
      "()": -0.21704823
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.766381025314331
[(" # 0: walk to home office\n walk('home_office')\n # 1: find computer\n walk('computer')\n find('computer')\n # 2: sit on chair and turn to computer\n find('chair')\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n turnto('computer')\n # 3: open computer and start working\n open('computer')\n assert('computer' is 'open')\n else: open('computer')\n pointat('computer')\n lookat('computer')\n # 4: Done", <OpenAIObject at 0x7ff4a0134f90> JSON: {
  "text_offset": [
    3352,
    3354,
    3356,
    3357,
    3362,
    3365,
    3370,
    3377,
    3378,
    3383,
    3385,
    3389,
    3390,
    3396,
    3398,
    3399,
    3401,
    3403,
    3404,
    3409,
    3418,
    3419,
    3424,
    3426,
    3434,
    3436,
    3437,
    3442,
    3444,
    3452,
    3454,
    3455,
    3457,
    3459,
    3460,
    3464,
    3467,
    3473,
    3477,
    3482,
    3485,
    3494,
    3495,
    3500,
    3502,
    3507,
    3509,
    3510,
    3517,
    3519,
    3524,
    3525,
    3528,
    3530,
    3535,
    3537,
    3538,
    3543,
    3544,
    3549,
    3551,
    3556,
    3558,
    3559,
    3563,
    3565,
    3570,
    3572,
    3573,
    3577,
    3579,
    3580,
    3582,
    3590,
    3592,
    3593,
    3595,
    3597,
    3598,
    3603,
    3612,
    3616,
    3622,
    3630,
    3631,
    3636,
    3638,
    3646,
    3648,
    3649,
    3656,
    3658,
    3666,
    3667,
    3670,
    3672,
    3676,
    3678,
    3679,
    3684,
    3685,
    3690,
    3692,
    3700,
    3702,
    3703,
    3709,
    3711,
    3713,
    3721,
    3723,
    3724,
    3729,
    3731,
    3733,
    3741,
    3743,
    3744,
    3746,
    3748,
    3749
  ],
  "token_logprobs": [
    -0.017003179,
    -0.007489445,
    -0.0017936364,
    -0.22206451,
    -0.24733733,
    -0.42481807,
    -0.0444063,
    -0.022562306,
    -0.0059119645,
    -0.0051144185,
    -0.0101581225,
    -0.046357293,
    -0.00087276584,
    -0.002788694,
    -0.008186763,
    -0.0031867311,
    -0.0034075824,
    -0.0007695058,
    -0.053409185,
    -0.36701164,
    -0.046907533,
    -1.0860213,
    -0.0019397625,
    -0.0033870682,
    -0.0020715753,
    -0.0042131087,
    -0.015517524,
    -0.0010430999,
    -0.00061895844,
    -0.0010405928,
    -0.004422868,
    -0.0052687586,
    -0.0051885894,
    -0.00073079305,
    -1.8627099,
    -0.7274077,
    -0.24861304,
    -3.2586992,
    -0.4326983,
    -0.5996951,
    -0.15777212,
    -0.022334572,
    -0.6223735,
    -0.0018498267,
    -0.0036472045,
    -0.00262816,
    -0.0053534308,
    -0.5144357,
    -0.0012296953,
    -0.0064162207,
    -0.0038005412,
    -0.0008663821,
    -0.002573599,
    -0.022244796,
    -0.00575291,
    -0.0036100538,
    -0.0021215677,
    -0.0018362708,
    -0.009234396,
    -0.0016548748,
    -0.001479899,
    -0.0033511838,
    -0.005482877,
    -0.031397376,
    -0.0013066843,
    -0.0015945159,
    -0.0031422467,
    -0.005530404,
    -0.064755686,
    -5.669991e-05,
    -0.00013490739,
    -0.00062552054,
    -0.009012561,
    -0.0017535109,
    -0.005663529,
    -0.31430683,
    -0.0076024085,
    -0.00093564694,
    -1.2388617,
    -0.8803736,
    -1.1331929,
    -1.4893693,
    -0.43412682,
    -0.02936756,
    -1.2090025,
    -0.003967009,
    -0.003857324,
    -0.0022863816,
    -0.033410344,
    -1.4608945,
    -0.0024947815,
    -0.348269,
    -0.030194268,
    -0.1407122,
    -0.016719608,
    -1.2450175,
    -0.016512588,
    -0.0063626533,
    -0.017058834,
    -0.007557126,
    -0.016305856,
    -0.0031238298,
    -0.0010273485,
    -0.0048134127,
    -0.015162181,
    -2.3957665,
    -0.005689126,
    -0.0011470452,
    -0.028414836,
    -0.0060857986,
    -0.064674094,
    -1.4388366,
    -0.0010658331,
    -0.00077642646,
    -0.0012150166,
    -0.0016619202,
    -0.09993913,
    -3.0102696,
    -0.010016028,
    -0.0016451447,
    -0.7815074
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " walk",
    "('",
    "computer",
    "')",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " chair",
    " and",
    " turn",
    " to",
    " computer",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " open",
    " computer",
    " and",
    " start",
    " working",
    "\n",
    " open",
    "('",
    "computer",
    "')",
    "\n",
    " assert",
    "('",
    "computer",
    "'",
    " is",
    " '",
    "open",
    "')",
    "\n",
    " else",
    ":",
    " open",
    "('",
    "computer",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.017003179
    },
    {
      " 0": -0.007489445
    },
    {
      ":": -0.0017936364
    },
    {
      " walk": -0.22206451
    },
    {
      " to": -0.24733733
    },
    {
      " home": -0.42481807
    },
    {
      " office": -0.0444063
    },
    {
      "\n": -0.022562306
    },
    {
      " walk": -0.0059119645
    },
    {
      "('": -0.0051144185
    },
    {
      "home": -0.0101581225
    },
    {
      "_": -0.046357293
    },
    {
      "office": -0.00087276584
    },
    {
      "')": -0.002788694
    },
    {
      "\n": -0.008186763
    },
    {
      " #": -0.0031867311
    },
    {
      " 1": -0.0034075824
    },
    {
      ":": -0.0007695058
    },
    {
      " find": -0.053409185
    },
    {
      " computer": -0.36701164
    },
    {
      "\n": -0.046907533
    },
    {
      " find": -0.44067454
    },
    {
      "('": -0.0019397625
    },
    {
      "computer": -0.0033870682
    },
    {
      "')": -0.0020715753
    },
    {
      "\n": -0.0042131087
    },
    {
      " find": -0.015517524
    },
    {
      "('": -0.0010430999
    },
    {
      "computer": -0.00061895844
    },
    {
      "')": -0.0010405928
    },
    {
      "\n": -0.004422868
    },
    {
      " #": -0.0052687586
    },
    {
      " 2": -0.0051885894
    },
    {
      ":": -0.00073079305
    },
    {
      " turn": -0.69595623
    },
    {
      " on": -0.7274077
    },
    {
      " chair": -0.24861304
    },
    {
      "\n": -0.10901635
    },
    {
      " turn": -0.4326983
    },
    {
      " to": -0.5996951
    },
    {
      " computer": -0.15777212
    },
    {
      "\n": -0.022334572
    },
    {
      " find": -0.6223735
    },
    {
      "('": -0.0018498267
    },
    {
      "chair": -0.0036472045
    },
    {
      "')": -0.00262816
    },
    {
      "\n": -0.0053534308
    },
    {
      " assert": -0.5144357
    },
    {
      "('": -0.0012296953
    },
    {
      "close": -0.0064162207
    },
    {
      "'": -0.0038005412
    },
    {
      " to": -0.0008663821
    },
    {
      " '": -0.002573599
    },
    {
      "chair": -0.022244796
    },
    {
      "')": -0.00575291
    },
    {
      "\n": -0.0036100538
    },
    {
      " else": -0.0021215677
    },
    {
      ":": -0.0018362708
    },
    {
      " find": -0.009234396
    },
    {
      "('": -0.0016548748
    },
    {
      "chair": -0.001479899
    },
    {
      "')": -0.0033511838
    },
    {
      "\n": -0.005482877
    },
    {
      " sit": -0.031397376
    },
    {
      "('": -0.0013066843
    },
    {
      "chair": -0.0015945159
    },
    {
      "')": -0.0031422467
    },
    {
      "\n": -0.005530404
    },
    {
      " tur": -0.064755686
    },
    {
      "nt": -5.669991e-05
    },
    {
      "o": -0.00013490739
    },
    {
      "('": -0.00062552054
    },
    {
      "computer": -0.009012561
    },
    {
      "')": -0.0017535109
    },
    {
      "\n": -0.005663529
    },
    {
      " #": -0.31430683
    },
    {
      " 3": -0.0076024085
    },
    {
      ":": -0.00093564694
    },
    {
      " turn": -0.9951663
    },
    {
      " computer": -0.8803736
    },
    {
      "\n": -0.50238806
    },
    {
      " turn": -1.1243591
    },
    {
      " working": -0.43412682
    },
    {
      "\n": -0.02936756
    },
    {
      " assert": -0.5354052
    },
    {
      "('": -0.003967009
    },
    {
      "computer": -0.003857324
    },
    {
      "')": -0.0022863816
    },
    {
      "\n": -0.033410344
    },
    {
      " assert": -1.4608945
    },
    {
      "('": -0.0024947815
    },
    {
      "computer": -0.348269
    },
    {
      "'": -0.030194268
    },
    {
      " is": -0.1407122
    },
    {
      " '": -0.016719608
    },
    {
      "switch": -1.1186423
    },
    {
      "')": -0.016512588
    },
    {
      "\n": -0.0063626533
    },
    {
      " else": -0.017058834
    },
    {
      ":": -0.007557126
    },
    {
      " open": -0.016305856
    },
    {
      "('": -0.0031238298
    },
    {
      "computer": -0.0010273485
    },
    {
      "')": -0.0048134127
    },
    {
      "\n": -0.015162181
    },
    {
      " look": -1.5563089
    },
    {
      "at": -0.005689126
    },
    {
      "('": -0.0011470452
    },
    {
      "computer": -0.028414836
    },
    {
      "')": -0.0060857986
    },
    {
      "\n": -0.064674094
    },
    {
      " watch": -0.9341673
    },
    {
      "at": -0.0010658331
    },
    {
      "('": -0.00077642646
    },
    {
      "computer": -0.0012150166
    },
    {
      "')": -0.0016619202
    },
    {
      "\n": -0.09993913
    },
    {
      " read": -1.9039464
    },
    {
      " 4": -0.010016028
    },
    {
      ":": -0.0016451447
    },
    {
      " Done": -0.7815074
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.989727020263672
[(" # 0: find newspaper\n find('newspaper')\n # 1: grab newspaper\n grab('newspaper')\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n # 2: turn to newspaper\n turnto('newspaper')\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n # 3: open newspaper\n open('newspaper')\n # 4: read newspaper\n read('newspaper')\n # 5: put newspaper back\n putback('newspaper')", <OpenAIObject at 0x7ff4a80ae400> JSON: {
  "text_offset": [
    3342,
    3344,
    3346,
    3347,
    3352,
    3362,
    3363,
    3368,
    3370,
    3373,
    3375,
    3379,
    3381,
    3382,
    3384,
    3386,
    3387,
    3392,
    3402,
    3403,
    3408,
    3410,
    3413,
    3415,
    3419,
    3421,
    3422,
    3429,
    3431,
    3434,
    3436,
    3440,
    3441,
    3444,
    3446,
    3451,
    3453,
    3454,
    3459,
    3460,
    3465,
    3467,
    3470,
    3472,
    3476,
    3478,
    3479,
    3481,
    3483,
    3484,
    3489,
    3492,
    3502,
    3503,
    3507,
    3509,
    3510,
    3512,
    3515,
    3517,
    3521,
    3523,
    3524,
    3531,
    3533,
    3536,
    3538,
    3542,
    3543,
    3546,
    3548,
    3553,
    3555,
    3556,
    3561,
    3562,
    3567,
    3569,
    3572,
    3574,
    3578,
    3580,
    3581,
    3583,
    3585,
    3586,
    3591,
    3601,
    3602,
    3607,
    3609,
    3612,
    3614,
    3618,
    3620,
    3621,
    3623,
    3625,
    3626,
    3631,
    3641,
    3642,
    3647,
    3649,
    3652,
    3654,
    3658,
    3660,
    3661,
    3663,
    3665,
    3666,
    3670,
    3680,
    3685,
    3686,
    3690,
    3694,
    3696,
    3699,
    3701,
    3705
  ],
  "token_logprobs": [
    -0.018002259,
    -0.009172857,
    -0.0020139983,
    -0.71720684,
    -0.31556657,
    -0.030793583,
    -0.038432892,
    -0.002360046,
    -0.0022872179,
    -0.00075023813,
    -0.0004311635,
    -0.0025915282,
    -0.0077233147,
    -0.005668865,
    -0.0027388472,
    -0.00048274704,
    -0.16249922,
    -0.15984572,
    -0.016107524,
    -0.79266,
    -0.0013797994,
    -0.0009170917,
    -0.00028484376,
    -0.00051160867,
    -0.0017301039,
    -0.004515193,
    -0.95440465,
    -0.0021326195,
    -0.19410272,
    -0.0016945206,
    -0.0016063362,
    -0.0032879713,
    -0.016764097,
    -0.0055405926,
    -0.009135082,
    -0.028950136,
    -0.0046965075,
    -0.019377775,
    -0.004656325,
    -0.011631847,
    -0.0016283673,
    -0.0010888067,
    -0.00095103995,
    -0.0010287808,
    -0.0041478667,
    -0.005324486,
    -0.6861164,
    -0.008124385,
    -0.0009092193,
    -3.261188,
    -0.07829969,
    -0.21238965,
    -0.036076356,
    -0.05630557,
    -7.005035e-05,
    -0.0003525167,
    -0.0006787223,
    -0.0010935796,
    -0.0005422031,
    -0.0005960573,
    -0.0014802567,
    -0.005259233,
    -1.1693376,
    -0.0010978768,
    -0.05022992,
    -0.00068993546,
    -0.0013485218,
    -0.0020559852,
    -0.0029876328,
    -0.0020336455,
    -0.0016419195,
    -0.0027860652,
    -0.0022593795,
    -0.0042111333,
    -0.0019362998,
    -0.0025840565,
    -0.0011160753,
    -0.0005661762,
    -0.0022080024,
    -0.0049217027,
    -0.0030558507,
    -0.0041405046,
    -0.42806727,
    -0.0066509238,
    -0.0011576689,
    -2.9065316,
    -0.2839888,
    -0.056089777,
    -0.044240505,
    -0.0019411958,
    -0.0006363141,
    -0.00022903908,
    -0.0001889155,
    -0.0017925624,
    -0.0048994203,
    -0.1482928,
    -0.0051544397,
    -0.0013133684,
    -0.08323598,
    -0.16781567,
    -0.00793584,
    -0.44128487,
    -0.0016498585,
    -0.001096206,
    -0.00047940828,
    -0.0003294419,
    -0.0015996492,
    -0.28769478,
    -0.058946136,
    -0.004374675,
    -0.0012762477,
    -1.1357211,
    -0.3140218,
    -0.14613764,
    -0.027600437,
    -0.24450569,
    -0.51590484,
    -0.0018761032,
    -0.0008688892,
    -0.0005299781,
    -0.00037457785,
    -0.0025751526
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " newspaper",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " to",
    " newspaper",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " open",
    " newspaper",
    "\n",
    " open",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " read",
    " newspaper",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " newspaper",
    " back",
    "\n",
    " put",
    "back",
    "('",
    "new",
    "sp",
    "aper",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018002259
    },
    {
      " 0": -0.009172857
    },
    {
      ":": -0.0020139983
    },
    {
      " find": -0.71720684
    },
    {
      " newspaper": -0.31556657
    },
    {
      "\n": -0.030793583
    },
    {
      " find": -0.038432892
    },
    {
      "('": -0.002360046
    },
    {
      "new": -0.0022872179
    },
    {
      "sp": -0.00075023813
    },
    {
      "aper": -0.0004311635
    },
    {
      "')": -0.0025915282
    },
    {
      "\n": -0.0077233147
    },
    {
      " #": -0.005668865
    },
    {
      " 1": -0.0027388472
    },
    {
      ":": -0.00048274704
    },
    {
      " grab": -0.16249922
    },
    {
      " newspaper": -0.15984572
    },
    {
      "\n": -0.016107524
    },
    {
      " assert": -0.6237881
    },
    {
      "('": -0.0013797994
    },
    {
      "new": -0.0009170917
    },
    {
      "sp": -0.00028484376
    },
    {
      "aper": -0.00051160867
    },
    {
      "')": -0.0017301039
    },
    {
      "\n": -0.004515193
    },
    {
      " #": -0.5551012
    },
    {
      "('": -0.0021326195
    },
    {
      "new": -0.19410272
    },
    {
      "sp": -0.0016945206
    },
    {
      "aper": -0.0016063362
    },
    {
      "'": -0.0032879713
    },
    {
      " in": -0.016764097
    },
    {
      " '": -0.0055405926
    },
    {
      "hands": -0.009135082
    },
    {
      "')": -0.028950136
    },
    {
      "\n": -0.0046965075
    },
    {
      " else": -0.019377775
    },
    {
      ":": -0.004656325
    },
    {
      " grab": -0.011631847
    },
    {
      "('": -0.0016283673
    },
    {
      "new": -0.0010888067
    },
    {
      "sp": -0.00095103995
    },
    {
      "aper": -0.0010287808
    },
    {
      "')": -0.0041478667
    },
    {
      "\n": -0.005324486
    },
    {
      " #": -0.6861164
    },
    {
      " 2": -0.008124385
    },
    {
      ":": -0.0009092193
    },
    {
      " find": -1.2749705
    },
    {
      " to": -0.07829969
    },
    {
      " newspaper": -0.21238965
    },
    {
      "\n": -0.036076356
    },
    {
      " tur": -0.05630557
    },
    {
      "nt": -7.005035e-05
    },
    {
      "o": -0.0003525167
    },
    {
      "('": -0.0006787223
    },
    {
      "new": -0.0010935796
    },
    {
      "sp": -0.0005422031
    },
    {
      "aper": -0.0005960573
    },
    {
      "')": -0.0014802567
    },
    {
      "\n": -0.005259233
    },
    {
      " #": -0.9072613
    },
    {
      "('": -0.0010978768
    },
    {
      "new": -0.05022992
    },
    {
      "sp": -0.00068993546
    },
    {
      "aper": -0.0013485218
    },
    {
      "'": -0.0020559852
    },
    {
      " in": -0.0029876328
    },
    {
      " '": -0.0020336455
    },
    {
      "hands": -0.0016419195
    },
    {
      "')": -0.0027860652
    },
    {
      "\n": -0.0022593795
    },
    {
      " else": -0.0042111333
    },
    {
      ":": -0.0019362998
    },
    {
      " grab": -0.0025840565
    },
    {
      "('": -0.0011160753
    },
    {
      "new": -0.0005661762
    },
    {
      "sp": -0.0022080024
    },
    {
      "aper": -0.0049217027
    },
    {
      "')": -0.0030558507
    },
    {
      "\n": -0.0041405046
    },
    {
      " #": -0.42806727
    },
    {
      " 3": -0.0066509238
    },
    {
      ":": -0.0011576689
    },
    {
      " read": -0.28294885
    },
    {
      " newspaper": -0.2839888
    },
    {
      "\n": -0.056089777
    },
    {
      " open": -0.044240505
    },
    {
      "('": -0.0019411958
    },
    {
      "new": -0.0006363141
    },
    {
      "sp": -0.00022903908
    },
    {
      "aper": -0.0001889155
    },
    {
      "')": -0.0017925624
    },
    {
      "\n": -0.0048994203
    },
    {
      " #": -0.1482928
    },
    {
      " 4": -0.0051544397
    },
    {
      ":": -0.0013133684
    },
    {
      " read": -0.08323598
    },
    {
      " newspaper": -0.16781567
    },
    {
      "\n": -0.00793584
    },
    {
      " read": -0.44128487
    },
    {
      "('": -0.0016498585
    },
    {
      "new": -0.001096206
    },
    {
      "sp": -0.00047940828
    },
    {
      "aper": -0.0003294419
    },
    {
      "')": -0.0015996492
    },
    {
      "\n": -0.28769478
    },
    {
      " #": -0.058946136
    },
    {
      " 5": -0.004374675
    },
    {
      ":": -0.0012762477
    },
    {
      " close": -0.6995287
    },
    {
      " newspaper": -0.3140218
    },
    {
      " back": -0.14613764
    },
    {
      "\n": -0.027600437
    },
    {
      " put": -0.24450569
    },
    {
      "back": -0.51590484
    },
    {
      "('": -0.0018761032
    },
    {
      "new": -0.0008688892
    },
    {
      "sp": -0.0005299781
    },
    {
      "aper": -0.00037457785
    },
    {
      "')": -0.0025751526
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.838747978210449
[(" # 0: walk to the bathroom\n walk('bathroom')\n # 1: find sink\n find('sink')\n # 2: turn on sink and grab soap\n turnto('sink')\n lookat('sink')\n assert('close' to 'sink')\n else: find('sink')\n switchon('sink')\n grab('soap')\n # 3: wash hands\n lookat('hands')\n assert('soap' in 'hands')\n else: grab('soap')\n wash('hands')\n # 4: turn off the sink\n switchoff('sink')\n # 5: Done", <OpenAIObject at 0x7ff4a80d25e0> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3362,
    3371,
    3372,
    3377,
    3379,
    3383,
    3387,
    3389,
    3390,
    3392,
    3394,
    3395,
    3400,
    3405,
    3406,
    3411,
    3413,
    3414,
    3417,
    3419,
    3420,
    3422,
    3424,
    3425,
    3430,
    3433,
    3438,
    3442,
    3447,
    3452,
    3453,
    3457,
    3459,
    3460,
    3462,
    3463,
    3466,
    3468,
    3469,
    3474,
    3476,
    3478,
    3479,
    3482,
    3484,
    3485,
    3492,
    3494,
    3499,
    3500,
    3503,
    3505,
    3506,
    3509,
    3511,
    3512,
    3517,
    3518,
    3523,
    3525,
    3526,
    3529,
    3531,
    3532,
    3539,
    3541,
    3543,
    3544,
    3547,
    3549,
    3550,
    3555,
    3557,
    3559,
    3561,
    3563,
    3564,
    3566,
    3568,
    3569,
    3574,
    3580,
    3581,
    3586,
    3588,
    3590,
    3595,
    3597,
    3598,
    3605,
    3607,
    3609,
    3611,
    3612,
    3615,
    3617,
    3622,
    3624,
    3625,
    3630,
    3631,
    3636,
    3638,
    3640,
    3642,
    3644,
    3645,
    3650,
    3652,
    3657,
    3659,
    3660,
    3662,
    3664,
    3665,
    3670,
    3674,
    3678,
    3683,
    3684,
    3691,
    3694,
    3696,
    3697,
    3700,
    3702,
    3703,
    3705,
    3707,
    3708
  ],
  "token_logprobs": [
    -0.022852723,
    -0.010886487,
    -0.0022823783,
    -0.9648093,
    -0.20404768,
    -1.7440448,
    -0.7295349,
    -0.025234267,
    -0.0074532344,
    -0.005227116,
    -0.0028467947,
    -0.00017460952,
    -0.002253942,
    -0.008284422,
    -0.00461926,
    -0.004121352,
    -0.00087085663,
    -0.124028385,
    -0.6360966,
    -0.03408998,
    -0.3078192,
    -0.0012393042,
    -0.00077606883,
    -0.00023321231,
    -0.0016877134,
    -0.006099772,
    -0.029941078,
    -0.00576202,
    -0.0011616655,
    -0.30327576,
    -0.16515636,
    -3.0130067,
    -3.951711,
    -3.0924344,
    -0.34862033,
    -0.026369741,
    -1.4311868,
    -0.00013061494,
    -0.00062969286,
    -0.0011016934,
    -0.0058542285,
    -0.00020716005,
    -0.0018120882,
    -0.0057325275,
    -0.835095,
    -0.00095915364,
    -0.00068790605,
    -0.0015866978,
    -0.0005352843,
    -0.0022145747,
    -0.0045342916,
    -0.40141708,
    -0.0012082733,
    -0.01315461,
    -0.0032955676,
    -0.00072447216,
    -0.0024044968,
    -0.015917223,
    -7.6252014e-05,
    -0.008053664,
    -0.004105133,
    -0.002036454,
    -0.0015975006,
    -0.009522893,
    -0.0014869418,
    -0.0005065991,
    -0.00012787033,
    -0.0024373606,
    -0.008396755,
    -0.40333867,
    -0.0012222949,
    -0.00079420075,
    -0.009283066,
    -0.00025646458,
    -0.0035939033,
    -0.0049909493,
    -0.66386586,
    -0.0015869362,
    -0.0008997314,
    -0.0001351458,
    -0.0014345942,
    -0.0052027893,
    -0.13382836,
    -0.0107339285,
    -0.0010471578,
    -0.6095828,
    -0.17737281,
    -0.21928838,
    -4.235831,
    -0.0016360688,
    -0.0006373879,
    -0.8289905,
    -0.002272223,
    -0.005921079,
    -1.2828132,
    -0.0014456364,
    -0.29153186,
    -0.00012500932,
    -0.0025603932,
    -0.017395813,
    -0.0052021896,
    -0.009738824,
    -0.011325195,
    -0.0042186156,
    -0.0025532828,
    -0.0031613815,
    -0.0075610303,
    -0.0018099379,
    -0.00048107814,
    -4.2033495e-05,
    -0.0043001436,
    -0.0053096265,
    -0.06521225,
    -0.0016481897,
    -0.061935227,
    -0.00916624,
    -0.008978398,
    -0.28604797,
    -0.007532864,
    -0.0016681894,
    -0.41306475,
    -0.019101791,
    -1.9428705,
    -0.037636407,
    -0.19555818,
    -0.4656175,
    -0.0035440752,
    -0.000802015,
    -0.00086698,
    -6.396884e-05,
    -0.0027042413,
    -0.15608287,
    -0.022774423,
    -0.0045881793,
    -0.0021814818,
    -0.55653113
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " the",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " sink",
    " and",
    " grab",
    " soap",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wash",
    " hands",
    "\n",
    " look",
    "at",
    "('",
    "hands",
    "')",
    "\n",
    " assert",
    "('",
    "so",
    "ap",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " wash",
    "('",
    "hands",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " off",
    " the",
    " sink",
    "\n",
    " switch",
    "off",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.022852723
    },
    {
      " 0": -0.010886487
    },
    {
      ":": -0.0022823783
    },
    {
      " find": -0.8255595
    },
    {
      " to": -0.20404768
    },
    {
      " bathroom": -0.56852204
    },
    {
      " bathroom": -0.7295349
    },
    {
      "\n": -0.025234267
    },
    {
      " walk": -0.0074532344
    },
    {
      "('": -0.005227116
    },
    {
      "bath": -0.0028467947
    },
    {
      "room": -0.00017460952
    },
    {
      "')": -0.002253942
    },
    {
      "\n": -0.008284422
    },
    {
      " #": -0.00461926
    },
    {
      " 1": -0.004121352
    },
    {
      ":": -0.00087085663
    },
    {
      " find": -0.124028385
    },
    {
      " sink": -0.6360966
    },
    {
      "\n": -0.03408998
    },
    {
      " find": -0.3078192
    },
    {
      "('": -0.0012393042
    },
    {
      "s": -0.00077606883
    },
    {
      "ink": -0.00023321231
    },
    {
      "')": -0.0016877134
    },
    {
      "\n": -0.006099772
    },
    {
      " #": -0.029941078
    },
    {
      " 2": -0.00576202
    },
    {
      ":": -0.0011616655
    },
    {
      " turn": -0.30327576
    },
    {
      " on": -0.16515636
    },
    {
      " the": -0.56056285
    },
    {
      "\n": -0.15232207
    },
    {
      " wash": -1.9676783
    },
    {
      " soap": -0.34862033
    },
    {
      "\n": -0.026369741
    },
    {
      " switch": -1.3473121
    },
    {
      "nt": -0.00013061494
    },
    {
      "o": -0.00062969286
    },
    {
      "('": -0.0011016934
    },
    {
      "s": -0.0058542285
    },
    {
      "ink": -0.00020716005
    },
    {
      "')": -0.0018120882
    },
    {
      "\n": -0.0057325275
    },
    {
      " look": -0.835095
    },
    {
      "at": -0.00095915364
    },
    {
      "('": -0.00068790605
    },
    {
      "s": -0.0015866978
    },
    {
      "ink": -0.0005352843
    },
    {
      "')": -0.0022145747
    },
    {
      "\n": -0.0045342916
    },
    {
      " assert": -0.40141708
    },
    {
      "('": -0.0012082733
    },
    {
      "close": -0.01315461
    },
    {
      "'": -0.0032955676
    },
    {
      " to": -0.00072447216
    },
    {
      " '": -0.0024044968
    },
    {
      "s": -0.015917223
    },
    {
      "ink": -7.6252014e-05
    },
    {
      "')": -0.008053664
    },
    {
      "\n": -0.004105133
    },
    {
      " else": -0.002036454
    },
    {
      ":": -0.0015975006
    },
    {
      " find": -0.009522893
    },
    {
      "('": -0.0014869418
    },
    {
      "s": -0.0005065991
    },
    {
      "ink": -0.00012787033
    },
    {
      "')": -0.0024373606
    },
    {
      "\n": -0.008396755
    },
    {
      " switch": -0.40333867
    },
    {
      "on": -0.0012222949
    },
    {
      "('": -0.00079420075
    },
    {
      "s": -0.009283066
    },
    {
      "ink": -0.00025646458
    },
    {
      "')": -0.0035939033
    },
    {
      "\n": -0.0049909493
    },
    {
      " grab": -0.66386586
    },
    {
      "('": -0.0015869362
    },
    {
      "so": -0.0008997314
    },
    {
      "ap": -0.0001351458
    },
    {
      "')": -0.0014345942
    },
    {
      "\n": -0.0052027893
    },
    {
      " #": -0.13382836
    },
    {
      " 3": -0.0107339285
    },
    {
      ":": -0.0010471578
    },
    {
      " wash": -0.6095828
    },
    {
      " hands": -0.17737281
    },
    {
      "\n": -0.21928838
    },
    {
      " assert": -0.7514873
    },
    {
      "at": -0.0016360688
    },
    {
      "('": -0.0006373879
    },
    {
      "hands": -0.8289905
    },
    {
      "')": -0.002272223
    },
    {
      "\n": -0.005921079
    },
    {
      " wash": -0.60237694
    },
    {
      "('": -0.0014456364
    },
    {
      "so": -0.29153186
    },
    {
      "ap": -0.00012500932
    },
    {
      "'": -0.0025603932
    },
    {
      " in": -0.017395813
    },
    {
      " '": -0.0052021896
    },
    {
      "hands": -0.009738824
    },
    {
      "')": -0.011325195
    },
    {
      "\n": -0.0042186156
    },
    {
      " else": -0.0025532828
    },
    {
      ":": -0.0031613815
    },
    {
      " grab": -0.0075610303
    },
    {
      "('": -0.0018099379
    },
    {
      "so": -0.00048107814
    },
    {
      "ap": -4.2033495e-05
    },
    {
      "')": -0.0043001436
    },
    {
      "\n": -0.0053096265
    },
    {
      " wash": -0.06521225
    },
    {
      "('": -0.0016481897
    },
    {
      "hands": -0.061935227
    },
    {
      "')": -0.00916624
    },
    {
      "\n": -0.008978398
    },
    {
      " #": -0.28604797
    },
    {
      " 4": -0.007532864
    },
    {
      ":": -0.0016681894
    },
    {
      " turn": -0.41306475
    },
    {
      " off": -0.019101791
    },
    {
      " sink": -0.19085637
    },
    {
      " sink": -0.037636407
    },
    {
      "\n": -0.19555818
    },
    {
      " switch": -0.4656175
    },
    {
      "off": -0.0035440752
    },
    {
      "('": -0.000802015
    },
    {
      "s": -0.00086698
    },
    {
      "ink": -6.396884e-05
    },
    {
      "')": -0.0027042413
    },
    {
      "\n": -0.15608287
    },
    {
      " #": -0.022774423
    },
    {
      " 5": -0.0045881793
    },
    {
      ":": -0.0021814818
    },
    {
      " Done": -0.55653113
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.8542721271514893
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find mop\n find('mop')\n # 2: grab mop\n grab('mop')\n # 3: mop the bathroom floor\n assert('mop' in 'hands')\n else: grab('mop')\n mop('bathroom_floor')\n # 4: put mop back\n assert('mop' in 'hands')\n else: grab('mop')\n putback('mop')\n # 5: Done", <OpenAIObject at 0x7ff4a80f6db0> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3360,
    3369,
    3370,
    3375,
    3377,
    3381,
    3385,
    3387,
    3388,
    3390,
    3392,
    3393,
    3398,
    3400,
    3402,
    3403,
    3408,
    3410,
    3413,
    3415,
    3416,
    3418,
    3420,
    3421,
    3426,
    3428,
    3430,
    3431,
    3436,
    3438,
    3441,
    3443,
    3444,
    3446,
    3448,
    3449,
    3451,
    3453,
    3457,
    3466,
    3472,
    3473,
    3480,
    3482,
    3485,
    3486,
    3489,
    3491,
    3496,
    3498,
    3499,
    3504,
    3505,
    3510,
    3512,
    3515,
    3517,
    3518,
    3520,
    3522,
    3524,
    3528,
    3532,
    3533,
    3538,
    3540,
    3541,
    3543,
    3545,
    3546,
    3550,
    3552,
    3554,
    3559,
    3560,
    3567,
    3569,
    3572,
    3573,
    3576,
    3578,
    3583,
    3585,
    3586,
    3591,
    3592,
    3597,
    3599,
    3602,
    3604,
    3605,
    3609,
    3613,
    3615,
    3618,
    3620,
    3621,
    3623,
    3625,
    3626
  ],
  "token_logprobs": [
    -0.017148511,
    -0.007014722,
    -0.0023831094,
    -0.119415656,
    -0.39628577,
    -0.15380897,
    -0.022737471,
    -0.004707769,
    -0.0046453695,
    -0.0018399127,
    -0.00014933258,
    -0.0020269565,
    -0.007625473,
    -0.0027148197,
    -0.0028392037,
    -0.0006832541,
    -0.13101996,
    -0.74042475,
    -0.00015791749,
    -1.26584,
    -0.136007,
    -0.0010636855,
    -0.001245273,
    -0.07623829,
    -0.006079143,
    -0.025097473,
    -0.004712796,
    -0.0009837922,
    -0.09404327,
    -0.13202687,
    -0.00011428335,
    -0.03735812,
    -0.6290529,
    -0.0010985939,
    -0.0003686146,
    -0.0019803122,
    -0.00459375,
    -0.32999173,
    -0.006864732,
    -0.00065814523,
    -1.9345757,
    -0.00032026,
    -0.36053634,
    -1.7767372,
    -1.033347,
    -0.017327886,
    -0.82099885,
    -0.0019926762,
    -0.93583804,
    -0.0048668995,
    -0.020398943,
    -0.005356248,
    -0.013064388,
    -0.020134354,
    -0.004508067,
    -0.0037213278,
    -0.0032050305,
    -0.01915234,
    -0.0019574964,
    -0.0007599616,
    -0.003940795,
    -0.0045405785,
    -0.22387119,
    -0.00036026907,
    -0.02305319,
    -0.508544,
    -0.0011770613,
    -0.5010028,
    -0.0025859685,
    -0.0025597962,
    -0.006978889,
    -0.19447732,
    -0.0082585765,
    -0.0014495769,
    -1.0737876,
    -0.2640215,
    -2.4866502e-05,
    -0.10629808,
    -0.034556262,
    -0.58228594,
    -0.0012066026,
    -0.008991629,
    -0.0013869624,
    -0.0031518145,
    -0.0025352957,
    -0.0016037088,
    -0.0028389646,
    -0.0022361993,
    -0.002339312,
    -0.0014801384,
    -0.003940079,
    -0.001050857,
    -0.00041518486,
    -0.0015633535,
    -0.004615007,
    -0.009917238,
    -1.2846912,
    -0.004193056,
    -0.0014788234,
    -0.010608077,
    -0.3349516,
    -0.019006109,
    -0.0057324073,
    -0.001869653,
    -0.6110036
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " m",
    "op",
    "\n",
    " find",
    "('",
    "mop",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " m",
    "op",
    "\n",
    " grab",
    "('",
    "mop",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " m",
    "op",
    " the",
    " bathroom",
    " floor",
    "\n",
    " assert",
    "('",
    "mop",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "')",
    "\n",
    " m",
    "op",
    "('",
    "bath",
    "room",
    "_",
    "floor",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " m",
    "op",
    " back",
    "\n",
    " assert",
    "('",
    "mop",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "')",
    "\n",
    " put",
    "back",
    "('",
    "mop",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.017148511
    },
    {
      " 0": -0.007014722
    },
    {
      ":": -0.0023831094
    },
    {
      " walk": -0.119415656
    },
    {
      " to": -0.39628577
    },
    {
      " bathroom": -0.15380897
    },
    {
      "\n": -0.022737471
    },
    {
      " walk": -0.004707769
    },
    {
      "('": -0.0046453695
    },
    {
      "bath": -0.0018399127
    },
    {
      "room": -0.00014933258
    },
    {
      "')": -0.0020269565
    },
    {
      "\n": -0.007625473
    },
    {
      " #": -0.0027148197
    },
    {
      " 1": -0.0028392037
    },
    {
      ":": -0.0006832541
    },
    {
      " find": -0.13101996
    },
    {
      " m": -0.74042475
    },
    {
      "op": -0.00015791749
    },
    {
      " bucket": -0.6555867
    },
    {
      " find": -0.136007
    },
    {
      "('": -0.0010636855
    },
    {
      "mop": -0.001245273
    },
    {
      "')": -0.07623829
    },
    {
      "\n": -0.006079143
    },
    {
      " #": -0.025097473
    },
    {
      " 2": -0.004712796
    },
    {
      ":": -0.0009837922
    },
    {
      " grab": -0.09404327
    },
    {
      " m": -0.13202687
    },
    {
      "op": -0.00011428335
    },
    {
      "\n": -0.03735812
    },
    {
      " grab": -0.6290529
    },
    {
      "('": -0.0010985939
    },
    {
      "mop": -0.0003686146
    },
    {
      "')": -0.0019803122
    },
    {
      "\n": -0.00459375
    },
    {
      " #": -0.32999173
    },
    {
      " 3": -0.006864732
    },
    {
      ":": -0.00065814523
    },
    {
      " find": -1.4185271
    },
    {
      "op": -0.00032026
    },
    {
      " the": -0.36053634
    },
    {
      " floor": -0.21616738
    },
    {
      "\n": -0.4730442
    },
    {
      "\n": -0.017327886
    },
    {
      " assert": -0.82099885
    },
    {
      "('": -0.0019926762
    },
    {
      "close": -0.510507
    },
    {
      "'": -0.0048668995
    },
    {
      " in": -0.020398943
    },
    {
      " '": -0.005356248
    },
    {
      "hands": -0.013064388
    },
    {
      "')": -0.020134354
    },
    {
      "\n": -0.004508067
    },
    {
      " else": -0.0037213278
    },
    {
      ":": -0.0032050305
    },
    {
      " grab": -0.01915234
    },
    {
      "('": -0.0019574964
    },
    {
      "mop": -0.0007599616
    },
    {
      "')": -0.003940795
    },
    {
      "\n": -0.0045405785
    },
    {
      " m": -0.22387119
    },
    {
      "op": -0.00036026907
    },
    {
      "('": -0.02305319
    },
    {
      "bath": -0.508544
    },
    {
      "room": -0.0011770613
    },
    {
      "_": -0.5010028
    },
    {
      "floor": -0.0025859685
    },
    {
      "')": -0.0025597962
    },
    {
      "\n": -0.006978889
    },
    {
      " #": -0.19447732
    },
    {
      " 4": -0.0082585765
    },
    {
      ":": -0.0014495769
    },
    {
      " find": -0.9921263
    },
    {
      " m": -0.2640215
    },
    {
      "op": -2.4866502e-05
    },
    {
      " back": -0.10629808
    },
    {
      "\n": -0.034556262
    },
    {
      " assert": -0.58228594
    },
    {
      "('": -0.0012066026
    },
    {
      "mop": -0.008991629
    },
    {
      "'": -0.0013869624
    },
    {
      " in": -0.0031518145
    },
    {
      " '": -0.0025352957
    },
    {
      "hands": -0.0016037088
    },
    {
      "')": -0.0028389646
    },
    {
      "\n": -0.0022361993
    },
    {
      " else": -0.002339312
    },
    {
      ":": -0.0014801384
    },
    {
      " grab": -0.003940079
    },
    {
      "('": -0.001050857
    },
    {
      "mop": -0.00041518486
    },
    {
      "')": -0.0015633535
    },
    {
      "\n": -0.004615007
    },
    {
      " put": -0.009917238
    },
    {
      "obj": -0.34519234
    },
    {
      "('": -0.004193056
    },
    {
      "mop": -0.0014788234
    },
    {
      "')": -0.010608077
    },
    {
      "\n": -0.3349516
    },
    {
      " #": -0.019006109
    },
    {
      " 5": -0.0057324073
    },
    {
      ":": -0.001869653
    },
    {
      " Done": -0.6110036
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 7.319692134857178
[(" # 0: find phone\n find('phone')\n # 1: grab phone\n assert('close' to 'phone')\n else: find('phone')\n grab('phone')\n assert('phone' in 'hands')\n else: grab('phone')\n # 2: Done\ndef wash_dishes():\n # 0: find dishwasher\n find('dishwasher')\n # 1: open dishwasher\n assert('close' to 'dishwasher')\n else: find('dishwasher')\n open('dishwasher')\n # 2: put dishes in dishwasher\n find('dishes')\n assert('close' to 'dishes')\n else: find('dishes')\n putin('dishes', 'dishwasher')\n # 3: close dishwasher\n close('dishwasher')\n # 4: turn on dishwasher\n switchon('dishwasher')\n # 5: Done", <OpenAIObject at 0x7ff4a812f3b0> JSON: {
  "text_offset": [
    3346,
    3348,
    3350,
    3351,
    3356,
    3362,
    3363,
    3368,
    3370,
    3375,
    3377,
    3378,
    3380,
    3382,
    3383,
    3388,
    3394,
    3395,
    3402,
    3404,
    3409,
    3410,
    3413,
    3415,
    3420,
    3422,
    3423,
    3428,
    3429,
    3434,
    3436,
    3441,
    3443,
    3444,
    3449,
    3451,
    3456,
    3458,
    3459,
    3466,
    3468,
    3473,
    3474,
    3477,
    3479,
    3484,
    3486,
    3487,
    3492,
    3493,
    3498,
    3500,
    3505,
    3507,
    3508,
    3510,
    3512,
    3513,
    3518,
    3519,
    3522,
    3527,
    3528,
    3529,
    3534,
    3537,
    3538,
    3540,
    3542,
    3543,
    3548,
    3553,
    3559,
    3560,
    3565,
    3567,
    3568,
    3571,
    3577,
    3579,
    3580,
    3582,
    3584,
    3585,
    3590,
    3595,
    3601,
    3602,
    3609,
    3611,
    3616,
    3617,
    3620,
    3622,
    3623,
    3626,
    3632,
    3634,
    3635,
    3640,
    3641,
    3646,
    3648,
    3649,
    3652,
    3658,
    3660,
    3661,
    3666,
    3668,
    3669,
    3672,
    3678,
    3680,
    3681,
    3683,
    3685,
    3686,
    3690,
    3697,
    3700,
    3705,
    3711,
    3712,
    3717,
    3719,
    3720,
    3725,
    3727,
    3728,
    3735,
    3737,
    3742,
    3743,
    3746,
    3748,
    3749,
    3754,
    3756,
    3757,
    3762,
    3763,
    3768,
    3770,
    3771,
    3776,
    3778,
    3779,
    3783,
    3785,
    3787,
    3788,
    3793,
    3795,
    3797,
    3798,
    3801,
    3807,
    3809,
    3810,
    3812,
    3814,
    3815,
    3821,
    3826,
    3832,
    3833,
    3839,
    3841,
    3842,
    3845,
    3851,
    3853,
    3854,
    3856,
    3858,
    3859,
    3864,
    3867,
    3872,
    3878,
    3879,
    3886,
    3888,
    3890,
    3891,
    3894,
    3900,
    3902,
    3903,
    3905,
    3907,
    3908
  ],
  "token_logprobs": [
    -0.018998513,
    -0.0088806115,
    -0.0018749083,
    -0.7456643,
    -0.19451691,
    -0.037054867,
    -0.041671827,
    -0.0022683397,
    -0.00099489,
    -0.002836573,
    -0.0093083335,
    -0.0045075887,
    -0.0026707135,
    -0.0010627309,
    -0.18033597,
    -0.108832985,
    -0.017287133,
    -0.48224282,
    -0.0017256874,
    -0.0047551394,
    -0.0026631227,
    -0.0011561172,
    -0.0023521595,
    -0.00050779217,
    -0.0051707975,
    -0.0057701147,
    -0.0016235905,
    -0.001444204,
    -0.003213341,
    -0.0015681294,
    -0.00036897225,
    -0.002876383,
    -0.0067993193,
    -0.0065137674,
    -0.0008736013,
    -0.000151361,
    -0.002203999,
    -0.009863481,
    -0.6115018,
    -0.0013282921,
    -0.006025234,
    -0.0019608408,
    -0.024107656,
    -0.0038449394,
    -0.00948667,
    -0.01659949,
    -0.0033359935,
    -0.009411335,
    -0.0028769807,
    -0.002562187,
    -0.0014481444,
    -0.00031787396,
    -0.0029755589,
    -0.109809704,
    -1.5312295,
    -0.011798354,
    -0.0015191787,
    -1.0026246,
    -0.33133695,
    -1.3274648,
    -2.6280236,
    -0.00027673383,
    -0.5322988,
    -0.0078685535,
    -0.040985152,
    -0.0176635,
    -0.004455858,
    -0.0053841136,
    -0.0015637131,
    -0.43225455,
    -1.8510427,
    -0.47864127,
    -0.030580742,
    -0.039632156,
    -0.0015561897,
    -0.00047600848,
    -6.09933e-05,
    -0.0011935929,
    -0.0013497758,
    -0.00940917,
    -0.005428339,
    -0.0031714847,
    -0.00030451978,
    -0.54329515,
    -0.133443,
    -0.024246696,
    -0.027817365,
    -0.5746103,
    -0.0015551159,
    -0.015602825,
    -0.002522208,
    -0.0004442849,
    -0.0039063315,
    -0.0005400564,
    -0.0001173809,
    -0.00052568375,
    -0.0052239415,
    -0.0048205396,
    -0.0012308902,
    -0.0014428918,
    -0.002861679,
    -0.0016134427,
    -0.00022194568,
    -0.00023333247,
    -0.00030809414,
    -0.002414834,
    -0.006912808,
    -0.020557305,
    -0.0012865708,
    -0.00019499795,
    -0.00010307304,
    -0.0005860381,
    -0.0014535155,
    -0.0075661954,
    -0.11402968,
    -0.0059221596,
    -0.0007605586,
    -1.0163993,
    -0.20715514,
    -0.17465967,
    -0.2265192,
    -0.015696244,
    -0.014225365,
    -0.8879141,
    -0.003488386,
    -0.020901307,
    -0.05907171,
    -0.0017061626,
    -0.004221547,
    -0.58235943,
    -0.0011556394,
    -0.1022638,
    -0.0018365101,
    -0.00033087333,
    -0.0041970075,
    -0.0003754123,
    -0.07423995,
    -0.0039162007,
    -0.0019027357,
    -0.0012817987,
    -0.0008700231,
    -0.0040266127,
    -0.0010346277,
    -0.00035132372,
    -0.0011457329,
    -0.00098248,
    -0.0047559775,
    -0.9463112,
    -0.050797924,
    -0.0027128467,
    -0.00034846272,
    -0.103510566,
    -0.23674592,
    -0.008351372,
    -0.0003707613,
    -0.00021383668,
    -0.001012133,
    -0.0018928845,
    -0.009330652,
    -0.03362564,
    -0.0073347627,
    -0.0010947746,
    -0.17083931,
    -0.069691494,
    -0.005059423,
    -0.027812278,
    -0.12134798,
    -0.0008042809,
    -7.946878e-05,
    -0.0014765556,
    -0.0012107797,
    -0.0010636855,
    -0.0054169507,
    -0.0058710766,
    -0.003986517,
    -0.0014236111,
    -0.9322205,
    -0.039791733,
    -0.042724185,
    -0.009774517,
    -0.010056486,
    -0.18192609,
    -0.0007576347,
    -0.0004934796,
    -0.0001191709,
    -0.00020406157,
    -0.00044977036,
    -0.0011997992,
    -0.004669381,
    -0.0043919175,
    -0.0028432675,
    -0.0016206064,
    -0.92131126
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " phone",
    "\n",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " phone",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " assert",
    "('",
    "phone",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " Done",
    "\n",
    "def",
    " wash",
    "_",
    "d",
    "ishes",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " find",
    " dish",
    "washer",
    "\n",
    " find",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " open",
    " dish",
    "washer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " open",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " dishes",
    " in",
    " dish",
    "washer",
    "\n",
    " find",
    "('",
    "d",
    "ishes",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "d",
    "ishes",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "d",
    "ishes",
    "')",
    "\n",
    " put",
    "in",
    "('",
    "d",
    "ishes",
    "',",
    " '",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " close",
    " dish",
    "washer",
    "\n",
    " close",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " on",
    " dish",
    "washer",
    "\n",
    " switch",
    "on",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.018998513
    },
    {
      " 0": -0.0088806115
    },
    {
      ":": -0.0018749083
    },
    {
      " find": -0.7456643
    },
    {
      " phone": -0.19451691
    },
    {
      "\n": -0.037054867
    },
    {
      " find": -0.041671827
    },
    {
      "('": -0.0022683397
    },
    {
      "phone": -0.00099489
    },
    {
      "')": -0.002836573
    },
    {
      "\n": -0.0093083335
    },
    {
      " #": -0.0045075887
    },
    {
      " 1": -0.0026707135
    },
    {
      ":": -0.0010627309
    },
    {
      " grab": -0.18033597
    },
    {
      " phone": -0.108832985
    },
    {
      "\n": -0.017287133
    },
    {
      " assert": -0.48224282
    },
    {
      "('": -0.0017256874
    },
    {
      "close": -0.0047551394
    },
    {
      "'": -0.0026631227
    },
    {
      " to": -0.0011561172
    },
    {
      " '": -0.0023521595
    },
    {
      "phone": -0.00050779217
    },
    {
      "')": -0.0051707975
    },
    {
      "\n": -0.0057701147
    },
    {
      " else": -0.0016235905
    },
    {
      ":": -0.001444204
    },
    {
      " find": -0.003213341
    },
    {
      "('": -0.0015681294
    },
    {
      "phone": -0.00036897225
    },
    {
      "')": -0.002876383
    },
    {
      "\n": -0.0067993193
    },
    {
      " grab": -0.0065137674
    },
    {
      "('": -0.0008736013
    },
    {
      "phone": -0.000151361
    },
    {
      "')": -0.002203999
    },
    {
      "\n": -0.009863481
    },
    {
      " assert": -0.6115018
    },
    {
      "('": -0.0013282921
    },
    {
      "phone": -0.006025234
    },
    {
      "'": -0.0019608408
    },
    {
      " in": -0.024107656
    },
    {
      " '": -0.0038449394
    },
    {
      "hands": -0.00948667
    },
    {
      "')": -0.01659949
    },
    {
      "\n": -0.0033359935
    },
    {
      " else": -0.009411335
    },
    {
      ":": -0.0028769807
    },
    {
      " grab": -0.002562187
    },
    {
      "('": -0.0014481444
    },
    {
      "phone": -0.00031787396
    },
    {
      "')": -0.0029755589
    },
    {
      "\n": -0.109809704
    },
    {
      " tur": -0.326614
    },
    {
      " 2": -0.011798354
    },
    {
      ":": -0.0015191787
    },
    {
      " Done": -1.0026246
    },
    {
      "\n": -0.33133695
    },
    {
      "<|endoftext|>": -0.7561719
    },
    {
      " make": -1.4399114
    },
    {
      "_": -0.00027673383
    },
    {
      "d": -0.5322988
    },
    {
      "ishes": -0.0078685535
    },
    {
      "():": -0.040985152
    },
    {
      "\n": -0.0176635
    },
    {
      " #": -0.004455858
    },
    {
      " 0": -0.0053841136
    },
    {
      ":": -0.0015637131
    },
    {
      " find": -0.43225455
    },
    {
      " sink": -0.5056964
    },
    {
      "washer": -0.47864127
    },
    {
      "\n": -0.030580742
    },
    {
      " find": -0.039632156
    },
    {
      "('": -0.0015561897
    },
    {
      "d": -0.00047600848
    },
    {
      "ish": -6.09933e-05
    },
    {
      "washer": -0.0011935929
    },
    {
      "')": -0.0013497758
    },
    {
      "\n": -0.00940917
    },
    {
      " #": -0.005428339
    },
    {
      " 1": -0.0031714847
    },
    {
      ":": -0.00030451978
    },
    {
      " open": -0.54329515
    },
    {
      " dish": -0.133443
    },
    {
      "washer": -0.024246696
    },
    {
      "\n": -0.027817365
    },
    {
      " assert": -0.5746103
    },
    {
      "('": -0.0015551159
    },
    {
      "close": -0.015602825
    },
    {
      "'": -0.002522208
    },
    {
      " to": -0.0004442849
    },
    {
      " '": -0.0039063315
    },
    {
      "d": -0.0005400564
    },
    {
      "ish": -0.0001173809
    },
    {
      "washer": -0.00052568375
    },
    {
      "')": -0.0052239415
    },
    {
      "\n": -0.0048205396
    },
    {
      " else": -0.0012308902
    },
    {
      ":": -0.0014428918
    },
    {
      " find": -0.002861679
    },
    {
      "('": -0.0016134427
    },
    {
      "d": -0.00022194568
    },
    {
      "ish": -0.00023333247
    },
    {
      "washer": -0.00030809414
    },
    {
      "')": -0.002414834
    },
    {
      "\n": -0.006912808
    },
    {
      " open": -0.020557305
    },
    {
      "('": -0.0012865708
    },
    {
      "d": -0.00019499795
    },
    {
      "ish": -0.00010307304
    },
    {
      "washer": -0.0005860381
    },
    {
      "')": -0.0014535155
    },
    {
      "\n": -0.0075661954
    },
    {
      " #": -0.11402968
    },
    {
      " 2": -0.0059221596
    },
    {
      ":": -0.0007605586
    },
    {
      " put": -1.0163993
    },
    {
      " dishes": -0.20715514
    },
    {
      " in": -0.17465967
    },
    {
      " dish": -0.2265192
    },
    {
      "washer": -0.015696244
    },
    {
      "\n": -0.014225365
    },
    {
      " find": -0.8879141
    },
    {
      "('": -0.003488386
    },
    {
      "d": -0.020901307
    },
    {
      "ishes": -0.05907171
    },
    {
      "')": -0.0017061626
    },
    {
      "\n": -0.004221547
    },
    {
      " assert": -0.58235943
    },
    {
      "('": -0.0011556394
    },
    {
      "close": -0.1022638
    },
    {
      "'": -0.0018365101
    },
    {
      " to": -0.00033087333
    },
    {
      " '": -0.0041970075
    },
    {
      "d": -0.0003754123
    },
    {
      "ishes": -0.07423995
    },
    {
      "')": -0.0039162007
    },
    {
      "\n": -0.0019027357
    },
    {
      " else": -0.0012817987
    },
    {
      ":": -0.0008700231
    },
    {
      " find": -0.0040266127
    },
    {
      "('": -0.0010346277
    },
    {
      "d": -0.00035132372
    },
    {
      "ishes": -0.0011457329
    },
    {
      "')": -0.00098248
    },
    {
      "\n": -0.0047559775
    },
    {
      " grab": -0.6151746
    },
    {
      "in": -0.050797924
    },
    {
      "('": -0.0027128467
    },
    {
      "d": -0.00034846272
    },
    {
      "ishes": -0.103510566
    },
    {
      "',": -0.23674592
    },
    {
      " '": -0.008351372
    },
    {
      "d": -0.0003707613
    },
    {
      "ish": -0.00021383668
    },
    {
      "washer": -0.001012133
    },
    {
      "')": -0.0018928845
    },
    {
      "\n": -0.009330652
    },
    {
      " #": -0.03362564
    },
    {
      " 3": -0.0073347627
    },
    {
      ":": -0.0010947746
    },
    {
      " close": -0.17083931
    },
    {
      " dish": -0.069691494
    },
    {
      "washer": -0.005059423
    },
    {
      "\n": -0.027812278
    },
    {
      " close": -0.12134798
    },
    {
      "('": -0.0008042809
    },
    {
      "d": -7.946878e-05
    },
    {
      "ish": -0.0014765556
    },
    {
      "washer": -0.0012107797
    },
    {
      "')": -0.0010636855
    },
    {
      "\n": -0.0054169507
    },
    {
      " #": -0.0058710766
    },
    {
      " 4": -0.003986517
    },
    {
      ":": -0.0014236111
    },
    {
      " turn": -0.9322205
    },
    {
      " on": -0.039791733
    },
    {
      " dish": -0.042724185
    },
    {
      "washer": -0.009774517
    },
    {
      "\n": -0.010056486
    },
    {
      " switch": -0.18192609
    },
    {
      "on": -0.0007576347
    },
    {
      "('": -0.0004934796
    },
    {
      "d": -0.0001191709
    },
    {
      "ish": -0.00020406157
    },
    {
      "washer": -0.00044977036
    },
    {
      "')": -0.0011997992
    },
    {
      "\n": -0.004669381
    },
    {
      " #": -0.0043919175
    },
    {
      " 5": -0.0028432675
    },
    {
      ":": -0.0016206064
    },
    {
      " wait": -0.7172449
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.069127082824707
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: sit on toilet\n assert('close' to 'toilet')\n else: find('toilet')\n sit('toilet')\n # 3: do toilet\n do('toilet')\n # 4: get up\n standup()", <OpenAIObject at 0x7ff4a812f7c0> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3367,
    3368,
    3373,
    3375,
    3379,
    3383,
    3385,
    3386,
    3388,
    3390,
    3391,
    3396,
    3403,
    3404,
    3409,
    3411,
    3413,
    3417,
    3419,
    3420,
    3422,
    3424,
    3425,
    3429,
    3432,
    3439,
    3440,
    3447,
    3449,
    3454,
    3455,
    3458,
    3460,
    3462,
    3466,
    3468,
    3469,
    3474,
    3475,
    3480,
    3482,
    3484,
    3488,
    3490,
    3491,
    3495,
    3497,
    3499,
    3503,
    3505,
    3506,
    3508,
    3510,
    3511,
    3514,
    3521,
    3522,
    3525,
    3527,
    3529,
    3533,
    3535,
    3536,
    3538,
    3540,
    3541,
    3545,
    3548,
    3549,
    3555,
    3557
  ],
  "token_logprobs": [
    -0.0158081,
    -0.0080709085,
    -0.0025649352,
    -0.11681209,
    -0.2906569,
    -0.3285376,
    -0.020790847,
    -0.004702198,
    -0.0039531244,
    -0.0024387338,
    -0.000139794,
    -0.0019641262,
    -0.007118809,
    -0.0020988104,
    -0.0029936128,
    -0.00046074227,
    -0.1285324,
    -0.060019623,
    -0.020362383,
    -0.24433908,
    -0.0009114852,
    -0.00062969286,
    -0.00015958735,
    -0.0017672452,
    -0.004794186,
    -0.019209635,
    -0.0045537506,
    -0.00059557945,
    -0.44225782,
    -0.05565608,
    -0.37163654,
    -0.020356422,
    -0.9175911,
    -0.0015414446,
    -0.0028217488,
    -0.0037647635,
    -0.0009087415,
    -0.002461438,
    -0.0012665795,
    -8.078007e-05,
    -0.0043781484,
    -0.0038910129,
    -0.0017920848,
    -0.0014406221,
    -0.0058494923,
    -0.0014195521,
    -0.0007485673,
    -0.0004200752,
    -0.001321606,
    -0.00507482,
    -0.15861687,
    -0.0010485902,
    -0.00028675204,
    -2.7133337e-05,
    -0.0012705182,
    -0.074103475,
    -0.03239811,
    -0.009056525,
    -0.0016808463,
    -1.5373528,
    -2.5783794,
    -1.8600342,
    -1.1146195,
    -0.47814417,
    -0.017972765,
    -0.001461098,
    -0.01846626,
    -0.06850494,
    -0.029924067,
    -0.0049570436,
    -0.0012116159,
    -3.1256983,
    -0.22386089,
    -0.86679274,
    -0.40556222,
    -0.0035595666,
    -0.113381155
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " sit",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " do",
    " toilet",
    "\n",
    " do",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " get",
    " up",
    "\n",
    " stand",
    "up",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.0158081
    },
    {
      " 0": -0.0080709085
    },
    {
      ":": -0.0025649352
    },
    {
      " walk": -0.11681209
    },
    {
      " to": -0.2906569
    },
    {
      " bathroom": -0.3285376
    },
    {
      "\n": -0.020790847
    },
    {
      " walk": -0.004702198
    },
    {
      "('": -0.0039531244
    },
    {
      "bath": -0.0024387338
    },
    {
      "room": -0.000139794
    },
    {
      "')": -0.0019641262
    },
    {
      "\n": -0.007118809
    },
    {
      " #": -0.0020988104
    },
    {
      " 1": -0.0029936128
    },
    {
      ":": -0.00046074227
    },
    {
      " find": -0.1285324
    },
    {
      " toilet": -0.060019623
    },
    {
      "\n": -0.020362383
    },
    {
      " find": -0.24433908
    },
    {
      "('": -0.0009114852
    },
    {
      "to": -0.00062969286
    },
    {
      "ilet": -0.00015958735
    },
    {
      "')": -0.0017672452
    },
    {
      "\n": -0.004794186
    },
    {
      " #": -0.019209635
    },
    {
      " 2": -0.0045537506
    },
    {
      ":": -0.00059557945
    },
    {
      " sit": -0.44225782
    },
    {
      " on": -0.05565608
    },
    {
      " toilet": -0.37163654
    },
    {
      "\n": -0.020356422
    },
    {
      " assert": -0.9175911
    },
    {
      "('": -0.0015414446
    },
    {
      "close": -0.0028217488
    },
    {
      "'": -0.0037647635
    },
    {
      " to": -0.0009087415
    },
    {
      " '": -0.002461438
    },
    {
      "to": -0.0012665795
    },
    {
      "ilet": -8.078007e-05
    },
    {
      "')": -0.0043781484
    },
    {
      "\n": -0.0038910129
    },
    {
      " else": -0.0017920848
    },
    {
      ":": -0.0014406221
    },
    {
      " find": -0.0058494923
    },
    {
      "('": -0.0014195521
    },
    {
      "to": -0.0007485673
    },
    {
      "ilet": -0.0004200752
    },
    {
      "')": -0.001321606
    },
    {
      "\n": -0.00507482
    },
    {
      " sit": -0.15861687
    },
    {
      "('": -0.0010485902
    },
    {
      "to": -0.00028675204
    },
    {
      "ilet": -2.7133337e-05
    },
    {
      "')": -0.0012705182
    },
    {
      "\n": -0.074103475
    },
    {
      " #": -0.03239811
    },
    {
      " 3": -0.009056525
    },
    {
      ":": -0.0016808463
    },
    {
      " flush": -1.4211667
    },
    {
      " your": -0.86312556
    },
    {
      " business": -1.1901696
    },
    {
      " do": -1.1146195
    },
    {
      "('": -0.47814417
    },
    {
      "to": -0.017972765
    },
    {
      "ilet": -0.001461098
    },
    {
      "')": -0.01846626
    },
    {
      "\n": -0.06850494
    },
    {
      " #": -0.029924067
    },
    {
      " 4": -0.0049570436
    },
    {
      ":": -0.0012116159
    },
    {
      " stand": -0.7538056
    },
    {
      " up": -0.22386089
    },
    {
      " from": -0.77850544
    },
    {
      " stand": -0.40556222
    },
    {
      "up": -0.0035595666
    },
    {
      "()": -0.113381155
    }
  ]
})]
experiment time1 on environment scene2
Clean toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <mop_bucket> (1)', '[Pour] <water> (1) <mop_bucket> (1)', '[Mop] <toilet> (1)', '[Putobjback] <mop_bucket> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', "assert('close' to 'mop_bucket')", 'else: [Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Pour] <water> (1) <mop_bucket> (1)', "assert('mop_bucket' in 'hands')", 'else: [Grab] <mop_bucket> (1)', '[Mop] <toilet> (1)', '[Putobjback] <mop_bucket> (1)']}
Wash monitor {'script': ['[Find] <monitor> (1)', '[Grab] <sponge> (1)', '[Turnto] <sponge> (1)', '[Pointat] <sponge> (1)', '[Wet] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', '[Wipe] <monitor> (1)', '[Putobjback] <sponge> (1)'], 'assert_script': ['[Find] <monitor> (1)', "assert('close' to 'sponge')", 'else: [Find] <sponge> (1)', '[Grab] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Turnto] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Pointat] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Wet] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', "assert('close' to 'monitor')", 'else: [Find] <monitor> (1)', '[Wipe] <monitor> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Putobjback] <sponge> (1)']}
Turn on TV {'script': ['[Walk] <bedroom> (1)', '[Walk] <television> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', '[Touch] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <television> (1)', '[Find] <television> (1)', "assert('close' to 'television')", 'else: [Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', "assert('close' to 'remote_control')", 'else: [Find] <remote_control> (1)', '[Touch] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']}
Turn on computer {'script': ['[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Pointat] <mouse> (1)'], 'assert_script': ['[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Pointat] <mouse> (1)']}
Shave {'script': ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', '[Find] <shaving_cream> (1)', '[Grab] <shaving_cream> (1)', '[Pointat] <shaving_cream> (1)', '[Spread] <shaving_cream> (1) <face> (1)', '[Switchon] <electric_shaver> (1)', '[Turnto] <electric_shaver> (1)', '[Shave] <electric_shaver> (1) <face> (1)', '[Switchoff] <electric_shaver> (1)', '[Putobjback] <electric_shaver> (1)', '[Pointat] <face> (1)', '[Wash] <face> (1)'], 'assert_script': ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Find] <shaving_cream> (1)', '[Grab] <shaving_cream> (1)', "assert('shaving_cream' in 'hands')", 'else: [Grab] <shaving_cream> (1)', "assert('close' to 'face')", 'else: [Turnto] <face> (1)', '[Pointat] <shaving_cream> (1)', '[Spread] <shaving_cream> (1) <face> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Switchon] <electric_shaver> (1)', '[Turnto] <electric_shaver> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Shave] <electric_shaver> (1) <face> (1)', '[Switchoff] <electric_shaver> (1)', '[Putobjback] <electric_shaver> (1)', "assert('close' to 'face')", 'else: [Turnto] <face> (1)', '[Pointat] <face> (1)', '[Wash] <face> (1)']}
Hang up jacket {'script': ['[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Find] <jacket> (1)', '[Grab] <jacket> (1)', '[Puton] <jacket> (1) <hanger> (1)'], 'assert_script': ['[Find] <hanger> (1)', "assert('close' to 'hanger')", 'else: [Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Find] <jacket> (1)', "assert('close' to 'jacket')", 'else: [Find] <jacket> (1)', '[Grab] <jacket> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', "assert('jacket' in 'hands')", 'else: [Grab] <jacket> (1)', '[Puton] <jacket> (1) <hanger> (1)']}
Read newspaper {'script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Read] <newspaper> (1)'], 'assert_script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Read] <newspaper> (1)']}
Sit {'script': ['[Walk] <chair> (1)', '[Find] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Walk] <chair> (1)', '[Find] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)']}
Sleep {'script': [], 'assert_script': []}
Put alarm clock in bedroom {'script': ['[Walk] <bedroom> (1)', '[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <nightstand> (1)', '[Find] <nightstand> (1)', '[Puton] <nightstand> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <alarm_clock> (1)', "assert('close' to 'alarm_clock')", 'else: [Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <nightstand> (1)', '[Find] <nightstand> (1)', "assert('close' to 'nightstand')", 'else: [Find] <nightstand> (1)', '[Puton] <nightstand> (1)']}
Sit in chair {'script': ['[Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)']}
Open bathroom window {'script': ['[Walk] <bathroom> (1)', '[Walk] <window> (1)', '[Find] <window> (1)', '[Open] <window> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Walk] <window> (1)', '[Find] <window> (1)', "assert('close' to 'window')", 'else: [Find] <window> (1)', '[Open] <window> (1)']}
Use computer {'script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <keyboard> (1)', '[Find] <mouse> (1)', '[Grab] <keyboard> (1)', '[Grab] <mouse> (1)', '[Turnto] <keyboard> (1)', '[Pointat] <keyboard> (1)', '[Turnto] <mouse> (1)', '[Pointat] <mouse> (1)', '[Switchoff] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <keyboard> (1)', '[Find] <mouse> (1)', '[Grab] <keyboard> (1)', '[Grab] <mouse> (1)', '[Turnto] <keyboard> (1)', '[Pointat] <keyboard> (1)', '[Turnto] <mouse> (1)', '[Pointat] <mouse> (1)', '[Switchoff] <computer> (1)']}
Wash face {'script': ['[Walk] <bathroom> (1)', '[Walk] <sink> (1)', '[Find] <sink> (1)', '[Switchon] <faucet> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1) <hands> (1)', '[Wash] <hands> (1)', '[Switchoff] <faucet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Walk] <sink> (1)', '[Find] <sink> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Switchon] <faucet> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1) <hands> (1)', '[Wash] <hands> (1)', '[Switchoff] <faucet> (1)']}
Computer work {'script': ['[Find] <computer> (1)', '[Find] <desk> (1)', '[Sit] <chair> (1)', '[Switchon] <computer> (1)', '[Pointat] <computer> (1)', '[Open] <computer> (1)', '[Find] <homework> (1)', '[Open] <homework> (1)', '[Read] <homework> (1)', '[Write] <homework> (1)', '[Save] <homework> (1)', '[Close] <homework> (1)', '[Switchoff] <computer> (1)'], 'assert_script': ['[Find] <computer> (1)', '[Find] <desk> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Switchon] <computer> (1)', '[Pointat] <computer> (1)', '[Open] <computer> (1)', '[Find] <homework> (1)', '[Open] <homework> (1)', '[Read] <homework> (1)', '[Write] <homework> (1)', '[Save] <homework> (1)', '[Close] <homework> (1)', '[Switchoff] <computer> (1)']}
Take nap {'script': ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)', '[Sit] <bed> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', 'else: [Turnto] <bed> (1)', '[Sit] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', 'else: [Turnto] <bed> (1)', '[Sit] <bed> (1)']}
Do work on computer {'script': ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', '[Open] <computer> (1)', '[Pointat] <computer> (1)', '[Lookat] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', '[Open] <computer> (1)', "assert('computer' is 'open')", 'else: [Open] <computer> (1)', '[Pointat] <computer> (1)', '[Lookat] <computer> (1)']}
Read news {'script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Open] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)'], 'assert_script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Open] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)']}
Hand washing {'script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Switchon] <sink> (1)', '[Grab] <soap> (1)', '[Lookat] <hands> (1)', '[Wash] <hands> (1)', '[Switchoff] <sink> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', "assert('close' to 'sink')", 'else: [Find] <sink> (1)', '[Switchon] <sink> (1)', '[Grab] <soap> (1)', '[Lookat] <hands> (1)', "assert('soap' in 'hands')", 'else: [Grab] <soap> (1)', '[Wash] <hands> (1)', '[Switchoff] <sink> (1)']}
Clean bathroom {'script': ['[Walk] <bathroom> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', '[Mop] <bathroom_floor> (1)', '[Putback] <mop> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', "assert('mop' in 'hands')", 'else: [Grab] <mop> (1)', '[Mop] <bathroom_floor> (1)', "assert('mop' in 'hands')", 'else: [Grab] <mop> (1)', '[Putback] <mop> (1)']}
Pick up phone {'script': ['[Find] <phone> (1)', '[Grab] <phone> (1)', '[Find] <dishwasher> (1)', '[Open] <dishwasher> (1)', '[Find] <dishes> (1)', '[Putin] <dishes> (1) <dishwasher> (1)', '[Close] <dishwasher> (1)', '[Switchon] <dishwasher> (1)'], 'assert_script': ['[Find] <phone> (1)', "assert('close' to 'phone')", 'else: [Find] <phone> (1)', '[Grab] <phone> (1)', "assert('phone' in 'hands')", 'else: [Grab] <phone> (1)', '[Find] <dishwasher> (1)', "assert('close' to 'dishwasher')", 'else: [Find] <dishwasher> (1)', '[Open] <dishwasher> (1)', '[Find] <dishes> (1)', "assert('close' to 'dishes')", 'else: [Find] <dishes> (1)', '[Putin] <dishes> (1) <dishwasher> (1)', '[Close] <dishwasher> (1)', '[Switchon] <dishwasher> (1)']}
Go to toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Do] <toilet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Do] <toilet> (1)']}
experiment time1 on environment scene2
Clean toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <mop_bucket> (1)', '[Pour] <water> (1) <mop_bucket> (1)', '[Mop] <toilet> (1)', '[Putobjback] <mop_bucket> (1)']
illegal action ('water', 1) does not exist in the environment  be deleted
illegal action Unknown action "MOP"  be deleted
illegal action Unknown action "END"  be deleted
Wash monitor
script before ['[Find] <monitor> (1)', '[Grab] <sponge> (1)', '[Turnto] <sponge> (1)', '[Pointat] <sponge> (1)', '[Wet] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', '[Wipe] <monitor> (1)', '[Putobjback] <sponge> (1)']
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action Unknown action "WET"  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Turn on TV
script before ['[Walk] <bedroom> (1)', '[Walk] <television> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', '[Touch] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']
illegal action Unknown action "END"  be deleted
Turn on computer
script before ['[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Pointat] <mouse> (1)']
illegal action Unknown action "END"  be deleted
Shave
script before ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', '[Find] <shaving_cream> (1)', '[Grab] <shaving_cream> (1)', '[Pointat] <shaving_cream> (1)', '[Spread] <shaving_cream> (1) <face> (1)', '[Switchon] <electric_shaver> (1)', '[Turnto] <electric_shaver> (1)', '[Shave] <electric_shaver> (1) <face> (1)', '[Switchoff] <electric_shaver> (1)', '[Putobjback] <electric_shaver> (1)', '[Pointat] <face> (1)', '[Wash] <face> (1)']
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('face', 1) does not exist in the environment  be deleted
illegal action Unknown action "SPREAD"  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action Unknown action "SHAVE"  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('face', 1) does not exist in the environment  be deleted
illegal action ('face', 1) does not exist in the environment  be deleted
illegal action ('face', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Hang up jacket
script before ['[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Find] <jacket> (1)', '[Grab] <jacket> (1)', '[Puton] <jacket> (1) <hanger> (1)']
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "PUTON". Got 2, expected 1  be deleted
illegal action Unknown action "END"  be deleted
Read newspaper
script before ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Read] <newspaper> (1)']
illegal action Unknown action "END"  be deleted
Sit
script before ['[Walk] <chair> (1)', '[Find] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)', '[Sit] <chair> (1)']
illegal action Unknown action "END"  be deleted
Sleep
script before []
illegal action Unknown action "END"  be deleted
Put alarm clock in bedroom
script before ['[Walk] <bedroom> (1)', '[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <nightstand> (1)', '[Find] <nightstand> (1)', '[Puton] <nightstand> (1)']
illegal action Unknown action "END"  be deleted
Sit in chair
script before ['[Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)']
illegal action Unknown action "END"  be deleted
Open bathroom window
script before ['[Walk] <bathroom> (1)', '[Walk] <window> (1)', '[Find] <window> (1)', '[Open] <window> (1)']
illegal action Unknown action "END"  be deleted
Use computer
script before ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <keyboard> (1)', '[Find] <mouse> (1)', '[Grab] <keyboard> (1)', '[Grab] <mouse> (1)', '[Turnto] <keyboard> (1)', '[Pointat] <keyboard> (1)', '[Turnto] <mouse> (1)', '[Pointat] <mouse> (1)', '[Switchoff] <computer> (1)']
illegal action Unknown action "END"  be deleted
Wash face
script before ['[Walk] <bathroom> (1)', '[Walk] <sink> (1)', '[Find] <sink> (1)', '[Switchon] <faucet> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1) <hands> (1)', '[Wash] <hands> (1)', '[Switchoff] <faucet> (1)']
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action ('hands', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Computer work
script before ['[Find] <computer> (1)', '[Find] <desk> (1)', '[Sit] <chair> (1)', '[Switchon] <computer> (1)', '[Pointat] <computer> (1)', '[Open] <computer> (1)', '[Find] <homework> (1)', '[Open] <homework> (1)', '[Read] <homework> (1)', '[Write] <homework> (1)', '[Save] <homework> (1)', '[Close] <homework> (1)', '[Switchoff] <computer> (1)']
illegal action ('homework', 1) does not exist in the environment  be deleted
illegal action ('homework', 1) does not exist in the environment  be deleted
illegal action ('homework', 1) does not exist in the environment  be deleted
illegal action Unknown action "WRITE"  be deleted
illegal action Unknown action "SAVE"  be deleted
illegal action ('homework', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Take nap
script before ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)', '[Sit] <bed> (1)']
illegal action Unknown action "END"  be deleted
Do work on computer
script before ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', '[Open] <computer> (1)', '[Pointat] <computer> (1)', '[Lookat] <computer> (1)']
illegal action Unknown action "END"  be deleted
Read news
script before ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Open] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)']
illegal action Wrong number of parameters for "PUTBACK". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Hand washing
script before ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Switchon] <sink> (1)', '[Grab] <soap> (1)', '[Lookat] <hands> (1)', '[Wash] <hands> (1)', '[Switchoff] <sink> (1)']
illegal action ('hands', 1) does not exist in the environment  be deleted
illegal action ('hands', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Clean bathroom
script before ['[Walk] <bathroom> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', '[Mop] <bathroom_floor> (1)', '[Putback] <mop> (1)']
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action Unknown action "MOP"  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "PUTBACK". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Pick up phone
script before ['[Find] <phone> (1)', '[Grab] <phone> (1)', '[Find] <dishwasher> (1)', '[Open] <dishwasher> (1)', '[Find] <dishes> (1)', '[Putin] <dishes> (1) <dishwasher> (1)', '[Close] <dishwasher> (1)', '[Switchon] <dishwasher> (1)']
illegal action ('dishes', 1) does not exist in the environment  be deleted
illegal action ('dishes', 1) does not exist in the environment  be deleted
illegal action ('dishes', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Go to toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Do] <toilet> (1)']
illegal action Unknown action "DO"  be deleted
illegal action Unknown action "END"  be deleted
Args info:
language_planner_result_file: language_planner.json
retry_times: 0
n_shots: 1
instruction: False
step_by_step_generation_prompt_path: None
step_by_step_generation_result_file: None
object_topk: 5
grounded_deciding_prompt_path: None
grounded_deciding_result_file: default_gd.json
prompt_choices_sequence: False
dataset_split: validation
dataset: ./data/val.json
retrieval_dataset: ./data/train.json
example_idx_file: None
api_keys_file: key.txt
save_dir: results/
plan_generation_result_file: default_pg.json
processed_plan_generation_result_file: None
graph_dict_path: None
plan_generation_prompt_path: None
graph_num: 2
exp_times: 1
n_processes: 1
seed: 42
engine: text-davinci-003
n_parallel_prompts: 1
max_generation_tokens: 512
max_api_total_tokens: 4096
temperature: 0.4
sampling_n: 20
top_p: 1.0
stop_tokens: ['\n\n']
verbose: False
experiment time1 on environment scene2
['[WALK] <bathroom> (1)', '[FIND] <toilet> (15)', '[GRAB] <mop_bucket> (2025)', '[PUTOBJBACK] <mop_bucket> (2025)']
next step------- assert('close' to 'mop_bucket')else: [Find] <mop_bucket> (1)
prompt You see 
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'mop_bucket'), 
prediction False
next step------- assert('mop_bucket' in 'hands')else: [Grab] <mop_bucket> (1)
prompt You see mop_bucket is dirty
character is holds_rh mop_bucket
mop_bucket is close to character
character is close to mop_bucket
mop_bucket is inside dining_room
mop_bucket is inside dining_room
You have Currently, you are standing in the dining_room, and holding mop_bucket in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('mop_bucket' in 'hands'), 
prediction False
end of script
gcr, sr 0.0 0
['[GRAB] <sponge> (2033)', '[TURNTO] <sponge> (2033)', '[POINTAT] <sponge> (2033)', '[TURNTO] <sponge> (2033)', '[LOOKAT] <sponge> (2033)', '[PUTOBJBACK] <sponge> (2033)']
next step------- assert('close' to 'sponge')else: [Find] <sponge> (1)
prompt You see sponge is dirty
sponge is close to trashcan
sponge is inside trashcan
trashcan is close to sponge
sponge is inside dining_room
sponge is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'sponge'), 
prediction False
next step------- assert('sponge' in 'hands')else: [Grab] <sponge> (1)
prompt You see sponge is dirty
character is holds_rh sponge
sponge is close to character
character is close to sponge
sponge is inside dining_room
sponge is inside dining_room
You have Currently, you are standing in the dining_room, and holding sponge in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('sponge' in 'hands'), 
prediction False
next step------- assert('sponge' in 'hands')else: [Grab] <sponge> (1)
prompt You see sponge is dirty
character is facing sponge
character is close to sponge
character is holds_lh sponge
sponge is close to character
character is holds_rh sponge
sponge is inside dining_room
sponge is inside dining_room
You have Currently, you are standing in the dining_room, and holding sponge in your right hand and sponge in your left hand., give one word answer True or False to this assert statement: assert('sponge' in 'hands'), 
prediction False
execute failed at assert else at ['[GRAB] <sponge> (2033)']
['[WALK] <bedroom> (162)', '[WALK] <television> (281)', '[FIND] <television> (281)', '[SWITCHON] <television> (281)', '[FIND] <remote_control> (1000)', '[TOUCH] <remote_control> (1000)', '[TURNTO] <television> (281)', '[LOOKAT] <television> (281)']
next step------- assert('close' to 'television')else: [Find] <television> (1)
prompt You see television is clean, off, plugged_in
ceiling is facing television
tvstand is facing television
television is close to chair
doorjamb is close to television
television is on tvstand
character is close to television
television is close to floor
wall is facing television
television is close to doorjamb
floor is facing television
wall is close to television
powersocket is close to television
television is close to powersocket
table is facing television
tvstand is close to television
television is facing drawing
television is close to character
mat is facing television
ceiling is close to television
drawing is facing television
television is inside home_office
ceilinglamp is facing television
floor is close to television
television is close to wall
orchid is facing television
walllamp is facing television
television is close to ceiling
television is close to tvstand
chair is close to television
television is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'television'), 
prediction True
next step------- assert('close' to 'remote_control')else: [Find] <remote_control> (1)
prompt You see remote_control is clean
chair is close to remote_control
remote_control is close to character
remote_control is inside home_office
character is close to remote_control
remote_control is close to chair
remote_control is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'remote_control'), 
prediction False
end of script
gcr, sr 0.6 0
['[FIND] <computer> (209)', '[SWITCHON] <computer> (209)', '[FIND] <mouse> (213)', '[GRAB] <mouse> (213)', '[POINTAT] <mouse> (213)']
execute failed at [POINTAT] <mouse> (213)
['[FIND] <shaving_cream> (2025)', '[GRAB] <shaving_cream> (2025)', '[POINTAT] <shaving_cream> (2025)']
next step------- assert('shaving_cream' in 'hands')else: [Grab] <shaving_cream> (1)
prompt You see shaving_cream is clean
character is holds_rh shaving_cream
shaving_cream is close to character
character is close to shaving_cream
shaving_cream is inside bathroom
shaving_cream is inside bathroom
You have Currently, you are standing in the bathroom, and holding shaving_cream in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('shaving_cream' in 'hands'), 
prediction False
execute failed at [POINTAT] <shaving_cream> (2025)
['[FIND] <hanger> (293)', '[GRAB] <hanger> (293)']
next step------- assert('close' to 'hanger')else: [Find] <hanger> (1)
prompt You see 
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'hanger'), 
prediction False
execute failed at [GRAB] <hanger> (293)
['[FIND] <newspaper> (2020)', '[GRAB] <newspaper> (2020)', '[FIND] <chair> (194)', '[SIT] <chair> (194)', '[READ] <newspaper> (2020)']
end of script
gcr, sr 0.75 0
['[WALK] <chair> (271)', '[FIND] <chair> (271)', '[TURNTO] <chair> (271)', '[LOOKAT] <chair> (271)', '[SIT] <chair> (271)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
chair is close to wall
walllamp is close to chair
chair is close to floor
chair is close to walllamp
chair is close to desk
mat is close to chair
chair is close to mouse
character is facing chair
chair is close to mousepad
character is close to chair
desk is close to chair
mousepad is close to chair
floor is close to chair
mouse is close to chair
chair is close to character
chair is facing computer
keyboard is close to chair
computer is close to chair
chair is close to computer
chair is close to mat
chair is inside home_office
chair is close to cpuscreen
wall is close to chair
chair is close to keyboard
chair is close to ceiling
ceiling is close to chair
cpuscreen is close to chair
chair is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
execute failed at [SIT] <chair> (271)
script 8 has illegal [action]()
['[WALK] <bedroom> (162)', '[FIND] <alarm_clock> (1000)', '[GRAB] <alarm_clock> (1000)', '[WALK] <nightstand> (192)', '[FIND] <nightstand> (192)', '[PUTON] <nightstand> (192)']
next step------- assert('close' to 'alarm_clock')else: [Find] <alarm_clock> (1)
prompt You see alarm_clock is clean, off, plugged_in
alarm_clock is close to character
alarm_clock is close to dresser
alarm_clock is inside bedroom
character is close to alarm_clock
dresser is close to alarm_clock
alarm_clock is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'alarm_clock'), 
prediction False
next step------- assert('close' to 'nightstand')else: [Find] <nightstand> (1)
prompt You see nightstand is clean, closed
wall is close to nightstand
nightstand is close to wall
tablelamp is close to nightstand
bed is close to nightstand
tablelamp is on nightstand
floor is close to nightstand
nightstand is close to tablelamp
chair is close to nightstand
nightstand is inside bedroom
nightstand is close to drawing
nightstand is facing computer
character is close to nightstand
nightstand is close to bed
drawing is close to nightstand
nightstand is close to floor
nightstand is on floor
pillow is close to nightstand
nightstand is close to chair
nightstand is close to character
nightstand is close to pillow
nightstand is facing drawing
nightstand,nightstand is inside bedroom
You have Currently, you are standing in the bedroom, and holding alarm_clock in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'nightstand'), 
prediction False
execute failed at [PUTON] <nightstand> (192)
['[FIND] <chair> (2019)', '[SIT] <chair> (2019)', '[TURNTO] <chair> (2019)', '[LOOKAT] <chair> (2019)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
chair is close to wall
chair is close to tablelamp
chair is close to floor
chair is close to desk
chair is close to mouse
chair is close to mousepad
tablelamp is close to chair
character is close to chair
chair is on couch
desk is close to chair
mousepad is close to chair
chair is inside bedroom
floor is close to chair
mouse is close to chair
chair is close to nightstand
chair is close to character
couch is close to chair
chair is facing computer
keyboard is close to chair
computer is close to chair
chair is close to computer
chair is close to couch
wall is close to chair
nightstand is close to chair
chair is close to keyboard
chair is close to ceiling
ceiling is close to chair
chair,chair is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction True
end of script
gcr, sr 0.3333333333333333 0
['[WALK] <bathroom> (1)', '[WALK] <window> (1000)', '[FIND] <window> (1000)', '[OPEN] <window> (1000)']
next step------- assert('close' to 'window')else: [Find] <window> (1)
prompt You see window is clean, closed
character is close to window
window is inside bathroom
window is close to character
window is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'window'), 
prediction False
execute failed at [OPEN] <window> (1000)
['[WALK] <home_office> (241)', '[FIND] <computer> (276)', '[SWITCHON] <computer> (276)', '[FIND] <keyboard> (278)', '[FIND] <mouse> (280)', '[GRAB] <keyboard> (278)', '[GRAB] <mouse> (280)', '[TURNTO] <keyboard> (278)', '[POINTAT] <keyboard> (278)', '[TURNTO] <mouse> (280)', '[POINTAT] <mouse> (280)', '[SWITCHOFF] <computer> (276)']
end of script
gcr, sr 0.25 0
['[WALK] <bathroom> (1)', '[WALK] <sink> (19)', '[FIND] <sink> (19)', '[SWITCHON] <faucet> (20)', '[SWITCHOFF] <faucet> (20)']
next step------- assert('close' to 'faucet')else: [Find] <faucet> (1)
prompt You see faucet is clean, off
faucet is close to wall
faucet is close to mat
bathroom_counter is close to faucet
mat is close to faucet
wall is close to faucet
ceiling is close to faucet
faucet is close to ceiling
faucet is close to bathroom_cabinet
floor is close to faucet
faucet is close to bathroom_counter
faucet is facing drawing
faucet is inside bathroom
faucet is close to floor
bathroom_cabinet is close to faucet
faucet is on bathroom_counter
faucet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'faucet'), 
prediction True
execute failed at [SWITCHON] <faucet> (20)
['[FIND] <computer> (276)', '[FIND] <desk> (272)', '[SIT] <chair> (271)', '[SWITCHON] <computer> (276)', '[POINTAT] <computer> (276)', '[OPEN] <computer> (276)', '[SWITCHOFF] <computer> (276)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
chair is close to wall
walllamp is close to chair
chair is close to walllamp
chair is close to floor
chair is close to desk
mat is close to chair
chair is close to mouse
chair is close to mousepad
desk is close to chair
mousepad is close to chair
floor is close to chair
mouse is close to chair
chair is facing computer
keyboard is close to chair
computer is close to chair
chair is close to computer
chair is close to mat
chair is inside home_office
chair is close to cpuscreen
wall is close to chair
chair is close to keyboard
chair is close to ceiling
ceiling is close to chair
cpuscreen is close to chair
chair is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
execute failed at [OPEN] <computer> (276)
['[WALK] <bedroom> (162)', '[FIND] <bed> (197)', '[TURNTO] <bed> (197)', '[LOOKAT] <bed> (197)', '[SIT] <bed> (197)', '[SIT] <bed> (197)']
next step------- assert('close' to 'bed')else: [Find] <bed> (1)else: [Turnto] <bed> (1)
prompt You see bed is clean
bed is close to floor
drawing is close to bed
floor is close to bed
nightstand is close to bed
bed is close to tablelamp
bed is close to nightstand
wall is close to bed
bed is inside bedroom
bed is close to wall
bed is close to character
character is close to bed
character is facing bed
bed is close to drawing
tablelamp is close to bed
bed is facing computer
bed is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction False
next step------- assert('close' to 'bed')else: [Find] <bed> (1)else: [Turnto] <bed> (1)
prompt You see bed is clean
bed is close to floor
drawing is close to bed
floor is close to bed
nightstand is close to bed
bed is close to tablelamp
bed is close to nightstand
bed is inside bedroom
bed is close to wall
character is on bed
bed is close to character
character is close to bed
wall is close to bed
bed is close to drawing
tablelamp is close to bed
bed is facing computer
bed is inside bedroom
You have Currently, you are sitting on bed in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction True
execute failed at [SIT] <bed> (197)
['[WALK] <home_office> (241)', '[WALK] <computer> (276)', '[FIND] <computer> (276)', '[FIND] <chair> (271)', '[SIT] <chair> (271)', '[TURNTO] <computer> (276)', '[OPEN] <computer> (276)', '[POINTAT] <computer> (276)', '[LOOKAT] <computer> (276)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
chair is close to wall
walllamp is close to chair
chair is close to floor
chair is close to walllamp
chair is close to desk
mat is close to chair
chair is close to mouse
chair is close to mousepad
character is close to chair
desk is close to chair
mousepad is close to chair
floor is close to chair
mouse is close to chair
chair is close to character
chair is facing computer
keyboard is close to chair
computer is close to chair
chair is close to computer
chair is close to mat
chair is inside home_office
chair is close to cpuscreen
wall is close to chair
chair is close to keyboard
chair is close to ceiling
ceiling is close to chair
cpuscreen is close to chair
chair is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction True
execute failed at [OPEN] <computer> (276)
['[FIND] <newspaper> (1000)', '[GRAB] <newspaper> (1000)', '[TURNTO] <newspaper> (1000)', '[OPEN] <newspaper> (1000)', '[READ] <newspaper> (1000)']
next step------- assert('newspaper' in 'hands')else: [Grab] <newspaper> (1)
prompt You see newspaper is clean, closed
character is holds_rh newspaper
character is close to newspaper
newspaper is close to character
newspaper is inside home_office
newspaper is inside home_office
You have Currently, you are standing in the home_office, and holding newspaper in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('newspaper' in 'hands'), 
prediction False
next step------- assert('newspaper' in 'hands')else: [Grab] <newspaper> (1)
prompt You see newspaper is clean, closed
character is close to newspaper
character is holds_lh newspaper
newspaper is inside home_office
character is facing newspaper
character is holds_rh newspaper
newspaper is close to character
newspaper is inside home_office
You have Currently, you are standing in the home_office, and holding newspaper in your right hand and newspaper in your left hand., give one word answer True or False to this assert statement: assert('newspaper' in 'hands'), 
prediction False
execute failed at assert else at ['[GRAB] <newspaper> (1000)']
['[WALK] <bathroom> (1)', '[FIND] <sink> (19)', '[TURNTO] <sink> (19)', '[LOOKAT] <sink> (19)', '[SWITCHON] <sink> (19)', '[GRAB] <soap> (1000)', '[SWITCHOFF] <sink> (19)']
next step------- assert('close' to 'sink')else: [Find] <sink> (1)
prompt You see 
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'sink'), 
prediction False
execute failed at [SWITCHON] <sink> (19)
['[WALK] <bathroom> (1)']
end of script
gcr, sr 0.3333333333333333 0
['[FIND] <phone> (71)', '[GRAB] <phone> (71)', '[FIND] <dishwasher> (129)', '[OPEN] <dishwasher> (129)', '[CLOSE] <dishwasher> (129)', '[SWITCHON] <dishwasher> (129)']
next step------- assert('close' to 'phone')else: [Find] <phone> (1)
prompt You see phone is clean, off, plugged_in
phone is close to pillow
pillow is close to phone
phone is close to ceiling
tvstand is close to phone
door is close to phone
phone is close to drawing
phone is close to character
phone is close to tvstand
floor is close to phone
phone is close to wall
phone is inside dining_room
drawing is close to phone
phone is close to door
wall is close to phone
ceiling is close to phone
phone is close to floor
character is close to phone
phone is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'phone'), 
prediction False
next step------- assert('phone' in 'hands')else: [Grab] <phone> (1)
prompt You see phone is clean, off, plugged_in
phone is inside dining_room
phone is close to character
character is close to phone
character is holds_rh phone
phone is inside dining_room
You have Currently, you are standing in the dining_room, and holding phone in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('phone' in 'hands'), 
prediction False
next step------- assert('close' to 'dishwasher')else: [Find] <dishwasher> (1)
prompt You see dishwasher is clean, closed, on
dishwasher is close to kitchen_counter
dishwasher is close to walllamp
dishwasher is close to microwave
walllamp is close to dishwasher
character is close to dishwasher
dishwasher is close to cupboard
microwave is close to dishwasher
dishwasher is close to coffe_maker
cupboard is close to dishwasher
floor is close to dishwasher
dishwasher is inside dining_room
dishwasher is close to floor
dishwasher is close to trashcan
dishwasher is close to toaster
dishwasher is close to character
wall is close to dishwasher
trashcan is close to dishwasher
dishwasher is close to wall
toaster is close to dishwasher
coffe_maker is close to dishwasher
kitchen_counter is close to dishwasher
dishwasher is inside dining_room
You have Currently, you are standing in the dining_room, and holding phone in your right hand and phone in your left hand., give one word answer True or False to this assert statement: assert('close' to 'dishwasher'), 
prediction True
execute failed at [OPEN] <dishwasher> (129)
['[WALK] <bathroom> (1)', '[FIND] <toilet> (15)', '[SIT] <toilet> (15)']
next step------- assert('close' to 'toilet')else: [Find] <toilet> (1)
prompt You see toilet is clean, off, closed
character is close to toilet
toilet is close to character
curtain is close to toilet
doorjamb is close to toilet
toilet is close to doorjamb
door is close to toilet
floor is close to toilet
toilet is close to floor
toilet is close to door
toilet is close to curtain
toilet is facing drawing
wall is close to toilet
toilet is close to wall
toilet is close to shower
shower is close to toilet
toilet is inside bathroom
toilet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'toilet'), 
prediction True
end of script
gcr, sr 0.5 0
experiment time2 on environment scene2
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 18.493633031845093
[(" # 0: walk into bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: grab a mop\n find('mop')\n grab('mop')\n assert('mop' in 'hands')\n else: grab('mop')\n # 3: wipe the toilet\n turnto('toilet')\n lookat('toilet')\n wipe('toilet')\n # 4: put the mop back\n putback('mop')", <OpenAIObject at 0x7fd979170590> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3360,
    3369,
    3370,
    3375,
    3377,
    3381,
    3385,
    3387,
    3388,
    3390,
    3392,
    3393,
    3398,
    3405,
    3406,
    3411,
    3413,
    3415,
    3419,
    3421,
    3422,
    3424,
    3426,
    3427,
    3432,
    3434,
    3436,
    3438,
    3439,
    3444,
    3446,
    3449,
    3451,
    3452,
    3457,
    3459,
    3462,
    3464,
    3465,
    3472,
    3474,
    3477,
    3478,
    3481,
    3483,
    3488,
    3490,
    3491,
    3496,
    3497,
    3502,
    3504,
    3507,
    3509,
    3510,
    3512,
    3514,
    3515,
    3520,
    3524,
    3531,
    3532,
    3536,
    3538,
    3539,
    3541,
    3543,
    3547,
    3549,
    3550,
    3555,
    3557,
    3559,
    3561,
    3565,
    3567,
    3568,
    3573,
    3575,
    3577,
    3581,
    3583,
    3584,
    3586,
    3588,
    3589,
    3593,
    3597,
    3599,
    3601,
    3606,
    3607,
    3611,
    3615,
    3617,
    3620
  ],
  "token_logprobs": [
    -0.01753453,
    -0.0072733406,
    -0.0019486619,
    -0.34345213,
    -2.947932,
    -0.31242046,
    -0.021084098,
    -0.004969265,
    -0.0056958986,
    -0.0015100456,
    -0.00017484887,
    -0.00157398,
    -0.007404595,
    -0.002232138,
    -0.003037793,
    -0.0011333813,
    -0.07817246,
    -0.10123873,
    -0.025031283,
    -0.26048902,
    -0.0010314062,
    -0.00064836355,
    -0.00026588395,
    -0.0021140417,
    -0.005011856,
    -0.013418386,
    -0.0050548096,
    -0.0014769132,
    -0.60272384,
    -2.372153,
    -0.48085853,
    -0.0001758016,
    -0.43557546,
    -0.8621508,
    -0.0014496952,
    -0.003323853,
    -0.7930483,
    -0.0055539,
    -0.21006744,
    -0.0011652457,
    -0.00041315737,
    -0.0028934204,
    -0.004885287,
    -2.3282921,
    -0.0034469354,
    -0.17518002,
    -0.0037837895,
    -0.022269964,
    -0.00550697,
    -0.012800279,
    -0.016318638,
    -0.004529799,
    -0.022448188,
    -0.004455138,
    -0.03387298,
    -0.0019911826,
    -0.0004946726,
    -0.0033949031,
    -0.0053328755,
    -0.15745749,
    -0.008781573,
    -0.0014961967,
    -1.7377894,
    -0.24140632,
    -0.03658481,
    -0.16440287,
    -0.8286369,
    -7.136165e-05,
    -0.00022158712,
    -0.00055639644,
    -0.0054200096,
    -0.00016852893,
    -0.0010429798,
    -0.004451486,
    -0.828756,
    -0.00082551886,
    -0.0005013521,
    -0.000884698,
    -3.881579e-05,
    -0.001363742,
    -0.003766319,
    -0.43011144,
    -0.0012602521,
    -0.01152946,
    -0.0006156178,
    -0.006654943,
    -0.011450353,
    -0.06764396,
    -0.008872192,
    -0.0015770249,
    -0.56806004,
    -0.9185635,
    -0.0018342396,
    -0.00012715602,
    -0.047097888,
    -0.02447554,
    -0.7890714,
    -0.9774991,
    -0.0037749952,
    -0.002752652,
    -0.014246525
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " into",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " a",
    " m",
    "op",
    "\n",
    " find",
    "('",
    "mop",
    "')",
    "\n",
    " grab",
    "('",
    "mop",
    "')",
    "\n",
    " assert",
    "('",
    "mop",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wipe",
    " the",
    " toilet",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " wipe",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " the",
    " m",
    "op",
    " back",
    "\n",
    " put",
    "back",
    "('",
    "mop",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01753453
    },
    {
      " 0": -0.0072733406
    },
    {
      ":": -0.0019486619
    },
    {
      " walk": -0.34345213
    },
    {
      " to": -0.23951235
    },
    {
      " bathroom": -0.31242046
    },
    {
      "\n": -0.021084098
    },
    {
      " walk": -0.004969265
    },
    {
      "('": -0.0056958986
    },
    {
      "bath": -0.0015100456
    },
    {
      "room": -0.00017484887
    },
    {
      "')": -0.00157398
    },
    {
      "\n": -0.007404595
    },
    {
      " #": -0.002232138
    },
    {
      " 1": -0.003037793
    },
    {
      ":": -0.0011333813
    },
    {
      " find": -0.07817246
    },
    {
      " toilet": -0.10123873
    },
    {
      "\n": -0.025031283
    },
    {
      " find": -0.26048902
    },
    {
      "('": -0.0010314062
    },
    {
      "to": -0.00064836355
    },
    {
      "ilet": -0.00026588395
    },
    {
      "')": -0.0021140417
    },
    {
      "\n": -0.005011856
    },
    {
      " #": -0.013418386
    },
    {
      " 2": -0.0050548096
    },
    {
      ":": -0.0014769132
    },
    {
      " grab": -0.60272384
    },
    {
      " toilet": -0.9224221
    },
    {
      " m": -0.48085853
    },
    {
      "op": -0.0001758016
    },
    {
      "\n": -0.43557546
    },
    {
      " find": -0.8621508
    },
    {
      "('": -0.0014496952
    },
    {
      "mop": -0.003323853
    },
    {
      "_": -0.60652107
    },
    {
      "\n": -0.0055539
    },
    {
      " grab": -0.21006744
    },
    {
      "('": -0.0011652457
    },
    {
      "mop": -0.00041315737
    },
    {
      "')": -0.0028934204
    },
    {
      "\n": -0.004885287
    },
    {
      " #": -0.1321748
    },
    {
      "('": -0.0034469354
    },
    {
      "mop": -0.17518002
    },
    {
      "'": -0.0037837895
    },
    {
      " in": -0.022269964
    },
    {
      " '": -0.00550697
    },
    {
      "hands": -0.012800279
    },
    {
      "')": -0.016318638
    },
    {
      "\n": -0.004529799
    },
    {
      " else": -0.022448188
    },
    {
      ":": -0.004455138
    },
    {
      " grab": -0.03387298
    },
    {
      "('": -0.0019911826
    },
    {
      "mop": -0.0004946726
    },
    {
      "')": -0.0033949031
    },
    {
      "\n": -0.0053328755
    },
    {
      " #": -0.15745749
    },
    {
      " 3": -0.008781573
    },
    {
      ":": -0.0014961967
    },
    {
      " wipe": -1.7377894
    },
    {
      " the": -0.24140632
    },
    {
      " toilet": -0.03658481
    },
    {
      "\n": -0.16440287
    },
    {
      " tur": -0.8286369
    },
    {
      "nt": -7.136165e-05
    },
    {
      "o": -0.00022158712
    },
    {
      "('": -0.00055639644
    },
    {
      "to": -0.0054200096
    },
    {
      "ilet": -0.00016852893
    },
    {
      "')": -0.0010429798
    },
    {
      "\n": -0.004451486
    },
    {
      " look": -0.828756
    },
    {
      "at": -0.00082551886
    },
    {
      "('": -0.0005013521
    },
    {
      "to": -0.000884698
    },
    {
      "ilet": -3.881579e-05
    },
    {
      "')": -0.001363742
    },
    {
      "\n": -0.003766319
    },
    {
      " wipe": -0.43011144
    },
    {
      "('": -0.0012602521
    },
    {
      "to": -0.01152946
    },
    {
      "ilet": -0.0006156178
    },
    {
      "')": -0.006654943
    },
    {
      "\n": -0.011450353
    },
    {
      " #": -0.06764396
    },
    {
      " 4": -0.008872192
    },
    {
      ":": -0.0015770249
    },
    {
      " put": -0.56806004
    },
    {
      " m": -0.74442065
    },
    {
      " m": -0.0018342396
    },
    {
      "op": -0.00012715602
    },
    {
      " back": -0.047097888
    },
    {
      "\n": -0.02447554
    },
    {
      " assert": -0.71613723
    },
    {
      "obj": -0.49905026
    },
    {
      "('": -0.0037749952
    },
    {
      "mop": -0.002752652
    },
    {
      "')": -0.014246525
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Request failed due to server shutdown {
  "error": {
    "message": "Request failed due to server shutdown",
    "type": "server_error",
    "param": null,
    "code": null
  }
}
 500 {'error': {'message': 'Request failed due to server shutdown', 'type': 'server_error', 'param': None, 'code': None}} {'Date': 'Tue, 06 Jun 2023 00:19:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '141', 'Connection': 'keep-alive', 'access-control-allow-origin': '*', 'openai-model': 'text-davinci-003', 'openai-organization': 'user-5g8wugezqx18rcxqyoyqdic0', 'openai-processing-ms': '1533', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=15724800; includeSubDomains', 'x-ratelimit-limit-requests': '60', 'x-ratelimit-limit-tokens': '150000', 'x-ratelimit-remaining-requests': '59', 'x-ratelimit-remaining-tokens': '148975', 'x-ratelimit-reset-requests': '1s', 'x-ratelimit-reset-tokens': '409ms', 'x-request-id': 'dcc750a4da0677639cf79356d0f9d472', 'CF-Cache-Status': 'DYNAMIC', 'Server': 'cloudflare', 'CF-RAY': '7d2c7c7f7c3b08c7-LAX', 'alt-svc': 'h3=":443"; ma=86400'} Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 13.359192848205566
[(" # 0: find monitor\n find('monitor')\n # 1: grab cloth\n find('cloth')\n grab('cloth')\n # 2: wipe the monitor\n assert('close' to 'monitor')\n else: find('monitor')\n wipe('monitor')\n # 3: put the cloth back\n putobjback('cloth')\n # 4: Done\ndef clean_room():\n # 0: walk to bedroom\n walk('bedroom')\n # 1: find bed\n find('bed')\n # 2: make bed\n pull('sheets')\n pull('pillow')\n turnto('bed')\n lookat('bed')\n # 3: find vacuum\n find('vacuum')\n # 4: vacuum the floor\n plug('vacuum')\n turnto('vacuum')\n lookat('vacuum')\n vacuum('floor')\n # 5: find mop\n find('mop')\n # 6: mop the floor\n wash('floor')\n # 7: find dustpan\n find('dustpan')\n # 8: sweep the floor\n sweep('floor')\n # 9: find trash can\n find('trash_can')\n # 10: throw away trash\n throwaway('trash')\n # 11: Done", <OpenAIObject at 0x7fd979170220> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3363,
    3364,
    3369,
    3371,
    3378,
    3380,
    3381,
    3383,
    3385,
    3386,
    3391,
    3397,
    3398,
    3403,
    3405,
    3410,
    3412,
    3413,
    3418,
    3420,
    3425,
    3427,
    3428,
    3430,
    3432,
    3433,
    3438,
    3442,
    3450,
    3451,
    3458,
    3460,
    3465,
    3466,
    3469,
    3471,
    3478,
    3480,
    3481,
    3486,
    3487,
    3492,
    3494,
    3501,
    3503,
    3504,
    3509,
    3511,
    3518,
    3520,
    3521,
    3523,
    3525,
    3526,
    3530,
    3534,
    3540,
    3545,
    3546,
    3550,
    3553,
    3557,
    3559,
    3564,
    3566,
    3567,
    3569,
    3571,
    3572,
    3577,
    3578,
    3581,
    3587,
    3588,
    3592,
    3595,
    3596,
    3598,
    3600,
    3601,
    3606,
    3609,
    3617,
    3618,
    3623,
    3625,
    3632,
    3634,
    3635,
    3637,
    3639,
    3640,
    3645,
    3649,
    3650,
    3655,
    3657,
    3660,
    3662,
    3663,
    3665,
    3667,
    3668,
    3673,
    3677,
    3678,
    3683,
    3685,
    3691,
    3693,
    3694,
    3699,
    3701,
    3705,
    3707,
    3709,
    3710,
    3714,
    3716,
    3717,
    3719,
    3722,
    3724,
    3725,
    3730,
    3732,
    3734,
    3737,
    3739,
    3740,
    3742,
    3744,
    3745,
    3750,
    3757,
    3758,
    3763,
    3765,
    3766,
    3768,
    3771,
    3773,
    3774,
    3776,
    3778,
    3779,
    3786,
    3790,
    3796,
    3797,
    3802,
    3804,
    3805,
    3807,
    3810,
    3812,
    3813,
    3817,
    3819,
    3820,
    3822,
    3823,
    3825,
    3828,
    3830,
    3831,
    3836,
    3838,
    3840,
    3841,
    3843,
    3846,
    3848,
    3849,
    3856,
    3858,
    3863,
    3865,
    3866,
    3868,
    3870,
    3871,
    3876,
    3878,
    3880,
    3881,
    3886,
    3888,
    3891,
    3893,
    3894,
    3896,
    3898,
    3899,
    3901,
    3903,
    3907,
    3913,
    3914,
    3919,
    3921,
    3926,
    3928,
    3929,
    3931,
    3933,
    3934,
    3939,
    3944,
    3947,
    3948,
    3953,
    3955,
    3959,
    3962,
    3964,
    3965,
    3967,
    3969,
    3970,
    3976,
    3980,
    3986,
    3987,
    3993,
    3995,
    4000,
    4002,
    4003,
    4005,
    4007,
    4008,
    4013,
    4019,
    4023,
    4024,
    4029,
    4031,
    4033,
    4036,
    4037,
    4040,
    4042,
    4043,
    4045,
    4048,
    4049,
    4055,
    4060,
    4066,
    4067,
    4073,
    4077,
    4079,
    4081,
    4084,
    4086,
    4087,
    4089,
    4092,
    4093
  ],
  "token_logprobs": [
    -0.025848664,
    -0.009016708,
    -0.0024470973,
    -0.43529263,
    -0.35551617,
    -0.024713602,
    -0.037178457,
    -0.0019322382,
    -0.053910494,
    -0.0036683232,
    -0.006935674,
    -0.0027417168,
    -0.0029018493,
    -0.00090140215,
    -0.39801368,
    -0.8836634,
    -0.072829075,
    -0.7750866,
    -0.0011495523,
    -0.016795857,
    -0.0025676226,
    -0.0062161204,
    -0.12812017,
    -0.0009894016,
    -0.0011731237,
    -0.0016265763,
    -0.0049907696,
    -0.18707088,
    -0.0076077543,
    -0.001148838,
    -0.7613512,
    -1.028441,
    -0.06191804,
    -0.10980333,
    -0.52033436,
    -0.0018304202,
    -0.28287306,
    -0.005102855,
    -0.0008044011,
    -0.0021782557,
    -0.016797798,
    -0.013117772,
    -0.0050922506,
    -0.0021200152,
    -0.0017648564,
    -0.0048432993,
    -0.0015700395,
    -0.0014925548,
    -0.0028895943,
    -0.004803769,
    -0.22120008,
    -0.0013081167,
    -0.14454725,
    -0.05677829,
    -0.013987125,
    -0.60219663,
    -0.008845131,
    -0.0015296832,
    -0.6603121,
    -1.0012372,
    -0.008590257,
    -0.06541905,
    -0.022610713,
    -1.0470989,
    -0.7160025,
    -0.006403263,
    -0.0017201925,
    -0.007053319,
    -0.0041110585,
    -0.31808057,
    -0.035994977,
    -0.0066107824,
    -0.002235962,
    -0.2638824,
    -1.1194781,
    -0.30647442,
    -2.5480983,
    -0.0008484867,
    -1.6086951,
    -0.026209606,
    -0.016461931,
    -0.0075583877,
    -0.008355941,
    -0.0030613486,
    -0.9955977,
    -0.45778626,
    -0.30137625,
    -0.02338926,
    -0.0046559665,
    -0.0031718444,
    -0.0020472042,
    -0.0014305355,
    -0.009067232,
    -0.0030526798,
    -0.003859299,
    -0.0007042508,
    -0.20940237,
    -1.4800084,
    -0.035430074,
    -0.4834632,
    -0.0007636599,
    -0.00040665813,
    -0.0016223975,
    -0.0050270124,
    -0.017211635,
    -0.002639098,
    -0.0012188359,
    -0.26579356,
    -0.47255358,
    -0.021720253,
    -0.8952863,
    -0.006996535,
    -1.6430048,
    -0.0053193946,
    -0.009274581,
    -1.2465496,
    -0.0015035991,
    -0.100440845,
    -0.15070526,
    -0.0083384495,
    -0.008613641,
    -4.601516,
    -6.921402e-05,
    -0.0012220555,
    -0.00065599853,
    -0.23827773,
    -0.0020691864,
    -0.005119331,
    -0.8379254,
    -0.00085278286,
    -0.00047147667,
    -0.0021077716,
    -0.0011677528,
    -0.0051933248,
    -0.35181442,
    -0.0072253095,
    -0.0008844586,
    -0.39665112,
    -3.1346338,
    -0.64291435,
    -0.10836471,
    -0.0008642354,
    -0.0037603963,
    -4.9782993e-05,
    -0.00078525353,
    -0.005933911,
    -0.0044477754,
    -0.120184325,
    -0.0032764315,
    -0.00087980577,
    -0.31564078,
    -0.3312707,
    -0.60842246,
    -0.012261842,
    -3.7868364,
    -0.37692633,
    -0.0026867897,
    -0.00051971956,
    -0.00041494548,
    -0.0076812105,
    -0.0065772426,
    -3.5120034,
    -9.234426e-05,
    -0.0016171437,
    -0.0006114436,
    -0.22305167,
    -6.909574e-05,
    -0.00064359145,
    -0.0022801077,
    -0.0040220045,
    -0.41313487,
    -0.0007693875,
    -0.00068313396,
    -0.0015621595,
    -9.115311e-05,
    -0.00023690966,
    -0.0021244946,
    -0.00416211,
    -1.3366407,
    -0.08777844,
    -0.07208809,
    -0.0012906296,
    -0.0091758035,
    -0.17963624,
    -0.0051615085,
    -0.0013315736,
    -0.8320166,
    -1.3275164,
    -0.00021586417,
    -0.12283629,
    -0.008743632,
    -0.00095951214,
    -0.00030046387,
    -0.011496236,
    -0.003927214,
    -0.022635652,
    -0.0030125028,
    -0.00084144867,
    -0.014661789,
    -0.00017186676,
    -0.03135217,
    -0.0036269834,
    -0.008895464,
    -4.4510736,
    -0.002284709,
    -0.31774047,
    -0.0046298592,
    -0.010240678,
    -0.16349375,
    -0.0065065664,
    -0.0010352256,
    -0.81709415,
    -0.49658293,
    -0.6537877,
    -0.049237367,
    -0.0045144726,
    -0.0013845743,
    -0.0024594676,
    -0.0024797819,
    -0.0030921411,
    -0.0031393163,
    -0.0056339167,
    -0.0012652673,
    -0.0010737103,
    -0.31610608,
    -0.09092373,
    -0.043982927,
    -0.010349618,
    -0.0543537,
    -0.0023577753,
    -0.002052759,
    -0.0039713182,
    -0.0064895307,
    -0.021012878,
    -0.0038041917,
    -0.0018306596,
    -0.95817035,
    -0.28533563,
    -1.0015848,
    -0.013915561,
    -0.004658421,
    -0.0013151594,
    -0.00065671286,
    -0.00041220273,
    -0.7412167,
    -0.0009002092,
    -0.0019302672,
    -0.0038378178,
    -0.0028988598,
    -0.008299926,
    -0.00074188696,
    -0.97305447,
    -0.5975219,
    -0.6989739,
    -0.013775653,
    -0.5374018,
    -1.0902523,
    -0.005697698,
    -0.0021930092,
    -0.00019118235,
    -0.022419903,
    -0.013752571,
    -0.006710508,
    -0.0040120105,
    -0.0024235577,
    -0.36361653
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " monitor",
    "\n",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " cloth",
    "\n",
    " find",
    "('",
    "cloth",
    "')",
    "\n",
    " grab",
    "('",
    "cloth",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " wipe",
    " the",
    " monitor",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "monitor",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " wipe",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " the",
    " cloth",
    " back",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "cloth",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done",
    "\n",
    "def",
    " clean",
    "_",
    "room",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " make",
    " bed",
    "\n",
    " pull",
    "('",
    "sheets",
    "')",
    "\n",
    " pull",
    "('",
    "pill",
    "ow",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " vacuum",
    "\n",
    " find",
    "('",
    "v",
    "ac",
    "uum",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " vacuum",
    " the",
    " floor",
    "\n",
    " plug",
    "('",
    "v",
    "ac",
    "uum",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "v",
    "ac",
    "uum",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "v",
    "ac",
    "uum",
    "')",
    "\n",
    " vacuum",
    "('",
    "floor",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " find",
    " m",
    "op",
    "\n",
    " find",
    "('",
    "mop",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " m",
    "op",
    " the",
    " floor",
    "\n",
    " wash",
    "('",
    "floor",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " find",
    " dust",
    "pan",
    "\n",
    " find",
    "('",
    "dust",
    "pan",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " sweep",
    " the",
    " floor",
    "\n",
    " sweep",
    "('",
    "floor",
    "')",
    "\n",
    " #",
    " 9",
    ":",
    " find",
    " trash",
    " can",
    "\n",
    " find",
    "('",
    "tr",
    "ash",
    "_",
    "can",
    "')",
    "\n",
    " #",
    " 10",
    ":",
    " throw",
    " away",
    " trash",
    "\n",
    " throw",
    "away",
    "('",
    "tr",
    "ash",
    "')",
    "\n",
    " #",
    " 11",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.025848664
    },
    {
      " 0": -0.009016708
    },
    {
      ":": -0.0024470973
    },
    {
      " find": -0.43529263
    },
    {
      " monitor": -0.35551617
    },
    {
      "\n": -0.024713602
    },
    {
      " find": -0.037178457
    },
    {
      "('": -0.0019322382
    },
    {
      "monitor": -0.053910494
    },
    {
      "')": -0.0036683232
    },
    {
      "\n": -0.006935674
    },
    {
      " #": -0.0027417168
    },
    {
      " 1": -0.0029018493
    },
    {
      ":": -0.00090140215
    },
    {
      " grab": -0.39801368
    },
    {
      " cloth": -0.8836634
    },
    {
      "\n": -0.072829075
    },
    {
      " find": -0.7750866
    },
    {
      "('": -0.0011495523
    },
    {
      "cloth": -0.016795857
    },
    {
      "')": -0.0025676226
    },
    {
      "\n": -0.0062161204
    },
    {
      " grab": -0.12812017
    },
    {
      "('": -0.0009894016
    },
    {
      "cloth": -0.0011731237
    },
    {
      "')": -0.0016265763
    },
    {
      "\n": -0.0049907696
    },
    {
      " #": -0.18707088
    },
    {
      " 2": -0.0076077543
    },
    {
      ":": -0.001148838
    },
    {
      " wipe": -0.7613512
    },
    {
      " monitor": -0.59294933
    },
    {
      " monitor": -0.06191804
    },
    {
      "\n": -0.10980333
    },
    {
      " assert": -0.52033436
    },
    {
      "('": -0.0018304202
    },
    {
      "close": -0.28287306
    },
    {
      "'": -0.005102855
    },
    {
      " to": -0.0008044011
    },
    {
      " '": -0.0021782557
    },
    {
      "monitor": -0.016797798
    },
    {
      "')": -0.013117772
    },
    {
      "\n": -0.0050922506
    },
    {
      " else": -0.0021200152
    },
    {
      ":": -0.0017648564
    },
    {
      " find": -0.0048432993
    },
    {
      "('": -0.0015700395
    },
    {
      "monitor": -0.0014925548
    },
    {
      "')": -0.0028895943
    },
    {
      "\n": -0.004803769
    },
    {
      " wipe": -0.22120008
    },
    {
      "('": -0.0013081167
    },
    {
      "monitor": -0.14454725
    },
    {
      "')": -0.05677829
    },
    {
      "\n": -0.013987125
    },
    {
      " #": -0.60219663
    },
    {
      " 3": -0.008845131
    },
    {
      ":": -0.0015296832
    },
    {
      " put": -0.6603121
    },
    {
      " cloth": -0.8927242
    },
    {
      " cloth": -0.008590257
    },
    {
      " back": -0.06541905
    },
    {
      "\n": -0.022610713
    },
    {
      " assert": -0.48962003
    },
    {
      "obj": -0.7160025
    },
    {
      "back": -0.006403263
    },
    {
      "('": -0.0017201925
    },
    {
      "cloth": -0.007053319
    },
    {
      "')": -0.0041110585
    },
    {
      "\n": -0.31808057
    },
    {
      " #": -0.035994977
    },
    {
      " 4": -0.0066107824
    },
    {
      ":": -0.002235962
    },
    {
      " Done": -0.2638824
    },
    {
      "<|endoftext|>": -0.43593773
    },
    {
      "def": -0.30647442
    },
    {
      " make": -1.3371876
    },
    {
      "_": -0.0008484867
    },
    {
      "room": -1.6086951
    },
    {
      "():": -0.026209606
    },
    {
      "\n": -0.016461931
    },
    {
      " #": -0.0075583877
    },
    {
      " 0": -0.008355941
    },
    {
      ":": -0.0030613486
    },
    {
      " find": -0.9755581
    },
    {
      " to": -0.45778626
    },
    {
      " bedroom": -0.30137625
    },
    {
      "\n": -0.02338926
    },
    {
      " walk": -0.0046559665
    },
    {
      "('": -0.0031718444
    },
    {
      "bedroom": -0.0020472042
    },
    {
      "')": -0.0014305355
    },
    {
      "\n": -0.009067232
    },
    {
      " #": -0.0030526798
    },
    {
      " 1": -0.003859299
    },
    {
      ":": -0.0007042508
    },
    {
      " find": -0.20940237
    },
    {
      " dust": -1.168254
    },
    {
      "\n": -0.035430074
    },
    {
      " find": -0.4834632
    },
    {
      "('": -0.0007636599
    },
    {
      "bed": -0.00040665813
    },
    {
      "')": -0.0016223975
    },
    {
      "\n": -0.0050270124
    },
    {
      " #": -0.017211635
    },
    {
      " 2": -0.002639098
    },
    {
      ":": -0.0012188359
    },
    {
      " make": -0.26579356
    },
    {
      " bed": -0.47255358
    },
    {
      "\n": -0.021720253
    },
    {
      " pull": -0.8952863
    },
    {
      "('": -0.006996535
    },
    {
      "bed": -0.3839736
    },
    {
      "')": -0.0053193946
    },
    {
      "\n": -0.009274581
    },
    {
      " push": -1.205675
    },
    {
      "('": -0.0015035991
    },
    {
      "pill": -0.100440845
    },
    {
      "ow": -0.15070526
    },
    {
      "')": -0.0083384495
    },
    {
      "\n": -0.008613641
    },
    {
      " #": -1.0530361
    },
    {
      "nt": -6.921402e-05
    },
    {
      "o": -0.0012220555
    },
    {
      "('": -0.00065599853
    },
    {
      "bed": -0.23827773
    },
    {
      "')": -0.0020691864
    },
    {
      "\n": -0.005119331
    },
    {
      " look": -0.8379254
    },
    {
      "at": -0.00085278286
    },
    {
      "('": -0.00047147667
    },
    {
      "bed": -0.0021077716
    },
    {
      "')": -0.0011677528
    },
    {
      "\n": -0.0051933248
    },
    {
      " #": -0.35181442
    },
    {
      " 3": -0.0072253095
    },
    {
      ":": -0.0008844586
    },
    {
      " find": -0.39665112
    },
    {
      " dust": -1.0970688
    },
    {
      "\n": -0.64291435
    },
    {
      " find": -0.10836471
    },
    {
      "('": -0.0008642354
    },
    {
      "v": -0.0037603963
    },
    {
      "ac": -4.9782993e-05
    },
    {
      "uum": -0.00078525353
    },
    {
      "')": -0.005933911
    },
    {
      "\n": -0.0044477754
    },
    {
      " #": -0.120184325
    },
    {
      " 4": -0.0032764315
    },
    {
      ":": -0.00087980577
    },
    {
      " vacuum": -0.31564078
    },
    {
      " the": -0.3312707
    },
    {
      " floor": -0.60842246
    },
    {
      "\n": -0.012261842
    },
    {
      " assert": -0.57934755
    },
    {
      "('": -0.37692633
    },
    {
      "v": -0.0026867897
    },
    {
      "ac": -0.00051971956
    },
    {
      "uum": -0.00041494548
    },
    {
      "')": -0.0076812105
    },
    {
      "\n": -0.0065772426
    },
    {
      " push": -1.5501944
    },
    {
      "nt": -9.234426e-05
    },
    {
      "o": -0.0016171437
    },
    {
      "('": -0.0006114436
    },
    {
      "v": -0.22305167
    },
    {
      "ac": -6.909574e-05
    },
    {
      "uum": -0.00064359145
    },
    {
      "')": -0.0022801077
    },
    {
      "\n": -0.0040220045
    },
    {
      " look": -0.41313487
    },
    {
      "at": -0.0007693875
    },
    {
      "('": -0.00068313396
    },
    {
      "v": -0.0015621595
    },
    {
      "ac": -9.115311e-05
    },
    {
      "uum": -0.00023690966
    },
    {
      "')": -0.0021244946
    },
    {
      "\n": -0.00416211
    },
    {
      " assert": -1.2305272
    },
    {
      "('": -0.08777844
    },
    {
      "floor": -0.07208809
    },
    {
      "')": -0.0012906296
    },
    {
      "\n": -0.0091758035
    },
    {
      " #": -0.17963624
    },
    {
      " 5": -0.0051615085
    },
    {
      ":": -0.0013315736
    },
    {
      " find": -0.8320166
    },
    {
      " dust": -0.89281446
    },
    {
      "op": -0.00021586417
    },
    {
      "\n": -0.12283629
    },
    {
      " find": -0.008743632
    },
    {
      "('": -0.00095951214
    },
    {
      "mop": -0.00030046387
    },
    {
      "')": -0.011496236
    },
    {
      "\n": -0.003927214
    },
    {
      " #": -0.022635652
    },
    {
      " 6": -0.0030125028
    },
    {
      ":": -0.00084144867
    },
    {
      " m": -0.014661789
    },
    {
      "op": -0.00017186676
    },
    {
      " the": -0.03135217
    },
    {
      " floor": -0.0036269834
    },
    {
      "\n": -0.008895464
    },
    {
      " m": -1.4344931
    },
    {
      "('": -0.002284709
    },
    {
      "floor": -0.31774047
    },
    {
      "')": -0.0046298592
    },
    {
      "\n": -0.010240678
    },
    {
      " #": -0.16349375
    },
    {
      " 7": -0.0065065664
    },
    {
      ":": -0.0010352256
    },
    {
      " find": -0.81709415
    },
    {
      " dust": -0.49658293
    },
    {
      "pan": -0.6537877
    },
    {
      "\n": -0.049237367
    },
    {
      " find": -0.0045144726
    },
    {
      "('": -0.0013845743
    },
    {
      "dust": -0.0024594676
    },
    {
      "pan": -0.0024797819
    },
    {
      "')": -0.0030921411
    },
    {
      "\n": -0.0031393163
    },
    {
      " #": -0.0056339167
    },
    {
      " 8": -0.0012652673
    },
    {
      ":": -0.0010737103
    },
    {
      " sweep": -0.31610608
    },
    {
      " the": -0.09092373
    },
    {
      " floor": -0.043982927
    },
    {
      "\n": -0.010349618
    },
    {
      " sweep": -0.0543537
    },
    {
      "('": -0.0023577753
    },
    {
      "floor": -0.002052759
    },
    {
      "')": -0.0039713182
    },
    {
      "\n": -0.0064895307
    },
    {
      " #": -0.021012878
    },
    {
      " 9": -0.0038041917
    },
    {
      ":": -0.0018306596
    },
    {
      " find": -0.95817035
    },
    {
      " trash": -0.28533563
    },
    {
      "can": -0.5968862
    },
    {
      "\n": -0.013915561
    },
    {
      " find": -0.004658421
    },
    {
      "('": -0.0013151594
    },
    {
      "tr": -0.00065671286
    },
    {
      "ash": -0.00041220273
    },
    {
      "can": -0.69705397
    },
    {
      "can": -0.0009002092
    },
    {
      "')": -0.0019302672
    },
    {
      "\n": -0.0038378178
    },
    {
      " #": -0.0028988598
    },
    {
      " 10": -0.008299926
    },
    {
      ":": -0.00074188696
    },
    {
      " throw": -0.97305447
    },
    {
      " away": -0.5975219
    },
    {
      " trash": -0.6989739
    },
    {
      "\n": -0.013775653
    },
    {
      " throw": -0.5374018
    },
    {
      "('": -0.49891308
    },
    {
      "('": -0.005697698
    },
    {
      "tr": -0.0021930092
    },
    {
      "ash": -0.00019118235
    },
    {
      "')": -0.022419903
    },
    {
      "\n": -0.013752571
    },
    {
      " #": -0.006710508
    },
    {
      " 11": -0.0040120105
    },
    {
      ":": -0.0024235577
    },
    {
      " Done": -0.36361653
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.1385302543640137
[(" # 0: find the remote control\n find('remote_control')\n # 1: find television\n find('television')\n # 2: turn on tv with remote control\n assert('close' to 'tv')\n else: find('tv')\n assert('remote_control' in 'hands'):\n else: find('remote_control')\n assert('tv' is 'switchoff')\n else: switchoff('tv')\n switchon('television')\n # 3: look at the television\n turnto('television')\n lookat('television')", <OpenAIObject at 0x7fd9791a46d0> JSON: {
  "text_offset": [
    3343,
    3345,
    3347,
    3348,
    3353,
    3357,
    3364,
    3372,
    3373,
    3378,
    3380,
    3386,
    3387,
    3394,
    3396,
    3397,
    3399,
    3401,
    3402,
    3407,
    3418,
    3419,
    3424,
    3426,
    3428,
    3436,
    3438,
    3439,
    3441,
    3443,
    3444,
    3449,
    3452,
    3455,
    3460,
    3467,
    3475,
    3476,
    3483,
    3485,
    3490,
    3491,
    3494,
    3496,
    3498,
    3500,
    3501,
    3506,
    3507,
    3512,
    3514,
    3516,
    3518,
    3519,
    3526,
    3528,
    3534,
    3535,
    3542,
    3543,
    3546,
    3548,
    3553,
    3554,
    3556,
    3557,
    3562,
    3563,
    3568,
    3570,
    3576,
    3577,
    3584,
    3586,
    3587,
    3594,
    3596,
    3598,
    3599,
    3602,
    3604,
    3610,
    3613,
    3615,
    3616,
    3621,
    3622,
    3629,
    3632,
    3634,
    3636,
    3638,
    3639,
    3646,
    3648,
    3650,
    3652,
    3660,
    3662,
    3663,
    3665,
    3667,
    3668,
    3673,
    3676,
    3680,
    3691,
    3692,
    3696,
    3698,
    3699,
    3701,
    3703,
    3711,
    3713,
    3714,
    3719,
    3721,
    3723,
    3725,
    3733
  ],
  "token_logprobs": [
    -0.015311786,
    -0.008390741,
    -0.0015365494,
    -1.2509737,
    -1.0047041,
    -0.13118237,
    -0.048220593,
    -0.0113209775,
    -0.0075759245,
    -0.0012060065,
    -0.0012822766,
    -0.0029334736,
    -0.0006317222,
    -0.002102513,
    -0.003950731,
    -0.0016598898,
    -0.0019578561,
    -0.00022361554,
    -0.027913587,
    -0.081745,
    -0.0035136882,
    -0.004861448,
    -0.00027387374,
    -0.0024151935,
    -0.00013800588,
    -0.0014993001,
    -0.0022970166,
    -0.0009929797,
    -0.002770106,
    -0.00020310696,
    -0.024753189,
    -0.0021662475,
    -0.033883337,
    -0.009191385,
    -0.0019193985,
    -0.0035051343,
    -0.0019649626,
    -0.01076116,
    -0.00033158858,
    -0.0048132944,
    -0.0011206109,
    -0.00028353152,
    -0.0005828758,
    -0.009577473,
    -0.0018790873,
    -0.0018691751,
    -0.00051626156,
    -0.00041327655,
    -0.00075924635,
    -0.00031858825,
    -0.00037254943,
    -0.0010583155,
    -0.0014970293,
    -0.024265075,
    -0.00016566887,
    -0.0003133412,
    -0.00036694473,
    -0.00026552632,
    -0.00040129185,
    -0.00086495065,
    -0.00062671263,
    -0.000861609,
    -0.12620616,
    -0.00081979216,
    -0.0012991048,
    -0.00038853093,
    -0.00019607085,
    -0.0013262617,
    -0.00045048565,
    -0.00019499795,
    -9.771052e-05,
    -0.0002131233,
    -0.0004988487,
    -0.0011519402,
    -0.2606379,
    -0.00011690406,
    -0.0005651034,
    -0.0003233585,
    -0.00028651362,
    -0.0006543287,
    -0.0017134446,
    -0.0011926383,
    -0.0012364413,
    -0.0008604169,
    -0.0011030084,
    -0.00019118235,
    -0.00017055642,
    -0.00038650344,
    -0.00019487782,
    -0.00013323847,
    -0.0009349317,
    -0.0014561428,
    -0.0005982039,
    -7.922942e-05,
    -0.00014718683,
    -0.0016143982,
    -0.0005790592,
    -0.0014378766,
    -0.14220957,
    -0.02292706,
    -0.009137064,
    -0.0006242074,
    -0.74350494,
    -0.0014397867,
    -0.027470795,
    -0.006119442,
    -0.003979153,
    -0.01193262,
    -2.7371756e-05,
    -0.0002058497,
    -0.00018772435,
    -0.0006666147,
    -0.00018188405,
    -0.0008823119,
    -0.002377134,
    -0.0013713825,
    -7.350647e-05,
    -0.0004175709,
    -0.0003016569,
    -0.00010557923,
    -0.0019535597
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " the",
    " remote",
    " control",
    "\n",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " television",
    "\n",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " tv",
    " with",
    " remote",
    " control",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "tv",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "tv",
    "')",
    "\n",
    " assert",
    "('",
    "remote",
    "_",
    "control",
    "'",
    " in",
    " '",
    "hands",
    "'",
    "):",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " assert",
    "('",
    "tv",
    "'",
    " is",
    " '",
    "switch",
    "off",
    "')",
    "\n",
    " else",
    ":",
    " switch",
    "off",
    "('",
    "tv",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " look",
    " at",
    " the",
    " television",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "te",
    "levision",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.015311786
    },
    {
      " 0": -0.008390741
    },
    {
      ":": -0.0015365494
    },
    {
      " walk": -0.41678515
    },
    {
      " the": -1.0047041
    },
    {
      " remote": -0.13118237
    },
    {
      " control": -0.048220593
    },
    {
      "\n": -0.0113209775
    },
    {
      " find": -0.0075759245
    },
    {
      "('": -0.0012060065
    },
    {
      "remote": -0.0012822766
    },
    {
      "_": -0.0029334736
    },
    {
      "control": -0.0006317222
    },
    {
      "')": -0.002102513
    },
    {
      "\n": -0.003950731
    },
    {
      " #": -0.0016598898
    },
    {
      " 1": -0.0019578561
    },
    {
      ":": -0.00022361554
    },
    {
      " find": -0.027913587
    },
    {
      " television": -0.081745
    },
    {
      "\n": -0.0035136882
    },
    {
      " find": -0.004861448
    },
    {
      "('": -0.00027387374
    },
    {
      "te": -0.0024151935
    },
    {
      "levision": -0.00013800588
    },
    {
      "')": -0.0014993001
    },
    {
      "\n": -0.0022970166
    },
    {
      " #": -0.0009929797
    },
    {
      " 2": -0.002770106
    },
    {
      ":": -0.00020310696
    },
    {
      " turn": -0.024753189
    },
    {
      " on": -0.0021662475
    },
    {
      " tv": -0.033883337
    },
    {
      " with": -0.009191385
    },
    {
      " remote": -0.0019193985
    },
    {
      " control": -0.0035051343
    },
    {
      "\n": -0.0019649626
    },
    {
      " assert": -0.01076116
    },
    {
      "('": -0.00033158858
    },
    {
      "close": -0.0048132944
    },
    {
      "'": -0.0011206109
    },
    {
      " to": -0.00028353152
    },
    {
      " '": -0.0005828758
    },
    {
      "tv": -0.009577473
    },
    {
      "')": -0.0018790873
    },
    {
      "\n": -0.0018691751
    },
    {
      " else": -0.00051626156
    },
    {
      ":": -0.00041327655
    },
    {
      " find": -0.00075924635
    },
    {
      "('": -0.00031858825
    },
    {
      "tv": -0.00037254943
    },
    {
      "')": -0.0010583155
    },
    {
      "\n": -0.0014970293
    },
    {
      " assert": -0.024265075
    },
    {
      "('": -0.00016566887
    },
    {
      "remote": -0.0003133412
    },
    {
      "_": -0.00036694473
    },
    {
      "control": -0.00026552632
    },
    {
      "'": -0.00040129185
    },
    {
      " in": -0.00086495065
    },
    {
      " '": -0.00062671263
    },
    {
      "hands": -0.000861609
    },
    {
      "'": -0.12620616
    },
    {
      "):": -0.00081979216
    },
    {
      "\n": -0.0012991048
    },
    {
      " else": -0.00038853093
    },
    {
      ":": -0.00019607085
    },
    {
      " find": -0.0013262617
    },
    {
      "('": -0.00045048565
    },
    {
      "remote": -0.00019499795
    },
    {
      "_": -9.771052e-05
    },
    {
      "control": -0.0002131233
    },
    {
      "')": -0.0004988487
    },
    {
      "\n": -0.0011519402
    },
    {
      " assert": -0.2606379
    },
    {
      "('": -0.00011690406
    },
    {
      "tv": -0.0005651034
    },
    {
      "'": -0.0003233585
    },
    {
      " is": -0.00028651362
    },
    {
      " '": -0.0006543287
    },
    {
      "switch": -0.0017134446
    },
    {
      "off": -0.0011926383
    },
    {
      "')": -0.0012364413
    },
    {
      "\n": -0.0008604169
    },
    {
      " else": -0.0011030084
    },
    {
      ":": -0.00019118235
    },
    {
      " switch": -0.00017055642
    },
    {
      "off": -0.00038650344
    },
    {
      "('": -0.00019487782
    },
    {
      "tv": -0.00013323847
    },
    {
      "')": -0.0009349317
    },
    {
      "\n": -0.0014561428
    },
    {
      " switch": -0.0005982039
    },
    {
      "on": -7.922942e-05
    },
    {
      "('": -0.00014718683
    },
    {
      "te": -0.0016143982
    },
    {
      "levision": -0.0005790592
    },
    {
      "')": -0.0014378766
    },
    {
      "\n": -0.14220957
    },
    {
      " #": -0.02292706
    },
    {
      " 3": -0.009137064
    },
    {
      ":": -0.0006242074
    },
    {
      " look": -0.74350494
    },
    {
      " at": -0.0014397867
    },
    {
      " the": -0.027470795
    },
    {
      " television": -0.006119442
    },
    {
      "\n": -0.003979153
    },
    {
      " tur": -0.01193262
    },
    {
      "nt": -2.7371756e-05
    },
    {
      "o": -0.0002058497
    },
    {
      "('": -0.00018772435
    },
    {
      "te": -0.0006666147
    },
    {
      "levision": -0.00018188405
    },
    {
      "')": -0.0008823119
    },
    {
      "\n": -0.002377134
    },
    {
      " look": -0.0013713825
    },
    {
      "at": -7.350647e-05
    },
    {
      "('": -0.0004175709
    },
    {
      "te": -0.0003016569
    },
    {
      "levision": -0.00010557923
    },
    {
      "')": -0.0019535597
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 8.50770092010498
[(" # 0: walk to desk\n walk('desk')\n # 1: find computer\n find('computer')\n # 2: turn on computer\n assert('close' to 'computer')\n else: find('computer')\n plugin('computer')\n # 3: turn on monitor\n find('monitor')\n assert('close' to 'monitor')\n else: find('monitor')\n plugin('monitor')\n # 4: Done\ndef make_coffee():\n # 0: walk to kitchen\n walk('kitchen')\n # 1: find coffe maker\n find('coffe_maker')\n # 2: plug in the coffe maker\n assert('close' to 'coffe_maker')\n else: find('coffe_maker')\n plugin('coffe_maker')\n # 3: find filter\n find('coffee_filter')\n # 4: put filter in the coffe maker\n assert('close' to 'coffe_maker')\n else: find('coffe_maker')\n assert('close' to 'coffee_filter')\n else: find('coffee_filter')\n putin('coffee_filter', 'coffe_maker')\n # 5: pour water in the coffe maker\n assert('close' to 'coffe_maker')\n else: find('coffe_maker')\n pour('coffe_maker')\n # 6: turn on the coffe maker\n switchon('coffe_maker')\n # 7: Done", <OpenAIObject at 0x7fd9791ae3b0> JSON: {
  "text_offset": [
    3349,
    3351,
    3353,
    3354,
    3359,
    3362,
    3367,
    3368,
    3373,
    3375,
    3378,
    3379,
    3381,
    3382,
    3384,
    3386,
    3387,
    3392,
    3401,
    3402,
    3407,
    3409,
    3417,
    3419,
    3420,
    3422,
    3424,
    3425,
    3430,
    3433,
    3442,
    3443,
    3450,
    3452,
    3457,
    3458,
    3461,
    3463,
    3471,
    3473,
    3474,
    3479,
    3480,
    3485,
    3487,
    3495,
    3497,
    3498,
    3505,
    3507,
    3515,
    3517,
    3518,
    3520,
    3522,
    3523,
    3528,
    3531,
    3539,
    3540,
    3545,
    3547,
    3554,
    3556,
    3557,
    3564,
    3566,
    3571,
    3572,
    3575,
    3577,
    3584,
    3586,
    3587,
    3592,
    3593,
    3598,
    3600,
    3607,
    3609,
    3610,
    3617,
    3619,
    3626,
    3628,
    3629,
    3631,
    3633,
    3634,
    3639,
    3640,
    3643,
    3648,
    3649,
    3651,
    3655,
    3658,
    3659,
    3661,
    3663,
    3664,
    3669,
    3672,
    3680,
    3681,
    3686,
    3688,
    3691,
    3695,
    3697,
    3698,
    3700,
    3702,
    3703,
    3708,
    3711,
    3714,
    3720,
    3721,
    3726,
    3728,
    3730,
    3733,
    3734,
    3739,
    3741,
    3742,
    3744,
    3746,
    3747,
    3752,
    3755,
    3759,
    3762,
    3765,
    3771,
    3772,
    3779,
    3781,
    3786,
    3787,
    3790,
    3792,
    3794,
    3797,
    3798,
    3803,
    3805,
    3806,
    3811,
    3812,
    3817,
    3819,
    3821,
    3824,
    3825,
    3830,
    3832,
    3833,
    3840,
    3842,
    3844,
    3847,
    3848,
    3853,
    3855,
    3856,
    3858,
    3860,
    3861,
    3866,
    3873,
    3874,
    3879,
    3881,
    3883,
    3887,
    3888,
    3894,
    3896,
    3897,
    3899,
    3901,
    3902,
    3906,
    3913,
    3916,
    3920,
    3923,
    3926,
    3932,
    3933,
    3940,
    3942,
    3947,
    3948,
    3951,
    3953,
    3955,
    3958,
    3959,
    3964,
    3966,
    3967,
    3972,
    3973,
    3978,
    3980,
    3982,
    3985,
    3986,
    3991,
    3993,
    3994,
    4001,
    4003,
    4008,
    4009,
    4012,
    4014,
    4016,
    4020,
    4021,
    4027,
    4029,
    4030,
    4035,
    4036,
    4041,
    4043,
    4045,
    4049,
    4050,
    4056,
    4058,
    4059,
    4063,
    4065,
    4067,
    4069,
    4073,
    4074,
    4080,
    4082,
    4084,
    4086,
    4089,
    4090,
    4095,
    4097,
    4098,
    4100,
    4102,
    4103,
    4108,
    4114,
    4117,
    4121,
    4124,
    4127,
    4133,
    4134,
    4141,
    4143,
    4148,
    4149,
    4152,
    4154,
    4156,
    4159,
    4160,
    4165,
    4167,
    4168,
    4173,
    4174,
    4179,
    4181,
    4183,
    4186,
    4187,
    4192,
    4194,
    4195,
    4200,
    4202,
    4204,
    4207,
    4208,
    4213,
    4215,
    4216,
    4218,
    4220,
    4221,
    4226,
    4229,
    4233,
    4236,
    4239,
    4245,
    4246,
    4253,
    4255,
    4257,
    4259,
    4262,
    4263,
    4268,
    4270,
    4271,
    4273,
    4275,
    4276
  ],
  "token_logprobs": [
    -0.016480353,
    -0.008833344,
    -0.0017842611,
    -0.29112443,
    -0.1295982,
    -2.0305417,
    -0.022686316,
    -0.009489257,
    -0.003965093,
    -0.011376801,
    -0.0010873751,
    -0.001295046,
    -0.0069770883,
    -0.0056499215,
    -0.003046823,
    -0.0006020214,
    -0.06430373,
    -0.36647183,
    -0.02062971,
    -0.04425944,
    -0.0009536644,
    -0.0022304035,
    -0.0015773836,
    -0.0053861467,
    -0.005607006,
    -0.004200299,
    -0.0008117995,
    -0.4574967,
    -0.0176524,
    -0.6187078,
    -0.012589605,
    -0.3420668,
    -0.0014396667,
    -0.021186799,
    -0.0035600453,
    -0.0020166228,
    -0.0030484975,
    -0.0020706188,
    -0.004754541,
    -0.004573691,
    -0.0017247318,
    -0.0013320514,
    -0.00383393,
    -0.0014062395,
    -0.00077821646,
    -0.00232187,
    -0.0056997957,
    -1.5006585,
    -0.00092878635,
    -0.0017289098,
    -0.0022488046,
    -0.22080646,
    -0.24593262,
    -0.007695266,
    -0.0010909562,
    -1.9188432,
    -0.074086204,
    -0.4441483,
    -0.01670064,
    -0.5180444,
    -0.0011786139,
    -0.065235354,
    -0.0019532004,
    -0.004489684,
    -0.75119394,
    -0.0008564793,
    -0.021627733,
    -0.002846436,
    -0.0006783028,
    -0.0023660795,
    -0.0063755494,
    -0.0022992252,
    -0.0031180289,
    -0.0015991725,
    -0.0016396517,
    -0.0034812682,
    -0.0010802733,
    -0.0040906486,
    -0.002456479,
    -0.0043680295,
    -0.58381665,
    -0.00071081106,
    -0.0026984431,
    -0.002134173,
    -0.73226744,
    -0.09518522,
    -0.010780501,
    -0.0017655726,
    -0.37390503,
    -0.71901786,
    -0.8667371,
    -1.0635875,
    -0.0003659939,
    -0.1087448,
    -0.008017671,
    -0.02387102,
    -0.018320432,
    -0.009485827,
    -0.006357675,
    -0.0019414352,
    -0.70965385,
    -0.028871175,
    -0.1627554,
    -0.04021859,
    -0.004095738,
    -0.0028280246,
    -0.0016784583,
    -0.00017937786,
    -0.0030229662,
    -0.007748725,
    -0.0028675972,
    -0.0030996155,
    -0.00057607895,
    -0.031891976,
    -1.5177249,
    -0.0061786957,
    -0.26831007,
    -0.02621395,
    -0.0546095,
    -0.001190729,
    -0.0002570597,
    -0.6544764,
    -0.023069778,
    -0.0015543386,
    -0.0014377565,
    -0.0062946924,
    -0.004922902,
    -0.0041478667,
    -0.00068516337,
    -1.9382311,
    -0.097197734,
    -1.2856683,
    -0.4337973,
    -0.0058143,
    -0.013572928,
    -0.024562338,
    -0.74456334,
    -0.0012461086,
    -0.0055871047,
    -0.00203281,
    -0.00038328386,
    -0.00105205,
    -0.0005688007,
    -0.07743354,
    -0.0018563363,
    -0.0010102238,
    -0.0036649131,
    -0.004687047,
    -0.0009255631,
    -0.0011280102,
    -0.0027714204,
    -0.001343746,
    -0.00029140117,
    -0.013959504,
    -0.0010678634,
    -0.00032586468,
    -0.0029413027,
    -0.0055702603,
    -0.023968939,
    -0.0006641085,
    -0.00018975277,
    -0.046506703,
    -0.00075679924,
    -0.00038006424,
    -0.0018271959,
    -0.005552822,
    -0.0075553237,
    -0.007058181,
    -0.0007753527,
    -0.8228219,
    -1.4723599,
    -0.14657529,
    -0.015452027,
    -0.00093994226,
    -0.041943237,
    -0.08355824,
    -0.0012629976,
    -0.00050719705,
    -0.003398672,
    -0.0034509432,
    -0.04114637,
    -0.0033794728,
    -0.0009092193,
    -0.6364865,
    -0.26034433,
    -0.13951895,
    -1.2035786,
    -0.28853765,
    -0.0071513485,
    -0.009340939,
    -0.018418055,
    -0.29579785,
    -0.0014136416,
    -0.051703766,
    -0.0016077685,
    -0.00034571995,
    -0.0016171437,
    -0.036370363,
    -0.3669394,
    -0.0012273083,
    -0.0037893546,
    -0.017726535,
    -0.007327197,
    -0.011613575,
    -0.0008799249,
    -0.0051528816,
    -0.0009048029,
    -0.00021741669,
    -0.01273454,
    -0.00041935995,
    -0.0003626532,
    -0.0021926516,
    -0.0054337922,
    -1.3145756,
    -0.0011250263,
    -0.3958092,
    -0.0015327873,
    -0.0005231795,
    -0.0014209846,
    -0.02821335,
    -0.055722184,
    -0.0007490442,
    -0.00093516917,
    -0.003929844,
    -0.0045696795,
    -0.0012988653,
    -0.00096094364,
    -0.0044105346,
    -0.0011522978,
    -0.0010086722,
    -0.023517583,
    -0.00046658723,
    -0.0011746744,
    -0.003943729,
    -0.0064811907,
    -0.106690265,
    -0.08303869,
    -0.0054954626,
    -0.01368906,
    -0.39018378,
    -0.00041804678,
    -0.0014027805,
    -0.36363837,
    -0.0015486083,
    -0.00013645618,
    -0.039926123,
    -0.0007222635,
    -0.00051172887,
    -0.0019935097,
    -0.014395509,
    -0.0075428924,
    -0.0046809986,
    -0.0016046644,
    -1.2553825,
    -0.34095332,
    -0.50731236,
    -0.2639079,
    -0.08327582,
    -0.00094626687,
    -0.0052972226,
    -0.013055992,
    -1.6566552,
    -0.00060130615,
    -0.012171034,
    -0.0012333954,
    -0.00041315737,
    -0.0005541305,
    -0.005424323,
    -0.0067981184,
    -0.0001678165,
    -0.00012357882,
    -0.0011527737,
    -0.0016589344,
    -0.00057202304,
    -0.00041208262,
    -0.0008987768,
    -0.00050779217,
    -4.2870764e-05,
    -0.0016808463,
    -0.0004236524,
    -2.8921473e-05,
    -0.0017018636,
    -0.003756267,
    -0.088694245,
    -0.003384317,
    -0.8977872,
    -0.034165096,
    -0.0005910477,
    -0.00030201545,
    -0.017152937,
    -0.00790274,
    -0.012756031,
    -0.00419982,
    -0.0018039672,
    -0.6617122,
    -0.057811856,
    -0.29744935,
    -0.033627182,
    -0.001170855,
    -0.0038551698,
    -0.01654204,
    -0.56721765,
    -0.0008224166,
    -0.0006283825,
    -0.00014063035,
    -0.024062961,
    -0.0014824043,
    -0.00021431445,
    -0.0016671148,
    -0.0074655456,
    -0.00649031,
    -0.009018452,
    -0.0016945206,
    -0.40110946
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " desk",
    "\n",
    " walk",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " plugin",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " turn",
    " on",
    " monitor",
    "\n",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "monitor",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " plugin",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done",
    "\n",
    "def",
    " make",
    "_",
    "co",
    "ffee",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " kitchen",
    "\n",
    " walk",
    "('",
    "kit",
    "chen",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " co",
    "ffe",
    " maker",
    "\n",
    " find",
    "('",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " plug",
    " in",
    " the",
    " co",
    "ffe",
    " maker",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " plugin",
    "('",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " filter",
    "\n",
    " find",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " filter",
    " in",
    " the",
    " co",
    "ffe",
    " maker",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " put",
    "in",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "',",
    " '",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " pour",
    " water",
    " in",
    " the",
    " co",
    "ffe",
    " maker",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " pour",
    "('",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " turn",
    " on",
    " the",
    " co",
    "ffe",
    " maker",
    "\n",
    " switch",
    "on",
    "('",
    "co",
    "ffe",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.016480353
    },
    {
      " 0": -0.008833344
    },
    {
      ":": -0.0017842611
    },
    {
      " walk": -0.29112443
    },
    {
      " to": -0.1295982
    },
    {
      " home": -0.85680026
    },
    {
      "\n": -0.022686316
    },
    {
      " walk": -0.009489257
    },
    {
      "('": -0.003965093
    },
    {
      "des": -0.011376801
    },
    {
      "k": -0.0010873751
    },
    {
      "')": -0.001295046
    },
    {
      "\n": -0.0069770883
    },
    {
      " #": -0.0056499215
    },
    {
      " 1": -0.003046823
    },
    {
      ":": -0.0006020214
    },
    {
      " find": -0.06430373
    },
    {
      " computer": -0.36647183
    },
    {
      "\n": -0.02062971
    },
    {
      " find": -0.04425944
    },
    {
      "('": -0.0009536644
    },
    {
      "computer": -0.0022304035
    },
    {
      "')": -0.0015773836
    },
    {
      "\n": -0.0053861467
    },
    {
      " #": -0.005607006
    },
    {
      " 2": -0.004200299
    },
    {
      ":": -0.0008117995
    },
    {
      " turn": -0.4574967
    },
    {
      " on": -0.0176524
    },
    {
      " computer": -0.6187078
    },
    {
      "\n": -0.012589605
    },
    {
      " assert": -0.3420668
    },
    {
      "('": -0.0014396667
    },
    {
      "close": -0.021186799
    },
    {
      "'": -0.0035600453
    },
    {
      " to": -0.0020166228
    },
    {
      " '": -0.0030484975
    },
    {
      "computer": -0.0020706188
    },
    {
      "')": -0.004754541
    },
    {
      "\n": -0.004573691
    },
    {
      " else": -0.0017247318
    },
    {
      ":": -0.0013320514
    },
    {
      " find": -0.00383393
    },
    {
      "('": -0.0014062395
    },
    {
      "computer": -0.00077821646
    },
    {
      "')": -0.00232187
    },
    {
      "\n": -0.0056997957
    },
    {
      " switch": -0.3533243
    },
    {
      "('": -0.00092878635
    },
    {
      "computer": -0.0017289098
    },
    {
      "')": -0.0022488046
    },
    {
      "\n": -0.22080646
    },
    {
      " #": -0.24593262
    },
    {
      " 3": -0.007695266
    },
    {
      ":": -0.0010909562
    },
    {
      " wait": -1.3027248
    },
    {
      " on": -0.074086204
    },
    {
      " monitor": -0.4441483
    },
    {
      "\n": -0.01670064
    },
    {
      " find": -0.5180444
    },
    {
      "('": -0.0011786139
    },
    {
      "monitor": -0.065235354
    },
    {
      "')": -0.0019532004
    },
    {
      "\n": -0.004489684
    },
    {
      " assert": -0.75119394
    },
    {
      "('": -0.0008564793
    },
    {
      "close": -0.021627733
    },
    {
      "'": -0.002846436
    },
    {
      " to": -0.0006783028
    },
    {
      " '": -0.0023660795
    },
    {
      "monitor": -0.0063755494
    },
    {
      "')": -0.0022992252
    },
    {
      "\n": -0.0031180289
    },
    {
      " else": -0.0015991725
    },
    {
      ":": -0.0016396517
    },
    {
      " find": -0.0034812682
    },
    {
      "('": -0.0010802733
    },
    {
      "monitor": -0.0040906486
    },
    {
      "')": -0.002456479
    },
    {
      "\n": -0.0043680295
    },
    {
      " plugin": -0.58381665
    },
    {
      "('": -0.00071081106
    },
    {
      "monitor": -0.0026984431
    },
    {
      "')": -0.002134173
    },
    {
      "<|endoftext|>": -0.6797151
    },
    {
      " #": -0.09518522
    },
    {
      " 4": -0.010780501
    },
    {
      ":": -0.0017655726
    },
    {
      " Done": -0.37390503
    },
    {
      "\n": -0.71901786
    },
    {
      "def": -0.8667371
    },
    {
      " make": -1.0635875
    },
    {
      "_": -0.0003659939
    },
    {
      "co": -0.1087448
    },
    {
      "ffee": -0.008017671
    },
    {
      "():": -0.02387102
    },
    {
      "\n": -0.018320432
    },
    {
      " #": -0.009485827
    },
    {
      " 0": -0.006357675
    },
    {
      ":": -0.0019414352
    },
    {
      " walk": -0.70965385
    },
    {
      " to": -0.028871175
    },
    {
      " kitchen": -0.1627554
    },
    {
      "\n": -0.04021859
    },
    {
      " walk": -0.004095738
    },
    {
      "('": -0.0028280246
    },
    {
      "kit": -0.0016784583
    },
    {
      "chen": -0.00017937786
    },
    {
      "')": -0.0030229662
    },
    {
      "\n": -0.007748725
    },
    {
      " #": -0.0028675972
    },
    {
      " 1": -0.0030996155
    },
    {
      ":": -0.00057607895
    },
    {
      " find": -0.031891976
    },
    {
      " coffee": -0.44228733
    },
    {
      "ffe": -0.0061786957
    },
    {
      " maker": -0.26831007
    },
    {
      "\n": -0.02621395
    },
    {
      " find": -0.0546095
    },
    {
      "('": -0.001190729
    },
    {
      "co": -0.0002570597
    },
    {
      "ffe": -0.6544764
    },
    {
      "_": -0.023069778
    },
    {
      "maker": -0.0015543386
    },
    {
      "')": -0.0014377565
    },
    {
      "\n": -0.0062946924
    },
    {
      " #": -0.004922902
    },
    {
      " 2": -0.0041478667
    },
    {
      ":": -0.00068516337
    },
    {
      " turn": -1.5768808
    },
    {
      " in": -0.097197734
    },
    {
      " co": -0.91134536
    },
    {
      " co": -0.4337973
    },
    {
      "ffe": -0.0058143
    },
    {
      " maker": -0.013572928
    },
    {
      "\n": -0.024562338
    },
    {
      " plugin": -0.73328316
    },
    {
      "('": -0.0012461086
    },
    {
      "close": -0.0055871047
    },
    {
      "'": -0.00203281
    },
    {
      " to": -0.00038328386
    },
    {
      " '": -0.00105205
    },
    {
      "co": -0.0005688007
    },
    {
      "ffe": -0.07743354
    },
    {
      "_": -0.0018563363
    },
    {
      "maker": -0.0010102238
    },
    {
      "')": -0.0036649131
    },
    {
      "\n": -0.004687047
    },
    {
      " else": -0.0009255631
    },
    {
      ":": -0.0011280102
    },
    {
      " find": -0.0027714204
    },
    {
      "('": -0.001343746
    },
    {
      "co": -0.00029140117
    },
    {
      "ffe": -0.013959504
    },
    {
      "_": -0.0010678634
    },
    {
      "maker": -0.00032586468
    },
    {
      "')": -0.0029413027
    },
    {
      "\n": -0.0055702603
    },
    {
      " plugin": -0.023968939
    },
    {
      "('": -0.0006641085
    },
    {
      "co": -0.00018975277
    },
    {
      "ffe": -0.046506703
    },
    {
      "_": -0.00075679924
    },
    {
      "maker": -0.00038006424
    },
    {
      "')": -0.0018271959
    },
    {
      "\n": -0.005552822
    },
    {
      " #": -0.0075553237
    },
    {
      " 3": -0.007058181
    },
    {
      ":": -0.0007753527
    },
    {
      " find": -0.8228219
    },
    {
      " coffee": -0.5261899
    },
    {
      "\n": -0.14657529
    },
    {
      " find": -0.015452027
    },
    {
      "('": -0.00093994226
    },
    {
      "co": -0.041943237
    },
    {
      "ffee": -0.08355824
    },
    {
      "_": -0.0012629976
    },
    {
      "filter": -0.00050719705
    },
    {
      "')": -0.003398672
    },
    {
      "\n": -0.0034509432
    },
    {
      " #": -0.04114637
    },
    {
      " 4": -0.0033794728
    },
    {
      ":": -0.0009092193
    },
    {
      " put": -0.6364865
    },
    {
      " filter": -0.26034433
    },
    {
      " in": -0.13951895
    },
    {
      " co": -0.8837411
    },
    {
      " co": -0.28853765
    },
    {
      "ffe": -0.0071513485
    },
    {
      " maker": -0.009340939
    },
    {
      "\n": -0.018418055
    },
    {
      " assert": -0.29579785
    },
    {
      "('": -0.0014136416
    },
    {
      "close": -0.051703766
    },
    {
      "'": -0.0016077685
    },
    {
      " to": -0.00034571995
    },
    {
      " '": -0.0016171437
    },
    {
      "co": -0.036370363
    },
    {
      "ffe": -0.3669394
    },
    {
      "_": -0.0012273083
    },
    {
      "maker": -0.0037893546
    },
    {
      "')": -0.017726535
    },
    {
      "\n": -0.007327197
    },
    {
      " else": -0.011613575
    },
    {
      ":": -0.0008799249
    },
    {
      " find": -0.0051528816
    },
    {
      "('": -0.0009048029
    },
    {
      "co": -0.00021741669
    },
    {
      "ffe": -0.01273454
    },
    {
      "_": -0.00041935995
    },
    {
      "maker": -0.0003626532
    },
    {
      "')": -0.0021926516
    },
    {
      "\n": -0.0054337922
    },
    {
      " put": -0.5131497
    },
    {
      "('": -0.0011250263
    },
    {
      "close": -0.3958092
    },
    {
      "'": -0.0015327873
    },
    {
      " to": -0.0005231795
    },
    {
      " '": -0.0014209846
    },
    {
      "co": -0.02821335
    },
    {
      "ffee": -0.055722184
    },
    {
      "_": -0.0007490442
    },
    {
      "filter": -0.00093516917
    },
    {
      "')": -0.003929844
    },
    {
      "\n": -0.0045696795
    },
    {
      " else": -0.0012988653
    },
    {
      ":": -0.00096094364
    },
    {
      " find": -0.0044105346
    },
    {
      "('": -0.0011522978
    },
    {
      "co": -0.0010086722
    },
    {
      "ffee": -0.023517583
    },
    {
      "_": -0.00046658723
    },
    {
      "filter": -0.0011746744
    },
    {
      "')": -0.003943729
    },
    {
      "\n": -0.0064811907
    },
    {
      " put": -0.106690265
    },
    {
      "in": -0.08303869
    },
    {
      "('": -0.0054954626
    },
    {
      "co": -0.01368906
    },
    {
      "ffee": -0.39018378
    },
    {
      "_": -0.00041804678
    },
    {
      "filter": -0.0014027805
    },
    {
      "',": -0.36363837
    },
    {
      " '": -0.0015486083
    },
    {
      "co": -0.00013645618
    },
    {
      "ffe": -0.039926123
    },
    {
      "_": -0.0007222635
    },
    {
      "maker": -0.00051172887
    },
    {
      "')": -0.0019935097
    },
    {
      "\n": -0.014395509
    },
    {
      " #": -0.0075428924
    },
    {
      " 5": -0.0046809986
    },
    {
      ":": -0.0016046644
    },
    {
      " find": -0.8644857
    },
    {
      " water": -0.34095332
    },
    {
      " in": -0.50731236
    },
    {
      " the": -0.2639079
    },
    {
      " co": -0.08327582
    },
    {
      "ffe": -0.00094626687
    },
    {
      " maker": -0.0052972226
    },
    {
      "\n": -0.013055992
    },
    {
      " find": -0.5019825
    },
    {
      "('": -0.00060130615
    },
    {
      "close": -0.012171034
    },
    {
      "'": -0.0012333954
    },
    {
      " to": -0.00041315737
    },
    {
      " '": -0.0005541305
    },
    {
      "co": -0.005424323
    },
    {
      "ffe": -0.0067981184
    },
    {
      "_": -0.0001678165
    },
    {
      "maker": -0.00012357882
    },
    {
      "')": -0.0011527737
    },
    {
      "\n": -0.0016589344
    },
    {
      " else": -0.00057202304
    },
    {
      ":": -0.00041208262
    },
    {
      " find": -0.0008987768
    },
    {
      "('": -0.00050779217
    },
    {
      "co": -4.2870764e-05
    },
    {
      "ffe": -0.0016808463
    },
    {
      "_": -0.0004236524
    },
    {
      "maker": -2.8921473e-05
    },
    {
      "')": -0.0017018636
    },
    {
      "\n": -0.003756267
    },
    {
      " pour": -0.088694245
    },
    {
      "('": -0.003384317
    },
    {
      "water": -0.5259095
    },
    {
      "ffe": -0.034165096
    },
    {
      "_": -0.0005910477
    },
    {
      "maker": -0.00030201545
    },
    {
      "')": -0.017152937
    },
    {
      "\n": -0.00790274
    },
    {
      " #": -0.012756031
    },
    {
      " 6": -0.00419982
    },
    {
      ":": -0.0018039672
    },
    {
      " turn": -0.6617122
    },
    {
      " on": -0.057811856
    },
    {
      " the": -0.29744935
    },
    {
      " co": -0.033627182
    },
    {
      "ffe": -0.001170855
    },
    {
      " maker": -0.0038551698
    },
    {
      "\n": -0.01654204
    },
    {
      " switch": -0.56721765
    },
    {
      "on": -0.0008224166
    },
    {
      "('": -0.0006283825
    },
    {
      "co": -0.00014063035
    },
    {
      "ffe": -0.024062961
    },
    {
      "_": -0.0014824043
    },
    {
      "maker": -0.00021431445
    },
    {
      "')": -0.0016671148
    },
    {
      "\n": -0.0074655456
    },
    {
      " #": -0.00649031
    },
    {
      " 7": -0.009018452
    },
    {
      ":": -0.0016945206
    },
    {
      " Done": -0.40110946
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Request failed due to server shutdown {
  "error": {
    "message": "Request failed due to server shutdown",
    "type": "server_error",
    "param": null,
    "code": null
  }
}
 500 {'error': {'message': 'Request failed due to server shutdown', 'type': 'server_error', 'param': None, 'code': None}} {'Date': 'Tue, 06 Jun 2023 00:20:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '141', 'Connection': 'keep-alive', 'access-control-allow-origin': '*', 'openai-model': 'text-davinci-003', 'openai-organization': 'user-wv1a74efr3ecauguofeq0kpg', 'openai-processing-ms': '5188', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=15724800; includeSubDomains', 'x-ratelimit-limit-requests': '60', 'x-ratelimit-limit-tokens': '150000', 'x-ratelimit-remaining-requests': '59', 'x-ratelimit-remaining-tokens': '148975', 'x-ratelimit-reset-requests': '1s', 'x-ratelimit-reset-tokens': '409ms', 'x-request-id': 'bdff7e19924ffd5190791bf542f027eb', 'CF-Cache-Status': 'DYNAMIC', 'Server': 'cloudflare', 'CF-RAY': '7d2c7d1b9c8f08c7-LAX', 'alt-svc': 'h3=":443"; ma=86400'} Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 25.555429935455322
[(" # 0: find electric shaver\n find('electric_shaver')\n # 1: grab electric shaver\n assert('close' to 'electric_shaver')\n else: find('electric_shaver')\n grab('electric_shaver')\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n turnto('electric_shaver')\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n pointat('electric_shaver')\n # 2: switch on electric shaver\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n switchon('electric_shaver')\n # 3: shave\n turnto('face')\n lookat('face')\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n shave('face')\n # 4: switch off electric shaver\n assert('electric_shaver' in 'hands')\n else: grab('electric_shaver')\n switchoff('electric_shaver')\n # 5: put electric shaver back\n putobjback('electric_shaver')\n # 6: Done\ndef make_coffee():\n # 0: find coffee maker\n find('coffee_maker')\n # 1: grab coffee filter\n assert('close' to 'coffee_filter')\n else: find('coffee_filter')\n grab('coffee_filter')\n assert('coffee_filter' in 'hands')\n else: grab('coffee_filter')\n turnto('coffee_filter')\n assert('coffee_filter' in 'hands')\n else: grab('coffee_filter')\n pointat('coffee_filter')\n # 2: fill with coffee\n assert('coffee_filter' in 'hands')\n else: grab('coffee_filter')\n fill('coffee_filter')\n turnto('coffee_filter')\n lookat('coffee_filter')\n # 3: put coffee filter back\n assert('coffee_filter' in 'hands')\n else: grab('coffee_filter')\n putobjback('coffee_filter')\n # 4: switch on coffee maker\n switchon('coffee_maker')\n # 5: pour coffee into cup\n find('cup')\n assert('close' to 'cup')\n else: find('cup')\n grab('cup')\n assert('cup' in 'hands')\n else: grab('cup')\n pour('coffee')\n # 6: Done\n putobjback('cup')", <OpenAIObject at 0x7fd928043c70> JSON: {
  "text_offset": [
    3338,
    3340,
    3342,
    3343,
    3348,
    3357,
    3360,
    3364,
    3365,
    3370,
    3372,
    3380,
    3381,
    3383,
    3387,
    3389,
    3390,
    3392,
    3394,
    3395,
    3400,
    3409,
    3412,
    3416,
    3417,
    3424,
    3426,
    3431,
    3432,
    3435,
    3437,
    3445,
    3446,
    3448,
    3452,
    3454,
    3455,
    3460,
    3461,
    3466,
    3468,
    3476,
    3477,
    3479,
    3483,
    3485,
    3486,
    3491,
    3493,
    3501,
    3502,
    3504,
    3508,
    3510,
    3511,
    3518,
    3520,
    3528,
    3529,
    3531,
    3535,
    3536,
    3539,
    3541,
    3546,
    3548,
    3549,
    3554,
    3555,
    3560,
    3562,
    3570,
    3571,
    3573,
    3577,
    3579,
    3580,
    3584,
    3586,
    3587,
    3589,
    3597,
    3598,
    3600,
    3604,
    3606,
    3607,
    3614,
    3616,
    3624,
    3625,
    3627,
    3631,
    3632,
    3635,
    3637,
    3642,
    3644,
    3645,
    3650,
    3651,
    3656,
    3658,
    3666,
    3667,
    3669,
    3673,
    3675,
    3676,
    3682,
    3684,
    3686,
    3694,
    3695,
    3697,
    3701,
    3703,
    3704,
    3706,
    3708,
    3709,
    3716,
    3719,
    3728,
    3731,
    3735,
    3736,
    3743,
    3745,
    3753,
    3754,
    3756,
    3760,
    3761,
    3764,
    3766,
    3771,
    3773,
    3774,
    3779,
    3780,
    3785,
    3787,
    3795,
    3796,
    3798,
    3802,
    3804,
    3805,
    3812,
    3814,
    3816,
    3824,
    3825,
    3827,
    3831,
    3833,
    3834,
    3836,
    3838,
    3839,
    3845,
    3846,
    3850,
    3852,
    3853,
    3855,
    3859,
    3861,
    3862,
    3867,
    3869,
    3871,
    3875,
    3877,
    3878,
    3885,
    3887,
    3895,
    3896,
    3898,
    3902,
    3903,
    3906,
    3908,
    3913,
    3915,
    3916,
    3921,
    3922,
    3927,
    3929,
    3937,
    3938,
    3940,
    3944,
    3946,
    3947,
    3953,
    3955,
    3959,
    3961,
    3962,
    3964,
    3966,
    3967,
    3974,
    3978,
    3987,
    3990,
    3994,
    3995,
    4002,
    4004,
    4012,
    4013,
    4015,
    4019,
    4020,
    4023,
    4025,
    4030,
    4032,
    4033,
    4038,
    4039,
    4044,
    4046,
    4054,
    4055,
    4057,
    4061,
    4063,
    4064,
    4071,
    4074,
    4076,
    4084,
    4085,
    4087,
    4091,
    4093,
    4094,
    4096,
    4098,
    4099,
    4103,
    4112,
    4115,
    4119,
    4124,
    4125,
    4129,
    4132,
    4136,
    4138,
    4146,
    4147,
    4149,
    4153,
    4155,
    4156,
    4158,
    4160,
    4161,
    4166,
    4167,
    4170,
    4175,
    4176,
    4178,
    4182,
    4185,
    4186,
    4188,
    4190,
    4191,
    4196,
    4203,
    4209,
    4210,
    4215,
    4217,
    4219,
    4223,
    4224,
    4229,
    4231,
    4232,
    4234,
    4236,
    4237,
    4242,
    4249,
    4256,
    4257,
    4264,
    4266,
    4271,
    4272,
    4275,
    4277,
    4279,
    4283,
    4284,
    4290,
    4292,
    4293,
    4298,
    4299,
    4304,
    4306,
    4308,
    4312,
    4313,
    4319,
    4321,
    4322,
    4327,
    4329,
    4331,
    4335,
    4336,
    4342,
    4344,
    4345,
    4352,
    4354,
    4356,
    4360,
    4361,
    4367,
    4368,
    4371,
    4373,
    4378,
    4380,
    4381,
    4386,
    4387,
    4392,
    4394,
    4396,
    4400,
    4401,
    4407,
    4409,
    4410,
    4414,
    4416,
    4417,
    4419,
    4421,
    4425,
    4426,
    4432,
    4434,
    4435,
    4442,
    4444,
    4446,
    4450,
    4451,
    4457,
    4458,
    4461,
    4463,
    4468,
    4470,
    4471,
    4476,
    4477,
    4482,
    4484,
    4486,
    4490,
    4491,
    4497,
    4499,
    4500,
    4506,
    4508,
    4510,
    4512,
    4516,
    4517,
    4523,
    4525,
    4526,
    4528,
    4530,
    4531,
    4536,
    4541,
    4548,
    4549,
    4556,
    4558,
    4560,
    4564,
    4565,
    4571,
    4572,
    4575,
    4577,
    4582,
    4584,
    4585,
    4590,
    4591,
    4596,
    4598,
    4600,
    4604,
    4605,
    4611,
    4613,
    4614,
    4619,
    4621,
    4623,
    4627,
    4628,
    4634,
    4636,
    4637,
    4641,
    4643,
    4644,
    4646,
    4648,
    4652,
    4653,
    4659,
    4661,
    4662,
    4667,
    4669,
    4671,
    4673,
    4677,
    4678,
    4684,
    4686,
    4687,
    4689,
    4691,
    4692,
    4696,
    4703,
    4710,
    4715,
    4716,
    4723,
    4725,
    4727,
    4731,
    4732,
    4738,
    4739,
    4742,
    4744,
    4749,
    4751,
    4752,
    4757,
    4758,
    4763,
    4765,
    4767,
    4771,
    4772,
    4778,
    4780,
    4781,
    4785,
    4788,
    4792,
    4794,
    4796,
    4800,
    4801,
    4807,
    4809,
    4810,
    4812,
    4814,
    4815,
    4822,
    4825,
    4832,
    4838,
    4839,
    4846,
    4848,
    4850,
    4852,
    4856,
    4857,
    4862,
    4864,
    4865,
    4867,
    4869,
    4870,
    4875,
    4882,
    4887,
    4891,
    4892,
    4897,
    4899,
    4902,
    4904,
    4905,
    4912,
    4914,
    4919,
    4920,
    4923,
    4925,
    4928,
    4930,
    4931,
    4936,
    4937,
    4942,
    4944,
    4947,
    4949,
    4950,
    4955,
    4957,
    4960,
    4962,
    4963,
    4970,
    4972,
    4975,
    4976,
    4979,
    4981,
    4986,
    4988,
    4989,
    4994,
    4995,
    5000,
    5002,
    5005,
    5007,
    5008,
    5013,
    5015,
    5017,
    5021,
    5023,
    5024,
    5026,
    5028,
    5029,
    5034,
    5035,
    5039,
    5042,
    5046,
    5048,
    5051
  ],
  "token_logprobs": [
    -0.02404257,
    -0.013371692,
    -0.0025889582,
    -0.3642186,
    -0.1794569,
    -0.14743005,
    -0.001791009,
    -0.030497596,
    -0.022577243,
    -0.003053159,
    -0.012436059,
    -0.0055001983,
    -0.002051446,
    -0.00075238576,
    -0.0033170949,
    -0.009134361,
    -0.006452693,
    -0.0040964554,
    -0.0006823005,
    -0.21489848,
    -0.11992437,
    -0.005797573,
    -0.003309201,
    -0.014329599,
    -0.4753077,
    -0.0015890829,
    -0.0035453911,
    -0.0027674162,
    -0.00053767127,
    -0.0036498364,
    -0.032659862,
    -0.0031086435,
    -0.002330531,
    -0.00031560898,
    -0.005936849,
    -0.008703106,
    -0.0017435388,
    -0.0011913251,
    -0.0035855877,
    -0.001553861,
    -0.0016218004,
    -0.0007421263,
    -0.0014019433,
    -0.00044452143,
    -0.0037523191,
    -0.007499714,
    -0.003153907,
    -0.0008769419,
    -0.0010688162,
    -0.0012414537,
    -0.0005889,
    -0.00072828965,
    -0.0019133667,
    -0.0053527122,
    -0.38876322,
    -0.0009255631,
    -0.013418266,
    -0.0018283908,
    -0.0007551294,
    -0.00049049745,
    -0.0017352401,
    -0.0109857945,
    -0.0029083653,
    -0.005077215,
    -0.033948947,
    -0.0030288862,
    -0.013453185,
    -0.0015961875,
    -0.0028117052,
    -0.0011244303,
    -0.00069673505,
    -0.00049562723,
    -0.00031990238,
    -0.0012587606,
    -0.0025079856,
    -0.004722261,
    -0.3590467,
    -4.9069615e-05,
    -0.00093779556,
    -0.0003776801,
    -0.0017297462,
    -0.0005418436,
    -0.0002164621,
    -0.0008085771,
    -0.0012763658,
    -0.0029095614,
    -0.2359214,
    -0.0002869914,
    -0.0023126684,
    -0.00026779127,
    -0.00053069333,
    -0.00020167646,
    -0.0011224,
    -0.0010000797,
    -0.0007166579,
    -0.0006314847,
    -0.0011575487,
    -0.001293256,
    -0.0030923802,
    -0.00086399604,
    -0.0010181,
    -0.00052962045,
    -0.0007671188,
    -0.00023464282,
    -0.0001735385,
    -0.0005791794,
    -0.0010795591,
    -0.0029824325,
    -0.06323529,
    -0.00063488266,
    -0.00031000242,
    -0.00060631573,
    -0.0004558547,
    -0.00016304628,
    -0.0006326768,
    -0.0010623733,
    -0.005849732,
    -0.0038198682,
    -0.007416542,
    -0.0007974823,
    -0.71569914,
    -0.057575885,
    -0.38956544,
    -0.00672683,
    -0.0006627972,
    -0.016913153,
    -0.5206057,
    -0.0006944701,
    -0.53290516,
    -0.0004403491,
    -0.00029104354,
    -0.0010141633,
    -0.0017037737,
    -0.012617853,
    -0.0011406023,
    -0.0019287155,
    -0.0035054928,
    -0.0017815146,
    -0.0034844398,
    -0.00084431254,
    -0.003070258,
    -0.0005937923,
    -0.00061060634,
    -0.00061764714,
    -0.00026540618,
    -0.00033039556,
    -0.0024763164,
    -0.004304275,
    -0.013757042,
    -0.0019073942,
    -0.00058347365,
    -0.0012514812,
    -0.00051638077,
    -0.00035776378,
    -0.0011114206,
    -0.0019083498,
    -0.0054394854,
    -0.5177135,
    -0.0076801293,
    -0.0010370156,
    -0.62689626,
    -0.7075982,
    -2.167326,
    -6.885639e-05,
    -0.0032981988,
    -0.0006287392,
    -1.5184939,
    -0.0018906139,
    -0.004810658,
    -0.7112271,
    -0.00075596484,
    -0.0004795284,
    -0.015445793,
    -0.0011187008,
    -0.0050213183,
    -1.0488596,
    -0.0011952628,
    -0.50893164,
    -0.0015425183,
    -0.0004256799,
    -0.00044452143,
    -0.004459329,
    -0.02765908,
    -0.0029252837,
    -0.0034004655,
    -0.0049646515,
    -0.002641607,
    -0.0016019199,
    -0.0011195361,
    -0.003195641,
    -0.0008160948,
    -0.000502546,
    -0.00027530332,
    -0.00013550156,
    -0.00096500135,
    -0.0023253919,
    -0.0045890193,
    -0.22506276,
    -0.24814375,
    -0.64162314,
    -0.017833866,
    -0.009760312,
    -0.1651044,
    -0.0084335385,
    -0.0019024963,
    -0.13208514,
    -0.03422061,
    -0.05970613,
    -0.0036213004,
    -0.00045883397,
    -0.02212224,
    -0.703793,
    -0.0004084472,
    -0.0033543543,
    -0.0009621376,
    -0.0003264598,
    -0.0005479298,
    -0.0009946515,
    -0.0018424217,
    -0.00085588143,
    -0.00068659574,
    -0.0012862133,
    -0.001349359,
    -0.0012213441,
    -0.0011432267,
    -0.0010011544,
    -0.0003794682,
    -0.0002712502,
    -0.00015696288,
    -0.00016793102,
    -0.00084407313,
    -0.0026220062,
    -0.0034091377,
    -0.0018403905,
    -0.0049029533,
    -0.00051876775,
    -0.0004492926,
    -0.00045692569,
    -0.00024287197,
    -0.00057226245,
    -0.002218337,
    -0.026228998,
    -0.016438723,
    -0.0065689627,
    -0.0013219636,
    -0.31711647,
    -0.42279175,
    -0.0038952022,
    -0.0005711877,
    -0.049688727,
    -0.023655623,
    -2.93112,
    -0.47790855,
    -0.0033485526,
    -0.0012134659,
    -0.0011603505,
    -0.0008364372,
    -0.00045072404,
    -0.00041745167,
    -0.002940585,
    -0.22938111,
    -0.014230563,
    -0.005779947,
    -0.0023654837,
    -0.17866123,
    -1.5575268,
    -0.45869222,
    -1.1120948,
    -0.0010095066,
    -0.15926152,
    -0.0101817865,
    -0.026417721,
    -0.019378262,
    -0.007074269,
    -0.005001914,
    -0.0023145794,
    -0.2202816,
    -0.59279716,
    -0.1515218,
    -0.034197107,
    -0.01248567,
    -0.0014469496,
    -9.377476e-05,
    -0.15046309,
    -0.0013590863,
    -0.0006794366,
    -0.0016171437,
    -0.009451468,
    -0.003497657,
    -0.0021758056,
    -0.00059069006,
    -0.6121951,
    -0.06959257,
    -0.62839854,
    -0.023078624,
    -0.5062839,
    -0.00093719765,
    -0.011261298,
    -0.0018744307,
    -0.00032204814,
    -0.0015919495,
    -0.0016976246,
    -0.019141098,
    -0.0022777189,
    -0.08691847,
    -0.006852673,
    -0.005177686,
    -0.0008842211,
    -0.0013310958,
    -0.0036059876,
    -0.0013445832,
    -0.00033558442,
    -0.0039405585,
    -0.0013039997,
    -0.0018360324,
    -0.0028452403,
    -0.005015512,
    -0.0027923419,
    -0.00064836355,
    -0.0002561051,
    -0.0025438992,
    -0.0009393453,
    -0.00047833633,
    -0.0022442052,
    -0.004211613,
    -0.1628886,
    -0.0005398189,
    -0.0030667898,
    -0.0129758,
    -0.0005443507,
    -0.0013558639,
    -0.0014813296,
    -0.0031728018,
    -0.0014372787,
    -0.0027978406,
    -0.004307867,
    -0.00223835,
    -0.0025936787,
    -0.0010413099,
    -0.0013606388,
    -0.0009161371,
    -0.000120481265,
    -0.0008544527,
    -0.0013605197,
    -0.00047940828,
    -0.0009857005,
    -0.0044511273,
    -0.11141792,
    -2.6538237e-05,
    -0.00026325852,
    -0.0002603966,
    -0.00043653257,
    -0.003806226,
    -0.00029986876,
    -0.0028316122,
    -0.0010469183,
    -0.0020875211,
    -0.07412485,
    -0.00020394142,
    -0.00045442232,
    -0.00049514946,
    -0.00055568025,
    -0.00037588822,
    -0.0007854929,
    -0.00074188696,
    -0.00046861471,
    -0.0010316446,
    -0.00116608,
    -0.0010567638,
    -0.00092580245,
    -0.00046730434,
    -0.0005319464,
    -0.00036157944,
    -6.4446605e-05,
    -0.00047964763,
    -0.00038531228,
    -0.0003850729,
    -0.0013700703,
    -0.0024858185,
    -0.016653728,
    -0.00039962292,
    -0.00026493028,
    -8.173468e-05,
    -0.00063488266,
    -0.00065158313,
    -0.00043832068,
    -0.0018055186,
    -0.0050902753,
    -0.0026995188,
    -0.0039871135,
    -0.00060774625,
    -2.7875595,
    -2.9559977,
    -0.39695734,
    -0.1898839,
    -0.15752873,
    -0.00051411585,
    -0.073248215,
    -0.006313706,
    -0.0017255673,
    -0.02852228,
    -0.0011055127,
    -0.0020356765,
    -0.00082074676,
    -0.0008143039,
    -0.0018251647,
    -0.0019105001,
    -0.00095020543,
    -0.0004614594,
    -0.002137338,
    -0.00037243115,
    -6.122609e-05,
    -0.00023667031,
    -0.00031441596,
    -0.00034416933,
    -0.0011232363,
    -0.003095549,
    -0.8007837,
    -0.07190618,
    -0.00079843693,
    -0.0023289765,
    -0.023457844,
    -0.01226498,
    -0.12348383,
    -0.006779397,
    -0.6345096,
    -4.871012e-05,
    -0.0005278305,
    -0.00022146793,
    -0.0010226364,
    -0.0084460415,
    -0.001047873,
    -0.070131846,
    -0.00074343756,
    -0.0013994371,
    -0.033924527,
    -0.00025920733,
    -0.00021860692,
    -0.00017210613,
    -0.001002109,
    -0.0004887075,
    -0.0007968252,
    -0.0012515995,
    -0.0042145466,
    -0.007104944,
    -0.0048890603,
    -0.0010202485,
    -0.34937313,
    -0.66580594,
    -0.012086327,
    -0.82862204,
    -0.050731454,
    -0.2214011,
    -0.0002903283,
    -0.00076461444,
    -0.00064180145,
    -0.00014969209,
    -0.00054685504,
    -0.00058466673,
    -0.0006419216,
    -0.0005371935,
    -0.0005055272,
    -0.0006265925,
    -0.0007527424,
    -0.0004634878,
    -0.000368853,
    -0.0005800119,
    -0.0003179941,
    -3.690939e-05,
    -0.00021634194,
    -0.00037100064,
    -0.00018438557,
    -0.0007791692,
    -0.0017840217,
    -0.0035688386,
    -0.03504196,
    -0.0003137007,
    -0.00046968853,
    -8.00667e-05,
    -0.0008394203,
    -0.00042699307,
    -0.0008242085,
    -0.0010586731,
    -0.0052704974,
    -0.0025075069,
    -0.005248928,
    -0.0011243102,
    -0.6254982,
    -0.012517355,
    -0.21309058,
    -0.011900106,
    -0.011681719,
    -1.2922081,
    -0.0003352268,
    -0.0004324776,
    -0.00010844024,
    -0.059013728,
    -0.0008219398,
    -0.0005614051,
    -0.0012159712,
    -0.0044383146,
    -0.016194325,
    -0.0035204475,
    -0.0014445627,
    -2.19852,
    -0.1635718,
    -2.504598,
    -0.32457945,
    -0.013773959,
    -1.4797906,
    -0.0017351198,
    -0.017825916,
    -0.0019954217,
    -0.0036626386,
    -0.46876726,
    -0.00048978225,
    -0.038536586,
    -0.00093069556,
    -0.0002977211,
    -0.0017696341,
    -0.015742868,
    -0.0029605525,
    -0.0019917197,
    -0.0008295757,
    -0.00096010824,
    -0.002079875,
    -0.000802015,
    -0.00021634194,
    -0.0025029676,
    -0.0050448035,
    -0.6574653,
    -0.00048620783,
    -0.00089591293,
    -0.0012891982,
    -0.002166607,
    -0.10261801,
    -0.00033844542,
    -0.013467864,
    -0.0006840886,
    -0.0023504866,
    -0.0010910763,
    -0.0030128625,
    -0.0024076044,
    -0.0014355488,
    -0.001633801,
    -0.0004608624,
    -0.0027684926,
    -0.0005797763,
    -0.00017496901,
    -0.0020360954,
    -0.003281334,
    -0.8327299,
    -0.0036855503,
    -0.19474213,
    -0.026895562,
    -0.6647396,
    -0.0070656245,
    -0.60438585,
    -0.0049751964,
    -0.0015598917,
    -0.48236552,
    -0.76368225,
    -2.288112,
    -0.116559096,
    -0.001256612,
    -0.0011377366,
    -0.010708925,
    -0.001047276
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " electric",
    " sh",
    "aver",
    "\n",
    " find",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " electric",
    " sh",
    "aver",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " switch",
    " on",
    " electric",
    " sh",
    "aver",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " shave",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "face",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "face",
    "')",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " shave",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " switch",
    " off",
    " electric",
    " sh",
    "aver",
    "\n",
    " assert",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " switch",
    "off",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " electric",
    " sh",
    "aver",
    " back",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done",
    "\n",
    "def",
    " make",
    "_",
    "co",
    "ffee",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " find",
    " coffee",
    " maker",
    "\n",
    " find",
    "('",
    "co",
    "ffee",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " coffee",
    " filter",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " grab",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " assert",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " assert",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " fill",
    " with",
    " coffee",
    "\n",
    " assert",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " fill",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " coffee",
    " filter",
    " back",
    "\n",
    " assert",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "co",
    "ffee",
    "_",
    "filter",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " switch",
    " on",
    " coffee",
    " maker",
    "\n",
    " switch",
    "on",
    "('",
    "co",
    "ffee",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " pour",
    " coffee",
    " into",
    " cup",
    "\n",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cup",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " assert",
    "('",
    "cup",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " pour",
    "('",
    "co",
    "ffee",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "cup",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.02404257
    },
    {
      " 0": -0.013371692
    },
    {
      ":": -0.0025889582
    },
    {
      " find": -0.3642186
    },
    {
      " electric": -0.1794569
    },
    {
      " sh": -0.14743005
    },
    {
      "aver": -0.001791009
    },
    {
      "\n": -0.030497596
    },
    {
      " find": -0.022577243
    },
    {
      "('": -0.003053159
    },
    {
      "electric": -0.012436059
    },
    {
      "_": -0.0055001983
    },
    {
      "sh": -0.002051446
    },
    {
      "aver": -0.00075238576
    },
    {
      "')": -0.0033170949
    },
    {
      "\n": -0.009134361
    },
    {
      " #": -0.006452693
    },
    {
      " 1": -0.0040964554
    },
    {
      ":": -0.0006823005
    },
    {
      " grab": -0.21489848
    },
    {
      " electric": -0.11992437
    },
    {
      " sh": -0.005797573
    },
    {
      "aver": -0.003309201
    },
    {
      "\n": -0.014329599
    },
    {
      " assert": -0.4753077
    },
    {
      "('": -0.0015890829
    },
    {
      "close": -0.0035453911
    },
    {
      "'": -0.0027674162
    },
    {
      " to": -0.00053767127
    },
    {
      " '": -0.0036498364
    },
    {
      "electric": -0.032659862
    },
    {
      "_": -0.0031086435
    },
    {
      "sh": -0.002330531
    },
    {
      "aver": -0.00031560898
    },
    {
      "')": -0.005936849
    },
    {
      "\n": -0.008703106
    },
    {
      " else": -0.0017435388
    },
    {
      ":": -0.0011913251
    },
    {
      " find": -0.0035855877
    },
    {
      "('": -0.001553861
    },
    {
      "electric": -0.0016218004
    },
    {
      "_": -0.0007421263
    },
    {
      "sh": -0.0014019433
    },
    {
      "aver": -0.00044452143
    },
    {
      "')": -0.0037523191
    },
    {
      "\n": -0.007499714
    },
    {
      " grab": -0.003153907
    },
    {
      "('": -0.0008769419
    },
    {
      "electric": -0.0010688162
    },
    {
      "_": -0.0012414537
    },
    {
      "sh": -0.0005889
    },
    {
      "aver": -0.00072828965
    },
    {
      "')": -0.0019133667
    },
    {
      "\n": -0.0053527122
    },
    {
      " assert": -0.38876322
    },
    {
      "('": -0.0009255631
    },
    {
      "electric": -0.013418266
    },
    {
      "_": -0.0018283908
    },
    {
      "sh": -0.0007551294
    },
    {
      "aver": -0.00049049745
    },
    {
      "'": -0.0017352401
    },
    {
      " in": -0.0109857945
    },
    {
      " '": -0.0029083653
    },
    {
      "hands": -0.005077215
    },
    {
      "')": -0.033948947
    },
    {
      "\n": -0.0030288862
    },
    {
      " else": -0.013453185
    },
    {
      ":": -0.0015961875
    },
    {
      " grab": -0.0028117052
    },
    {
      "('": -0.0011244303
    },
    {
      "electric": -0.00069673505
    },
    {
      "_": -0.00049562723
    },
    {
      "sh": -0.00031990238
    },
    {
      "aver": -0.0012587606
    },
    {
      "')": -0.0025079856
    },
    {
      "\n": -0.004722261
    },
    {
      " tur": -0.3590467
    },
    {
      "nt": -4.9069615e-05
    },
    {
      "o": -0.00093779556
    },
    {
      "('": -0.0003776801
    },
    {
      "electric": -0.0017297462
    },
    {
      "_": -0.0005418436
    },
    {
      "sh": -0.0002164621
    },
    {
      "aver": -0.0008085771
    },
    {
      "')": -0.0012763658
    },
    {
      "\n": -0.0029095614
    },
    {
      " assert": -0.2359214
    },
    {
      "('": -0.0002869914
    },
    {
      "electric": -0.0023126684
    },
    {
      "_": -0.00026779127
    },
    {
      "sh": -0.00053069333
    },
    {
      "aver": -0.00020167646
    },
    {
      "'": -0.0011224
    },
    {
      " in": -0.0010000797
    },
    {
      " '": -0.0007166579
    },
    {
      "hands": -0.0006314847
    },
    {
      "')": -0.0011575487
    },
    {
      "\n": -0.001293256
    },
    {
      " else": -0.0030923802
    },
    {
      ":": -0.00086399604
    },
    {
      " grab": -0.0010181
    },
    {
      "('": -0.00052962045
    },
    {
      "electric": -0.0007671188
    },
    {
      "_": -0.00023464282
    },
    {
      "sh": -0.0001735385
    },
    {
      "aver": -0.0005791794
    },
    {
      "')": -0.0010795591
    },
    {
      "\n": -0.0029824325
    },
    {
      " point": -0.06323529
    },
    {
      "at": -0.00063488266
    },
    {
      "('": -0.00031000242
    },
    {
      "electric": -0.00060631573
    },
    {
      "_": -0.0004558547
    },
    {
      "sh": -0.00016304628
    },
    {
      "aver": -0.0006326768
    },
    {
      "')": -0.0010623733
    },
    {
      "\n": -0.005849732
    },
    {
      " #": -0.0038198682
    },
    {
      " 2": -0.007416542
    },
    {
      ":": -0.0007974823
    },
    {
      " switch": -0.71569914
    },
    {
      " on": -0.057575885
    },
    {
      " electric": -0.38956544
    },
    {
      " sh": -0.00672683
    },
    {
      "aver": -0.0006627972
    },
    {
      "\n": -0.016913153
    },
    {
      " assert": -0.5206057
    },
    {
      "('": -0.0006944701
    },
    {
      "electric": -0.53290516
    },
    {
      "_": -0.0004403491
    },
    {
      "sh": -0.00029104354
    },
    {
      "aver": -0.0010141633
    },
    {
      "'": -0.0017037737
    },
    {
      " in": -0.012617853
    },
    {
      " '": -0.0011406023
    },
    {
      "hands": -0.0019287155
    },
    {
      "')": -0.0035054928
    },
    {
      "\n": -0.0017815146
    },
    {
      " else": -0.0034844398
    },
    {
      ":": -0.00084431254
    },
    {
      " grab": -0.003070258
    },
    {
      "('": -0.0005937923
    },
    {
      "electric": -0.00061060634
    },
    {
      "_": -0.00061764714
    },
    {
      "sh": -0.00026540618
    },
    {
      "aver": -0.00033039556
    },
    {
      "')": -0.0024763164
    },
    {
      "\n": -0.004304275
    },
    {
      " switch": -0.013757042
    },
    {
      "on": -0.0019073942
    },
    {
      "('": -0.00058347365
    },
    {
      "electric": -0.0012514812
    },
    {
      "_": -0.00051638077
    },
    {
      "sh": -0.00035776378
    },
    {
      "aver": -0.0011114206
    },
    {
      "')": -0.0019083498
    },
    {
      "\n": -0.0054394854
    },
    {
      " #": -0.5177135
    },
    {
      " 3": -0.0076801293
    },
    {
      ":": -0.0010370156
    },
    {
      " shave": -0.62689626
    },
    {
      "\n": -0.7075982
    },
    {
      " assert": -0.7548647
    },
    {
      "nt": -6.885639e-05
    },
    {
      "o": -0.0032981988
    },
    {
      "('": -0.0006287392
    },
    {
      "electric": -0.34507394
    },
    {
      "')": -0.0018906139
    },
    {
      "\n": -0.004810658
    },
    {
      " look": -0.7112271
    },
    {
      "at": -0.00075596484
    },
    {
      "('": -0.0004795284
    },
    {
      "face": -0.015445793
    },
    {
      "')": -0.0011187008
    },
    {
      "\n": -0.0050213183
    },
    {
      " assert": -1.0488596
    },
    {
      "('": -0.0011952628
    },
    {
      "electric": -0.50893164
    },
    {
      "_": -0.0015425183
    },
    {
      "sh": -0.0004256799
    },
    {
      "aver": -0.00044452143
    },
    {
      "'": -0.004459329
    },
    {
      " in": -0.02765908
    },
    {
      " '": -0.0029252837
    },
    {
      "hands": -0.0034004655
    },
    {
      "')": -0.0049646515
    },
    {
      "\n": -0.002641607
    },
    {
      " else": -0.0016019199
    },
    {
      ":": -0.0011195361
    },
    {
      " grab": -0.003195641
    },
    {
      "('": -0.0008160948
    },
    {
      "electric": -0.000502546
    },
    {
      "_": -0.00027530332
    },
    {
      "sh": -0.00013550156
    },
    {
      "aver": -0.00096500135
    },
    {
      "')": -0.0023253919
    },
    {
      "\n": -0.0045890193
    },
    {
      " shave": -0.22506276
    },
    {
      "('": -0.24814375
    },
    {
      "face": -0.64162314
    },
    {
      "')": -0.017833866
    },
    {
      "\n": -0.009760312
    },
    {
      " #": -0.1651044
    },
    {
      " 4": -0.0084335385
    },
    {
      ":": -0.0019024963
    },
    {
      " switch": -0.13208514
    },
    {
      " off": -0.03422061
    },
    {
      " electric": -0.05970613
    },
    {
      " sh": -0.0036213004
    },
    {
      "aver": -0.00045883397
    },
    {
      "\n": -0.02212224
    },
    {
      " assert": -0.703793
    },
    {
      "('": -0.0004084472
    },
    {
      "electric": -0.0033543543
    },
    {
      "_": -0.0009621376
    },
    {
      "sh": -0.0003264598
    },
    {
      "aver": -0.0005479298
    },
    {
      "'": -0.0009946515
    },
    {
      " in": -0.0018424217
    },
    {
      " '": -0.00085588143
    },
    {
      "hands": -0.00068659574
    },
    {
      "')": -0.0012862133
    },
    {
      "\n": -0.001349359
    },
    {
      " else": -0.0012213441
    },
    {
      ":": -0.0011432267
    },
    {
      " grab": -0.0010011544
    },
    {
      "('": -0.0003794682
    },
    {
      "electric": -0.0002712502
    },
    {
      "_": -0.00015696288
    },
    {
      "sh": -0.00016793102
    },
    {
      "aver": -0.00084407313
    },
    {
      "')": -0.0026220062
    },
    {
      "\n": -0.0034091377
    },
    {
      " switch": -0.0018403905
    },
    {
      "off": -0.0049029533
    },
    {
      "('": -0.00051876775
    },
    {
      "electric": -0.0004492926
    },
    {
      "_": -0.00045692569
    },
    {
      "sh": -0.00024287197
    },
    {
      "aver": -0.00057226245
    },
    {
      "')": -0.002218337
    },
    {
      "\n": -0.026228998
    },
    {
      " #": -0.016438723
    },
    {
      " 5": -0.0065689627
    },
    {
      ":": -0.0013219636
    },
    {
      " put": -0.31711647
    },
    {
      " electric": -0.42279175
    },
    {
      " sh": -0.0038952022
    },
    {
      "aver": -0.0005711877
    },
    {
      " back": -0.049688727
    },
    {
      "\n": -0.023655623
    },
    {
      " assert": -0.059349462
    },
    {
      "obj": -0.47790855
    },
    {
      "back": -0.0033485526
    },
    {
      "('": -0.0012134659
    },
    {
      "electric": -0.0011603505
    },
    {
      "_": -0.0008364372
    },
    {
      "sh": -0.00045072404
    },
    {
      "aver": -0.00041745167
    },
    {
      "')": -0.002940585
    },
    {
      "\n": -0.22938111
    },
    {
      " #": -0.014230563
    },
    {
      " 6": -0.005779947
    },
    {
      ":": -0.0023654837
    },
    {
      " Done": -0.17866123
    },
    {
      "<|endoftext|>": -0.26735428
    },
    {
      "def": -0.45869222
    },
    {
      " make": -1.1120948
    },
    {
      "_": -0.0010095066
    },
    {
      "co": -0.15926152
    },
    {
      "ffee": -0.0101817865
    },
    {
      "():": -0.026417721
    },
    {
      "\n": -0.019378262
    },
    {
      " #": -0.007074269
    },
    {
      " 0": -0.005001914
    },
    {
      ":": -0.0023145794
    },
    {
      " find": -0.2202816
    },
    {
      " coffee": -0.59279716
    },
    {
      " maker": -0.1515218
    },
    {
      "\n": -0.034197107
    },
    {
      " find": -0.01248567
    },
    {
      "('": -0.0014469496
    },
    {
      "co": -9.377476e-05
    },
    {
      "ffee": -0.15046309
    },
    {
      "_": -0.0013590863
    },
    {
      "maker": -0.0006794366
    },
    {
      "')": -0.0016171437
    },
    {
      "\n": -0.009451468
    },
    {
      " #": -0.003497657
    },
    {
      " 1": -0.0021758056
    },
    {
      ":": -0.00059069006
    },
    {
      " grab": -0.6121951
    },
    {
      " coffee": -0.06959257
    },
    {
      " filter": -0.62839854
    },
    {
      "\n": -0.023078624
    },
    {
      " assert": -0.5062839
    },
    {
      "('": -0.00093719765
    },
    {
      "close": -0.011261298
    },
    {
      "'": -0.0018744307
    },
    {
      " to": -0.00032204814
    },
    {
      " '": -0.0015919495
    },
    {
      "co": -0.0016976246
    },
    {
      "ffee": -0.019141098
    },
    {
      "_": -0.0022777189
    },
    {
      "filter": -0.08691847
    },
    {
      "')": -0.006852673
    },
    {
      "\n": -0.005177686
    },
    {
      " else": -0.0008842211
    },
    {
      ":": -0.0013310958
    },
    {
      " find": -0.0036059876
    },
    {
      "('": -0.0013445832
    },
    {
      "co": -0.00033558442
    },
    {
      "ffee": -0.0039405585
    },
    {
      "_": -0.0013039997
    },
    {
      "filter": -0.0018360324
    },
    {
      "')": -0.0028452403
    },
    {
      "\n": -0.005015512
    },
    {
      " grab": -0.0027923419
    },
    {
      "('": -0.00064836355
    },
    {
      "co": -0.0002561051
    },
    {
      "ffee": -0.0025438992
    },
    {
      "_": -0.0009393453
    },
    {
      "filter": -0.00047833633
    },
    {
      "')": -0.0022442052
    },
    {
      "\n": -0.004211613
    },
    {
      " assert": -0.1628886
    },
    {
      "('": -0.0005398189
    },
    {
      "co": -0.0030667898
    },
    {
      "ffee": -0.0129758
    },
    {
      "_": -0.0005443507
    },
    {
      "filter": -0.0013558639
    },
    {
      "'": -0.0014813296
    },
    {
      " in": -0.0031728018
    },
    {
      " '": -0.0014372787
    },
    {
      "hands": -0.0027978406
    },
    {
      "')": -0.004307867
    },
    {
      "\n": -0.00223835
    },
    {
      " else": -0.0025936787
    },
    {
      ":": -0.0010413099
    },
    {
      " grab": -0.0013606388
    },
    {
      "('": -0.0009161371
    },
    {
      "co": -0.000120481265
    },
    {
      "ffee": -0.0008544527
    },
    {
      "_": -0.0013605197
    },
    {
      "filter": -0.00047940828
    },
    {
      "')": -0.0009857005
    },
    {
      "\n": -0.0044511273
    },
    {
      " tur": -0.11141792
    },
    {
      "nt": -2.6538237e-05
    },
    {
      "o": -0.00026325852
    },
    {
      "('": -0.0002603966
    },
    {
      "co": -0.00043653257
    },
    {
      "ffee": -0.003806226
    },
    {
      "_": -0.00029986876
    },
    {
      "filter": -0.0028316122
    },
    {
      "')": -0.0010469183
    },
    {
      "\n": -0.0020875211
    },
    {
      " assert": -0.07412485
    },
    {
      "('": -0.00020394142
    },
    {
      "co": -0.00045442232
    },
    {
      "ffee": -0.00049514946
    },
    {
      "_": -0.00055568025
    },
    {
      "filter": -0.00037588822
    },
    {
      "'": -0.0007854929
    },
    {
      " in": -0.00074188696
    },
    {
      " '": -0.00046861471
    },
    {
      "hands": -0.0010316446
    },
    {
      "')": -0.00116608
    },
    {
      "\n": -0.0010567638
    },
    {
      " else": -0.00092580245
    },
    {
      ":": -0.00046730434
    },
    {
      " grab": -0.0005319464
    },
    {
      "('": -0.00036157944
    },
    {
      "co": -6.4446605e-05
    },
    {
      "ffee": -0.00047964763
    },
    {
      "_": -0.00038531228
    },
    {
      "filter": -0.0003850729
    },
    {
      "')": -0.0013700703
    },
    {
      "\n": -0.0024858185
    },
    {
      " point": -0.016653728
    },
    {
      "at": -0.00039962292
    },
    {
      "('": -0.00026493028
    },
    {
      "co": -8.173468e-05
    },
    {
      "ffee": -0.00063488266
    },
    {
      "_": -0.00065158313
    },
    {
      "filter": -0.00043832068
    },
    {
      "')": -0.0018055186
    },
    {
      "\n": -0.0050902753
    },
    {
      " #": -0.0026995188
    },
    {
      " 2": -0.0039871135
    },
    {
      ":": -0.00060774625
    },
    {
      " put": -0.5259288
    },
    {
      " coffee": -0.6925852
    },
    {
      " coffee": -0.39695734
    },
    {
      "\n": -0.1898839
    },
    {
      " assert": -0.15752873
    },
    {
      "('": -0.00051411585
    },
    {
      "co": -0.073248215
    },
    {
      "ffee": -0.006313706
    },
    {
      "_": -0.0017255673
    },
    {
      "filter": -0.02852228
    },
    {
      "'": -0.0011055127
    },
    {
      " in": -0.0020356765
    },
    {
      " '": -0.00082074676
    },
    {
      "hands": -0.0008143039
    },
    {
      "')": -0.0018251647
    },
    {
      "\n": -0.0019105001
    },
    {
      " else": -0.00095020543
    },
    {
      ":": -0.0004614594
    },
    {
      " grab": -0.002137338
    },
    {
      "('": -0.00037243115
    },
    {
      "co": -6.122609e-05
    },
    {
      "ffee": -0.00023667031
    },
    {
      "_": -0.00031441596
    },
    {
      "filter": -0.00034416933
    },
    {
      "')": -0.0011232363
    },
    {
      "\n": -0.003095549
    },
    {
      " fill": -0.8007837
    },
    {
      "('": -0.07190618
    },
    {
      "co": -0.00079843693
    },
    {
      "ffee": -0.0023289765
    },
    {
      "_": -0.023457844
    },
    {
      "filter": -0.01226498
    },
    {
      "')": -0.12348383
    },
    {
      "\n": -0.006779397
    },
    {
      " tur": -0.6345096
    },
    {
      "nt": -4.871012e-05
    },
    {
      "o": -0.0005278305
    },
    {
      "('": -0.00022146793
    },
    {
      "co": -0.0010226364
    },
    {
      "ffee": -0.0084460415
    },
    {
      "_": -0.001047873
    },
    {
      "filter": -0.070131846
    },
    {
      "')": -0.00074343756
    },
    {
      "\n": -0.0013994371
    },
    {
      " look": -0.033924527
    },
    {
      "at": -0.00025920733
    },
    {
      "('": -0.00021860692
    },
    {
      "co": -0.00017210613
    },
    {
      "ffee": -0.001002109
    },
    {
      "_": -0.0004887075
    },
    {
      "filter": -0.0007968252
    },
    {
      "')": -0.0012515995
    },
    {
      "\n": -0.0042145466
    },
    {
      " #": -0.007104944
    },
    {
      " 3": -0.0048890603
    },
    {
      ":": -0.0010202485
    },
    {
      " put": -0.34937313
    },
    {
      " coffee": -0.66580594
    },
    {
      " filter": -0.012086327
    },
    {
      " in": -0.74981034
    },
    {
      "\n": -0.050731454
    },
    {
      " assert": -0.2214011
    },
    {
      "('": -0.0002903283
    },
    {
      "co": -0.00076461444
    },
    {
      "ffee": -0.00064180145
    },
    {
      "_": -0.00014969209
    },
    {
      "filter": -0.00054685504
    },
    {
      "'": -0.00058466673
    },
    {
      " in": -0.0006419216
    },
    {
      " '": -0.0005371935
    },
    {
      "hands": -0.0005055272
    },
    {
      "')": -0.0006265925
    },
    {
      "\n": -0.0007527424
    },
    {
      " else": -0.0004634878
    },
    {
      ":": -0.000368853
    },
    {
      " grab": -0.0005800119
    },
    {
      "('": -0.0003179941
    },
    {
      "co": -3.690939e-05
    },
    {
      "ffee": -0.00021634194
    },
    {
      "_": -0.00037100064
    },
    {
      "filter": -0.00018438557
    },
    {
      "')": -0.0007791692
    },
    {
      "\n": -0.0017840217
    },
    {
      " put": -0.0035688386
    },
    {
      "obj": -0.03504196
    },
    {
      "back": -0.0003137007
    },
    {
      "('": -0.00046968853
    },
    {
      "co": -8.00667e-05
    },
    {
      "ffee": -0.0008394203
    },
    {
      "_": -0.00042699307
    },
    {
      "filter": -0.0008242085
    },
    {
      "')": -0.0010586731
    },
    {
      "\n": -0.0052704974
    },
    {
      " #": -0.0025075069
    },
    {
      " 4": -0.005248928
    },
    {
      ":": -0.0011243102
    },
    {
      " switch": -0.6254982
    },
    {
      " on": -0.012517355
    },
    {
      " coffee": -0.21309058
    },
    {
      " maker": -0.011900106
    },
    {
      "\n": -0.011681719
    },
    {
      " assert": -0.37769735
    },
    {
      "on": -0.0003352268
    },
    {
      "('": -0.0004324776
    },
    {
      "co": -0.00010844024
    },
    {
      "ffee": -0.059013728
    },
    {
      "_": -0.0008219398
    },
    {
      "maker": -0.0005614051
    },
    {
      "')": -0.0012159712
    },
    {
      "\n": -0.0044383146
    },
    {
      " #": -0.016194325
    },
    {
      " 5": -0.0035204475
    },
    {
      ":": -0.0014445627
    },
    {
      " wait": -1.0279771
    },
    {
      " coffee": -0.1635718
    },
    {
      "\n": -0.30933714
    },
    {
      " cup": -0.32457945
    },
    {
      "\n": -0.013773959
    },
    {
      " assert": -0.68401706
    },
    {
      "('": -0.0017351198
    },
    {
      "cup": -0.017825916
    },
    {
      "')": -0.0019954217
    },
    {
      "\n": -0.0036626386
    },
    {
      " assert": -0.46876726
    },
    {
      "('": -0.00048978225
    },
    {
      "close": -0.038536586
    },
    {
      "'": -0.00093069556
    },
    {
      " to": -0.0002977211
    },
    {
      " '": -0.0017696341
    },
    {
      "cup": -0.015742868
    },
    {
      "')": -0.0029605525
    },
    {
      "\n": -0.0019917197
    },
    {
      " else": -0.0008295757
    },
    {
      ":": -0.00096010824
    },
    {
      " find": -0.002079875
    },
    {
      "('": -0.000802015
    },
    {
      "cup": -0.00021634194
    },
    {
      "')": -0.0025029676
    },
    {
      "\n": -0.0050448035
    },
    {
      " grab": -0.6574653
    },
    {
      "('": -0.00048620783
    },
    {
      "cup": -0.00089591293
    },
    {
      "')": -0.0012891982
    },
    {
      "\n": -0.002166607
    },
    {
      " assert": -0.10261801
    },
    {
      "('": -0.00033844542
    },
    {
      "cup": -0.013467864
    },
    {
      "'": -0.0006840886
    },
    {
      " in": -0.0023504866
    },
    {
      " '": -0.0010910763
    },
    {
      "hands": -0.0030128625
    },
    {
      "')": -0.0024076044
    },
    {
      "\n": -0.0014355488
    },
    {
      " else": -0.001633801
    },
    {
      ":": -0.0004608624
    },
    {
      " grab": -0.0027684926
    },
    {
      "('": -0.0005797763
    },
    {
      "cup": -0.00017496901
    },
    {
      "')": -0.0020360954
    },
    {
      "\n": -0.003281334
    },
    {
      " tur": -0.6223645
    },
    {
      "('": -0.0036855503
    },
    {
      "co": -0.19474213
    },
    {
      "ffee": -0.026895562
    },
    {
      "')": -0.6647396
    },
    {
      "\n": -0.0070656245
    },
    {
      " #": -0.60438585
    },
    {
      " 6": -0.0049751964
    },
    {
      ":": -0.0015598917
    },
    {
      " Done": -0.48236552
    },
    {
      "<|endoftext|>": -0.6832035
    },
    {
      "def": -0.5629895
    },
    {
      "obj": -0.116559096
    },
    {
      "back": -0.001256612
    },
    {
      "('": -0.0011377366
    },
    {
      "cup": -0.010708925
    },
    {
      "')": -0.001047276
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.108724117279053
[(" # 0: find hanger\n find('hanger')\n # 1: grab hanger\n assert('close' to 'hanger')\n else: find('hanger')\n grab('hanger')\n assert('hanger' in 'hands')\n else: grab('hanger')\n turnto('hanger')\n assert('hanger' in 'hands')\n else: grab('hanger')\n pointat('hanger')\n # 2: grab jacket\n find('jacket')\n grab('jacket')\n assert('jacket' in 'hands')\n else: grab('jacket')\n turnto('jacket')\n lookat('jacket')\n # 3: hang jacket on hanger\n assert('hanger' in 'hands')\n else: grab('hanger')\n hang('jacket', 'hanger')\n # 4: Done", <OpenAIObject at 0x7fd928043d10> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3359,
    3364,
    3365,
    3370,
    3372,
    3373,
    3378,
    3380,
    3381,
    3383,
    3385,
    3386,
    3391,
    3393,
    3398,
    3399,
    3406,
    3408,
    3413,
    3414,
    3417,
    3419,
    3420,
    3425,
    3427,
    3428,
    3433,
    3434,
    3439,
    3441,
    3442,
    3447,
    3449,
    3450,
    3455,
    3457,
    3458,
    3463,
    3465,
    3466,
    3473,
    3475,
    3476,
    3481,
    3482,
    3485,
    3487,
    3492,
    3494,
    3495,
    3500,
    3501,
    3506,
    3508,
    3509,
    3514,
    3516,
    3517,
    3521,
    3523,
    3524,
    3526,
    3527,
    3532,
    3534,
    3535,
    3542,
    3544,
    3545,
    3550,
    3551,
    3554,
    3556,
    3561,
    3563,
    3564,
    3569,
    3570,
    3575,
    3577,
    3578,
    3583,
    3585,
    3586,
    3592,
    3594,
    3596,
    3597,
    3602,
    3604,
    3605,
    3607,
    3609,
    3610,
    3615,
    3622,
    3623,
    3628,
    3630,
    3631,
    3636,
    3638,
    3639,
    3644,
    3646,
    3647,
    3652,
    3654,
    3655,
    3662,
    3664,
    3665,
    3670,
    3671,
    3674,
    3676,
    3681,
    3683,
    3684,
    3689,
    3690,
    3695,
    3697,
    3698,
    3703,
    3705,
    3706,
    3710,
    3712,
    3713,
    3715,
    3716,
    3721,
    3723,
    3724,
    3729,
    3731,
    3733,
    3734,
    3739,
    3741,
    3742,
    3744,
    3746,
    3747,
    3752,
    3759,
    3762,
    3764,
    3769,
    3770,
    3777,
    3779,
    3780,
    3785,
    3786,
    3789,
    3791,
    3796,
    3798,
    3799,
    3804,
    3805,
    3810,
    3812,
    3813,
    3818,
    3820,
    3821,
    3826,
    3828,
    3829,
    3834,
    3836,
    3838,
    3839,
    3844,
    3846,
    3847,
    3849,
    3851,
    3852
  ],
  "token_logprobs": [
    -0.015407417,
    -0.0072792843,
    -0.0019405999,
    -0.5702514,
    -0.3543354,
    -0.004945424,
    -0.033175565,
    -0.03452134,
    -0.0019149183,
    -0.0004737435,
    -0.00054399215,
    -0.0015415646,
    -0.0077305236,
    -0.0037278496,
    -0.0021919366,
    -0.00057202304,
    -0.16280212,
    -0.08618776,
    -0.0016577403,
    -0.019573234,
    -0.5250988,
    -0.0016170247,
    -0.0059444024,
    -0.002368947,
    -0.000554368,
    -0.0024613186,
    -0.00064060936,
    -0.00018736672,
    -0.004404606,
    -0.006483109,
    -0.0012199107,
    -0.0013741902,
    -0.002978847,
    -0.0017792439,
    -0.00048596945,
    -0.0004160193,
    -0.0013606388,
    -0.0066007026,
    -0.0036710717,
    -0.0010871368,
    -0.00029664824,
    -0.000118931544,
    -0.001166678,
    -0.005366914,
    -0.6009743,
    -0.0014742268,
    -0.0070637628,
    -0.00046789853,
    -0.001314324,
    -0.013172729,
    -0.002558482,
    -0.005812322,
    -0.014475693,
    -0.0029373558,
    -0.011745523,
    -0.00268159,
    -0.0023200782,
    -0.0014281474,
    -0.0003936597,
    -0.0001878445,
    -0.002854028,
    -0.004206584,
    -0.54513884,
    -7.613187e-05,
    -6.635395e-05,
    -0.00043426573,
    -0.00040952102,
    -0.00031858825,
    -0.0011139287,
    -0.0030148947,
    -0.3365382,
    -0.00039258585,
    -0.0029823123,
    -0.0006060773,
    -0.0005573492,
    -0.0013281718,
    -0.0008072649,
    -0.00083100714,
    -0.001231367,
    -0.0012868103,
    -0.0027291041,
    -0.0017770954,
    -0.0010597479,
    -0.00075632246,
    -0.00023321231,
    -0.000104625564,
    -0.0008844586,
    -0.0026282792,
    -0.08533455,
    -0.0005739304,
    -0.00032681835,
    -0.00022266187,
    -0.00029283168,
    -0.0019312226,
    -0.005390163,
    -0.003404054,
    -0.0064367973,
    -0.0007671188,
    -1.377672,
    -0.14839146,
    -0.06235226,
    -0.26018462,
    -0.001111063,
    -0.0031894224,
    -0.00016769636,
    -0.0024059317,
    -0.003536718,
    -0.5813205,
    -0.00090862135,
    -0.0003595538,
    -1.688045e-05,
    -0.0015295639,
    -0.0029560686,
    -0.48508838,
    -0.0010126107,
    -0.022125775,
    -6.2420055e-05,
    -0.0012807831,
    -0.0066020237,
    -0.0021579443,
    -0.0021198953,
    -0.0035086025,
    -0.002278315,
    -0.009333961,
    -0.002931201,
    -0.026745869,
    -0.0018374056,
    -0.0011086769,
    -6.015603e-05,
    -0.0026025837,
    -0.004635188,
    -0.3339018,
    -6.2299914e-05,
    -0.0002644525,
    -0.00043044917,
    -0.0407127,
    -9.604066e-05,
    -0.0010312861,
    -0.0021448631,
    -1.0807462,
    -0.0006471705,
    -0.00042424936,
    -0.0008292181,
    -3.643162e-05,
    -0.0022340498,
    -0.0056557367,
    -0.013479524,
    -0.008499723,
    -0.0011102275,
    -0.2579538,
    -0.9115274,
    -0.26335233,
    -0.049199797,
    -0.0007230407,
    -0.009651134,
    -0.22908275,
    -0.0017720785,
    -0.57112837,
    -0.0005308135,
    -0.0015144619,
    -0.031081352,
    -0.003215255,
    -0.003625608,
    -0.029516174,
    -0.006590203,
    -0.024811538,
    -0.0020988104,
    -0.025045585,
    -0.0011734813,
    -0.0014675407,
    -0.00010188283,
    -0.0022711463,
    -0.0048832516,
    -1.6898752,
    -0.13488743,
    -0.08028584,
    -0.0001345479,
    -0.83626676,
    -0.007817505,
    -0.0047523845,
    -0.00016650239,
    -0.0022954622,
    -0.014391517,
    -0.5589735,
    -0.007784945,
    -0.0018027122,
    -0.8702445
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " h",
    "anger",
    "\n",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " h",
    "anger",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " jacket",
    "\n",
    " find",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " grab",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " assert",
    "('",
    "j",
    "acket",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " hang",
    " jacket",
    " on",
    " h",
    "anger",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " hang",
    "('",
    "j",
    "acket",
    "',",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.015407417
    },
    {
      " 0": -0.0072792843
    },
    {
      ":": -0.0019405999
    },
    {
      " find": -0.5702514
    },
    {
      " h": -0.3543354
    },
    {
      "anger": -0.004945424
    },
    {
      "\n": -0.033175565
    },
    {
      " find": -0.03452134
    },
    {
      "('": -0.0019149183
    },
    {
      "h": -0.0004737435
    },
    {
      "anger": -0.00054399215
    },
    {
      "')": -0.0015415646
    },
    {
      "\n": -0.0077305236
    },
    {
      " #": -0.0037278496
    },
    {
      " 1": -0.0021919366
    },
    {
      ":": -0.00057202304
    },
    {
      " grab": -0.16280212
    },
    {
      " h": -0.08618776
    },
    {
      "anger": -0.0016577403
    },
    {
      "\n": -0.019573234
    },
    {
      " assert": -0.5250988
    },
    {
      "('": -0.0016170247
    },
    {
      "close": -0.0059444024
    },
    {
      "'": -0.002368947
    },
    {
      " to": -0.000554368
    },
    {
      " '": -0.0024613186
    },
    {
      "h": -0.00064060936
    },
    {
      "anger": -0.00018736672
    },
    {
      "')": -0.004404606
    },
    {
      "\n": -0.006483109
    },
    {
      " else": -0.0012199107
    },
    {
      ":": -0.0013741902
    },
    {
      " find": -0.002978847
    },
    {
      "('": -0.0017792439
    },
    {
      "h": -0.00048596945
    },
    {
      "anger": -0.0004160193
    },
    {
      "')": -0.0013606388
    },
    {
      "\n": -0.0066007026
    },
    {
      " grab": -0.0036710717
    },
    {
      "('": -0.0010871368
    },
    {
      "h": -0.00029664824
    },
    {
      "anger": -0.000118931544
    },
    {
      "')": -0.001166678
    },
    {
      "\n": -0.005366914
    },
    {
      " assert": -0.6009743
    },
    {
      "('": -0.0014742268
    },
    {
      "h": -0.0070637628
    },
    {
      "anger": -0.00046789853
    },
    {
      "'": -0.001314324
    },
    {
      " in": -0.013172729
    },
    {
      " '": -0.002558482
    },
    {
      "hands": -0.005812322
    },
    {
      "')": -0.014475693
    },
    {
      "\n": -0.0029373558
    },
    {
      " else": -0.011745523
    },
    {
      ":": -0.00268159
    },
    {
      " grab": -0.0023200782
    },
    {
      "('": -0.0014281474
    },
    {
      "h": -0.0003936597
    },
    {
      "anger": -0.0001878445
    },
    {
      "')": -0.002854028
    },
    {
      "\n": -0.004206584
    },
    {
      " tur": -0.54513884
    },
    {
      "nt": -7.613187e-05
    },
    {
      "o": -6.635395e-05
    },
    {
      "('": -0.00043426573
    },
    {
      "h": -0.00040952102
    },
    {
      "anger": -0.00031858825
    },
    {
      "')": -0.0011139287
    },
    {
      "\n": -0.0030148947
    },
    {
      " assert": -0.3365382
    },
    {
      "('": -0.00039258585
    },
    {
      "h": -0.0029823123
    },
    {
      "anger": -0.0006060773
    },
    {
      "'": -0.0005573492
    },
    {
      " in": -0.0013281718
    },
    {
      " '": -0.0008072649
    },
    {
      "hands": -0.00083100714
    },
    {
      "')": -0.001231367
    },
    {
      "\n": -0.0012868103
    },
    {
      " else": -0.0027291041
    },
    {
      ":": -0.0017770954
    },
    {
      " grab": -0.0010597479
    },
    {
      "('": -0.00075632246
    },
    {
      "h": -0.00023321231
    },
    {
      "anger": -0.000104625564
    },
    {
      "')": -0.0008844586
    },
    {
      "\n": -0.0026282792
    },
    {
      " point": -0.08533455
    },
    {
      "at": -0.0005739304
    },
    {
      "('": -0.00032681835
    },
    {
      "h": -0.00022266187
    },
    {
      "anger": -0.00029283168
    },
    {
      "')": -0.0019312226
    },
    {
      "\n": -0.005390163
    },
    {
      " #": -0.003404054
    },
    {
      " 2": -0.0064367973
    },
    {
      ":": -0.0007671188
    },
    {
      " hang": -0.9763199
    },
    {
      " jacket": -0.14839146
    },
    {
      "\n": -0.06235226
    },
    {
      " find": -0.26018462
    },
    {
      "('": -0.001111063
    },
    {
      "j": -0.0031894224
    },
    {
      "acket": -0.00016769636
    },
    {
      "')": -0.0024059317
    },
    {
      "\n": -0.003536718
    },
    {
      " grab": -0.5813205
    },
    {
      "('": -0.00090862135
    },
    {
      "j": -0.0003595538
    },
    {
      "acket": -1.688045e-05
    },
    {
      "')": -0.0015295639
    },
    {
      "\n": -0.0029560686
    },
    {
      " assert": -0.48508838
    },
    {
      "('": -0.0010126107
    },
    {
      "j": -0.022125775
    },
    {
      "acket": -6.2420055e-05
    },
    {
      "'": -0.0012807831
    },
    {
      " in": -0.0066020237
    },
    {
      " '": -0.0021579443
    },
    {
      "hands": -0.0021198953
    },
    {
      "')": -0.0035086025
    },
    {
      "\n": -0.002278315
    },
    {
      " else": -0.009333961
    },
    {
      ":": -0.002931201
    },
    {
      " grab": -0.026745869
    },
    {
      "('": -0.0018374056
    },
    {
      "j": -0.0011086769
    },
    {
      "acket": -6.015603e-05
    },
    {
      "')": -0.0026025837
    },
    {
      "\n": -0.004635188
    },
    {
      " tur": -0.3339018
    },
    {
      "nt": -6.2299914e-05
    },
    {
      "o": -0.0002644525
    },
    {
      "('": -0.00043044917
    },
    {
      "j": -0.0407127
    },
    {
      "acket": -9.604066e-05
    },
    {
      "')": -0.0010312861
    },
    {
      "\n": -0.0021448631
    },
    {
      " assert": -0.6931024
    },
    {
      "at": -0.0006471705
    },
    {
      "('": -0.00042424936
    },
    {
      "j": -0.0008292181
    },
    {
      "acket": -3.643162e-05
    },
    {
      "')": -0.0022340498
    },
    {
      "\n": -0.0056557367
    },
    {
      " #": -0.013479524
    },
    {
      " 3": -0.008499723
    },
    {
      ":": -0.0011102275
    },
    {
      " hang": -0.2579538
    },
    {
      " up": -0.7765873
    },
    {
      " on": -0.26335233
    },
    {
      " h": -0.049199797
    },
    {
      "anger": -0.0007230407
    },
    {
      "\n": -0.009651134
    },
    {
      " assert": -0.22908275
    },
    {
      "('": -0.0017720785
    },
    {
      "h": -0.57112837
    },
    {
      "anger": -0.0005308135
    },
    {
      "'": -0.0015144619
    },
    {
      " in": -0.031081352
    },
    {
      " '": -0.003215255
    },
    {
      "hands": -0.003625608
    },
    {
      "')": -0.029516174
    },
    {
      "\n": -0.006590203
    },
    {
      " else": -0.024811538
    },
    {
      ":": -0.0020988104
    },
    {
      " grab": -0.025045585
    },
    {
      "('": -0.0011734813
    },
    {
      "h": -0.0014675407
    },
    {
      "anger": -0.00010188283
    },
    {
      "')": -0.0022711463
    },
    {
      "\n": -0.0048832516
    },
    {
      " assert": -1.0268409
    },
    {
      "('": -0.13488743
    },
    {
      "j": -0.08028584
    },
    {
      "acket": -0.0001345479
    },
    {
      "',": -0.83626676
    },
    {
      " '": -0.007817505
    },
    {
      "h": -0.0047523845
    },
    {
      "anger": -0.00016650239
    },
    {
      "')": -0.0022954622
    },
    {
      "\n": -0.014391517
    },
    {
      " #": -0.5589735
    },
    {
      " 4": -0.007784945
    },
    {
      ":": -0.0018027122
    },
    {
      " Done": -0.8702445
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.002743721008301
[(" # 0: find newspaper\n find('newspaper')\n # 1: grab newspaper\n grab('newspaper')\n # 2: find desk\n find('desk')\n # 3: put newspaper on desk\n assert('close' to 'desk')\n else: find('desk')\n puton('newspaper')\n # 4: sit down\n sit('desk')\n # 5: read newspaper\n lookat('newspaper')\n read('newspaper')\n # 6: put newspaper back\n putback('newspaper')", <OpenAIObject at 0x7fd96b0ab400> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3367,
    3368,
    3373,
    3375,
    3378,
    3380,
    3384,
    3386,
    3387,
    3389,
    3391,
    3392,
    3397,
    3407,
    3408,
    3413,
    3415,
    3418,
    3420,
    3424,
    3426,
    3427,
    3429,
    3431,
    3432,
    3437,
    3442,
    3443,
    3448,
    3450,
    3453,
    3454,
    3456,
    3457,
    3459,
    3461,
    3462,
    3466,
    3476,
    3479,
    3484,
    3485,
    3492,
    3494,
    3499,
    3500,
    3503,
    3505,
    3508,
    3509,
    3511,
    3512,
    3517,
    3518,
    3523,
    3525,
    3528,
    3529,
    3531,
    3532,
    3536,
    3538,
    3540,
    3543,
    3545,
    3549,
    3551,
    3552,
    3554,
    3556,
    3557,
    3561,
    3566,
    3567,
    3571,
    3573,
    3576,
    3577,
    3579,
    3580,
    3582,
    3584,
    3585,
    3590,
    3600,
    3601,
    3606,
    3608,
    3610,
    3613,
    3615,
    3619,
    3621,
    3622,
    3627,
    3629,
    3632,
    3634,
    3638,
    3640,
    3641,
    3643,
    3645,
    3646,
    3650,
    3660,
    3665,
    3666,
    3670,
    3674,
    3676,
    3679,
    3681,
    3685
  ],
  "token_logprobs": [
    -0.017672297,
    -0.008794801,
    -0.0019450181,
    -0.47599605,
    -0.28250423,
    -0.028766457,
    -0.02894388,
    -0.0021687585,
    -0.0020696651,
    -0.0006238507,
    -0.00064895867,
    -0.0027124882,
    -0.00789589,
    -0.0039983634,
    -0.002397148,
    -0.0004492926,
    -0.19348107,
    -0.13552971,
    -0.014547901,
    -0.77656233,
    -0.0012912257,
    -0.0008240883,
    -0.00026421316,
    -0.0009461477,
    -0.0014295809,
    -0.0049716593,
    -0.54853135,
    -0.006544844,
    -0.0005346873,
    -1.5972453,
    -2.3684556,
    -0.20758343,
    -0.6130744,
    -0.00088278874,
    -0.0012582828,
    -0.00017914227,
    -0.0014825244,
    -0.0064353566,
    -0.028515223,
    -0.0070826723,
    -0.0007714141,
    -3.341728,
    -0.2564736,
    -0.054516144,
    -0.14455207,
    -0.012841817,
    -1.203934,
    -0.001867204,
    -0.14394212,
    -0.0036412827,
    -0.00042019345,
    -0.0023555038,
    -0.021685718,
    -8.447461e-05,
    -0.0064099226,
    -0.005177686,
    -0.0021424724,
    -0.0020411115,
    -0.0049724984,
    -0.0019553453,
    -0.00095807976,
    -0.00020191487,
    -0.0028180422,
    -0.00551416,
    -0.107082196,
    -0.052881744,
    -0.00113929,
    -0.18699168,
    -0.00043009248,
    -0.00061156094,
    -0.84303164,
    -0.008086409,
    -0.06573555,
    -0.0066555436,
    -0.0008113217,
    -0.27606568,
    -2.7633128,
    -0.60768384,
    -0.10856879,
    -0.00456992,
    -0.027618391,
    -0.0002409637,
    -0.034737,
    -0.0053070495,
    -0.014827649,
    -0.004637644,
    -0.0007795259,
    -0.15829192,
    -0.23493226,
    -0.010054382,
    -1.8837838,
    -0.0010530055,
    -0.0007038932,
    -0.0037874996,
    -0.00042496464,
    -0.00059247814,
    -0.001718579,
    -0.2984347,
    -0.19275507,
    -0.009025791,
    -0.000681465,
    -0.001742463,
    -0.00050850736,
    -0.0026068874,
    -0.88419306,
    -0.11206943,
    -0.0052912906,
    -0.0019366575,
    -0.8958891,
    -0.2019492,
    -0.28353631,
    -0.051759005,
    -0.7056427,
    -0.23091403,
    -0.002944051,
    -0.007426151,
    -0.00086471223,
    -0.00037016338,
    -0.0069943736
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " newspaper",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " desk",
    "\n",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " newspaper",
    " on",
    " desk",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "des",
    "k",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " sit",
    " down",
    "\n",
    " sit",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " read",
    " newspaper",
    "\n",
    " look",
    "at",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " put",
    " newspaper",
    " back",
    "\n",
    " put",
    "back",
    "('",
    "new",
    "sp",
    "aper",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.017672297
    },
    {
      " 0": -0.008794801
    },
    {
      ":": -0.0019450181
    },
    {
      " find": -0.47599605
    },
    {
      " newspaper": -0.28250423
    },
    {
      "\n": -0.028766457
    },
    {
      " find": -0.02894388
    },
    {
      "('": -0.0021687585
    },
    {
      "new": -0.0020696651
    },
    {
      "sp": -0.0006238507
    },
    {
      "aper": -0.00064895867
    },
    {
      "')": -0.0027124882
    },
    {
      "\n": -0.00789589
    },
    {
      " #": -0.0039983634
    },
    {
      " 1": -0.002397148
    },
    {
      ":": -0.0004492926
    },
    {
      " grab": -0.19348107
    },
    {
      " newspaper": -0.13552971
    },
    {
      "\n": -0.014547901
    },
    {
      " assert": -0.63248026
    },
    {
      "('": -0.0012912257
    },
    {
      "new": -0.0008240883
    },
    {
      "sp": -0.00026421316
    },
    {
      "aper": -0.0009461477
    },
    {
      "')": -0.0014295809
    },
    {
      "\n": -0.0049716593
    },
    {
      " #": -0.54853135
    },
    {
      " 2": -0.006544844
    },
    {
      ":": -0.0005346873
    },
    {
      " sit": -0.8077565
    },
    {
      " chair": -1.1665485
    },
    {
      "\n": -0.20758343
    },
    {
      " find": -0.6130744
    },
    {
      "('": -0.00088278874
    },
    {
      "des": -0.0012582828
    },
    {
      "k": -0.00017914227
    },
    {
      "')": -0.0014825244
    },
    {
      "\n": -0.0064353566
    },
    {
      " #": -0.028515223
    },
    {
      " 3": -0.0070826723
    },
    {
      ":": -0.0007714141
    },
    {
      " sit": -0.11652769
    },
    {
      " newspaper": -0.2564736
    },
    {
      " on": -0.054516144
    },
    {
      " desk": -0.14455207
    },
    {
      "\n": -0.012841817
    },
    {
      " put": -0.52794
    },
    {
      "('": -0.001867204
    },
    {
      "close": -0.14394212
    },
    {
      "'": -0.0036412827
    },
    {
      " to": -0.00042019345
    },
    {
      " '": -0.0023555038
    },
    {
      "des": -0.021685718
    },
    {
      "k": -8.447461e-05
    },
    {
      "')": -0.0064099226
    },
    {
      "\n": -0.005177686
    },
    {
      " else": -0.0021424724
    },
    {
      ":": -0.0020411115
    },
    {
      " find": -0.0049724984
    },
    {
      "('": -0.0019553453
    },
    {
      "des": -0.00095807976
    },
    {
      "k": -0.00020191487
    },
    {
      "')": -0.0028180422
    },
    {
      "\n": -0.00551416
    },
    {
      " put": -0.107082196
    },
    {
      "on": -0.052881744
    },
    {
      "('": -0.00113929
    },
    {
      "new": -0.18699168
    },
    {
      "sp": -0.00043009248
    },
    {
      "aper": -0.00061156094
    },
    {
      "',": -0.7953831
    },
    {
      "\n": -0.008086409
    },
    {
      " #": -0.06573555
    },
    {
      " 4": -0.0066555436
    },
    {
      ":": -0.0008113217
    },
    {
      " sit": -0.27606568
    },
    {
      " on": -0.35707054
    },
    {
      "\n": -0.60768384
    },
    {
      " sit": -0.10856879
    },
    {
      "('": -0.00456992
    },
    {
      "des": -0.027618391
    },
    {
      "k": -0.0002409637
    },
    {
      "')": -0.034737
    },
    {
      "\n": -0.0053070495
    },
    {
      " #": -0.014827649
    },
    {
      " 5": -0.004637644
    },
    {
      ":": -0.0007795259
    },
    {
      " read": -0.15829192
    },
    {
      " newspaper": -0.23493226
    },
    {
      "\n": -0.010054382
    },
    {
      " read": -0.33868554
    },
    {
      "at": -0.0010530055
    },
    {
      "('": -0.0007038932
    },
    {
      "new": -0.0037874996
    },
    {
      "sp": -0.00042496464
    },
    {
      "aper": -0.00059247814
    },
    {
      "')": -0.001718579
    },
    {
      "\n": -0.2984347
    },
    {
      " read": -0.19275507
    },
    {
      "('": -0.009025791
    },
    {
      "new": -0.000681465
    },
    {
      "sp": -0.001742463
    },
    {
      "aper": -0.00050850736
    },
    {
      "')": -0.0026068874
    },
    {
      "<|endoftext|>": -0.55292857
    },
    {
      " #": -0.11206943
    },
    {
      " 6": -0.0052912906
    },
    {
      ":": -0.0019366575
    },
    {
      " put": -0.8958891
    },
    {
      " newspaper": -0.2019492
    },
    {
      " back": -0.28353631
    },
    {
      "\n": -0.051759005
    },
    {
      " put": -0.7056427
    },
    {
      "back": -0.23091403
    },
    {
      "('": -0.002944051
    },
    {
      "new": -0.007426151
    },
    {
      "sp": -0.00086471223
    },
    {
      "aper": -0.00037016338
    },
    {
      "')": -0.0069943736
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.066771984100342
[(" # 0: find a chair\n find('chair')\n # 1: walk to the chair\n walk('chair')\n # 2: sit on the chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')", <OpenAIObject at 0x7fd96b0ab7c0> JSON: {
  "text_offset": [
    3336,
    3338,
    3340,
    3341,
    3346,
    3348,
    3354,
    3355,
    3360,
    3362,
    3367,
    3369,
    3370,
    3372,
    3374,
    3375,
    3380,
    3383,
    3387,
    3393,
    3394,
    3399,
    3401,
    3406,
    3408,
    3409,
    3411,
    3413,
    3414,
    3418,
    3421,
    3425,
    3431,
    3432,
    3439,
    3441,
    3446,
    3447,
    3450,
    3452,
    3457,
    3459,
    3460,
    3465,
    3466,
    3471,
    3473,
    3478,
    3480,
    3481,
    3485,
    3487,
    3492
  ],
  "token_logprobs": [
    -0.14377812,
    -0.039648775,
    -0.0040820916,
    -0.42261392,
    -1.2587943,
    -0.07765537,
    -0.069309086,
    -0.026174666,
    -0.0063855057,
    -0.0019929155,
    -0.0021988647,
    -0.013097119,
    -0.0047704712,
    -0.0044685486,
    -0.00066243956,
    -0.72739047,
    -0.105452575,
    -0.43817258,
    -0.0017833055,
    -0.019717481,
    -0.41714925,
    -0.008238686,
    -0.0016340376,
    -0.0015500396,
    -0.008506095,
    -0.059792373,
    -0.005234126,
    -0.0009642852,
    -0.07605298,
    -0.21667247,
    -0.05715119,
    -0.0013388556,
    -0.00960305,
    -0.5792621,
    -0.0020960628,
    -0.010736761,
    -0.0037173787,
    -0.0012781577,
    -0.0024707606,
    -0.00066530245,
    -0.004818026,
    -0.005875933,
    -0.002224072,
    -0.0014619333,
    -0.05376909,
    -0.0020593298,
    -0.0006496739,
    -0.002219532,
    -0.006308308,
    -0.23510191,
    -0.0024442323,
    -0.0009186434,
    -0.001496911
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " a",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " walk",
    " to",
    " the",
    " chair",
    "\n",
    " walk",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " the",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.14377812
    },
    {
      " 0": -0.039648775
    },
    {
      ":": -0.0040820916
    },
    {
      " find": -0.42261392
    },
    {
      " chair": -0.5744682
    },
    {
      " chair": -0.07765537
    },
    {
      "\n": -0.069309086
    },
    {
      " find": -0.026174666
    },
    {
      "('": -0.0063855057
    },
    {
      "chair": -0.0019929155
    },
    {
      "')": -0.0021988647
    },
    {
      "\n": -0.013097119
    },
    {
      " #": -0.0047704712
    },
    {
      " 1": -0.0044685486
    },
    {
      ":": -0.00066243956
    },
    {
      " walk": -0.72739047
    },
    {
      " to": -0.105452575
    },
    {
      " the": -0.43817258
    },
    {
      " chair": -0.0017833055
    },
    {
      "\n": -0.019717481
    },
    {
      " walk": -0.41714925
    },
    {
      "('": -0.008238686
    },
    {
      "chair": -0.0016340376
    },
    {
      "')": -0.0015500396
    },
    {
      "\n": -0.008506095
    },
    {
      " #": -0.059792373
    },
    {
      " 2": -0.005234126
    },
    {
      ":": -0.0009642852
    },
    {
      " sit": -0.07605298
    },
    {
      " on": -0.21667247
    },
    {
      " the": -0.05715119
    },
    {
      " chair": -0.0013388556
    },
    {
      "\n": -0.00960305
    },
    {
      " assert": -0.5792621
    },
    {
      "('": -0.0020960628
    },
    {
      "close": -0.010736761
    },
    {
      "'": -0.0037173787
    },
    {
      " to": -0.0012781577
    },
    {
      " '": -0.0024707606
    },
    {
      "chair": -0.00066530245
    },
    {
      "')": -0.004818026
    },
    {
      "\n": -0.005875933
    },
    {
      " else": -0.002224072
    },
    {
      ":": -0.0014619333
    },
    {
      " find": -0.05376909
    },
    {
      "('": -0.0020593298
    },
    {
      "chair": -0.0006496739
    },
    {
      "')": -0.002219532
    },
    {
      "\n": -0.006308308
    },
    {
      " sit": -0.23510191
    },
    {
      "('": -0.0024442323
    },
    {
      "chair": -0.0009186434
    },
    {
      "')": -0.001496911
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.6656880378723145
[(" # 0: find bed\n find('bed')\n # 1: lay down on bed\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n sit('bed')\n sleep()\ndef wake_up():\n # 0: find bed\n find('bed')\n # 1: stand up from bed\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n standup()\n # 2: wakeup\n wakeup()", <OpenAIObject at 0x7fd96b0dc810> JSON: {
  "text_offset": [
    3338,
    3340,
    3342,
    3343,
    3348,
    3352,
    3353,
    3358,
    3360,
    3363,
    3365,
    3366,
    3368,
    3370,
    3371,
    3375,
    3380,
    3383,
    3387,
    3388,
    3392,
    3394,
    3395,
    3397,
    3400,
    3402,
    3403,
    3408,
    3410,
    3412,
    3415,
    3417,
    3418,
    3425,
    3427,
    3432,
    3433,
    3436,
    3438,
    3441,
    3443,
    3444,
    3449,
    3450,
    3455,
    3457,
    3460,
    3462,
    3463,
    3467,
    3469,
    3472,
    3474,
    3475,
    3481,
    3483,
    3484,
    3487,
    3492,
    3493,
    3495,
    3498,
    3499,
    3501,
    3503,
    3504,
    3509,
    3513,
    3514,
    3519,
    3521,
    3524,
    3526,
    3527,
    3529,
    3531,
    3532,
    3538,
    3541,
    3546,
    3550,
    3551,
    3555,
    3557,
    3558,
    3560,
    3563,
    3565,
    3566,
    3571,
    3573,
    3575,
    3578,
    3580,
    3581,
    3588,
    3590,
    3595,
    3596,
    3599,
    3601,
    3604,
    3606,
    3607,
    3612,
    3613,
    3618,
    3620,
    3623,
    3625,
    3626,
    3632,
    3634,
    3636,
    3637,
    3639,
    3641,
    3642,
    3647,
    3649,
    3650,
    3655,
    3657
  ],
  "token_logprobs": [
    -0.261699,
    -0.06002703,
    -0.0029604333,
    -1.0092105,
    -0.31149507,
    -0.01875391,
    -0.031013165,
    -0.0028015464,
    -0.00043307178,
    -0.0021567503,
    -0.008755598,
    -0.0034641623,
    -0.00228925,
    -0.0005032613,
    -0.55427855,
    -0.08335499,
    -0.22454484,
    -0.045978896,
    -0.00871495,
    -0.26766753,
    -3.0353855e-05,
    -0.00038519214,
    -0.00046992695,
    -8.256821e-05,
    -0.000825042,
    -0.003610174,
    -0.065027006,
    -0.00027709146,
    -0.0003342722,
    -0.00012012551,
    -0.00023488217,
    -0.0028483493,
    -0.02329573,
    -0.0005232977,
    -0.0012134659,
    -0.001633801,
    -0.0002607561,
    -0.00090659293,
    -0.00017556225,
    -0.0023290967,
    -0.0034401761,
    -0.00090731,
    -0.0007693875,
    -0.0029017292,
    -0.0007056832,
    -0.0001371733,
    -0.0012279053,
    -0.0033289366,
    -2.0345788,
    -0.00095438055,
    -9.425254e-05,
    -0.0006970936,
    -0.005460461,
    -0.23305218,
    -0.0033100382,
    -0.33975485,
    -2.4930863,
    -0.89215845,
    -0.52175593,
    -0.00030976496,
    -0.026909951,
    -0.014789538,
    -0.0088988915,
    -0.004984899,
    -0.0012267113,
    -0.6901289,
    -0.016204866,
    -0.019566609,
    -0.0069522387,
    -0.0013163543,
    -9.675685e-05,
    -0.0010871368,
    -0.0057715536,
    -0.004111896,
    -0.0025370885,
    -0.00057130784,
    -0.39161947,
    -0.051481154,
    -0.37604183,
    -0.04106023,
    -0.012423264,
    -0.3542784,
    -2.665838e-05,
    -0.00014217819,
    -0.0005377905,
    -8.626461e-05,
    -0.0007313909,
    -0.0039146445,
    -0.12777287,
    -0.00021228698,
    -0.00035526042,
    -9.520714e-05,
    -0.00066876045,
    -0.002865565,
    -0.03490721,
    -0.0007023416,
    -0.0052851182,
    -0.0014457565,
    -0.00035156214,
    -0.00071904395,
    -6.850158e-05,
    -0.001696669,
    -0.0031230527,
    -0.0010399977,
    -0.0009991269,
    -0.0020810708,
    -0.0011265778,
    -0.0001244142,
    -0.0010678634,
    -0.0040749675,
    -0.040687744,
    -0.0022572873,
    -0.34024128,
    -0.24555068,
    -0.71588826,
    -0.0067073866,
    -0.0006880262,
    -1.495399,
    -2.7783298,
    -0.047484264,
    -0.026366988,
    -0.0008066679,
    -0.0034481322
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " lay",
    " down",
    " on",
    " bed",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " sleep",
    "()",
    "\n",
    "def",
    " wake",
    "_",
    "up",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " stand",
    " up",
    " from",
    " bed",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " stand",
    "up",
    "()",
    "\n",
    " #",
    " 2",
    ":",
    " wake",
    "up",
    "\n",
    " wake",
    "up",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.261699
    },
    {
      " 0": -0.06002703
    },
    {
      ":": -0.0029604333
    },
    {
      " find": -1.0092105
    },
    {
      " bed": -0.31149507
    },
    {
      "\n": -0.01875391
    },
    {
      " find": -0.031013165
    },
    {
      "('": -0.0028015464
    },
    {
      "bed": -0.00043307178
    },
    {
      "')": -0.0021567503
    },
    {
      "\n": -0.008755598
    },
    {
      " #": -0.0034641623
    },
    {
      " 1": -0.00228925
    },
    {
      ":": -0.0005032613
    },
    {
      " lay": -0.55427855
    },
    {
      " down": -0.08335499
    },
    {
      " on": -0.22454484
    },
    {
      " bed": -0.045978896
    },
    {
      "\n": -0.00871495
    },
    {
      " tur": -0.26766753
    },
    {
      "nt": -3.0353855e-05
    },
    {
      "o": -0.00038519214
    },
    {
      "('": -0.00046992695
    },
    {
      "bed": -8.256821e-05
    },
    {
      "')": -0.000825042
    },
    {
      "\n": -0.003610174
    },
    {
      " look": -0.065027006
    },
    {
      "at": -0.00027709146
    },
    {
      "('": -0.0003342722
    },
    {
      "bed": -0.00012012551
    },
    {
      "')": -0.00023488217
    },
    {
      "\n": -0.0028483493
    },
    {
      " assert": -0.02329573
    },
    {
      "('": -0.0005232977
    },
    {
      "close": -0.0012134659
    },
    {
      "'": -0.001633801
    },
    {
      " to": -0.0002607561
    },
    {
      " '": -0.00090659293
    },
    {
      "bed": -0.00017556225
    },
    {
      "')": -0.0023290967
    },
    {
      "\n": -0.0034401761
    },
    {
      " else": -0.00090731
    },
    {
      ":": -0.0007693875
    },
    {
      " find": -0.0029017292
    },
    {
      "('": -0.0007056832
    },
    {
      "bed": -0.0001371733
    },
    {
      "')": -0.0012279053
    },
    {
      "\n": -0.0033289366
    },
    {
      " else": -0.4532019
    },
    {
      "('": -0.00095438055
    },
    {
      "bed": -9.425254e-05
    },
    {
      "')": -0.0006970936
    },
    {
      "\n": -0.005460461
    },
    {
      " sleep": -0.23305218
    },
    {
      "()": -0.0033100382
    },
    {
      "\n": -0.33975485
    },
    {
      " #": -0.17565012
    },
    {
      " wake": -0.89215845
    },
    {
      "_": -0.52175593
    },
    {
      "up": -0.00030976496
    },
    {
      "():": -0.026909951
    },
    {
      "\n": -0.014789538
    },
    {
      " #": -0.0088988915
    },
    {
      " 0": -0.004984899
    },
    {
      ":": -0.0012267113
    },
    {
      " find": -0.6901289
    },
    {
      " bed": -0.016204866
    },
    {
      "\n": -0.019566609
    },
    {
      " find": -0.0069522387
    },
    {
      "('": -0.0013163543
    },
    {
      "bed": -9.675685e-05
    },
    {
      "')": -0.0010871368
    },
    {
      "\n": -0.0057715536
    },
    {
      " #": -0.004111896
    },
    {
      " 1": -0.0025370885
    },
    {
      ":": -0.00057130784
    },
    {
      " stand": -0.39161947
    },
    {
      " up": -0.051481154
    },
    {
      " from": -0.37604183
    },
    {
      " bed": -0.04106023
    },
    {
      "\n": -0.012423264
    },
    {
      " tur": -0.3542784
    },
    {
      "nt": -2.665838e-05
    },
    {
      "o": -0.00014217819
    },
    {
      "('": -0.0005377905
    },
    {
      "bed": -8.626461e-05
    },
    {
      "')": -0.0007313909
    },
    {
      "\n": -0.0039146445
    },
    {
      " look": -0.12777287
    },
    {
      "at": -0.00021228698
    },
    {
      "('": -0.00035526042
    },
    {
      "bed": -9.520714e-05
    },
    {
      "')": -0.00066876045
    },
    {
      "\n": -0.002865565
    },
    {
      " assert": -0.03490721
    },
    {
      "('": -0.0007023416
    },
    {
      "close": -0.0052851182
    },
    {
      "'": -0.0014457565
    },
    {
      " to": -0.00035156214
    },
    {
      " '": -0.00071904395
    },
    {
      "bed": -6.850158e-05
    },
    {
      "')": -0.001696669
    },
    {
      "\n": -0.0031230527
    },
    {
      " else": -0.0010399977
    },
    {
      ":": -0.0009991269
    },
    {
      " find": -0.0020810708
    },
    {
      "('": -0.0011265778
    },
    {
      "bed": -0.0001244142
    },
    {
      "')": -0.0010678634
    },
    {
      "\n": -0.0040749675
    },
    {
      " stand": -0.040687744
    },
    {
      "up": -0.0022572873
    },
    {
      "()": -0.34024128
    },
    {
      "\n": -0.24555068
    },
    {
      " #": -0.71588826
    },
    {
      " 2": -0.0067073866
    },
    {
      ":": -0.0006880262
    },
    {
      " open": -0.67144835
    },
    {
      " up": -0.06658858
    },
    {
      "\n": -0.047484264
    },
    {
      " wake": -0.026366988
    },
    {
      "up": -0.0008066679
    },
    {
      "()": -0.0034481322
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.1256918907165527
[(" # 0: find alarm clock\n find('alarm_clock')\n # 1: grab alarm clock\n grab('alarm_clock')\n assert('alarm_clock' in 'hands')\n else: grab('alarm_clock')\n # 2: walk to bedroom\n walk('bedroom')\n # 3: put alarm clock in bedroom\n putin('alarm_clock')\n # 4: Done", <OpenAIObject at 0x7fd9580e7860> JSON: {
  "text_offset": [
    3359,
    3361,
    3363,
    3364,
    3369,
    3375,
    3381,
    3382,
    3387,
    3389,
    3391,
    3394,
    3395,
    3400,
    3402,
    3403,
    3405,
    3407,
    3408,
    3413,
    3419,
    3425,
    3426,
    3431,
    3433,
    3435,
    3438,
    3439,
    3444,
    3446,
    3447,
    3454,
    3456,
    3458,
    3461,
    3462,
    3467,
    3468,
    3471,
    3473,
    3478,
    3480,
    3481,
    3486,
    3487,
    3492,
    3494,
    3496,
    3499,
    3500,
    3505,
    3507,
    3508,
    3510,
    3512,
    3513,
    3518,
    3521,
    3529,
    3530,
    3535,
    3537,
    3544,
    3546,
    3547,
    3549,
    3551,
    3552,
    3556,
    3562,
    3568,
    3571,
    3579,
    3580,
    3584,
    3586,
    3588,
    3590,
    3593,
    3594,
    3599,
    3601,
    3602,
    3604,
    3606,
    3607
  ],
  "token_logprobs": [
    -0.0187861,
    -0.0083050355,
    -0.0020808312,
    -0.86399263,
    -0.19689716,
    -0.06523758,
    -0.030077124,
    -0.019597,
    -0.0021705495,
    -0.0029623464,
    -0.00030809414,
    -0.012390858,
    -0.000436174,
    -0.0035443145,
    -0.007977236,
    -0.0067403293,
    -0.002033526,
    -0.00072697556,
    -0.5708461,
    -0.19023898,
    -0.008741888,
    -0.017161245,
    -0.7212382,
    -0.0012612076,
    -0.00057130784,
    -0.00014420661,
    -0.0032803768,
    -0.00046825802,
    -0.0019124112,
    -0.005350075,
    -0.8945969,
    -0.0014698085,
    -0.16993055,
    -0.00031203084,
    -0.0077477037,
    -0.0010564062,
    -0.0025440194,
    -0.021659832,
    -0.005399394,
    -0.007742357,
    -0.040628582,
    -0.0042705736,
    -0.015397551,
    -0.004286614,
    -0.011236101,
    -0.0013193373,
    -0.0005473328,
    -0.00022838576,
    -0.0024270841,
    -0.0008801634,
    -0.0023553856,
    -0.0064933077,
    -0.27251083,
    -0.00700728,
    -0.0010299757,
    -0.11409616,
    -0.112131774,
    -0.077188,
    -0.021345524,
    -0.009296061,
    -0.0021352468,
    -0.002904241,
    -0.00114466,
    -0.005290211,
    -0.017120497,
    -0.005193564,
    -0.00083786866,
    -0.50126445,
    -0.11416423,
    -0.0056539387,
    -0.83619106,
    -0.077815786,
    -0.017444577,
    -0.9110656,
    -0.44381464,
    -0.009517116,
    -0.021253768,
    -0.00012643983,
    -0.0017018636,
    -0.0006525368,
    -1.218687,
    -0.34912485,
    -0.76614267,
    -0.004297629,
    -0.00197201,
    -0.22302768
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " alarm",
    " clock",
    "\n",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " assert",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " alarm",
    " clock",
    " in",
    " bedroom",
    "\n",
    " put",
    "in",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.0187861
    },
    {
      " 0": -0.0083050355
    },
    {
      ":": -0.0020808312
    },
    {
      " walk": -0.7222566
    },
    {
      " alarm": -0.19689716
    },
    {
      " clock": -0.06523758
    },
    {
      "\n": -0.030077124
    },
    {
      " find": -0.019597
    },
    {
      "('": -0.0021705495
    },
    {
      "al": -0.0029623464
    },
    {
      "arm": -0.00030809414
    },
    {
      "_": -0.012390858
    },
    {
      "clock": -0.000436174
    },
    {
      "')": -0.0035443145
    },
    {
      "\n": -0.007977236
    },
    {
      " #": -0.0067403293
    },
    {
      " 1": -0.002033526
    },
    {
      ":": -0.00072697556
    },
    {
      " grab": -0.5708461
    },
    {
      " alarm": -0.19023898
    },
    {
      " clock": -0.008741888
    },
    {
      "\n": -0.017161245
    },
    {
      " assert": -0.6863385
    },
    {
      "('": -0.0012612076
    },
    {
      "al": -0.00057130784
    },
    {
      "arm": -0.00014420661
    },
    {
      "_": -0.0032803768
    },
    {
      "clock": -0.00046825802
    },
    {
      "')": -0.0019124112
    },
    {
      "\n": -0.005350075
    },
    {
      " #": -0.56940246
    },
    {
      "('": -0.0014698085
    },
    {
      "al": -0.16993055
    },
    {
      "arm": -0.00031203084
    },
    {
      "_": -0.0077477037
    },
    {
      "clock": -0.0010564062
    },
    {
      "'": -0.0025440194
    },
    {
      " in": -0.021659832
    },
    {
      " '": -0.005399394
    },
    {
      "hands": -0.007742357
    },
    {
      "')": -0.040628582
    },
    {
      "\n": -0.0042705736
    },
    {
      " else": -0.015397551
    },
    {
      ":": -0.004286614
    },
    {
      " grab": -0.011236101
    },
    {
      "('": -0.0013193373
    },
    {
      "al": -0.0005473328
    },
    {
      "arm": -0.00022838576
    },
    {
      "_": -0.0024270841
    },
    {
      "clock": -0.0008801634
    },
    {
      "')": -0.0023553856
    },
    {
      "\n": -0.0064933077
    },
    {
      " #": -0.27251083
    },
    {
      " 2": -0.00700728
    },
    {
      ":": -0.0010299757
    },
    {
      " walk": -0.11409616
    },
    {
      " to": -0.112131774
    },
    {
      " bedroom": -0.077188
    },
    {
      "\n": -0.021345524
    },
    {
      " walk": -0.009296061
    },
    {
      "('": -0.0021352468
    },
    {
      "bedroom": -0.002904241
    },
    {
      "')": -0.00114466
    },
    {
      "\n": -0.005290211
    },
    {
      " #": -0.017120497
    },
    {
      " 3": -0.005193564
    },
    {
      ":": -0.00083786866
    },
    {
      " put": -0.50126445
    },
    {
      " alarm": -0.11416423
    },
    {
      " clock": -0.0056539387
    },
    {
      " on": -0.7884262
    },
    {
      " bedroom": -0.077815786
    },
    {
      "\n": -0.017444577
    },
    {
      " assert": -0.8107963
    },
    {
      "in": -0.44381464
    },
    {
      "('": -0.009517116
    },
    {
      "al": -0.021253768
    },
    {
      "arm": -0.00012643983
    },
    {
      "_": -0.0017018636
    },
    {
      "clock": -0.0006525368
    },
    {
      "',": -0.5434637
    },
    {
      "\n": -0.34912485
    },
    {
      " #": -0.76614267
    },
    {
      " 4": -0.004297629
    },
    {
      ":": -0.00197201
    },
    {
      " Done": -0.22302768
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.656005859375
[(" # 0: walk to living room\n walk('living_room')\n # 1: find chair\n find('chair')\n # 2: sit in chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n lookat('chair')", <OpenAIObject at 0x7fd96b0abe00> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3365,
    3370,
    3371,
    3376,
    3378,
    3384,
    3385,
    3389,
    3391,
    3392,
    3394,
    3396,
    3397,
    3402,
    3408,
    3409,
    3414,
    3416,
    3421,
    3423,
    3424,
    3426,
    3428,
    3429,
    3433,
    3436,
    3442,
    3443,
    3450,
    3452,
    3457,
    3458,
    3461,
    3463,
    3468,
    3470,
    3471,
    3476,
    3477,
    3482,
    3484,
    3489,
    3491,
    3492,
    3496,
    3498,
    3503,
    3505,
    3506,
    3511,
    3513,
    3515,
    3520
  ],
  "token_logprobs": [
    -0.022800887,
    -0.008573786,
    -0.0016912972,
    -0.9033518,
    -0.29484713,
    -1.1098992,
    -0.057739105,
    -0.019370724,
    -0.0040538404,
    -0.003944684,
    -0.010390994,
    -0.22742632,
    -0.00018796182,
    -0.0021216879,
    -0.007254668,
    -0.0013794418,
    -0.0026355723,
    -0.00053576205,
    -0.023432765,
    -0.12208688,
    -0.018612655,
    -0.3668573,
    -0.0008632808,
    -0.000881118,
    -0.001023469,
    -0.004774601,
    -0.011474651,
    -0.0048633646,
    -0.00061323267,
    -0.123733915,
    -0.5648227,
    -0.3666735,
    -0.009655829,
    -0.29666537,
    -0.0011869096,
    -0.0053436626,
    -0.0025758697,
    -0.00092640036,
    -0.0019358222,
    -0.0007701028,
    -0.003713371,
    -0.004144636,
    -0.0014426524,
    -0.0011704974,
    -0.0046118344,
    -0.0015584585,
    -0.00066721166,
    -0.0015934401,
    -0.0049512354,
    -0.23734598,
    -0.0018927644,
    -0.00053456903,
    -0.0014136416,
    -0.8263639,
    -2.2456174,
    -0.0145355025,
    -0.0008588654,
    -0.0015041932,
    -0.0013122956
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "_",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " in",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.022800887
    },
    {
      " 0": -0.008573786
    },
    {
      ":": -0.0016912972
    },
    {
      " find": -0.6660453
    },
    {
      " to": -0.29484713
    },
    {
      " living": -1.1098992
    },
    {
      " room": -0.057739105
    },
    {
      "\n": -0.019370724
    },
    {
      " walk": -0.0040538404
    },
    {
      "('": -0.003944684
    },
    {
      "living": -0.010390994
    },
    {
      "_": -0.22742632
    },
    {
      "room": -0.00018796182
    },
    {
      "')": -0.0021216879
    },
    {
      "\n": -0.007254668
    },
    {
      " #": -0.0013794418
    },
    {
      " 1": -0.0026355723
    },
    {
      ":": -0.00053576205
    },
    {
      " find": -0.023432765
    },
    {
      " chair": -0.12208688
    },
    {
      "\n": -0.018612655
    },
    {
      " find": -0.3668573
    },
    {
      "('": -0.0008632808
    },
    {
      "chair": -0.000881118
    },
    {
      "')": -0.001023469
    },
    {
      "\n": -0.004774601
    },
    {
      " #": -0.011474651
    },
    {
      " 2": -0.0048633646
    },
    {
      ":": -0.00061323267
    },
    {
      " sit": -0.123733915
    },
    {
      " in": -0.5648227
    },
    {
      " chair": -0.3666735
    },
    {
      "\n": -0.009655829
    },
    {
      " assert": -0.29666537
    },
    {
      "('": -0.0011869096
    },
    {
      "close": -0.0053436626
    },
    {
      "'": -0.0025758697
    },
    {
      " to": -0.00092640036
    },
    {
      " '": -0.0019358222
    },
    {
      "chair": -0.0007701028
    },
    {
      "')": -0.003713371
    },
    {
      "\n": -0.004144636
    },
    {
      " else": -0.0014426524
    },
    {
      ":": -0.0011704974
    },
    {
      " find": -0.0046118344
    },
    {
      "('": -0.0015584585
    },
    {
      "chair": -0.00066721166
    },
    {
      "')": -0.0015934401
    },
    {
      "\n": -0.0049512354
    },
    {
      " sit": -0.23734598
    },
    {
      "('": -0.0018927644
    },
    {
      "chair": -0.00053456903
    },
    {
      "')": -0.0014136416
    },
    {
      "<|endoftext|>": -0.5902398
    },
    {
      " #": -0.5872331
    },
    {
      "at": -0.0145355025
    },
    {
      "('": -0.0008588654
    },
    {
      "chair": -0.0015041932
    },
    {
      "')": -0.0013122956
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.05812406539917
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find window\n find('window')\n # 2: open window\n assert('close' to 'window')\n else: find('window')\n open('window')", <OpenAIObject at 0x7fd96b0ea540> JSON: {
  "text_offset": [
    3353,
    3355,
    3357,
    3358,
    3363,
    3366,
    3375,
    3376,
    3381,
    3383,
    3387,
    3391,
    3393,
    3394,
    3396,
    3398,
    3399,
    3404,
    3411,
    3412,
    3417,
    3419,
    3425,
    3427,
    3428,
    3430,
    3432,
    3433,
    3438,
    3445,
    3446,
    3453,
    3455,
    3460,
    3461,
    3464,
    3466,
    3472,
    3474,
    3475,
    3480,
    3481,
    3486,
    3488,
    3494,
    3496,
    3497,
    3502,
    3504,
    3510
  ],
  "token_logprobs": [
    -0.020247418,
    -0.010476281,
    -0.0024945422,
    -0.11835607,
    -0.2039248,
    -0.18468678,
    -0.02496516,
    -0.005001314,
    -0.0044417274,
    -0.002596548,
    -0.00019893186,
    -0.0017888587,
    -0.0076969485,
    -0.002458392,
    -0.0032239272,
    -0.0005454245,
    -0.03605059,
    -0.08572528,
    -0.020402046,
    -0.20850262,
    -0.0011406023,
    -0.002905316,
    -0.0016958338,
    -0.004912898,
    -0.006444176,
    -0.0049659694,
    -0.00094209076,
    -0.026293557,
    -0.43724385,
    -0.0121724205,
    -0.33728513,
    -0.001773154,
    -0.014162248,
    -0.0029600738,
    -0.0007528626,
    -0.0028157705,
    -0.0011855364,
    -0.0047219,
    -0.0057601617,
    -0.001768319,
    -0.0015871755,
    -0.004299785,
    -0.0017351198,
    -0.00081788294,
    -0.0025880015,
    -0.007014843,
    -0.07572047,
    -0.0015219243,
    -0.0009657166,
    -0.002750264
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " window",
    "\n",
    " find",
    "('",
    "window",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " window",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "window",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "window",
    "')",
    "\n",
    " open",
    "('",
    "window",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.020247418
    },
    {
      " 0": -0.010476281
    },
    {
      ":": -0.0024945422
    },
    {
      " walk": -0.11835607
    },
    {
      " to": -0.2039248
    },
    {
      " bathroom": -0.18468678
    },
    {
      "\n": -0.02496516
    },
    {
      " walk": -0.005001314
    },
    {
      "('": -0.0044417274
    },
    {
      "bath": -0.002596548
    },
    {
      "room": -0.00019893186
    },
    {
      "')": -0.0017888587
    },
    {
      "\n": -0.0076969485
    },
    {
      " #": -0.002458392
    },
    {
      " 1": -0.0032239272
    },
    {
      ":": -0.0005454245
    },
    {
      " find": -0.03605059
    },
    {
      " window": -0.08572528
    },
    {
      "\n": -0.020402046
    },
    {
      " find": -0.20850262
    },
    {
      "('": -0.0011406023
    },
    {
      "window": -0.002905316
    },
    {
      "')": -0.0016958338
    },
    {
      "\n": -0.004912898
    },
    {
      " #": -0.006444176
    },
    {
      " 2": -0.0049659694
    },
    {
      ":": -0.00094209076
    },
    {
      " open": -0.026293557
    },
    {
      " window": -0.43724385
    },
    {
      "\n": -0.0121724205
    },
    {
      " assert": -0.33728513
    },
    {
      "('": -0.001773154
    },
    {
      "close": -0.014162248
    },
    {
      "'": -0.0029600738
    },
    {
      " to": -0.0007528626
    },
    {
      " '": -0.0028157705
    },
    {
      "window": -0.0011855364
    },
    {
      "')": -0.0047219
    },
    {
      "\n": -0.0057601617
    },
    {
      " else": -0.001768319
    },
    {
      ":": -0.0015871755
    },
    {
      " find": -0.004299785
    },
    {
      "('": -0.0017351198
    },
    {
      "window": -0.00081788294
    },
    {
      "')": -0.0025880015
    },
    {
      "\n": -0.007014843
    },
    {
      " open": -0.07572047
    },
    {
      "('": -0.0015219243
    },
    {
      "window": -0.0009657166
    },
    {
      "')": -0.002750264
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.645009994506836
[(" # 0: walk to home office\n walk('home_office')\n # 1: find computer\n find('computer')\n # 2: turn on computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')\n # 3: sit at the desk\n find('desk')\n sit('desk')\n # 4: open computer\n assert('close' to 'computer')\n else: find('computer')\n open('computer')\n # 5: use the computer\n turnto('computer')\n lookat('computer')\n assert('close' to 'computer')\n else: find('computer')\n use('computer')", <OpenAIObject at 0x7fd979154f90> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3363,
    3370,
    3371,
    3376,
    3378,
    3382,
    3383,
    3389,
    3391,
    3392,
    3394,
    3396,
    3397,
    3402,
    3411,
    3412,
    3417,
    3419,
    3427,
    3429,
    3430,
    3432,
    3434,
    3435,
    3440,
    3443,
    3452,
    3453,
    3460,
    3462,
    3467,
    3468,
    3471,
    3473,
    3481,
    3483,
    3484,
    3489,
    3490,
    3495,
    3497,
    3505,
    3507,
    3508,
    3515,
    3517,
    3519,
    3527,
    3529,
    3530,
    3532,
    3534,
    3535,
    3539,
    3542,
    3546,
    3551,
    3552,
    3557,
    3559,
    3562,
    3563,
    3565,
    3566,
    3570,
    3572,
    3575,
    3576,
    3578,
    3579,
    3581,
    3583,
    3584,
    3589,
    3598,
    3599,
    3606,
    3608,
    3613,
    3614,
    3617,
    3619,
    3627,
    3629,
    3630,
    3635,
    3636,
    3641,
    3643,
    3651,
    3653,
    3654,
    3659,
    3661,
    3669,
    3671,
    3672,
    3674,
    3676,
    3677,
    3681,
    3685,
    3694,
    3695,
    3699,
    3701,
    3702,
    3704,
    3712,
    3714,
    3715,
    3720,
    3722,
    3724,
    3732,
    3734,
    3735,
    3742,
    3744,
    3749,
    3750,
    3753,
    3755,
    3763,
    3765,
    3766,
    3771,
    3772,
    3777,
    3779,
    3787,
    3789,
    3790,
    3794,
    3796,
    3804
  ],
  "token_logprobs": [
    -0.018286983,
    -0.007385919,
    -0.0018626666,
    -0.23927684,
    -0.25491765,
    -0.7236203,
    -0.040510207,
    -0.025143374,
    -0.005600232,
    -0.004731901,
    -0.014013839,
    -0.04962214,
    -0.00094459514,
    -0.002537566,
    -0.008115492,
    -0.0035395883,
    -0.003135848,
    -0.0007262603,
    -0.049984947,
    -0.38923058,
    -0.03007135,
    -0.33484745,
    -0.001248734,
    -0.0015786967,
    -0.0018202094,
    -0.0053178365,
    -0.009654445,
    -0.0046357876,
    -0.00081502006,
    -0.5192909,
    -0.034161642,
    -0.6696824,
    -0.01978867,
    -0.633623,
    -0.001774945,
    -0.057163373,
    -0.0044747153,
    -0.0012457508,
    -0.0038025763,
    -0.002337999,
    -0.006925349,
    -0.005225798,
    -0.0020791586,
    -0.0015732637,
    -0.004552015,
    -0.0016392922,
    -0.0008021343,
    -0.0026566095,
    -0.00560263,
    -0.3382796,
    -0.0030393484,
    -0.0010374935,
    -0.0010652371,
    -0.002068947,
    -0.0053365915,
    -0.021039598,
    -0.005795475,
    -0.00059319526,
    -0.9174542,
    -2.4109015,
    -0.9387905,
    -0.8220273,
    -0.0671321,
    -0.5013327,
    -0.0012112573,
    -0.0077678864,
    -0.00010748563,
    -0.002172821,
    -0.004275002,
    -0.56515115,
    -0.0016141589,
    -0.0009974561,
    -6.611553e-05,
    -0.0012496894,
    -0.0043255277,
    -0.021326955,
    -0.0063266624,
    -0.00089328847,
    -1.7616401,
    -1.5058655,
    -0.28644818,
    -1.0057309,
    -0.0013369455,
    -0.07499423,
    -0.0027140416,
    -0.0004051084,
    -0.0020532378,
    -0.0053268233,
    -0.0055836276,
    -0.0032052696,
    -0.0016633535,
    -0.0012311277,
    -0.005620372,
    -0.0022805864,
    -0.0005666531,
    -0.0024105923,
    -0.00544482,
    -0.037543762,
    -0.0025588416,
    -0.0013164725,
    -0.0017342846,
    -0.017900977,
    -0.01108849,
    -0.0054048453,
    -0.00075477175,
    -0.3085481,
    -1.0752703,
    -0.12180287,
    -0.016405886,
    -1.3769907,
    -0.00012143587,
    -0.0005106559,
    -0.00065909984,
    -0.0035206869,
    -0.0028589286,
    -0.0074888445,
    -0.13632977,
    -0.00093355944,
    -0.00049085513,
    -0.0015875332,
    -0.0021682796,
    -0.67598855,
    -1.0739021,
    -0.002068947,
    -0.5203202,
    -0.0026548149,
    -0.0005937923,
    -0.0027141618,
    -0.061713114,
    -0.004661176,
    -0.0038543316,
    -0.0023699026,
    -0.0009443577,
    -0.021387056,
    -0.0010632077,
    -0.00035860104,
    -0.0024769134,
    -0.10969529,
    -0.39101183,
    -0.008125887,
    -0.0022945064,
    -0.0025706093
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " at",
    " the",
    " desk",
    "\n",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " sit",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " open",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " open",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " use",
    " the",
    " computer",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " use",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018286983
    },
    {
      " 0": -0.007385919
    },
    {
      ":": -0.0018626666
    },
    {
      " walk": -0.23927684
    },
    {
      " to": -0.25491765
    },
    {
      " home": -0.7236203
    },
    {
      " office": -0.040510207
    },
    {
      "\n": -0.025143374
    },
    {
      " walk": -0.005600232
    },
    {
      "('": -0.004731901
    },
    {
      "home": -0.014013839
    },
    {
      "_": -0.04962214
    },
    {
      "office": -0.00094459514
    },
    {
      "')": -0.002537566
    },
    {
      "\n": -0.008115492
    },
    {
      " #": -0.0035395883
    },
    {
      " 1": -0.003135848
    },
    {
      ":": -0.0007262603
    },
    {
      " find": -0.049984947
    },
    {
      " computer": -0.38923058
    },
    {
      "\n": -0.03007135
    },
    {
      " find": -0.33484745
    },
    {
      "('": -0.001248734
    },
    {
      "computer": -0.0015786967
    },
    {
      "')": -0.0018202094
    },
    {
      "\n": -0.0053178365
    },
    {
      " #": -0.009654445
    },
    {
      " 2": -0.0046357876
    },
    {
      ":": -0.00081502006
    },
    {
      " turn": -0.5192909
    },
    {
      " on": -0.034161642
    },
    {
      " computer": -0.6696824
    },
    {
      "\n": -0.01978867
    },
    {
      " assert": -0.633623
    },
    {
      "('": -0.001774945
    },
    {
      "close": -0.057163373
    },
    {
      "'": -0.0044747153
    },
    {
      " to": -0.0012457508
    },
    {
      " '": -0.0038025763
    },
    {
      "computer": -0.002337999
    },
    {
      "')": -0.006925349
    },
    {
      "\n": -0.005225798
    },
    {
      " else": -0.0020791586
    },
    {
      ":": -0.0015732637
    },
    {
      " find": -0.004552015
    },
    {
      "('": -0.0016392922
    },
    {
      "computer": -0.0008021343
    },
    {
      "')": -0.0026566095
    },
    {
      "\n": -0.00560263
    },
    {
      " switch": -0.3382796
    },
    {
      "on": -0.0030393484
    },
    {
      "('": -0.0010374935
    },
    {
      "computer": -0.0010652371
    },
    {
      "')": -0.002068947
    },
    {
      "\n": -0.0053365915
    },
    {
      " #": -0.021039598
    },
    {
      " 3": -0.005795475
    },
    {
      ":": -0.00059319526
    },
    {
      " sit": -0.9174542
    },
    {
      " on": -0.78345734
    },
    {
      " the": -0.9387905
    },
    {
      " desk": -0.8220273
    },
    {
      "\n": -0.0671321
    },
    {
      " find": -0.5013327
    },
    {
      "('": -0.0012112573
    },
    {
      "des": -0.0077678864
    },
    {
      "k": -0.00010748563
    },
    {
      "')": -0.002172821
    },
    {
      "\n": -0.004275002
    },
    {
      " sit": -0.56515115
    },
    {
      "('": -0.0016141589
    },
    {
      "des": -0.0009974561
    },
    {
      "k": -6.611553e-05
    },
    {
      "')": -0.0012496894
    },
    {
      "\n": -0.0043255277
    },
    {
      " #": -0.021326955
    },
    {
      " 4": -0.0063266624
    },
    {
      ":": -0.00089328847
    },
    {
      " use": -0.875217
    },
    {
      " the": -0.7747788
    },
    {
      "\n": -0.28644818
    },
    {
      " open": -0.7660888
    },
    {
      "('": -0.0013369455
    },
    {
      "close": -0.07499423
    },
    {
      "'": -0.0027140416
    },
    {
      " to": -0.0004051084
    },
    {
      " '": -0.0020532378
    },
    {
      "computer": -0.0053268233
    },
    {
      "')": -0.0055836276
    },
    {
      "\n": -0.0032052696
    },
    {
      " else": -0.0016633535
    },
    {
      ":": -0.0012311277
    },
    {
      " find": -0.005620372
    },
    {
      "('": -0.0022805864
    },
    {
      "computer": -0.0005666531
    },
    {
      "')": -0.0024105923
    },
    {
      "\n": -0.00544482
    },
    {
      " open": -0.037543762
    },
    {
      "('": -0.0025588416
    },
    {
      "computer": -0.0013164725
    },
    {
      "')": -0.0017342846
    },
    {
      "\n": -0.017900977
    },
    {
      " #": -0.01108849
    },
    {
      " 5": -0.0054048453
    },
    {
      ":": -0.00075477175
    },
    {
      " use": -0.3085481
    },
    {
      " computer": -0.5148054
    },
    {
      " computer": -0.12180287
    },
    {
      "\n": -0.016405886
    },
    {
      " look": -1.2582277
    },
    {
      "nt": -0.00012143587
    },
    {
      "o": -0.0005106559
    },
    {
      "('": -0.00065909984
    },
    {
      "computer": -0.0035206869
    },
    {
      "')": -0.0028589286
    },
    {
      "\n": -0.0074888445
    },
    {
      " look": -0.13632977
    },
    {
      "at": -0.00093355944
    },
    {
      "('": -0.00049085513
    },
    {
      "computer": -0.0015875332
    },
    {
      "')": -0.0021682796
    },
    {
      "\n": -0.67598855
    },
    {
      " assert": -1.0739021
    },
    {
      "('": -0.002068947
    },
    {
      "close": -0.5203202
    },
    {
      "'": -0.0026548149
    },
    {
      " to": -0.0005937923
    },
    {
      " '": -0.0027141618
    },
    {
      "computer": -0.061713114
    },
    {
      "')": -0.004661176
    },
    {
      "\n": -0.0038543316
    },
    {
      " else": -0.0023699026
    },
    {
      ":": -0.0009443577
    },
    {
      " find": -0.021387056
    },
    {
      "('": -0.0010632077
    },
    {
      "computer": -0.00035860104
    },
    {
      "')": -0.0024769134
    },
    {
      "\n": -0.10969529
    },
    {
      " use": -0.39101183
    },
    {
      "('": -0.008125887
    },
    {
      "computer": -0.0022945064
    },
    {
      "')": -0.0025706093
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 6.919358015060425
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find sink\n find('sink')\n # 2: turn on faucet\n assert('close' to 'sink')\n else: find('sink')\n turnto('faucet')\n switchon('faucet')\n # 3: put hands under running water\n standup()\n turnto('faucet')\n lookat('faucet')\n # 4: turn off faucet\n switchoff('faucet')\n # 5: Done\n done()", <OpenAIObject at 0x7fd96b0f8ef0> JSON: {
  "text_offset": [
    3342,
    3344,
    3346,
    3347,
    3352,
    3355,
    3364,
    3365,
    3370,
    3372,
    3376,
    3380,
    3382,
    3383,
    3385,
    3387,
    3388,
    3393,
    3398,
    3399,
    3404,
    3406,
    3407,
    3410,
    3412,
    3413,
    3415,
    3417,
    3418,
    3423,
    3426,
    3428,
    3431,
    3433,
    3434,
    3441,
    3443,
    3448,
    3449,
    3452,
    3454,
    3455,
    3458,
    3460,
    3461,
    3466,
    3467,
    3472,
    3474,
    3475,
    3478,
    3480,
    3481,
    3485,
    3487,
    3488,
    3490,
    3491,
    3494,
    3496,
    3498,
    3499,
    3506,
    3508,
    3510,
    3511,
    3514,
    3516,
    3518,
    3519,
    3521,
    3523,
    3524,
    3528,
    3534,
    3540,
    3548,
    3554,
    3555,
    3561,
    3563,
    3565,
    3566,
    3570,
    3572,
    3573,
    3575,
    3576,
    3579,
    3581,
    3583,
    3584,
    3589,
    3591,
    3593,
    3594,
    3597,
    3599,
    3601,
    3602,
    3604,
    3606,
    3607,
    3612,
    3616,
    3618,
    3621,
    3623,
    3624,
    3631,
    3634,
    3636,
    3637,
    3640,
    3642,
    3644,
    3645,
    3647,
    3649,
    3650,
    3655,
    3656,
    3661
  ],
  "token_logprobs": [
    -0.017229099,
    -0.006861191,
    -0.001781753,
    -0.78868324,
    -0.29026783,
    -0.11747364,
    -0.014414436,
    -0.0051830183,
    -0.004375275,
    -0.002704598,
    -0.0001792624,
    -0.0018002059,
    -0.0063336203,
    -0.001958573,
    -0.0029541547,
    -0.0006028587,
    -0.101009555,
    -0.117882505,
    -0.025323395,
    -0.4069606,
    -0.00093117333,
    -0.00058711285,
    -9.174727e-05,
    -0.001605023,
    -0.004987894,
    -0.021129267,
    -0.0047246558,
    -0.00081561797,
    -0.4487797,
    -0.0744097,
    -0.9257125,
    -0.0019042891,
    -0.0022460553,
    -0.039202176,
    -0.7161872,
    -0.0019177267,
    -0.011673214,
    -0.0040325387,
    -0.0007807199,
    -0.00214092,
    -2.3723106,
    -0.00026969958,
    -0.007820329,
    -0.0059803193,
    -0.002849425,
    -0.0017939958,
    -0.010408339,
    -0.002203403,
    -0.001380037,
    -0.0004285409,
    -0.0022724604,
    -0.008896427,
    -1.3688283,
    -7.279122e-05,
    -0.00044476078,
    -0.0007635397,
    -1.0106685,
    -0.00041315737,
    -0.00040272233,
    -0.0023052006,
    -0.0073767924,
    -0.69133633,
    -0.0011179856,
    -0.00082886044,
    -0.0015258647,
    -0.0003264598,
    -0.00018486334,
    -0.0017702902,
    -0.004286734,
    -0.03366139,
    -0.007867532,
    -0.0006277846,
    -2.691131,
    -0.40849403,
    -0.56359,
    -1.9440455,
    -0.0158147,
    -0.02920602,
    -5.4497175,
    -0.0109870015,
    -0.0893781,
    -0.0069601615,
    -2.2415833,
    -4.370523e-05,
    -0.0015169701,
    -0.00076700153,
    -0.30443886,
    -0.00049169146,
    -0.00010939391,
    -0.001641085,
    -0.004221547,
    -1.4484994,
    -0.0010510954,
    -0.0007440355,
    -0.027297614,
    -0.00083607866,
    -0.00010450542,
    -0.0018927644,
    -0.0051642642,
    -0.6534152,
    -0.0077493256,
    -0.0016102776,
    -2.4127028,
    -0.048263628,
    -0.22478348,
    -0.0007779781,
    -0.0010141633,
    -0.04693058,
    -0.0684538,
    -0.0030116665,
    -0.0010843911,
    -0.0003888895,
    -0.00453932,
    -0.00025872953,
    -0.002240262,
    -0.09345875,
    -0.06870072,
    -0.00393936,
    -0.0026107123,
    -1.297866,
    -0.28492776,
    -4.0020137,
    -0.055796105
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " f",
    "auc",
    "et",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " hands",
    " under",
    " running",
    " water",
    "\n",
    " stand",
    "up",
    "()",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " off",
    " f",
    "auc",
    "et",
    "\n",
    " switch",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done",
    "\n",
    " done",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.017229099
    },
    {
      " 0": -0.006861191
    },
    {
      ":": -0.001781753
    },
    {
      " walk": -0.78868324
    },
    {
      " to": -0.29026783
    },
    {
      " bathroom": -0.11747364
    },
    {
      "\n": -0.014414436
    },
    {
      " walk": -0.0051830183
    },
    {
      "('": -0.004375275
    },
    {
      "bath": -0.002704598
    },
    {
      "room": -0.0001792624
    },
    {
      "')": -0.0018002059
    },
    {
      "\n": -0.0063336203
    },
    {
      " #": -0.001958573
    },
    {
      " 1": -0.0029541547
    },
    {
      ":": -0.0006028587
    },
    {
      " find": -0.101009555
    },
    {
      " sink": -0.117882505
    },
    {
      "\n": -0.025323395
    },
    {
      " find": -0.4069606
    },
    {
      "('": -0.00093117333
    },
    {
      "s": -0.00058711285
    },
    {
      "ink": -9.174727e-05
    },
    {
      "')": -0.001605023
    },
    {
      "\n": -0.004987894
    },
    {
      " #": -0.021129267
    },
    {
      " 2": -0.0047246558
    },
    {
      ":": -0.00081561797
    },
    {
      " turn": -0.4487797
    },
    {
      " on": -0.0744097
    },
    {
      " f": -0.9257125
    },
    {
      "auc": -0.0019042891
    },
    {
      "et": -0.0022460553
    },
    {
      "\n": -0.039202176
    },
    {
      " assert": -0.7161872
    },
    {
      "('": -0.0019177267
    },
    {
      "close": -0.011673214
    },
    {
      "'": -0.0040325387
    },
    {
      " to": -0.0007807199
    },
    {
      " '": -0.00214092
    },
    {
      "f": -0.098958954
    },
    {
      "ink": -0.00026969958
    },
    {
      "')": -0.007820329
    },
    {
      "\n": -0.0059803193
    },
    {
      " else": -0.002849425
    },
    {
      ":": -0.0017939958
    },
    {
      " find": -0.010408339
    },
    {
      "('": -0.002203403
    },
    {
      "s": -0.001380037
    },
    {
      "ink": -0.0004285409
    },
    {
      "')": -0.0022724604
    },
    {
      "\n": -0.008896427
    },
    {
      " switch": -0.8985819
    },
    {
      "nt": -7.279122e-05
    },
    {
      "o": -0.00044476078
    },
    {
      "('": -0.0007635397
    },
    {
      "s": -0.45431396
    },
    {
      "auc": -0.00041315737
    },
    {
      "et": -0.00040272233
    },
    {
      "')": -0.0023052006
    },
    {
      "\n": -0.0073767924
    },
    {
      " switch": -0.69133633
    },
    {
      "on": -0.0011179856
    },
    {
      "('": -0.00082886044
    },
    {
      "f": -0.0015258647
    },
    {
      "auc": -0.0003264598
    },
    {
      "et": -0.00018486334
    },
    {
      "')": -0.0017702902
    },
    {
      "\n": -0.004286734
    },
    {
      " #": -0.03366139
    },
    {
      " 3": -0.007867532
    },
    {
      ":": -0.0006277846
    },
    {
      " wash": -1.1583563
    },
    {
      " hands": -0.40849403
    },
    {
      " under": -0.56359
    },
    {
      " water": -1.0270219
    },
    {
      " water": -0.0158147
    },
    {
      "\n": -0.02920602
    },
    {
      " assert": -1.0965977
    },
    {
      "up": -0.0109870015
    },
    {
      "()": -0.0893781
    },
    {
      "\n": -0.0069601615
    },
    {
      " assert": -1.4558274
    },
    {
      "nt": -4.370523e-05
    },
    {
      "o": -0.0015169701
    },
    {
      "('": -0.00076700153
    },
    {
      "f": -0.30443886
    },
    {
      "auc": -0.00049169146
    },
    {
      "et": -0.00010939391
    },
    {
      "')": -0.001641085
    },
    {
      "\n": -0.004221547
    },
    {
      " point": -1.3069313
    },
    {
      "at": -0.0010510954
    },
    {
      "('": -0.0007440355
    },
    {
      "f": -0.027297614
    },
    {
      "auc": -0.00083607866
    },
    {
      "et": -0.00010450542
    },
    {
      "')": -0.0018927644
    },
    {
      "\n": -0.0051642642
    },
    {
      " #": -0.6534152
    },
    {
      " 4": -0.0077493256
    },
    {
      ":": -0.0016102776
    },
    {
      " wash": -1.2629273
    },
    {
      " off": -0.048263628
    },
    {
      " f": -0.22478348
    },
    {
      "auc": -0.0007779781
    },
    {
      "et": -0.0010141633
    },
    {
      "\n": -0.04693058
    },
    {
      " switch": -0.0684538
    },
    {
      "off": -0.0030116665
    },
    {
      "('": -0.0010843911
    },
    {
      "f": -0.0003888895
    },
    {
      "auc": -0.00453932
    },
    {
      "et": -0.00025872953
    },
    {
      "')": -0.002240262
    },
    {
      "\n": -0.09345875
    },
    {
      " #": -0.06870072
    },
    {
      " 5": -0.00393936
    },
    {
      ":": -0.0026107123
    },
    {
      " Done": -1.297866
    },
    {
      "\n": -0.28492776
    },
    {
      "def": -0.7773759
    },
    {
      "()": -0.055796105
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.745434761047363
[(" # 0: walk to home office\n walk('home_office')\n # 1: find desk\n find('desk')\n # 2: sit on chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 3: find computer\n find('computer')\n # 4: turn on the computer\n plugin('computer')\n # 5: start working\n turnto('computer')\n lookat('computer')\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')", <OpenAIObject at 0x7fd96b0eab30> JSON: {
  "text_offset": [
    3346,
    3348,
    3350,
    3351,
    3356,
    3359,
    3364,
    3371,
    3372,
    3377,
    3379,
    3383,
    3384,
    3390,
    3392,
    3393,
    3395,
    3397,
    3398,
    3403,
    3408,
    3409,
    3414,
    3416,
    3419,
    3420,
    3422,
    3423,
    3425,
    3427,
    3428,
    3432,
    3435,
    3441,
    3442,
    3449,
    3451,
    3456,
    3457,
    3460,
    3462,
    3467,
    3469,
    3470,
    3475,
    3476,
    3481,
    3483,
    3488,
    3490,
    3491,
    3495,
    3497,
    3502,
    3504,
    3505,
    3507,
    3509,
    3510,
    3515,
    3524,
    3525,
    3530,
    3532,
    3540,
    3542,
    3543,
    3545,
    3547,
    3548,
    3553,
    3556,
    3560,
    3569,
    3570,
    3577,
    3579,
    3587,
    3589,
    3590,
    3592,
    3594,
    3595,
    3601,
    3609,
    3610,
    3614,
    3616,
    3617,
    3619,
    3627,
    3629,
    3630,
    3635,
    3637,
    3639,
    3647,
    3649,
    3650,
    3657,
    3659,
    3664,
    3665,
    3668,
    3670,
    3678,
    3680,
    3681,
    3686,
    3687,
    3692,
    3694,
    3702,
    3704,
    3705,
    3712,
    3714,
    3716,
    3724
  ],
  "token_logprobs": [
    -0.017445851,
    -0.008001269,
    -0.0022204884,
    -0.35638255,
    -0.2569828,
    -0.51792324,
    -0.04366463,
    -0.025038373,
    -0.005938765,
    -0.00473364,
    -0.015435262,
    -0.04983482,
    -0.0010734709,
    -0.002684281,
    -0.0072206864,
    -0.0034597355,
    -0.0035814005,
    -0.0008024919,
    -0.077181436,
    -1.1231087,
    -0.027994497,
    -0.7537582,
    -0.0010256786,
    -0.0014818073,
    -0.0003317078,
    -0.0012881234,
    -0.0041299113,
    -0.029056592,
    -0.004902117,
    -0.0005592584,
    -0.30207092,
    -0.57279867,
    -0.8970792,
    -0.057552967,
    -0.8627551,
    -0.001598337,
    -0.015574553,
    -0.0036074235,
    -0.000456569,
    -0.0022433698,
    -0.716961,
    -0.008080822,
    -0.005438887,
    -0.0019211895,
    -0.0019686655,
    -0.0070776306,
    -0.0017901736,
    -0.0019583337,
    -0.0033985516,
    -0.0066184606,
    -0.05220095,
    -0.0014966717,
    -0.0030710953,
    -0.00074164855,
    -0.00513425,
    -0.016271384,
    -0.0075776665,
    -0.0009934576,
    -0.5256051,
    -0.72265464,
    -0.07481718,
    -0.068872415,
    -0.00083446794,
    -0.0015518324,
    -0.0019470493,
    -0.003921765,
    -0.028598145,
    -0.006833887,
    -0.0007726081,
    -0.34794703,
    -0.03701973,
    -1.0794113,
    -0.008061234,
    -0.013250522,
    -2.8197236,
    -0.001633084,
    -0.0016272934,
    -0.0023037673,
    -0.0090559255,
    -0.029047081,
    -0.0051434743,
    -0.00082361064,
    -2.7190309,
    -0.655782,
    -0.2215413,
    -1.5875384,
    -0.00013013717,
    -0.0003204956,
    -0.0008080994,
    -0.010790625,
    -0.0041109384,
    -0.007457979,
    -0.19320807,
    -0.0013657723,
    -0.000553771,
    -0.0030158523,
    -0.002221564,
    -0.40699044,
    -1.4758042,
    -0.0019311046,
    -0.3908032,
    -0.0041581616,
    -0.0005668924,
    -0.0026513494,
    -0.11228974,
    -0.00692895,
    -0.0039094435,
    -0.0025321885,
    -0.0015339822,
    -0.010758931,
    -0.0019610801,
    -0.0008548122,
    -0.0033022033,
    -0.12117054,
    -1.3983402,
    -0.0027261165,
    -0.0011400053,
    -0.0010824228,
    -0.0026184195
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " desk",
    "\n",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " on",
    " the",
    " computer",
    "\n",
    " plugin",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " start",
    " working",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.017445851
    },
    {
      " 0": -0.008001269
    },
    {
      ":": -0.0022204884
    },
    {
      " walk": -0.35638255
    },
    {
      " to": -0.2569828
    },
    {
      " home": -0.51792324
    },
    {
      " office": -0.04366463
    },
    {
      "\n": -0.025038373
    },
    {
      " walk": -0.005938765
    },
    {
      "('": -0.00473364
    },
    {
      "home": -0.015435262
    },
    {
      "_": -0.04983482
    },
    {
      "office": -0.0010734709
    },
    {
      "')": -0.002684281
    },
    {
      "\n": -0.0072206864
    },
    {
      " #": -0.0034597355
    },
    {
      " 1": -0.0035814005
    },
    {
      ":": -0.0008024919
    },
    {
      " find": -0.077181436
    },
    {
      " computer": -0.7820672
    },
    {
      "\n": -0.027994497
    },
    {
      " walk": -0.6611602
    },
    {
      "('": -0.0010256786
    },
    {
      "des": -0.0014818073
    },
    {
      "k": -0.0003317078
    },
    {
      "')": -0.0012881234
    },
    {
      "\n": -0.0041299113
    },
    {
      " #": -0.029056592
    },
    {
      " 2": -0.004902117
    },
    {
      ":": -0.0005592584
    },
    {
      " sit": -0.30207092
    },
    {
      " on": -0.57279867
    },
    {
      " chair": -0.8970792
    },
    {
      "\n": -0.057552967
    },
    {
      " assert": -0.8627551
    },
    {
      "('": -0.001598337
    },
    {
      "close": -0.015574553
    },
    {
      "'": -0.0036074235
    },
    {
      " to": -0.000456569
    },
    {
      " '": -0.0022433698
    },
    {
      "des": -0.6758367
    },
    {
      "')": -0.008080822
    },
    {
      "\n": -0.005438887
    },
    {
      " else": -0.0019211895
    },
    {
      ":": -0.0019686655
    },
    {
      " find": -0.0070776306
    },
    {
      "('": -0.0017901736
    },
    {
      "chair": -0.0019583337
    },
    {
      "')": -0.0033985516
    },
    {
      "\n": -0.0066184606
    },
    {
      " sit": -0.05220095
    },
    {
      "('": -0.0014966717
    },
    {
      "chair": -0.0030710953
    },
    {
      "')": -0.00074164855
    },
    {
      "\n": -0.00513425
    },
    {
      " #": -0.016271384
    },
    {
      " 3": -0.0075776665
    },
    {
      ":": -0.0009934576
    },
    {
      " find": -0.5256051
    },
    {
      " computer": -0.72265464
    },
    {
      "\n": -0.07481718
    },
    {
      " find": -0.068872415
    },
    {
      "('": -0.00083446794
    },
    {
      "computer": -0.0015518324
    },
    {
      "')": -0.0019470493
    },
    {
      "\n": -0.003921765
    },
    {
      " #": -0.028598145
    },
    {
      " 4": -0.006833887
    },
    {
      ":": -0.0007726081
    },
    {
      " turn": -0.34794703
    },
    {
      " on": -0.03701973
    },
    {
      " computer": -0.43048173
    },
    {
      " computer": -0.008061234
    },
    {
      "\n": -0.013250522
    },
    {
      " assert": -0.78992426
    },
    {
      "('": -0.001633084
    },
    {
      "computer": -0.0016272934
    },
    {
      "')": -0.0023037673
    },
    {
      "\n": -0.0090559255
    },
    {
      " #": -0.029047081
    },
    {
      " 5": -0.0051434743
    },
    {
      ":": -0.00082361064
    },
    {
      " open": -1.4585186
    },
    {
      " working": -0.655782
    },
    {
      "\n": -0.2215413
    },
    {
      " tur": -1.5875384
    },
    {
      "nt": -0.00013013717
    },
    {
      "o": -0.0003204956
    },
    {
      "('": -0.0008080994
    },
    {
      "computer": -0.010790625
    },
    {
      "')": -0.0041109384
    },
    {
      "\n": -0.007457979
    },
    {
      " look": -0.19320807
    },
    {
      "at": -0.0013657723
    },
    {
      "('": -0.000553771
    },
    {
      "computer": -0.0030158523
    },
    {
      "')": -0.002221564
    },
    {
      "\n": -0.40699044
    },
    {
      " assert": -1.4758042
    },
    {
      "('": -0.0019311046
    },
    {
      "close": -0.3908032
    },
    {
      "'": -0.0041581616
    },
    {
      " to": -0.0005668924
    },
    {
      " '": -0.0026513494
    },
    {
      "computer": -0.11228974
    },
    {
      "')": -0.00692895
    },
    {
      "\n": -0.0039094435
    },
    {
      " else": -0.0025321885
    },
    {
      ":": -0.0015339822
    },
    {
      " find": -0.010758931
    },
    {
      "('": -0.0019610801
    },
    {
      "computer": -0.0008548122
    },
    {
      "')": -0.0033022033
    },
    {
      "\n": -0.12117054
    },
    {
      " open": -1.0446063
    },
    {
      "on": -0.0027261165
    },
    {
      "('": -0.0011400053
    },
    {
      "computer": -0.0010824228
    },
    {
      "')": -0.0026184195
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.128603219985962
[(" # 0: find bed\n find('bed')\n # 1: lay down\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n else: turnto('bed')\n lie('bed')\n # 2: sleep\n sleep()\n # 3: wake up\n wakeup()", <OpenAIObject at 0x7fd9485eb810> JSON: {
  "text_offset": [
    3341,
    3343,
    3345,
    3346,
    3351,
    3355,
    3356,
    3361,
    3363,
    3366,
    3368,
    3369,
    3371,
    3373,
    3374,
    3378,
    3383,
    3384,
    3388,
    3390,
    3391,
    3393,
    3396,
    3398,
    3399,
    3404,
    3406,
    3408,
    3411,
    3413,
    3414,
    3421,
    3423,
    3428,
    3429,
    3432,
    3434,
    3437,
    3439,
    3440,
    3445,
    3446,
    3451,
    3453,
    3456,
    3458,
    3459,
    3464,
    3465,
    3469,
    3471,
    3472,
    3474,
    3477,
    3479,
    3480,
    3484,
    3486,
    3489,
    3491,
    3492,
    3494,
    3496,
    3497,
    3503,
    3504,
    3510,
    3512,
    3513,
    3515,
    3517,
    3518,
    3523,
    3526,
    3527,
    3532,
    3534
  ],
  "token_logprobs": [
    -0.017333528,
    -0.009456282,
    -0.0019592883,
    -1.2329139,
    -0.5413938,
    -0.030367883,
    -0.19053553,
    -0.0017640191,
    -0.0003726696,
    -0.0015724284,
    -0.0066113826,
    -0.0039426507,
    -0.0031362078,
    -0.0006194353,
    -0.5517466,
    -0.11401265,
    -2.0152488,
    -0.43361312,
    -5.109523e-05,
    -0.0007090229,
    -0.0005979664,
    -0.00012810968,
    -0.00105915,
    -0.0038416474,
    -0.13041371,
    -0.0005790592,
    -0.00045179878,
    -0.00012405471,
    -0.00048632707,
    -0.0031469103,
    -0.053868473,
    -0.00070508523,
    -0.0018798044,
    -0.0023844207,
    -0.0005181708,
    -0.0017357179,
    -0.00017210613,
    -0.003469128,
    -0.0036881831,
    -0.0010872569,
    -0.0013374232,
    -0.004219814,
    -0.001028304,
    -0.00021550842,
    -0.0009262802,
    -0.00410986,
    -0.60678685,
    -0.0016511736,
    -0.008315073,
    -3.6195077e-05,
    -0.00033123003,
    -0.0005980866,
    -0.0002022697,
    -0.0007431982,
    -0.002239067,
    -1.2611324,
    -0.0054852753,
    -0.00070508523,
    -0.0009780627,
    -0.0062463465,
    -0.17308876,
    -0.008850785,
    -0.00096488127,
    -1.1461366,
    -0.043060657,
    -0.016015518,
    -0.006258405,
    -0.75687903,
    -0.12030639,
    -0.0072467425,
    -0.0019854505,
    -0.16340545,
    -0.11494559,
    -0.04634387,
    -0.0115133,
    -0.0011554011,
    -0.0063548554
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " lay",
    " down",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " lie",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sleep",
    "\n",
    " sleep",
    "()",
    "\n",
    " #",
    " 3",
    ":",
    " wake",
    " up",
    "\n",
    " wake",
    "up",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.017333528
    },
    {
      " 0": -0.009456282
    },
    {
      ":": -0.0019592883
    },
    {
      " walk": -0.62806296
    },
    {
      " bed": -0.5413938
    },
    {
      "\n": -0.030367883
    },
    {
      " find": -0.19053553
    },
    {
      "('": -0.0017640191
    },
    {
      "bed": -0.0003726696
    },
    {
      "')": -0.0015724284
    },
    {
      "\n": -0.0066113826
    },
    {
      " #": -0.0039426507
    },
    {
      " 1": -0.0031362078
    },
    {
      ":": -0.0006194353
    },
    {
      " lay": -0.5517466
    },
    {
      " down": -0.11401265
    },
    {
      " on": -0.20799968
    },
    {
      " tur": -0.43361312
    },
    {
      "nt": -5.109523e-05
    },
    {
      "o": -0.0007090229
    },
    {
      "('": -0.0005979664
    },
    {
      "bed": -0.00012810968
    },
    {
      "')": -0.00105915
    },
    {
      "\n": -0.0038416474
    },
    {
      " look": -0.13041371
    },
    {
      "at": -0.0005790592
    },
    {
      "('": -0.00045179878
    },
    {
      "bed": -0.00012405471
    },
    {
      "')": -0.00048632707
    },
    {
      "\n": -0.0031469103
    },
    {
      " assert": -0.053868473
    },
    {
      "('": -0.00070508523
    },
    {
      "close": -0.0018798044
    },
    {
      "'": -0.0023844207
    },
    {
      " to": -0.0005181708
    },
    {
      " '": -0.0017357179
    },
    {
      "bed": -0.00017210613
    },
    {
      "')": -0.003469128
    },
    {
      "\n": -0.0036881831
    },
    {
      " else": -0.0010872569
    },
    {
      ":": -0.0013374232
    },
    {
      " find": -0.004219814
    },
    {
      "('": -0.001028304
    },
    {
      "bed": -0.00021550842
    },
    {
      "')": -0.0009262802
    },
    {
      "\n": -0.00410986
    },
    {
      " else": -0.60678685
    },
    {
      ":": -0.0016511736
    },
    {
      " tur": -0.008315073
    },
    {
      "nt": -3.6195077e-05
    },
    {
      "o": -0.00033123003
    },
    {
      "('": -0.0005980866
    },
    {
      "bed": -0.0002022697
    },
    {
      "')": -0.0007431982
    },
    {
      "\n": -0.002239067
    },
    {
      " sit": -0.3797876
    },
    {
      "('": -0.0054852753
    },
    {
      "bed": -0.00070508523
    },
    {
      "')": -0.0009780627
    },
    {
      "\n": -0.0062463465
    },
    {
      " #": -0.17308876
    },
    {
      " 2": -0.008850785
    },
    {
      ":": -0.00096488127
    },
    {
      " close": -0.94311637
    },
    {
      "\n": -0.043060657
    },
    {
      " sleep": -0.016015518
    },
    {
      "()": -0.006258405
    },
    {
      "<|endoftext|>": -0.66422194
    },
    {
      " #": -0.12030639
    },
    {
      " 3": -0.0072467425
    },
    {
      ":": -0.0019854505
    },
    {
      " wake": -0.16340545
    },
    {
      " up": -0.11494559
    },
    {
      "\n": -0.04634387
    },
    {
      " wake": -0.0115133
    },
    {
      "up": -0.0011554011
    },
    {
      "()": -0.0063548554
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.877100944519043
[(" # 0: walk to home office\n walk('home_office')\n # 1: find computer\n walk('computer')\n find('computer')\n # 2: turn on computer\n assert('close' to 'computer')\n else: find('computer')\n plugin('computer')\n # 3: sit in chair\n find('chair')\n sit('chair')\n # 4: touch the mouse\n assert('close' to 'mouse')\n else: find('mouse')\n touch('mouse')\n # 5: look at computer\n turnto('computer')\n lookat('computer')", <OpenAIObject at 0x7fd9200141d0> JSON: {
  "text_offset": [
    3352,
    3354,
    3356,
    3357,
    3362,
    3365,
    3370,
    3377,
    3378,
    3383,
    3385,
    3389,
    3390,
    3396,
    3398,
    3399,
    3401,
    3403,
    3404,
    3409,
    3418,
    3419,
    3424,
    3426,
    3434,
    3436,
    3437,
    3442,
    3444,
    3452,
    3454,
    3455,
    3457,
    3459,
    3460,
    3465,
    3468,
    3477,
    3478,
    3485,
    3487,
    3492,
    3493,
    3496,
    3498,
    3506,
    3508,
    3509,
    3514,
    3515,
    3520,
    3522,
    3530,
    3532,
    3533,
    3540,
    3542,
    3550,
    3552,
    3553,
    3555,
    3557,
    3558,
    3562,
    3565,
    3571,
    3572,
    3577,
    3579,
    3584,
    3586,
    3587,
    3591,
    3593,
    3598,
    3600,
    3601,
    3603,
    3605,
    3606,
    3612,
    3616,
    3622,
    3623,
    3630,
    3632,
    3637,
    3638,
    3641,
    3643,
    3648,
    3650,
    3651,
    3656,
    3657,
    3662,
    3664,
    3669,
    3671,
    3672,
    3678,
    3680,
    3685,
    3687,
    3688,
    3690,
    3692,
    3693,
    3698,
    3701,
    3710,
    3711,
    3715,
    3717,
    3718,
    3720,
    3728,
    3730,
    3731,
    3736,
    3738,
    3740,
    3748
  ],
  "token_logprobs": [
    -0.017012091,
    -0.0073147677,
    -0.0018414661,
    -0.16712625,
    -0.23830564,
    -0.49273467,
    -0.034659863,
    -0.024314176,
    -0.005187392,
    -0.0045143547,
    -0.012142617,
    -0.050213244,
    -0.00091410964,
    -0.0025185633,
    -0.0077802013,
    -0.0030464632,
    -0.003251732,
    -0.0007048478,
    -0.051306333,
    -0.68495214,
    -0.03395425,
    -1.2304076,
    -0.0018655322,
    -0.004268477,
    -0.0020264788,
    -0.004169712,
    -0.0139042605,
    -0.0009211495,
    -0.00059963536,
    -0.0009316502,
    -0.0041999402,
    -0.004186293,
    -0.0049246396,
    -0.00068790605,
    -0.6504119,
    -0.028526753,
    -0.7847001,
    -0.027173828,
    -0.3907303,
    -0.0013353939,
    -0.03310958,
    -0.0039120163,
    -0.0013494163,
    -0.0031733988,
    -0.0019614988,
    -0.0061106887,
    -0.0039619193,
    -0.0015115981,
    -0.0013682795,
    -0.0054059247,
    -0.0015872938,
    -0.00070508523,
    -0.0017724378,
    -0.0049116393,
    -1.6559261,
    -0.0010303333,
    -0.002084295,
    -0.0020122065,
    -0.008673947,
    -0.124734275,
    -0.007485301,
    -0.0008544527,
    -1.2668307,
    -1.4079046,
    -0.9518934,
    -0.08287724,
    -0.23512128,
    -0.0012569706,
    -0.0023330399,
    -0.0015742793,
    -0.0038246543,
    -1.1023811,
    -0.002216366,
    -0.0013619519,
    -0.00067746826,
    -0.00534546,
    -0.04184758,
    -0.0070060785,
    -0.00074152835,
    -2.7104056,
    -0.8773155,
    -0.9739194,
    -0.47057825,
    -0.4710353,
    -0.0013777702,
    -0.02782037,
    -0.0029613888,
    -0.001257805,
    -0.0031165965,
    -0.028794859,
    -0.012409623,
    -0.003566445,
    -0.0012634745,
    -0.0013494163,
    -0.007925567,
    -0.0017561391,
    -0.0018071913,
    -0.0027068695,
    -0.0053956173,
    -0.06343322,
    -0.0011222807,
    -0.00066649547,
    -0.0032160932,
    -0.007522534,
    -0.019853964,
    -0.0076237307,
    -0.00090408674,
    -1.1367917,
    -0.0077401344,
    -1.3496307,
    -1.3152714,
    -0.08516487,
    -7.8634315e-05,
    -0.00025431695,
    -0.00058866065,
    -0.0040121297,
    -0.002034602,
    -0.005790019,
    -0.007646434,
    -0.0009435232,
    -0.0008356018,
    -0.0007684329,
    -0.0020334062
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " walk",
    "('",
    "computer",
    "')",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " plugin",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " in",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " touch",
    " the",
    " mouse",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "mouse",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " touch",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " look",
    " at",
    " computer",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.017012091
    },
    {
      " 0": -0.0073147677
    },
    {
      ":": -0.0018414661
    },
    {
      " walk": -0.16712625
    },
    {
      " to": -0.23830564
    },
    {
      " home": -0.49273467
    },
    {
      " office": -0.034659863
    },
    {
      "\n": -0.024314176
    },
    {
      " walk": -0.005187392
    },
    {
      "('": -0.0045143547
    },
    {
      "home": -0.012142617
    },
    {
      "_": -0.050213244
    },
    {
      "office": -0.00091410964
    },
    {
      "')": -0.0025185633
    },
    {
      "\n": -0.0077802013
    },
    {
      " #": -0.0030464632
    },
    {
      " 1": -0.003251732
    },
    {
      ":": -0.0007048478
    },
    {
      " find": -0.051306333
    },
    {
      " computer": -0.68495214
    },
    {
      "\n": -0.03395425
    },
    {
      " find": -0.37263873
    },
    {
      "('": -0.0018655322
    },
    {
      "computer": -0.004268477
    },
    {
      "')": -0.0020264788
    },
    {
      "\n": -0.004169712
    },
    {
      " find": -0.0139042605
    },
    {
      "('": -0.0009211495
    },
    {
      "computer": -0.00059963536
    },
    {
      "')": -0.0009316502
    },
    {
      "\n": -0.0041999402
    },
    {
      " #": -0.004186293
    },
    {
      " 2": -0.0049246396
    },
    {
      ":": -0.00068790605
    },
    {
      " turn": -0.6504119
    },
    {
      " on": -0.028526753
    },
    {
      " the": -0.6302259
    },
    {
      "\n": -0.027173828
    },
    {
      " assert": -0.3907303
    },
    {
      "('": -0.0013353939
    },
    {
      "close": -0.03310958
    },
    {
      "'": -0.0039120163
    },
    {
      " to": -0.0013494163
    },
    {
      " '": -0.0031733988
    },
    {
      "computer": -0.0019614988
    },
    {
      "')": -0.0061106887
    },
    {
      "\n": -0.0039619193
    },
    {
      " else": -0.0015115981
    },
    {
      ":": -0.0013682795
    },
    {
      " find": -0.0054059247
    },
    {
      "('": -0.0015872938
    },
    {
      "computer": -0.00070508523
    },
    {
      "')": -0.0017724378
    },
    {
      "\n": -0.0049116393
    },
    {
      " switch": -0.42246002
    },
    {
      "('": -0.0010303333
    },
    {
      "computer": -0.002084295
    },
    {
      "')": -0.0020122065
    },
    {
      "\n": -0.008673947
    },
    {
      " #": -0.124734275
    },
    {
      " 3": -0.007485301
    },
    {
      ":": -0.0008544527
    },
    {
      " sit": -1.2668307
    },
    {
      " on": -0.59020424
    },
    {
      " front": -0.6475245
    },
    {
      "\n": -0.08287724
    },
    {
      " find": -0.23512128
    },
    {
      "('": -0.0012569706
    },
    {
      "chair": -0.0023330399
    },
    {
      "')": -0.0015742793
    },
    {
      "\n": -0.0038246543
    },
    {
      " assert": -0.50430614
    },
    {
      "('": -0.002216366
    },
    {
      "chair": -0.0013619519
    },
    {
      "')": -0.00067746826
    },
    {
      "\n": -0.00534546
    },
    {
      " #": -0.04184758
    },
    {
      " 4": -0.0070060785
    },
    {
      ":": -0.00074152835
    },
    {
      " open": -1.2713873
    },
    {
      " the": -0.8773155
    },
    {
      " keyboard": -0.738215
    },
    {
      "\n": -0.47057825
    },
    {
      " assert": -0.4710353
    },
    {
      "('": -0.0013777702
    },
    {
      "close": -0.02782037
    },
    {
      "'": -0.0029613888
    },
    {
      " to": -0.001257805
    },
    {
      " '": -0.0031165965
    },
    {
      "mouse": -0.028794859
    },
    {
      "')": -0.012409623
    },
    {
      "\n": -0.003566445
    },
    {
      " else": -0.0012634745
    },
    {
      ":": -0.0013494163
    },
    {
      " find": -0.007925567
    },
    {
      "('": -0.0017561391
    },
    {
      "mouse": -0.0018071913
    },
    {
      "')": -0.0027068695
    },
    {
      "\n": -0.0053956173
    },
    {
      " touch": -0.06343322
    },
    {
      "('": -0.0011222807
    },
    {
      "mouse": -0.00066649547
    },
    {
      "')": -0.0032160932
    },
    {
      "\n": -0.007522534
    },
    {
      " #": -0.019853964
    },
    {
      " 5": -0.0076237307
    },
    {
      ":": -0.00090408674
    },
    {
      " look": -1.1367917
    },
    {
      " at": -0.0077401344
    },
    {
      " the": -0.38494048
    },
    {
      " screen": -0.34978494
    },
    {
      " tur": -0.08516487
    },
    {
      "nt": -7.8634315e-05
    },
    {
      "o": -0.00025431695
    },
    {
      "('": -0.00058866065
    },
    {
      "computer": -0.0040121297
    },
    {
      "')": -0.002034602
    },
    {
      "\n": -0.005790019
    },
    {
      " look": -0.007646434
    },
    {
      "at": -0.0009435232
    },
    {
      "('": -0.0008356018
    },
    {
      "computer": -0.0007684329
    },
    {
      "')": -0.0020334062
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.803485870361328
[(" # 0: find newspaper\n find('newspaper')\n # 1: pick up newspaper\n grab('newspaper')\n # 2: read newspaper\n turnto('newspaper')\n lookat('newspaper')\n read('newspaper')\n # 3: put newspaper back\n assert('close' to 'newspaper')\n else: find('newspaper')\n putobjback('newspaper')", <OpenAIObject at 0x7fd920046720> JSON: {
  "text_offset": [
    3342,
    3344,
    3346,
    3347,
    3352,
    3362,
    3363,
    3368,
    3370,
    3373,
    3375,
    3379,
    3381,
    3382,
    3384,
    3386,
    3387,
    3392,
    3395,
    3405,
    3406,
    3411,
    3413,
    3416,
    3418,
    3422,
    3424,
    3425,
    3427,
    3429,
    3430,
    3435,
    3445,
    3446,
    3450,
    3452,
    3453,
    3455,
    3458,
    3460,
    3464,
    3466,
    3467,
    3472,
    3474,
    3476,
    3479,
    3481,
    3485,
    3487,
    3488,
    3493,
    3495,
    3498,
    3500,
    3504,
    3506,
    3507,
    3509,
    3511,
    3512,
    3516,
    3526,
    3531,
    3532,
    3539,
    3541,
    3546,
    3547,
    3550,
    3552,
    3555,
    3557,
    3561,
    3563,
    3564,
    3569,
    3570,
    3575,
    3577,
    3580,
    3582,
    3586,
    3588,
    3589,
    3593,
    3596,
    3600,
    3602,
    3605,
    3607,
    3611
  ],
  "token_logprobs": [
    -0.018389398,
    -0.009722093,
    -0.0021267661,
    -0.699622,
    -0.29464078,
    -0.029826669,
    -0.027859591,
    -0.002379046,
    -0.0031586902,
    -0.0007848969,
    -0.0004874009,
    -0.0025902723,
    -0.007955847,
    -0.004636866,
    -0.0027026269,
    -0.00052162877,
    -2.8308575,
    -0.08752443,
    -0.42490783,
    -0.023221789,
    -0.6389066,
    -0.001130754,
    -0.0012537473,
    -0.0003172779,
    -0.001090239,
    -0.0014887346,
    -0.0050209607,
    -0.39828438,
    -0.0065994426,
    -0.0005327809,
    -2.246675,
    -0.35817632,
    -0.010932946,
    -0.5648095,
    -7.362661e-05,
    -0.00022480857,
    -0.0006308868,
    -0.0018273152,
    -0.00034882128,
    -0.0009913117,
    -0.0016412033,
    -0.0043612644,
    -0.267313,
    -0.00068432797,
    -0.0005168586,
    -0.0011422721,
    -0.0014512477,
    -0.0013475663,
    -0.0018175814,
    -0.020400768,
    -0.49697497,
    -0.008647068,
    -0.002360046,
    -0.00041912153,
    -0.000323121,
    -0.0021906807,
    -0.28957126,
    -0.039711352,
    -0.011209699,
    -0.0015597717,
    -0.22878727,
    -0.5246125,
    -0.1434609,
    -0.030919904,
    -1.2598406,
    -0.0013502537,
    -1.6290907,
    -0.0028659236,
    -0.000698404,
    -0.0044615464,
    -0.018234534,
    -0.0005133987,
    -0.0009834346,
    -0.0062417304,
    -0.006332902,
    -0.002267861,
    -0.001388633,
    -0.02521941,
    -0.0020245668,
    -0.0011890564,
    -0.0016511736,
    -0.0065366263,
    -0.0026016862,
    -0.0067152483,
    -0.18947548,
    -0.52962047,
    -0.0037519597,
    -0.0012976732,
    -0.0011539687,
    -0.0009136328,
    -0.00046599025,
    -0.0020989294
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " pick",
    " up",
    " newspaper",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " read",
    " newspaper",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " newspaper",
    " back",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "new",
    "sp",
    "aper",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018389398
    },
    {
      " 0": -0.009722093
    },
    {
      ":": -0.0021267661
    },
    {
      " find": -0.699622
    },
    {
      " newspaper": -0.29464078
    },
    {
      "\n": -0.029826669
    },
    {
      " find": -0.027859591
    },
    {
      "('": -0.002379046
    },
    {
      "new": -0.0031586902
    },
    {
      "sp": -0.0007848969
    },
    {
      "aper": -0.0004874009
    },
    {
      "')": -0.0025902723
    },
    {
      "\n": -0.007955847
    },
    {
      " #": -0.004636866
    },
    {
      " 1": -0.0027026269
    },
    {
      ":": -0.00052162877
    },
    {
      " grab": -0.18501607
    },
    {
      " up": -0.08752443
    },
    {
      " newspaper": -0.42490783
    },
    {
      "\n": -0.023221789
    },
    {
      " grab": -0.6389066
    },
    {
      "('": -0.001130754
    },
    {
      "new": -0.0012537473
    },
    {
      "sp": -0.0003172779
    },
    {
      "aper": -0.001090239
    },
    {
      "')": -0.0014887346
    },
    {
      "\n": -0.0050209607
    },
    {
      " #": -0.39828438
    },
    {
      " 2": -0.0065994426
    },
    {
      ":": -0.0005327809
    },
    {
      " sit": -1.0263772
    },
    {
      " newspaper": -0.35817632
    },
    {
      "\n": -0.010932946
    },
    {
      " tur": -0.5648095
    },
    {
      "nt": -7.362661e-05
    },
    {
      "o": -0.00022480857
    },
    {
      "('": -0.0006308868
    },
    {
      "new": -0.0018273152
    },
    {
      "sp": -0.00034882128
    },
    {
      "aper": -0.0009913117
    },
    {
      "')": -0.0016412033
    },
    {
      "\n": -0.0043612644
    },
    {
      " look": -0.267313
    },
    {
      "at": -0.00068432797
    },
    {
      "('": -0.0005168586
    },
    {
      "new": -0.0011422721
    },
    {
      "sp": -0.0014512477
    },
    {
      "aper": -0.0013475663
    },
    {
      "')": -0.0018175814
    },
    {
      "\n": -0.020400768
    },
    {
      " read": -0.49697497
    },
    {
      "('": -0.008647068
    },
    {
      "new": -0.002360046
    },
    {
      "sp": -0.00041912153
    },
    {
      "aper": -0.000323121
    },
    {
      "')": -0.0021906807
    },
    {
      "\n": -0.28957126
    },
    {
      " #": -0.039711352
    },
    {
      " 3": -0.011209699
    },
    {
      ":": -0.0015597717
    },
    {
      " put": -0.22878727
    },
    {
      " newspaper": -0.5246125
    },
    {
      " back": -0.1434609
    },
    {
      "\n": -0.030919904
    },
    {
      " put": -0.3829485
    },
    {
      "('": -0.0013502537
    },
    {
      "new": -0.23757876
    },
    {
      "'": -0.0028659236
    },
    {
      " to": -0.000698404
    },
    {
      " '": -0.0044615464
    },
    {
      "new": -0.018234534
    },
    {
      "sp": -0.0005133987
    },
    {
      "aper": -0.0009834346
    },
    {
      "')": -0.0062417304
    },
    {
      "\n": -0.006332902
    },
    {
      " else": -0.002267861
    },
    {
      ":": -0.001388633
    },
    {
      " find": -0.02521941
    },
    {
      "('": -0.0020245668
    },
    {
      "new": -0.0011890564
    },
    {
      "sp": -0.0016511736
    },
    {
      "aper": -0.0065366263
    },
    {
      "')": -0.0026016862
    },
    {
      "\n": -0.0067152483
    },
    {
      " put": -0.18947548
    },
    {
      "obj": -0.52962047
    },
    {
      "back": -0.0037519597
    },
    {
      "('": -0.0012976732
    },
    {
      "new": -0.0011539687
    },
    {
      "sp": -0.0009136328
    },
    {
      "aper": -0.00046599025
    },
    {
      "')": -0.0020989294
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.298410892486572
[(" # 0: find sink\n find('sink')\n # 1: turn on the water\n switchon('sink')\n # 2: pour soap\n pour('soap')\n # 3: grab sponge\n grab('sponge')\n # 4: wash hands\n assert('close' to 'sponge')\n else: grab('sponge')\n wash('sponge')\n turnto('sponge')\n lookat('sponge')\n # 5: turn off the water\n switchoff('sink')\n # 6: done", <OpenAIObject at 0x7fd9200228b0> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3360,
    3361,
    3366,
    3368,
    3369,
    3372,
    3374,
    3375,
    3377,
    3379,
    3380,
    3385,
    3388,
    3392,
    3398,
    3399,
    3406,
    3408,
    3410,
    3411,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3432,
    3433,
    3438,
    3440,
    3442,
    3444,
    3446,
    3447,
    3449,
    3451,
    3452,
    3457,
    3464,
    3465,
    3470,
    3472,
    3474,
    3478,
    3480,
    3481,
    3483,
    3485,
    3486,
    3491,
    3497,
    3498,
    3505,
    3507,
    3512,
    3513,
    3516,
    3518,
    3520,
    3524,
    3526,
    3527,
    3532,
    3533,
    3538,
    3540,
    3542,
    3546,
    3548,
    3549,
    3554,
    3556,
    3558,
    3562,
    3564,
    3565,
    3569,
    3571,
    3572,
    3574,
    3576,
    3580,
    3582,
    3583,
    3588,
    3590,
    3592,
    3594,
    3598,
    3600,
    3601,
    3603,
    3605,
    3606,
    3611,
    3615,
    3619,
    3625,
    3626,
    3633,
    3636,
    3638,
    3639,
    3642,
    3644,
    3645,
    3647,
    3649,
    3650
  ],
  "token_logprobs": [
    -0.022016702,
    -0.011172328,
    -0.002581309,
    -0.7971218,
    -0.37459013,
    -0.030491266,
    -0.18114708,
    -0.0024852215,
    -0.001099665,
    -0.00017854528,
    -0.0017877847,
    -0.007876724,
    -0.013818078,
    -0.0036850716,
    -0.0009852228,
    -0.5768393,
    -0.19552796,
    -1.0759866,
    -1.989198,
    -0.06757299,
    -1.7148218,
    -0.0022562123,
    -0.0015007324,
    -0.7837391,
    -0.00074284157,
    -0.03208565,
    -0.0055242293,
    -0.07021726,
    -0.004105253,
    -0.0011320681,
    -1.115133,
    -0.93787676,
    -0.43247616,
    -1.1916367,
    -0.004541657,
    -0.014184918,
    -0.0010428615,
    -0.01451361,
    -0.005967068,
    -0.038119275,
    -0.005043906,
    -0.0010327185,
    -1.0751784,
    -1.2655537,
    -0.030437684,
    -0.20170036,
    -0.0013181443,
    -0.0016948791,
    -0.0011522978,
    -0.0017544666,
    -0.003800302,
    -0.03106807,
    -0.003932718,
    -0.00053206563,
    -0.79660916,
    -0.3552049,
    -0.27953923,
    -2.0993502,
    -0.0021236583,
    -1.3839928,
    -0.004707769,
    -0.011254003,
    -0.0035916306,
    -0.54907393,
    -0.0006441875,
    -0.013266167,
    -0.0055728387,
    -0.0018319736,
    -0.0018729974,
    -0.4653043,
    -0.0019054831,
    -0.0010851074,
    -0.0004832248,
    -0.002228373,
    -0.0062175593,
    -0.11164675,
    -0.0038917311,
    -0.3406337,
    -0.0012279053,
    -0.00532317,
    -0.0066999462,
    -1.4706659,
    -0.00013371343,
    -0.000524134,
    -0.0005711877,
    -0.041040793,
    -0.00063524215,
    -0.0013165927,
    -0.0047200434,
    -0.23634996,
    -0.0009799729,
    -0.00058794545,
    -0.002588121,
    -0.00043796306,
    -0.0018890623,
    -0.006718909,
    -0.012644473,
    -0.0058317455,
    -0.0018311372,
    -0.5460949,
    -0.02065922,
    -0.5482969,
    -0.034014065,
    -0.022162827,
    -0.039977614,
    -0.0042810496,
    -0.0009572444,
    -0.016221281,
    -0.000113686365,
    -0.0018539474,
    -0.06581538,
    -0.016292466,
    -0.0030393484,
    -0.001781753,
    -1.8429972
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " turn",
    " on",
    " the",
    " water",
    "\n",
    " switch",
    "on",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pour",
    " soap",
    "\n",
    " pour",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " sponge",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " hands",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " wash",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " off",
    " the",
    " water",
    "\n",
    " switch",
    "off",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.022016702
    },
    {
      " 0": -0.011172328
    },
    {
      ":": -0.002581309
    },
    {
      " find": -0.7971218
    },
    {
      " sink": -0.37459013
    },
    {
      "\n": -0.030491266
    },
    {
      " find": -0.18114708
    },
    {
      "('": -0.0024852215
    },
    {
      "s": -0.001099665
    },
    {
      "ink": -0.00017854528
    },
    {
      "')": -0.0017877847
    },
    {
      "\n": -0.007876724
    },
    {
      " #": -0.013818078
    },
    {
      " 1": -0.0036850716
    },
    {
      ":": -0.0009852228
    },
    {
      " turn": -0.5768393
    },
    {
      " on": -0.19552796
    },
    {
      " f": -0.9647137
    },
    {
      " f": -0.52299434
    },
    {
      "\n": -0.06757299
    },
    {
      " assert": -1.0936241
    },
    {
      "on": -0.0022562123
    },
    {
      "('": -0.0015007324
    },
    {
      "s": -0.7837391
    },
    {
      "ink": -0.00074284157
    },
    {
      "')": -0.03208565
    },
    {
      "\n": -0.0055242293
    },
    {
      " #": -0.07021726
    },
    {
      " 2": -0.004105253
    },
    {
      ":": -0.0011320681
    },
    {
      " pour": -1.115133
    },
    {
      " soap": -0.93787676
    },
    {
      "\n": -0.43247616
    },
    {
      " assert": -1.0235143
    },
    {
      "('": -0.004541657
    },
    {
      "so": -0.014184918
    },
    {
      "ap": -0.0010428615
    },
    {
      "')": -0.01451361
    },
    {
      "\n": -0.005967068
    },
    {
      " #": -0.038119275
    },
    {
      " 3": -0.005043906
    },
    {
      ":": -0.0010327185
    },
    {
      " grab": -1.0751784
    },
    {
      " sponge": -1.2655537
    },
    {
      "\n": -0.030437684
    },
    {
      " grab": -0.20170036
    },
    {
      "('": -0.0013181443
    },
    {
      "sp": -0.0016948791
    },
    {
      "onge": -0.0011522978
    },
    {
      "')": -0.0017544666
    },
    {
      "\n": -0.003800302
    },
    {
      " #": -0.03106807
    },
    {
      " 4": -0.003932718
    },
    {
      ":": -0.00053206563
    },
    {
      " wash": -0.79660916
    },
    {
      " hands": -0.3552049
    },
    {
      "\n": -0.27953923
    },
    {
      " wash": -0.25771654
    },
    {
      "('": -0.0021236583
    },
    {
      "sp": -0.3826939
    },
    {
      "'": -0.004707769
    },
    {
      " to": -0.011254003
    },
    {
      " '": -0.0035916306
    },
    {
      "sp": -0.54907393
    },
    {
      "onge": -0.0006441875
    },
    {
      "')": -0.013266167
    },
    {
      "\n": -0.0055728387
    },
    {
      " else": -0.0018319736
    },
    {
      ":": -0.0018729974
    },
    {
      " grab": -0.4653043
    },
    {
      "('": -0.0019054831
    },
    {
      "sp": -0.0010851074
    },
    {
      "onge": -0.0004832248
    },
    {
      "')": -0.002228373
    },
    {
      "\n": -0.0062175593
    },
    {
      " wash": -0.11164675
    },
    {
      "('": -0.0038917311
    },
    {
      "sp": -0.3406337
    },
    {
      "onge": -0.0012279053
    },
    {
      "')": -0.00532317
    },
    {
      "\n": -0.0066999462
    },
    {
      " #": -0.3268157
    },
    {
      "nt": -0.00013371343
    },
    {
      "o": -0.000524134
    },
    {
      "('": -0.0005711877
    },
    {
      "sp": -0.041040793
    },
    {
      "onge": -0.00063524215
    },
    {
      "')": -0.0013165927
    },
    {
      "\n": -0.0047200434
    },
    {
      " look": -0.23634996
    },
    {
      "at": -0.0009799729
    },
    {
      "('": -0.00058794545
    },
    {
      "sp": -0.002588121
    },
    {
      "onge": -0.00043796306
    },
    {
      "')": -0.0018890623
    },
    {
      "\n": -0.006718909
    },
    {
      " #": -0.012644473
    },
    {
      " 5": -0.0058317455
    },
    {
      ":": -0.0018311372
    },
    {
      " turn": -0.5460949
    },
    {
      " off": -0.02065922
    },
    {
      " the": -0.5482969
    },
    {
      " water": -0.034014065
    },
    {
      "\n": -0.022162827
    },
    {
      " switch": -0.039977614
    },
    {
      "off": -0.0042810496
    },
    {
      "('": -0.0009572444
    },
    {
      "s": -0.016221281
    },
    {
      "ink": -0.000113686365
    },
    {
      "')": -0.0018539474
    },
    {
      "\n": -0.06581538
    },
    {
      " #": -0.016292466
    },
    {
      " 6": -0.0030393484
    },
    {
      ":": -0.001781753
    },
    {
      " Done": -0.93689704
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Request failed due to server shutdown {
  "error": {
    "message": "Request failed due to server shutdown",
    "type": "server_error",
    "param": null,
    "code": null
  }
}
 500 {'error': {'message': 'Request failed due to server shutdown', 'type': 'server_error', 'param': None, 'code': None}} {'Date': 'Tue, 06 Jun 2023 00:22:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '141', 'Connection': 'keep-alive', 'access-control-allow-origin': '*', 'openai-model': 'text-davinci-003', 'openai-organization': 'user-vyeyn4jdvoc1yp8hd3qfrfx6', 'openai-processing-ms': '19092', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=15724800; includeSubDomains', 'x-ratelimit-limit-requests': '60', 'x-ratelimit-limit-tokens': '150000', 'x-ratelimit-remaining-requests': '59', 'x-ratelimit-remaining-tokens': '148975', 'x-ratelimit-reset-requests': '1s', 'x-ratelimit-reset-tokens': '409ms', 'x-request-id': 'b3656b721f88cadd272fbc48a0bdcbaa', 'CF-Cache-Status': 'DYNAMIC', 'Server': 'cloudflare', 'CF-RAY': '7d2c7f2f382408c7-LAX', 'alt-svc': 'h3=":443"; ma=86400'} Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 50.5480592250824
[(" # 0: walk in to bathroom\n walk('bathroom')\n # 1: find mop bucket\n find('mop_bucket')\n # 2: grab mop bucket\n assert('close' to 'mop_bucket')\n else: find('mop_bucket')\n grab('mop_bucket')\n assert('mop_bucket' in 'hands')\n else: grab('mop_bucket')\n # 3: fill up mop bucket with water\n fillup('mop_bucket')\n # 4: grab mop\n find('mop')\n assert('close' to 'mop')\n else: find('mop')\n grab('mop')\n # 5: use mop to wipe floor\n wipe('floor')\n # 6: put mop and mop bucket back\n assert('mop' in 'hands')\n else: grab('mop')\n putobjback('mop')\n assert('mop_bucket' in 'hands')\n else: grab('mop_bucket')\n putobjback('mop_bucket')\n # 7: Done", <OpenAIObject at 0x7fd920014270> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3360,
    3363,
    3372,
    3373,
    3378,
    3380,
    3384,
    3388,
    3390,
    3391,
    3393,
    3395,
    3396,
    3401,
    3403,
    3405,
    3412,
    3413,
    3418,
    3420,
    3423,
    3424,
    3428,
    3430,
    3432,
    3433,
    3435,
    3437,
    3438,
    3443,
    3445,
    3447,
    3454,
    3455,
    3462,
    3464,
    3469,
    3470,
    3473,
    3475,
    3478,
    3479,
    3483,
    3485,
    3487,
    3488,
    3493,
    3494,
    3499,
    3501,
    3504,
    3505,
    3509,
    3511,
    3513,
    3514,
    3519,
    3521,
    3524,
    3525,
    3529,
    3531,
    3533,
    3534,
    3541,
    3543,
    3546,
    3547,
    3551,
    3553,
    3554,
    3557,
    3559,
    3564,
    3566,
    3567,
    3572,
    3573,
    3578,
    3580,
    3583,
    3584,
    3588,
    3590,
    3592,
    3593,
    3595,
    3597,
    3598,
    3603,
    3606,
    3608,
    3610,
    3617,
    3622,
    3628,
    3629,
    3634,
    3636,
    3638,
    3641,
    3642,
    3646,
    3648,
    3650,
    3651,
    3653,
    3655,
    3656,
    3661,
    3663,
    3665,
    3666,
    3671,
    3673,
    3676,
    3678,
    3679,
    3686,
    3688,
    3693,
    3694,
    3697,
    3699,
    3702,
    3704,
    3705,
    3710,
    3711,
    3716,
    3718,
    3721,
    3723,
    3724,
    3729,
    3731,
    3734,
    3736,
    3737,
    3739,
    3741,
    3742,
    3746,
    3748,
    3750,
    3753,
    3758,
    3764,
    3765,
    3770,
    3772,
    3777,
    3779,
    3780,
    3782,
    3784,
    3785,
    3789,
    3791,
    3793,
    3797,
    3799,
    3801,
    3808,
    3813,
    3814,
    3821,
    3823,
    3826,
    3827,
    3830,
    3832,
    3837,
    3839,
    3840,
    3845,
    3846,
    3851,
    3853,
    3856,
    3858,
    3859,
    3863,
    3866,
    3870,
    3872,
    3875,
    3877,
    3878,
    3885,
    3887,
    3890,
    3891,
    3895,
    3897,
    3898,
    3901,
    3903,
    3908,
    3910,
    3911,
    3916,
    3917,
    3922,
    3924,
    3927,
    3928,
    3932,
    3934,
    3936,
    3937,
    3941,
    3944,
    3948,
    3950,
    3953,
    3954,
    3958,
    3960,
    3962,
    3963,
    3965,
    3967,
    3968
  ],
  "token_logprobs": [
    -0.01630864,
    -0.0070765493,
    -0.0022384692,
    -0.12871936,
    -1.4874232,
    -0.054321855,
    -0.1333347,
    -0.017517667,
    -0.005042947,
    -0.0066626226,
    -0.002194683,
    -0.0001722244,
    -0.0016069341,
    -0.006094916,
    -0.0018541868,
    -0.003519371,
    -0.00069768965,
    -0.13430475,
    -0.5160778,
    -0.00021479129,
    -0.95476526,
    -0.06085961,
    -0.18714376,
    -0.0010565255,
    -0.0024349699,
    -0.0049448246,
    -0.00042508479,
    -0.0006162157,
    -0.0023430188,
    -0.006145051,
    -0.016699728,
    -0.0043756324,
    -0.00074713683,
    -0.63595605,
    -0.16253588,
    -4.954739e-05,
    -0.4790349,
    -0.039395288,
    -0.8322476,
    -0.0013368253,
    -0.0025410317,
    -0.002179092,
    -0.0006392971,
    -0.001806356,
    -0.006716148,
    -0.0031030816,
    -0.0003940164,
    -8.9960085e-05,
    -0.0053839935,
    -0.006312686,
    -0.0017852166,
    -0.0012964783,
    -0.0044355597,
    -0.0017132063,
    -0.00066148496,
    -0.0007813178,
    -0.00042067032,
    -0.00022743117,
    -0.0024896434,
    -0.0066408427,
    -0.0034728355,
    -0.00091196294,
    -0.0006259955,
    -0.002902925,
    -0.0003372524,
    -9.5562886e-05,
    -0.0019087074,
    -0.005283321,
    -0.9215313,
    -0.0014289829,
    -0.02157164,
    -0.0061238185,
    -0.0010261564,
    -0.0002095461,
    -0.0020957042,
    -0.016289923,
    -0.003520806,
    -0.0055990326,
    -0.020151507,
    -0.0036423581,
    -0.01800159,
    -0.002157825,
    -0.0031998884,
    -0.0013863653,
    -0.00037612757,
    -0.0013880371,
    -0.0007846584,
    -0.00018593716,
    -0.0019567802,
    -0.0046656677,
    -0.6447155,
    -0.008653442,
    -0.0010073618,
    -0.85253835,
    -2.5486088,
    -0.44715908,
    -9.0437854e-05,
    -0.011505884,
    -0.44240132,
    -0.14629348,
    -0.0637,
    -0.9485698,
    -1.0441829,
    -0.0061087687,
    -0.010049081,
    -0.0013097875,
    -0.0006617234,
    -0.00032681835,
    -0.13904923,
    -0.007884533,
    -0.15430312,
    -0.0045578224,
    -0.0007186854,
    -1.7576572,
    -0.27497536,
    -0.00010772499,
    -0.1233025,
    -0.32917827,
    -0.0008345872,
    -0.0009880884,
    -0.002346364,
    -0.0032168112,
    -1.9301914,
    -0.0006746054,
    -0.013924568,
    -0.0018225383,
    -0.00038495276,
    -0.0010817066,
    -0.0004974163,
    -0.0051029753,
    -0.0024567184,
    -0.0018300626,
    -0.00096070615,
    -0.0037923432,
    -0.0010241861,
    -0.00033653717,
    -0.00201722,
    -0.0053184363,
    -0.006645702,
    -0.0008193153,
    -0.00020334445,
    -0.0015421616,
    -0.0031477485,
    -1.4709526,
    -0.007100201,
    -0.0008046404,
    -3.6046162,
    -0.060558576,
    -4.9782993e-05,
    -0.076707534,
    -1.910435,
    -1.1954496,
    -0.030610546,
    -0.99600303,
    -0.009781259,
    -0.1829476,
    -0.061869852,
    -0.016358504,
    -0.15150593,
    -0.003765003,
    -0.0013262617,
    -0.97486955,
    -0.2480206,
    -0.00026481107,
    -1.1688352,
    -0.35223752,
    -9.115311e-05,
    -0.03575928,
    -0.19094697,
    -0.036658946,
    -1.6701233,
    -0.0014754217,
    -0.080879316,
    -0.06457745,
    -0.05570208,
    -0.0037863029,
    -0.005068528,
    -0.02354376,
    -0.0038528955,
    -0.01685914,
    -0.001918443,
    -0.06286067,
    -0.0012042165,
    -0.0004054651,
    -0.004774601,
    -0.004412928,
    -0.25374895,
    -0.55949754,
    -0.01614635,
    -0.0010136855,
    -0.0005889,
    -0.09955202,
    -0.0134762,
    -0.1333798,
    -0.0005699937,
    -0.0047763987,
    -0.0030470614,
    -0.000773205,
    -9.21049e-05,
    -0.0018245695,
    -0.0017098656,
    -0.0015431152,
    -0.0019019003,
    -0.0029669486,
    -0.0021922924,
    -0.00059892103,
    -0.0016253833,
    -0.004541058,
    -0.0009217446,
    -0.00032002066,
    -0.00215914,
    -0.00073115254,
    -0.0009393453,
    -0.0019094244,
    -0.0073425686,
    -0.004465499,
    -0.016962377,
    -0.0005180506,
    -0.00062957645,
    -0.0002389362,
    -0.001081229,
    -0.0004761286,
    -0.00035609488,
    -0.0017976969,
    -0.17934795,
    -0.011225855,
    -0.014078461,
    -0.002771302,
    -0.3092366
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " m",
    "op",
    " bucket",
    "\n",
    " find",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " m",
    "op",
    " bucket",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " assert",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " fill",
    " up",
    " m",
    "op",
    " bucket",
    " with",
    " water",
    "\n",
    " fill",
    "up",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " m",
    "op",
    "\n",
    " find",
    "('",
    "mop",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "mop",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "mop",
    "')",
    "\n",
    " grab",
    "('",
    "mop",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " use",
    " m",
    "op",
    " to",
    " wipe",
    " floor",
    "\n",
    " wipe",
    "('",
    "floor",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " put",
    " m",
    "op",
    " and",
    " m",
    "op",
    " bucket",
    " back",
    "\n",
    " assert",
    "('",
    "mop",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "mop",
    "')",
    "\n",
    " assert",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01630864
    },
    {
      " 0": -0.0070765493
    },
    {
      ":": -0.0022384692
    },
    {
      " walk": -0.12871936
    },
    {
      " to": -0.37681234
    },
    {
      " to": -0.054321855
    },
    {
      " bathroom": -0.1333347
    },
    {
      "\n": -0.017517667
    },
    {
      " walk": -0.005042947
    },
    {
      "('": -0.0066626226
    },
    {
      "bath": -0.002194683
    },
    {
      "room": -0.0001722244
    },
    {
      "')": -0.0016069341
    },
    {
      "\n": -0.006094916
    },
    {
      " #": -0.0018541868
    },
    {
      " 1": -0.003519371
    },
    {
      ":": -0.00069768965
    },
    {
      " find": -0.13430475
    },
    {
      " m": -0.5160778
    },
    {
      "op": -0.00021479129
    },
    {
      "\n": -0.9039629
    },
    {
      "\n": -0.06085961
    },
    {
      " find": -0.18714376
    },
    {
      "('": -0.0010565255
    },
    {
      "mop": -0.0024349699
    },
    {
      "_": -0.0049448246
    },
    {
      "buck": -0.00042508479
    },
    {
      "et": -0.0006162157
    },
    {
      "')": -0.0023430188
    },
    {
      "\n": -0.006145051
    },
    {
      " #": -0.016699728
    },
    {
      " 2": -0.0043756324
    },
    {
      ":": -0.00074713683
    },
    {
      " grab": -0.63595605
    },
    {
      " m": -0.16253588
    },
    {
      "op": -4.954739e-05
    },
    {
      " bucket": -0.4790349
    },
    {
      "\n": -0.039395288
    },
    {
      " grab": -0.588807
    },
    {
      "('": -0.0013368253
    },
    {
      "close": -0.0025410317
    },
    {
      "'": -0.002179092
    },
    {
      " to": -0.0006392971
    },
    {
      " '": -0.001806356
    },
    {
      "mop": -0.006716148
    },
    {
      "_": -0.0031030816
    },
    {
      "buck": -0.0003940164
    },
    {
      "et": -8.9960085e-05
    },
    {
      "')": -0.0053839935
    },
    {
      "\n": -0.006312686
    },
    {
      " else": -0.0017852166
    },
    {
      ":": -0.0012964783
    },
    {
      " find": -0.0044355597
    },
    {
      "('": -0.0017132063
    },
    {
      "mop": -0.00066148496
    },
    {
      "_": -0.0007813178
    },
    {
      "buck": -0.00042067032
    },
    {
      "et": -0.00022743117
    },
    {
      "')": -0.0024896434
    },
    {
      "\n": -0.0066408427
    },
    {
      " grab": -0.0034728355
    },
    {
      "('": -0.00091196294
    },
    {
      "mop": -0.0006259955
    },
    {
      "_": -0.002902925
    },
    {
      "buck": -0.0003372524
    },
    {
      "et": -9.5562886e-05
    },
    {
      "')": -0.0019087074
    },
    {
      "\n": -0.005283321
    },
    {
      " #": -0.5547558
    },
    {
      "('": -0.0014289829
    },
    {
      "mop": -0.02157164
    },
    {
      "_": -0.0061238185
    },
    {
      "buck": -0.0010261564
    },
    {
      "et": -0.0002095461
    },
    {
      "'": -0.0020957042
    },
    {
      " in": -0.016289923
    },
    {
      " '": -0.003520806
    },
    {
      "hands": -0.0055990326
    },
    {
      "')": -0.020151507
    },
    {
      "\n": -0.0036423581
    },
    {
      " else": -0.01800159
    },
    {
      ":": -0.002157825
    },
    {
      " grab": -0.0031998884
    },
    {
      "('": -0.0013863653
    },
    {
      "mop": -0.00037612757
    },
    {
      "_": -0.0013880371
    },
    {
      "buck": -0.0007846584
    },
    {
      "et": -0.00018593716
    },
    {
      "')": -0.0019567802
    },
    {
      "\n": -0.0046656677
    },
    {
      " #": -0.6447155
    },
    {
      " 3": -0.008653442
    },
    {
      ":": -0.0010073618
    },
    {
      " fill": -0.85253835
    },
    {
      " m": -0.42948917
    },
    {
      " m": -0.44715908
    },
    {
      "op": -9.0437854e-05
    },
    {
      " bucket": -0.011505884
    },
    {
      " with": -0.44240132
    },
    {
      " water": -0.14629348
    },
    {
      "\n": -0.0637
    },
    {
      " fill": -0.9485698
    },
    {
      "('": -0.4792299
    },
    {
      "('": -0.0061087687
    },
    {
      "mop": -0.010049081
    },
    {
      "_": -0.0013097875
    },
    {
      "buck": -0.0006617234
    },
    {
      "et": -0.00032681835
    },
    {
      "')": -0.13904923
    },
    {
      "\n": -0.007884533
    },
    {
      " #": -0.15430312
    },
    {
      " 4": -0.0045578224
    },
    {
      ":": -0.0007186854
    },
    {
      " m": -1.2732993
    },
    {
      " m": -0.27497536
    },
    {
      "op": -0.00010772499
    },
    {
      "\n": -0.1233025
    },
    {
      " find": -0.32917827
    },
    {
      "('": -0.0008345872
    },
    {
      "mop": -0.0009880884
    },
    {
      "')": -0.002346364
    },
    {
      "\n": -0.0032168112
    },
    {
      " grab": -0.30343562
    },
    {
      "('": -0.0006746054
    },
    {
      "close": -0.013924568
    },
    {
      "'": -0.0018225383
    },
    {
      " to": -0.00038495276
    },
    {
      " '": -0.0010817066
    },
    {
      "mop": -0.0004974163
    },
    {
      "')": -0.0051029753
    },
    {
      "\n": -0.0024567184
    },
    {
      " else": -0.0018300626
    },
    {
      ":": -0.00096070615
    },
    {
      " find": -0.0037923432
    },
    {
      "('": -0.0010241861
    },
    {
      "mop": -0.00033653717
    },
    {
      "')": -0.00201722
    },
    {
      "\n": -0.0053184363
    },
    {
      " grab": -0.006645702
    },
    {
      "('": -0.0008193153
    },
    {
      "mop": -0.00020334445
    },
    {
      "')": -0.0015421616
    },
    {
      "\n": -0.0031477485
    },
    {
      " assert": -0.27917653
    },
    {
      " 5": -0.007100201
    },
    {
      ":": -0.0008046404
    },
    {
      " m": -0.67662054
    },
    {
      " m": -0.060558576
    },
    {
      "op": -4.9782993e-05
    },
    {
      " to": -0.076707534
    },
    {
      " clean": -0.25734833
    },
    {
      " the": -0.9019288
    },
    {
      "\n": -0.030610546
    },
    {
      " wipe": -0.99600303
    },
    {
      "('": -0.009781259
    },
    {
      "floor": -0.1829476
    },
    {
      "')": -0.061869852
    },
    {
      "\n": -0.016358504
    },
    {
      " #": -0.15150593
    },
    {
      " 6": -0.003765003
    },
    {
      ":": -0.0013262617
    },
    {
      " put": -0.97486955
    },
    {
      " m": -0.2480206
    },
    {
      "op": -0.00026481107
    },
    {
      " back": -0.4812417
    },
    {
      " m": -0.35223752
    },
    {
      "op": -9.115311e-05
    },
    {
      " bucket": -0.03575928
    },
    {
      " back": -0.19094697
    },
    {
      "\n": -0.036658946
    },
    {
      " put": -0.263121
    },
    {
      "('": -0.0014754217
    },
    {
      "mop": -0.080879316
    },
    {
      "'": -0.06457745
    },
    {
      " in": -0.05570208
    },
    {
      " '": -0.0037863029
    },
    {
      "hands": -0.005068528
    },
    {
      "')": -0.02354376
    },
    {
      "\n": -0.0038528955
    },
    {
      " else": -0.01685914
    },
    {
      ":": -0.001918443
    },
    {
      " grab": -0.06286067
    },
    {
      "('": -0.0012042165
    },
    {
      "mop": -0.0004054651
    },
    {
      "')": -0.004774601
    },
    {
      "\n": -0.004412928
    },
    {
      " put": -0.25374895
    },
    {
      "obj": -0.55949754
    },
    {
      "back": -0.01614635
    },
    {
      "('": -0.0010136855
    },
    {
      "mop": -0.0005889
    },
    {
      "')": -0.09955202
    },
    {
      "\n": -0.0134762
    },
    {
      " assert": -0.1333798
    },
    {
      "('": -0.0005699937
    },
    {
      "mop": -0.0047763987
    },
    {
      "_": -0.0030470614
    },
    {
      "buck": -0.000773205
    },
    {
      "et": -9.21049e-05
    },
    {
      "'": -0.0018245695
    },
    {
      " in": -0.0017098656
    },
    {
      " '": -0.0015431152
    },
    {
      "hands": -0.0019019003
    },
    {
      "')": -0.0029669486
    },
    {
      "\n": -0.0021922924
    },
    {
      " else": -0.00059892103
    },
    {
      ":": -0.0016253833
    },
    {
      " grab": -0.004541058
    },
    {
      "('": -0.0009217446
    },
    {
      "mop": -0.00032002066
    },
    {
      "_": -0.00215914
    },
    {
      "buck": -0.00073115254
    },
    {
      "et": -0.0009393453
    },
    {
      "')": -0.0019094244
    },
    {
      "\n": -0.0073425686
    },
    {
      " put": -0.004465499
    },
    {
      "obj": -0.016962377
    },
    {
      "back": -0.0005180506
    },
    {
      "('": -0.00062957645
    },
    {
      "mop": -0.0002389362
    },
    {
      "_": -0.001081229
    },
    {
      "buck": -0.0004761286
    },
    {
      "et": -0.00035609488
    },
    {
      "')": -0.0017976969
    },
    {
      "\n": -0.17934795
    },
    {
      " #": -0.011225855
    },
    {
      " 7": -0.014078461
    },
    {
      ":": -0.002771302
    },
    {
      " Done": -0.3092366
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.325990915298462
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find phone\n find('phone')\n # 2: pick up phone\n grab('phone')\n # 3: done\n assert('close' to 'phone')\n else: find('phone')\n else: grab('phone')", <OpenAIObject at 0x7fd920061950> JSON: {
  "text_offset": [
    3346,
    3348,
    3350,
    3351,
    3356,
    3359,
    3367,
    3368,
    3373,
    3375,
    3382,
    3384,
    3385,
    3387,
    3389,
    3390,
    3395,
    3401,
    3402,
    3407,
    3409,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3430,
    3436,
    3437,
    3442,
    3444,
    3449,
    3451,
    3452,
    3454,
    3456,
    3457,
    3462,
    3463,
    3470,
    3472,
    3477,
    3478,
    3481,
    3483,
    3488,
    3490,
    3491,
    3496,
    3497,
    3502,
    3504,
    3509,
    3511,
    3512,
    3517,
    3518,
    3523,
    3525,
    3530
  ],
  "token_logprobs": [
    -0.018295784,
    -0.008297703,
    -0.0017960242,
    -0.82296187,
    -0.20260644,
    -0.4779218,
    -0.017162701,
    -0.0046868087,
    -0.004014284,
    -0.0027007137,
    -0.0009314108,
    -0.008589054,
    -0.0027723769,
    -0.0028749479,
    -0.00049264514,
    -0.03168741,
    -0.33225,
    -0.023136267,
    -0.54098976,
    -0.0010805127,
    -0.0011971729,
    -0.0023501283,
    -0.0061731176,
    -0.009370542,
    -0.0039336747,
    -0.0011670357,
    -1.0288334,
    -0.01946055,
    -0.58067966,
    -0.0178923,
    -0.7414497,
    -0.001114167,
    -0.00024871225,
    -0.0015331467,
    -0.11869925,
    -0.7262662,
    -0.007835226,
    -0.0010120138,
    -2.800615,
    -0.14294781,
    -0.25229678,
    -0.003029961,
    -1.6628232,
    -0.0042287903,
    -0.0011881017,
    -0.002920859,
    -0.0008620868,
    -0.0057810266,
    -0.0063237827,
    -0.0018652928,
    -0.0015591746,
    -0.011586864,
    -0.0021616481,
    -0.00036575546,
    -0.0026845194,
    -0.186083,
    -1.2877897,
    -0.0032855803,
    -0.029092921,
    -0.0018987342,
    -0.00027947655,
    -0.0019044074
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " phone",
    "\n",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pick",
    " up",
    " phone",
    "\n",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " done",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "phone",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018295784
    },
    {
      " 0": -0.008297703
    },
    {
      ":": -0.0017960242
    },
    {
      " find": -0.7380143
    },
    {
      " to": -0.20260644
    },
    {
      " bedroom": -0.4779218
    },
    {
      "\n": -0.017162701
    },
    {
      " walk": -0.0046868087
    },
    {
      "('": -0.004014284
    },
    {
      "bedroom": -0.0027007137
    },
    {
      "')": -0.0009314108
    },
    {
      "\n": -0.008589054
    },
    {
      " #": -0.0027723769
    },
    {
      " 1": -0.0028749479
    },
    {
      ":": -0.00049264514
    },
    {
      " find": -0.03168741
    },
    {
      " phone": -0.33225
    },
    {
      "\n": -0.023136267
    },
    {
      " find": -0.54098976
    },
    {
      "('": -0.0010805127
    },
    {
      "phone": -0.0011971729
    },
    {
      "')": -0.0023501283
    },
    {
      "\n": -0.0061731176
    },
    {
      " #": -0.009370542
    },
    {
      " 2": -0.0039336747
    },
    {
      ":": -0.0011670357
    },
    {
      " grab": -0.48590264
    },
    {
      " up": -0.01946055
    },
    {
      " phone": -0.58067966
    },
    {
      "\n": -0.0178923
    },
    {
      " grab": -0.7414497
    },
    {
      "('": -0.001114167
    },
    {
      "phone": -0.00024871225
    },
    {
      "')": -0.0015331467
    },
    {
      "\n": -0.11869925
    },
    {
      " #": -0.7262662
    },
    {
      " 3": -0.007835226
    },
    {
      ":": -0.0010120138
    },
    {
      " Done": -1.3574275
    },
    {
      "\n": -0.14294781
    },
    {
      " assert": -0.25229678
    },
    {
      "('": -0.003029961
    },
    {
      "phone": -0.2255195
    },
    {
      "'": -0.0042287903
    },
    {
      " to": -0.0011881017
    },
    {
      " '": -0.002920859
    },
    {
      "phone": -0.0008620868
    },
    {
      "')": -0.0057810266
    },
    {
      "\n": -0.0063237827
    },
    {
      " else": -0.0018652928
    },
    {
      ":": -0.0015591746
    },
    {
      " find": -0.011586864
    },
    {
      "('": -0.0021616481
    },
    {
      "phone": -0.00036575546
    },
    {
      "')": -0.0026845194
    },
    {
      "\n": -0.186083
    },
    {
      " grab": -0.50892687
    },
    {
      ":": -0.0032855803
    },
    {
      " grab": -0.029092921
    },
    {
      "('": -0.0018987342
    },
    {
      "phone": -0.00027947655
    },
    {
      "')": -0.0019044074
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.530794143676758
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: open toilet seat\n open('toilet_seat')\n # 3: sit on toilet\n sit('toilet')\n # 4: do your thing\n # 5: flush the toilet\n flush('toilet')\n # 6: close toilet seat\n close('toilet_seat')\n # 7: wash your hands\n find('sink')\n turnon('water')\n wash('hands')\n turnoff('water')\n # 8: Done", <OpenAIObject at 0x7fd9180fa360> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3367,
    3368,
    3373,
    3375,
    3379,
    3383,
    3385,
    3386,
    3388,
    3390,
    3391,
    3396,
    3403,
    3404,
    3409,
    3411,
    3413,
    3417,
    3419,
    3420,
    3422,
    3424,
    3425,
    3430,
    3437,
    3442,
    3443,
    3448,
    3450,
    3452,
    3456,
    3457,
    3461,
    3463,
    3464,
    3466,
    3468,
    3469,
    3473,
    3476,
    3483,
    3484,
    3488,
    3490,
    3492,
    3496,
    3498,
    3499,
    3501,
    3503,
    3504,
    3507,
    3512,
    3518,
    3519,
    3521,
    3523,
    3524,
    3530,
    3534,
    3541,
    3542,
    3548,
    3550,
    3552,
    3556,
    3558,
    3559,
    3561,
    3563,
    3564,
    3570,
    3577,
    3582,
    3583,
    3589,
    3591,
    3593,
    3597,
    3598,
    3602,
    3604,
    3605,
    3607,
    3609,
    3610,
    3615,
    3620,
    3626,
    3627,
    3632,
    3634,
    3635,
    3638,
    3640,
    3641,
    3646,
    3648,
    3650,
    3655,
    3657,
    3658,
    3663,
    3665,
    3670,
    3672,
    3673,
    3678,
    3681,
    3683,
    3688,
    3690,
    3691,
    3693,
    3695,
    3696
  ],
  "token_logprobs": [
    -0.015969189,
    -0.007833545,
    -0.0023936834,
    -0.12898284,
    -0.30113417,
    -0.5293138,
    -0.018712008,
    -0.004762387,
    -0.0037469934,
    -0.002608561,
    -0.00017282138,
    -0.0014874195,
    -0.006921087,
    -0.0018165065,
    -0.0031301675,
    -0.0004814367,
    -0.12097961,
    -0.04216989,
    -0.021960162,
    -0.29543874,
    -0.00089806155,
    -0.00068182364,
    -0.00020703992,
    -0.0015349359,
    -0.0047978414,
    -0.016248602,
    -0.0047005815,
    -0.00056498323,
    -1.7409226,
    -0.7795583,
    -1.7796158,
    -0.04852989,
    -0.70570976,
    -0.0029676666,
    -0.003738677,
    -0.00023702794,
    -0.6564822,
    -0.0028482291,
    -0.0025395984,
    -0.0064299568,
    -0.017458407,
    -0.005735345,
    -0.00062683,
    -0.3219653,
    -0.06639148,
    -0.27458522,
    -0.17606422,
    -0.30283263,
    -0.0009721014,
    -0.00034548063,
    -0.00024465634,
    -0.014883305,
    -0.014763709,
    -0.0068211043,
    -0.0045949467,
    -0.0013638621,
    -1.5919566,
    -0.75942427,
    -2.6535406,
    -0.060260102,
    -0.5399735,
    -0.08447155,
    -0.0011124962,
    -0.41056383,
    -0.92107767,
    -0.0041266186,
    -0.023225937,
    -0.04268114,
    -0.004163607,
    -0.0004467892,
    -0.00019893186,
    -0.004225978,
    -0.015360146,
    -0.0026175831,
    -0.0025553133,
    -0.0010945352,
    -0.6463593,
    -0.73578584,
    -0.010998753,
    -0.017486062,
    -0.006474832,
    -0.00064848276,
    -0.00018283867,
    -1.163433e-05,
    -0.001801997,
    -0.00045883397,
    -0.0016127257,
    -0.18373927,
    -0.01604453,
    -0.0079529025,
    -0.0014819265,
    -2.5400198,
    -0.6632839,
    -0.038552076,
    -0.02177331,
    -0.59007776,
    -0.0014329234,
    -0.24425356,
    -0.00016268677,
    -0.0025759898,
    -0.0053082495,
    -2.6404076,
    -0.10238627,
    -0.002148327,
    -2.660531,
    -0.2576911,
    -0.005304534,
    -0.5398228,
    -0.014724513,
    -0.025608622,
    -0.0026711915,
    -0.16423729,
    -0.3102596,
    -0.0044998047,
    -0.00083184446,
    -0.0010708455,
    -0.004413347,
    -0.33311024,
    -0.06481184,
    -0.004119497,
    -0.00243007,
    -0.7733019
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " toilet",
    " seat",
    "\n",
    " open",
    "('",
    "to",
    "ilet",
    "_",
    "seat",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " toilet",
    "\n",
    " sit",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " do",
    " your",
    " thing",
    "\n",
    " #",
    " 5",
    ":",
    " flush",
    " the",
    " toilet",
    "\n",
    " flush",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " close",
    " toilet",
    " seat",
    "\n",
    " close",
    "('",
    "to",
    "ilet",
    "_",
    "seat",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " wash",
    " your",
    " hands",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " turn",
    "on",
    "('",
    "water",
    "')",
    "\n",
    " wash",
    "('",
    "hands",
    "')",
    "\n",
    " turn",
    "off",
    "('",
    "water",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.015969189
    },
    {
      " 0": -0.007833545
    },
    {
      ":": -0.0023936834
    },
    {
      " walk": -0.12898284
    },
    {
      " to": -0.30113417
    },
    {
      " bathroom": -0.5293138
    },
    {
      "\n": -0.018712008
    },
    {
      " walk": -0.004762387
    },
    {
      "('": -0.0037469934
    },
    {
      "bath": -0.002608561
    },
    {
      "room": -0.00017282138
    },
    {
      "')": -0.0014874195
    },
    {
      "\n": -0.006921087
    },
    {
      " #": -0.0018165065
    },
    {
      " 1": -0.0031301675
    },
    {
      ":": -0.0004814367
    },
    {
      " find": -0.12097961
    },
    {
      " toilet": -0.04216989
    },
    {
      "\n": -0.021960162
    },
    {
      " find": -0.29543874
    },
    {
      "('": -0.00089806155
    },
    {
      "to": -0.00068182364
    },
    {
      "ilet": -0.00020703992
    },
    {
      "')": -0.0015349359
    },
    {
      "\n": -0.0047978414
    },
    {
      " #": -0.016248602
    },
    {
      " 2": -0.0047005815
    },
    {
      ":": -0.00056498323
    },
    {
      " sit": -0.543597
    },
    {
      " toilet": -0.7795583
    },
    {
      "\n": -1.0302767
    },
    {
      "\n": -0.04852989
    },
    {
      " open": -0.70570976
    },
    {
      "('": -0.0029676666
    },
    {
      "to": -0.003738677
    },
    {
      "ilet": -0.00023702794
    },
    {
      "_": -0.6564822
    },
    {
      "seat": -0.0028482291
    },
    {
      "')": -0.0025395984
    },
    {
      "\n": -0.0064299568
    },
    {
      " #": -0.017458407
    },
    {
      " 3": -0.005735345
    },
    {
      ":": -0.00062683
    },
    {
      " sit": -0.3219653
    },
    {
      " on": -0.06639148
    },
    {
      " toilet": -0.27458522
    },
    {
      "\n": -0.17606422
    },
    {
      " sit": -0.30283263
    },
    {
      "('": -0.0009721014
    },
    {
      "to": -0.00034548063
    },
    {
      "ilet": -0.00024465634
    },
    {
      "')": -0.014883305
    },
    {
      "\n": -0.014763709
    },
    {
      " #": -0.0068211043
    },
    {
      " 4": -0.0045949467
    },
    {
      ":": -0.0013638621
    },
    {
      " flush": -1.4858468
    },
    {
      " your": -0.75942427
    },
    {
      " business": -0.19554035
    },
    {
      "\n": -0.060260102
    },
    {
      " #": -0.5399735
    },
    {
      " 5": -0.08447155
    },
    {
      ":": -0.0011124962
    },
    {
      " flush": -0.41056383
    },
    {
      " the": -0.92107767
    },
    {
      " toilet": -0.0041266186
    },
    {
      "\n": -0.023225937
    },
    {
      " flush": -0.04268114
    },
    {
      "('": -0.004163607
    },
    {
      "to": -0.0004467892
    },
    {
      "ilet": -0.00019893186
    },
    {
      "')": -0.004225978
    },
    {
      "\n": -0.015360146
    },
    {
      " #": -0.0026175831
    },
    {
      " 6": -0.0025553133
    },
    {
      ":": -0.0010945352
    },
    {
      " close": -0.6463593
    },
    {
      " the": -0.68447435
    },
    {
      " seat": -0.010998753
    },
    {
      "\n": -0.017486062
    },
    {
      " close": -0.006474832
    },
    {
      "('": -0.00064848276
    },
    {
      "to": -0.00018283867
    },
    {
      "ilet": -1.163433e-05
    },
    {
      "_": -0.001801997
    },
    {
      "seat": -0.00045883397
    },
    {
      "')": -0.0016127257
    },
    {
      "\n": -0.18373927
    },
    {
      " #": -0.01604453
    },
    {
      " 7": -0.0079529025
    },
    {
      ":": -0.0014819265
    },
    {
      " stand": -0.3059795
    },
    {
      " your": -0.6632839
    },
    {
      " hands": -0.038552076
    },
    {
      "\n": -0.02177331
    },
    {
      " find": -0.59007776
    },
    {
      "('": -0.0014329234
    },
    {
      "s": -0.24425356
    },
    {
      "ink": -0.00016268677
    },
    {
      "')": -0.0025759898
    },
    {
      "\n": -0.0053082495
    },
    {
      " wash": -1.0083523
    },
    {
      "on": -0.10238627
    },
    {
      "('": -0.002148327
    },
    {
      "f": -0.37620828
    },
    {
      "')": -0.2576911
    },
    {
      "\n": -0.005304534
    },
    {
      " wash": -0.5398228
    },
    {
      "('": -0.014724513
    },
    {
      "hands": -0.025608622
    },
    {
      "')": -0.0026711915
    },
    {
      "\n": -0.16423729
    },
    {
      " turn": -0.3102596
    },
    {
      "off": -0.0044998047
    },
    {
      "('": -0.00083184446
    },
    {
      "water": -0.0010708455
    },
    {
      "')": -0.004413347
    },
    {
      "\n": -0.33311024
    },
    {
      " #": -0.06481184
    },
    {
      " 8": -0.004119497
    },
    {
      ":": -0.00243007
    },
    {
      " Done": -0.7733019
    }
  ]
})]
experiment time2 on environment scene2
Clean toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', '[Wipe] <toilet> (1)', '[Putback] <mop> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', "assert('mop' in 'hands')", 'else: [Grab] <mop> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', '[Wipe] <toilet> (1)', '[Putback] <mop> (1)']}
Wash monitor {'script': ['[Find] <monitor> (1)', '[Find] <cloth> (1)', '[Grab] <cloth> (1)', '[Wipe] <monitor> (1)', '[Putobjback] <cloth> (1)', '[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Pull] <sheets> (1)', '[Pull] <pillow> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Find] <vacuum> (1)', '[Plug] <vacuum> (1)', '[Turnto] <vacuum> (1)', '[Lookat] <vacuum> (1)', '[Vacuum] <floor> (1)', '[Find] <mop> (1)', '[Wash] <floor> (1)', '[Find] <dustpan> (1)', '[Sweep] <floor> (1)', '[Find] <trash_can> (1)', '[Throwaway] <trash> (1)'], 'assert_script': ['[Find] <monitor> (1)', '[Find] <cloth> (1)', '[Grab] <cloth> (1)', "assert('close' to 'monitor')", 'else: [Find] <monitor> (1)', '[Wipe] <monitor> (1)', '[Putobjback] <cloth> (1)', '[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Pull] <sheets> (1)', '[Pull] <pillow> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Find] <vacuum> (1)', '[Plug] <vacuum> (1)', '[Turnto] <vacuum> (1)', '[Lookat] <vacuum> (1)', '[Vacuum] <floor> (1)', '[Find] <mop> (1)', '[Wash] <floor> (1)', '[Find] <dustpan> (1)', '[Sweep] <floor> (1)', '[Find] <trash_can> (1)', '[Throwaway] <trash> (1)']}
Turn on TV {'script': ['[Find] <remote_control> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)'], 'assert_script': ['[Find] <remote_control> (1)', '[Find] <television> (1)', "assert('close' to 'tv')", 'else: [Find] <tv> (1)', "assert('remote_control' in 'hands'):", 'else: [Find] <remote_control> (1)', "assert('tv' is 'switchoff')", 'else: [Switchoff] <tv> (1)', '[Switchon] <television> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']}
Turn on computer {'script': ['[Walk] <desk> (1)', '[Find] <computer> (1)', '[Plugin] <computer> (1)', '[Find] <monitor> (1)', '[Plugin] <monitor> (1)', '[Walk] <kitchen> (1)', '[Find] <coffe_maker> (1)', '[Plugin] <coffe_maker> (1)', '[Find] <coffee_filter> (1)', '[Putin] <coffee_filter> (1) <coffe_maker> (1)', '[Pour] <coffe_maker> (1)', '[Switchon] <coffe_maker> (1)'], 'assert_script': ['[Walk] <desk> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Plugin] <computer> (1)', '[Find] <monitor> (1)', "assert('close' to 'monitor')", 'else: [Find] <monitor> (1)', '[Plugin] <monitor> (1)', '[Walk] <kitchen> (1)', '[Find] <coffe_maker> (1)', "assert('close' to 'coffe_maker')", 'else: [Find] <coffe_maker> (1)', '[Plugin] <coffe_maker> (1)', '[Find] <coffee_filter> (1)', "assert('close' to 'coffe_maker')", 'else: [Find] <coffe_maker> (1)', "assert('close' to 'coffee_filter')", 'else: [Find] <coffee_filter> (1)', '[Putin] <coffee_filter> (1) <coffe_maker> (1)', "assert('close' to 'coffe_maker')", 'else: [Find] <coffe_maker> (1)', '[Pour] <coffe_maker> (1)', '[Switchon] <coffe_maker> (1)']}
Shave {'script': ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', '[Turnto] <electric_shaver> (1)', '[Pointat] <electric_shaver> (1)', '[Switchon] <electric_shaver> (1)', '[Turnto] <face> (1)', '[Lookat] <face> (1)', '[Shave] <face> (1)', '[Switchoff] <electric_shaver> (1)', '[Putobjback] <electric_shaver> (1)', '[Find] <coffee_maker> (1)', '[Grab] <coffee_filter> (1)', '[Turnto] <coffee_filter> (1)', '[Pointat] <coffee_filter> (1)', '[Fill] <coffee_filter> (1)', '[Turnto] <coffee_filter> (1)', '[Lookat] <coffee_filter> (1)', '[Putobjback] <coffee_filter> (1)', '[Switchon] <coffee_maker> (1)', '[Find] <cup> (1)', '[Grab] <cup> (1)', '[Pour] <coffee> (1)', '[Putobjback] <cup> (1)'], 'assert_script': ['[Find] <electric_shaver> (1)', "assert('close' to 'electric_shaver')", 'else: [Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Turnto] <electric_shaver> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Pointat] <electric_shaver> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Switchon] <electric_shaver> (1)', '[Turnto] <face> (1)', '[Lookat] <face> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Shave] <face> (1)', "assert('electric_shaver' in 'hands')", 'else: [Grab] <electric_shaver> (1)', '[Switchoff] <electric_shaver> (1)', '[Putobjback] <electric_shaver> (1)', '[Find] <coffee_maker> (1)', "assert('close' to 'coffee_filter')", 'else: [Find] <coffee_filter> (1)', '[Grab] <coffee_filter> (1)', "assert('coffee_filter' in 'hands')", 'else: [Grab] <coffee_filter> (1)', '[Turnto] <coffee_filter> (1)', "assert('coffee_filter' in 'hands')", 'else: [Grab] <coffee_filter> (1)', '[Pointat] <coffee_filter> (1)', "assert('coffee_filter' in 'hands')", 'else: [Grab] <coffee_filter> (1)', '[Fill] <coffee_filter> (1)', '[Turnto] <coffee_filter> (1)', '[Lookat] <coffee_filter> (1)', "assert('coffee_filter' in 'hands')", 'else: [Grab] <coffee_filter> (1)', '[Putobjback] <coffee_filter> (1)', '[Switchon] <coffee_maker> (1)', '[Find] <cup> (1)', "assert('close' to 'cup')", 'else: [Find] <cup> (1)', '[Grab] <cup> (1)', "assert('cup' in 'hands')", 'else: [Grab] <cup> (1)', '[Pour] <coffee> (1)', '[Putobjback] <cup> (1)']}
Hang up jacket {'script': ['[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Turnto] <hanger> (1)', '[Pointat] <hanger> (1)', '[Find] <jacket> (1)', '[Grab] <jacket> (1)', '[Turnto] <jacket> (1)', '[Lookat] <jacket> (1)', '[Hang] <jacket> (1) <hanger> (1)'], 'assert_script': ['[Find] <hanger> (1)', "assert('close' to 'hanger')", 'else: [Find] <hanger> (1)', '[Grab] <hanger> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Turnto] <hanger> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Pointat] <hanger> (1)', '[Find] <jacket> (1)', '[Grab] <jacket> (1)', "assert('jacket' in 'hands')", 'else: [Grab] <jacket> (1)', '[Turnto] <jacket> (1)', '[Lookat] <jacket> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Hang] <jacket> (1) <hanger> (1)']}
Read newspaper {'script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <desk> (1)', '[Puton] <newspaper> (1)', '[Sit] <desk> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)'], 'assert_script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <desk> (1)', "assert('close' to 'desk')", 'else: [Find] <desk> (1)', '[Puton] <newspaper> (1)', '[Sit] <desk> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)']}
Sit {'script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)']}
Sleep {'script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)'], 'assert_script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', '[Sit] <bed> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)']}
Put alarm clock in bedroom {'script': ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Putin] <alarm_clock> (1)'], 'assert_script': ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', "assert('alarm_clock' in 'hands')", 'else: [Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Putin] <alarm_clock> (1)']}
Sit in chair {'script': ['[Walk] <living_room> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Lookat] <chair> (1)'], 'assert_script': ['[Walk] <living_room> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Lookat] <chair> (1)']}
Open bathroom window {'script': ['[Walk] <bathroom> (1)', '[Find] <window> (1)', '[Open] <window> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <window> (1)', "assert('close' to 'window')", 'else: [Find] <window> (1)', '[Open] <window> (1)']}
Use computer {'script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <desk> (1)', '[Sit] <desk> (1)', '[Open] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)', '[Use] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <desk> (1)', '[Sit] <desk> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Open] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Use] <computer> (1)']}
Wash face {'script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <faucet> (1)', '[Switchon] <faucet> (1)', '[Turnto] <faucet> (1)', '[Lookat] <faucet> (1)', '[Switchoff] <faucet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', "assert('close' to 'sink')", 'else: [Find] <sink> (1)', '[Turnto] <faucet> (1)', '[Switchon] <faucet> (1)', '[Turnto] <faucet> (1)', '[Lookat] <faucet> (1)', '[Switchoff] <faucet> (1)']}
Computer work {'script': ['[Walk] <home_office> (1)', '[Find] <desk> (1)', '[Sit] <chair> (1)', '[Find] <computer> (1)', '[Plugin] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)', '[Switchon] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Find] <desk> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Find] <computer> (1)', '[Plugin] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)']}
Take nap {'script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Lie] <bed> (1)'], 'assert_script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', 'else: [Turnto] <bed> (1)', '[Lie] <bed> (1)']}
Do work on computer {'script': ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', '[Plugin] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <mouse> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Plugin] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', "assert('close' to 'mouse')", 'else: [Find] <mouse> (1)', '[Touch] <mouse> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)']}
Read news {'script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putobjback] <newspaper> (1)'], 'assert_script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', "assert('close' to 'newspaper')", 'else: [Find] <newspaper> (1)', '[Putobjback] <newspaper> (1)']}
Hand washing {'script': ['[Find] <sink> (1)', '[Switchon] <sink> (1)', '[Pour] <soap> (1)', '[Grab] <sponge> (1)', '[Wash] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', '[Switchoff] <sink> (1)'], 'assert_script': ['[Find] <sink> (1)', '[Switchon] <sink> (1)', '[Pour] <soap> (1)', '[Grab] <sponge> (1)', "assert('close' to 'sponge')", 'else: [Grab] <sponge> (1)', '[Wash] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', '[Switchoff] <sink> (1)']}
Clean bathroom {'script': ['[Walk] <bathroom> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Fillup] <mop_bucket> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', '[Wipe] <floor> (1)', '[Putobjback] <mop> (1)', '[Putobjback] <mop_bucket> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <mop_bucket> (1)', "assert('close' to 'mop_bucket')", 'else: [Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', "assert('mop_bucket' in 'hands')", 'else: [Grab] <mop_bucket> (1)', '[Fillup] <mop_bucket> (1)', '[Find] <mop> (1)', "assert('close' to 'mop')", 'else: [Find] <mop> (1)', '[Grab] <mop> (1)', '[Wipe] <floor> (1)', "assert('mop' in 'hands')", 'else: [Grab] <mop> (1)', '[Putobjback] <mop> (1)', "assert('mop_bucket' in 'hands')", 'else: [Grab] <mop_bucket> (1)', '[Putobjback] <mop_bucket> (1)']}
Pick up phone {'script': ['[Walk] <bedroom> (1)', '[Find] <phone> (1)', '[Grab] <phone> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <phone> (1)', '[Grab] <phone> (1)', "assert('close' to 'phone')", 'else: [Find] <phone> (1)', 'else: [Grab] <phone> (1)']}
Go to toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Open] <toilet_seat> (1)', '[Sit] <toilet> (1)', '[Flush] <toilet> (1)', '[Close] <toilet_seat> (1)', '[Find] <sink> (1)', '[Turnon] <water> (1)', '[Wash] <hands> (1)', '[Turnoff] <water> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Open] <toilet_seat> (1)', '[Sit] <toilet> (1)', '[Flush] <toilet> (1)', '[Close] <toilet_seat> (1)', '[Find] <sink> (1)', '[Turnon] <water> (1)', '[Wash] <hands> (1)', '[Turnoff] <water> (1)']}
experiment time2 on environment scene2
Clean toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', '[Wipe] <toilet> (1)', '[Putback] <mop> (1)']
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "PUTBACK". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Wash monitor
script before ['[Find] <monitor> (1)', '[Find] <cloth> (1)', '[Grab] <cloth> (1)', '[Wipe] <monitor> (1)', '[Putobjback] <cloth> (1)', '[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Pull] <sheets> (1)', '[Pull] <pillow> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Find] <vacuum> (1)', '[Plug] <vacuum> (1)', '[Turnto] <vacuum> (1)', '[Lookat] <vacuum> (1)', '[Vacuum] <floor> (1)', '[Find] <mop> (1)', '[Wash] <floor> (1)', '[Find] <dustpan> (1)', '[Sweep] <floor> (1)', '[Find] <trash_can> (1)', '[Throwaway] <trash> (1)']
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('cloth', 1) does not exist in the environment  be deleted
illegal action ('cloth', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('cloth', 1) does not exist in the environment  be deleted
illegal action ('sheets', 1) does not exist in the environment  be deleted
illegal action ('vacuum', 1) does not exist in the environment  be deleted
illegal action Unknown action "PLUG"  be deleted
illegal action ('vacuum', 1) does not exist in the environment  be deleted
illegal action ('vacuum', 1) does not exist in the environment  be deleted
illegal action Unknown action "VACUUM"  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('dustpan', 1) does not exist in the environment  be deleted
illegal action Unknown action "SWEEP"  be deleted
illegal action ('trash_can', 1) does not exist in the environment  be deleted
illegal action Unknown action "THROWAWAY"  be deleted
illegal action Unknown action "END"  be deleted
Turn on TV
script before ['[Find] <remote_control> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']
illegal action ('tv', 1) does not exist in the environment  be deleted
illegal action ('tv', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Turn on computer
script before ['[Walk] <desk> (1)', '[Find] <computer> (1)', '[Plugin] <computer> (1)', '[Find] <monitor> (1)', '[Plugin] <monitor> (1)', '[Walk] <kitchen> (1)', '[Find] <coffe_maker> (1)', '[Plugin] <coffe_maker> (1)', '[Find] <coffee_filter> (1)', '[Putin] <coffee_filter> (1) <coffe_maker> (1)', '[Pour] <coffe_maker> (1)', '[Switchon] <coffe_maker> (1)']
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action 'kitchen'  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Shave
script before ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', '[Turnto] <electric_shaver> (1)', '[Pointat] <electric_shaver> (1)', '[Switchon] <electric_shaver> (1)', '[Turnto] <face> (1)', '[Lookat] <face> (1)', '[Shave] <face> (1)', '[Switchoff] <electric_shaver> (1)', '[Putobjback] <electric_shaver> (1)', '[Find] <coffee_maker> (1)', '[Grab] <coffee_filter> (1)', '[Turnto] <coffee_filter> (1)', '[Pointat] <coffee_filter> (1)', '[Fill] <coffee_filter> (1)', '[Turnto] <coffee_filter> (1)', '[Lookat] <coffee_filter> (1)', '[Putobjback] <coffee_filter> (1)', '[Switchon] <coffee_maker> (1)', '[Find] <cup> (1)', '[Grab] <cup> (1)', '[Pour] <coffee> (1)', '[Putobjback] <cup> (1)']
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('face', 1) does not exist in the environment  be deleted
illegal action ('face', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action Unknown action "SHAVE"  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('coffee_maker', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action Unknown action "FILL"  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_filter', 1) does not exist in the environment  be deleted
illegal action ('coffee_maker', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Hang up jacket
script before ['[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Turnto] <hanger> (1)', '[Pointat] <hanger> (1)', '[Find] <jacket> (1)', '[Grab] <jacket> (1)', '[Turnto] <jacket> (1)', '[Lookat] <jacket> (1)', '[Hang] <jacket> (1) <hanger> (1)']
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action Unknown action "HANG"  be deleted
illegal action Unknown action "END"  be deleted
Read newspaper
script before ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <desk> (1)', '[Puton] <newspaper> (1)', '[Sit] <desk> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)']
illegal action Wrong number of parameters for "PUTBACK". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Sit
script before ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)']
illegal action Unknown action "END"  be deleted
Sleep
script before ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)']
illegal action Unknown action "END"  be deleted
Put alarm clock in bedroom
script before ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Putin] <alarm_clock> (1)']
illegal action Wrong number of parameters for "PUTIN". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Sit in chair
script before ['[Walk] <living_room> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Lookat] <chair> (1)']
illegal action 'living_room'  be deleted
illegal action Unknown action "END"  be deleted
Open bathroom window
script before ['[Walk] <bathroom> (1)', '[Find] <window> (1)', '[Open] <window> (1)']
illegal action Unknown action "END"  be deleted
Use computer
script before ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <desk> (1)', '[Sit] <desk> (1)', '[Open] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)', '[Use] <computer> (1)']
illegal action Unknown action "USE"  be deleted
illegal action Unknown action "END"  be deleted
Wash face
script before ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <faucet> (1)', '[Switchon] <faucet> (1)', '[Turnto] <faucet> (1)', '[Lookat] <faucet> (1)', '[Switchoff] <faucet> (1)']
illegal action Unknown action "END"  be deleted
Computer work
script before ['[Walk] <home_office> (1)', '[Find] <desk> (1)', '[Sit] <chair> (1)', '[Find] <computer> (1)', '[Plugin] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)', '[Switchon] <computer> (1)']
illegal action Unknown action "END"  be deleted
Take nap
script before ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Lie] <bed> (1)']
illegal action Unknown action "END"  be deleted
Do work on computer
script before ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', '[Plugin] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <mouse> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)']
illegal action Unknown action "END"  be deleted
Read news
script before ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putobjback] <newspaper> (1)']
illegal action Unknown action "END"  be deleted
Hand washing
script before ['[Find] <sink> (1)', '[Switchon] <sink> (1)', '[Pour] <soap> (1)', '[Grab] <sponge> (1)', '[Wash] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', '[Switchoff] <sink> (1)']
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Clean bathroom
script before ['[Walk] <bathroom> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Fillup] <mop_bucket> (1)', '[Find] <mop> (1)', '[Grab] <mop> (1)', '[Wipe] <floor> (1)', '[Putobjback] <mop> (1)', '[Putobjback] <mop_bucket> (1)']
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action Unknown action "FILLUP"  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Pick up phone
script before ['[Walk] <bedroom> (1)', '[Find] <phone> (1)', '[Grab] <phone> (1)']
illegal action Unknown action "END"  be deleted
Go to toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Open] <toilet_seat> (1)', '[Sit] <toilet> (1)', '[Flush] <toilet> (1)', '[Close] <toilet_seat> (1)', '[Find] <sink> (1)', '[Turnon] <water> (1)', '[Wash] <hands> (1)', '[Turnoff] <water> (1)']
illegal action ('toilet_seat', 1) does not exist in the environment  be deleted
illegal action Unknown action "FLUSH"  be deleted
illegal action ('toilet_seat', 1) does not exist in the environment  be deleted
illegal action Unknown action "TURNON"  be deleted
illegal action ('hands', 1) does not exist in the environment  be deleted
illegal action Unknown action "TURNOFF"  be deleted
illegal action Unknown action "END"  be deleted
Args info:
language_planner_result_file: language_planner.json
retry_times: 0
n_shots: 1
instruction: False
step_by_step_generation_prompt_path: None
step_by_step_generation_result_file: None
object_topk: 5
grounded_deciding_prompt_path: None
grounded_deciding_result_file: default_gd.json
prompt_choices_sequence: False
dataset_split: validation
dataset: ./data/val.json
retrieval_dataset: ./data/train.json
example_idx_file: None
api_keys_file: key.txt
save_dir: results/
plan_generation_result_file: default_pg.json
processed_plan_generation_result_file: None
graph_dict_path: None
plan_generation_prompt_path: None
graph_num: 2
exp_times: 2
n_processes: 1
seed: 42
engine: text-davinci-003
n_parallel_prompts: 1
max_generation_tokens: 512
max_api_total_tokens: 4096
temperature: 0.4
sampling_n: 20
top_p: 1.0
stop_tokens: ['\n\n']
verbose: False
experiment time2 on environment scene2
['[WALK] <bathroom> (1)', '[FIND] <toilet> (15)', '[TURNTO] <toilet> (15)', '[LOOKAT] <toilet> (15)', '[WIPE] <toilet> (15)']
execute failed at [WIPE] <toilet> (15)
['[WALK] <bedroom> (162)', '[FIND] <bed> (197)', '[PULL] <pillow> (208)', '[TURNTO] <bed> (197)', '[LOOKAT] <bed> (197)', '[WASH] <floor> (172)']
execute failed at [PULL] <pillow> (208)
['[FIND] <remote_control> (1000)', '[FIND] <television> (281)', '[SWITCHON] <television> (281)', '[TURNTO] <television> (281)', '[LOOKAT] <television> (281)']
next step------- assert('remote_control' in 'hands'):else: [Find] <remote_control> (1)
prompt You see remote_control is clean
remote_control is inside home_office
chair is close to remote_control
remote_control is close to chair
remote_control is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('remote_control' in 'hands'):, 
prediction False
execute failed at [SWITCHON] <television> (281)
['[WALK] <desk> (272)', '[FIND] <computer> (276)', '[PLUGIN] <computer> (276)', '[FIND] <coffe_maker> (130)', '[PLUGIN] <coffe_maker> (130)', '[SWITCHON] <coffe_maker> (130)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off
wall is close to computer
wall is facing computer
computer is close to keyboard
computer is close to mousepad
computer is close to desk
computer is close to mouse
character is close to computer
computer is close to cpuscreen
mousepad is close to computer
chair is close to computer
computer is close to character
computer is close to floor
mouse is close to computer
desk is close to computer
computer is close to chair
floor is facing computer
cpuscreen is close to computer
mousepad is facing computer
keyboard is close to computer
orchid is facing computer
walllamp is close to computer
table is facing computer
computer is inside home_office
ceilinglamp is facing computer
computer is close to wall
mat is facing computer
computer is close to walllamp
chair is facing computer
ceiling is facing computer
floor is close to computer
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction False
execute failed at [PLUGIN] <computer> (276)
['[FIND] <cup> (2072)', '[GRAB] <cup> (2072)', '[PUTOBJBACK] <cup> (2072)']
next step------- assert('close' to 'cup')else: [Find] <cup> (1)
prompt You see cup is clean
cup is inside bedroom
cup is close to filing_cabinet
cup is close to character
character is close to cup
filing_cabinet is close to cup
cup is inside filing_cabinet
cup is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'cup'), 
prediction False
execute failed at [GRAB] <cup> (2072)
['[FIND] <hanger> (294)', '[GRAB] <hanger> (294)', '[TURNTO] <hanger> (294)', '[POINTAT] <hanger> (294)']
next step------- assert('close' to 'hanger')else: [Find] <hanger> (1)
prompt You see 
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'hanger'), 
prediction False
execute failed at [GRAB] <hanger> (294)
['[FIND] <newspaper> (2020)', '[GRAB] <newspaper> (2020)', '[FIND] <desk> (193)', '[PUTON] <newspaper> (2020)', '[SIT] <desk> (193)', '[LOOKAT] <newspaper> (2020)', '[READ] <newspaper> (2020)']
next step------- assert('close' to 'desk')else: [Find] <desk> (1)
prompt You see desk is clean
floor is close to desk
chair is close to desk
cpuscreen is on desk
mouse is on desk
desk is close to wall
mousepad is on desk
character is close to desk
cpuscreen is close to desk
desk is close to doorjamb
desk is on floor
computer is close to desk
desk is close to mouse
mouse is close to desk
mousepad is close to desk
desk is close to mousepad
desk is close to cpuscreen
desk is inside bedroom
keyboard is close to desk
desk is close to computer
desk is close to keyboard
wall is close to desk
desk is close to character
desk is close to chair
desk is close to floor
doorjamb is close to desk
keyboard is on desk
desk is inside bedroom
You have Currently, you are standing in the bedroom, and holding newspaper in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'desk'), 
prediction True
execute failed at [PUTON] <newspaper> (2020)
['[FIND] <chair> (194)', '[WALK] <chair> (194)', '[SIT] <chair> (194)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
chair is close to character
chair is close to desk
tablelamp is close to chair
chair is close to floor
wall is close to chair
keyboard is close to chair
chair is close to mouse
ceiling is close to chair
chair is close to keyboard
nightstand is close to chair
chair is close to computer
mouse is close to chair
chair is close to mousepad
chair is close to tablelamp
chair is close to ceiling
mousepad is close to chair
chair is inside bedroom
computer is close to chair
chair is close to nightstand
floor is close to chair
desk is close to chair
character is close to chair
chair is facing computer
chair is close to wall
chair is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
end of script
gcr, sr 0.3333333333333333 0
['[FIND] <bed> (197)', '[TURNTO] <bed> (197)', '[LOOKAT] <bed> (197)', '[SIT] <bed> (197)', '[FIND] <bed> (197)', '[TURNTO] <bed> (197)', '[LOOKAT] <bed> (197)']
next step------- assert('close' to 'bed')else: [Find] <bed> (1)
prompt You see bed is clean
floor is close to bed
bed is close to floor
bed is facing computer
bed is close to wall
character is facing bed
bed is close to tablelamp
bed is close to character
nightstand is close to bed
wall is close to bed
drawing is close to bed
bed is close to drawing
character is close to bed
bed is close to nightstand
tablelamp is close to bed
bed is inside bedroom
bed is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction False
next step------- assert('close' to 'bed')else: [Find] <bed> (1)
prompt You see bed is clean
floor is close to bed
bed is close to floor
bed is facing computer
bed is close to wall
character is facing bed
bed is close to tablelamp
bed is close to character
nightstand is close to bed
wall is close to bed
drawing is close to bed
bed is close to drawing
character is on bed
character is close to bed
bed is close to nightstand
tablelamp is close to bed
bed is inside bedroom
bed is inside bedroom
You have Currently, you are sitting on bed in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction False
end of script
gcr, sr 0.6666666666666666 0
['[FIND] <alarm_clock> (1000)', '[GRAB] <alarm_clock> (1000)', '[WALK] <bedroom> (162)']
next step------- assert('alarm_clock' in 'hands')else: [Grab] <alarm_clock> (1)
prompt You see alarm_clock is plugged_in, clean, off
alarm_clock is close to character
character is close to alarm_clock
alarm_clock is inside bedroom
character is holds_rh alarm_clock
alarm_clock is inside bedroom
You have Currently, you are standing in the bedroom, and holding alarm_clock in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('alarm_clock' in 'hands'), 
prediction False
end of script
gcr, sr 0.25 0
['[FIND] <chair> (1000)', '[SIT] <chair> (1000)', '[LOOKAT] <chair> (1000)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
chair is close to character
character is close to chair
chair is inside dining_room
chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
execute failed at [SIT] <chair> (1000)
['[WALK] <bathroom> (1)', '[FIND] <window> (1000)', '[OPEN] <window> (1000)']
next step------- assert('close' to 'window')else: [Find] <window> (1)
prompt You see window is closed, clean
window is close to character
window is inside bathroom
character is close to window
window is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'window'), 
prediction True
end of script
gcr, sr 1.0 1
['[WALK] <home_office> (241)', '[FIND] <computer> (276)', '[SWITCHON] <computer> (276)', '[FIND] <desk> (272)', '[SIT] <desk> (272)', '[OPEN] <computer> (276)', '[TURNTO] <computer> (276)', '[LOOKAT] <computer> (276)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off
wall is close to computer
wall is facing computer
computer is close to keyboard
computer is close to mousepad
computer is close to desk
computer is close to mouse
character is close to computer
computer is close to cpuscreen
mousepad is close to computer
chair is close to computer
computer is close to character
computer is close to floor
mouse is close to computer
desk is close to computer
computer is close to chair
floor is facing computer
cpuscreen is close to computer
mousepad is facing computer
keyboard is close to computer
orchid is facing computer
walllamp is close to computer
table is facing computer
computer is inside home_office
ceilinglamp is facing computer
computer is close to wall
mat is facing computer
computer is close to walllamp
chair is facing computer
ceiling is facing computer
floor is close to computer
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction False
execute failed at [SWITCHON] <computer> (276)
['[WALK] <bathroom> (1)', '[FIND] <sink> (19)', '[TURNTO] <faucet> (20)', '[SWITCHON] <faucet> (20)', '[TURNTO] <faucet> (20)', '[LOOKAT] <faucet> (20)', '[SWITCHOFF] <faucet> (20)']
next step------- assert('close' to 'sink')else: [Find] <sink> (1)
prompt You see 
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'sink'), 
prediction False
execute failed at [TURNTO] <faucet> (20)
['[WALK] <home_office> (241)', '[FIND] <desk> (272)', '[SIT] <chair> (271)', '[FIND] <computer> (276)', '[PLUGIN] <computer> (276)', '[TURNTO] <computer> (276)', '[LOOKAT] <computer> (276)', '[SWITCHON] <computer> (276)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
mat is close to chair
chair is close to desk
chair is close to walllamp
cpuscreen is close to chair
chair is close to floor
wall is close to chair
keyboard is close to chair
walllamp is close to chair
chair is close to mouse
ceiling is close to chair
chair is close to mat
chair is inside home_office
chair is close to keyboard
chair is close to computer
mouse is close to chair
chair is close to mousepad
chair is close to ceiling
chair is close to cpuscreen
mousepad is close to chair
computer is close to chair
floor is close to chair
desk is close to chair
chair is facing computer
chair is close to wall
chair is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
execute failed at [PLUGIN] <computer> (276)
['[FIND] <bed> (197)', '[TURNTO] <bed> (197)', '[LOOKAT] <bed> (197)', '[LIE] <bed> (197)']
next step------- assert('close' to 'bed')else: [Find] <bed> (1)else: [Turnto] <bed> (1)
prompt You see bed is clean
floor is close to bed
bed is close to floor
bed is facing computer
bed is close to wall
character is facing bed
bed is close to tablelamp
bed is close to character
nightstand is close to bed
wall is close to bed
drawing is close to bed
bed is close to drawing
character is close to bed
bed is close to nightstand
tablelamp is close to bed
bed is inside bedroom
bed is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction True
end of script
gcr, sr 1.0 1
['[WALK] <home_office> (241)', '[WALK] <computer> (276)', '[FIND] <computer> (276)', '[PLUGIN] <computer> (276)', '[FIND] <chair> (271)', '[SIT] <chair> (271)', '[TOUCH] <mouse> (280)', '[TURNTO] <computer> (276)', '[LOOKAT] <computer> (276)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off
wall is close to computer
wall is facing computer
computer is close to keyboard
computer is close to mousepad
computer is close to desk
computer is close to mouse
character is close to computer
computer is close to cpuscreen
mousepad is close to computer
chair is close to computer
computer is close to character
computer is close to floor
mouse is close to computer
desk is close to computer
computer is close to chair
floor is facing computer
cpuscreen is close to computer
mousepad is facing computer
keyboard is close to computer
orchid is facing computer
walllamp is close to computer
table is facing computer
computer is inside home_office
ceilinglamp is facing computer
computer is close to wall
mat is facing computer
computer is close to walllamp
chair is facing computer
ceiling is facing computer
floor is close to computer
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction False
execute failed at [PLUGIN] <computer> (276)
['[FIND] <newspaper> (1000)', '[GRAB] <newspaper> (1000)', '[TURNTO] <newspaper> (1000)', '[LOOKAT] <newspaper> (1000)', '[READ] <newspaper> (1000)', '[PUTOBJBACK] <newspaper> (1000)']
next step------- assert('close' to 'newspaper')else: [Find] <newspaper> (1)
prompt You see newspaper is closed, clean
character is holds_rh newspaper
newspaper is close to character
character is facing newspaper
newspaper is inside home_office
character is close to newspaper
newspaper is inside home_office
You have Currently, you are standing in the home_office, and holding newspaper in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'newspaper'), 
prediction False
end of script
gcr, sr 0.25 0
['[FIND] <sink> (120)', '[SWITCHON] <sink> (120)', '[SWITCHOFF] <sink> (120)']
execute failed at [SWITCHON] <sink> (120)
['[WALK] <bathroom> (1)', '[WIPE] <floor> (10)']
execute failed at [WIPE] <floor> (10)
['[WALK] <bedroom> (162)', '[FIND] <phone> (71)', '[GRAB] <phone> (71)']
next step------- assert('close' to 'phone')else: [Find] <phone> (1)else: [Grab] <phone> (1)
prompt You see phone is plugged_in, clean, off
phone is close to character
character is holds_rh phone
character is close to phone
phone is inside dining_room
phone is inside dining_room
You have Currently, you are standing in the dining_room, and holding phone in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'phone'), 
prediction False
end of script
gcr, sr 1.0 1
['[WALK] <bathroom> (1)', '[FIND] <toilet> (15)', '[SIT] <toilet> (15)', '[FIND] <sink> (19)']
execute failed at [FIND] <sink> (19)
experiment time3 on environment scene2
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 21.075642824172974
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find mop\n find('mop_bucket')\n # 2: grab mop\n grab('mop_bucket')\n # 3: pour water into mop\n pour('mop_bucket')\n # 4: wash the toilet\n turnto('toilet')\n lookat('toilet')\n assert('close' to 'toilet')\n else: find('toilet')\n wash('toilet')\n # 5: put mop back\n putobjback('mop_bucket')", <OpenAIObject at 0x7feec8790630> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3367,
    3368,
    3373,
    3375,
    3379,
    3383,
    3385,
    3386,
    3388,
    3390,
    3391,
    3396,
    3398,
    3400,
    3401,
    3406,
    3408,
    3411,
    3412,
    3416,
    3418,
    3420,
    3421,
    3423,
    3425,
    3426,
    3431,
    3433,
    3435,
    3436,
    3441,
    3443,
    3446,
    3447,
    3451,
    3453,
    3455,
    3456,
    3458,
    3460,
    3461,
    3466,
    3472,
    3477,
    3479,
    3481,
    3482,
    3487,
    3489,
    3492,
    3493,
    3497,
    3499,
    3501,
    3502,
    3504,
    3506,
    3507,
    3512,
    3516,
    3523,
    3524,
    3528,
    3530,
    3531,
    3533,
    3535,
    3539,
    3541,
    3542,
    3547,
    3549,
    3551,
    3553,
    3557,
    3559,
    3560,
    3567,
    3569,
    3574,
    3575,
    3578,
    3580,
    3582,
    3586,
    3588,
    3589,
    3594,
    3595,
    3600,
    3602,
    3604,
    3608,
    3610,
    3611,
    3616,
    3618,
    3620,
    3624,
    3626,
    3627,
    3629,
    3631,
    3632,
    3636,
    3638,
    3640,
    3645,
    3646,
    3650,
    3653,
    3657,
    3659,
    3662,
    3663,
    3667,
    3669
  ],
  "token_logprobs": [
    -0.0187994,
    -0.008143614,
    -0.0021362633,
    -0.30222678,
    -0.22069967,
    -0.29429016,
    -0.02353186,
    -0.0051812213,
    -0.003936009,
    -0.0017908899,
    -0.00010021203,
    -0.0015846664,
    -0.0071508675,
    -0.0035389895,
    -0.0035759583,
    -0.000826832,
    -0.11722852,
    -1.9650264,
    -0.00021813008,
    -1.0324667,
    -0.15224266,
    -0.0012714727,
    -0.0011576689,
    -0.85538715,
    -0.0011480007,
    -0.00073437026,
    -0.0029523617,
    -0.0073356037,
    -0.036811862,
    -0.0048346138,
    -0.0009049231,
    -0.1671676,
    -0.12969564,
    -6.289782e-05,
    -0.06959679,
    -0.6098708,
    -0.0011158369,
    -0.00070747134,
    -0.021319283,
    -0.0003838799,
    -0.00017520743,
    -0.002884155,
    -0.0046057263,
    -0.32342243,
    -0.006541844,
    -0.0008387032,
    -1.2899588,
    -0.7105151,
    -1.579579,
    -0.46074715,
    -2.2245786e-05,
    -1.2005038,
    -0.36700886,
    -0.0054583643,
    -0.7853345,
    -0.008397713,
    -0.00047326574,
    -0.00014349136,
    -0.044471793,
    -0.007210782,
    -0.028377553,
    -0.0055906414,
    -0.0007006726,
    -2.0847683,
    -0.6596898,
    -0.26479498,
    -0.1207382,
    -1.4112822,
    -7.24364e-05,
    -0.00036277244,
    -0.00061597634,
    -0.0049344026,
    -0.0001625685,
    -0.0017993686,
    -0.0050603803,
    -0.87458646,
    -0.000731987,
    -0.00050003984,
    -0.00061156094,
    -0.00015672446,
    -0.0013131291,
    -0.0036489991,
    -0.46034396,
    -0.0010358217,
    -0.27276087,
    -0.0037841487,
    -0.0004352194,
    -0.0011877441,
    -0.010078222,
    -0.00083500484,
    -0.005096325,
    -0.003139556,
    -0.001280663,
    -0.0015607271,
    -0.026044227,
    -0.0015614424,
    -0.0007158225,
    -6.563869e-05,
    -0.0011746744,
    -0.0056505213,
    -0.5458268,
    -0.0010048547,
    -0.007785666,
    -0.00015875288,
    -0.0026497957,
    -0.010245554,
    -0.027630832,
    -0.0066455817,
    -0.0011813575,
    -1.3554856,
    -0.37518936,
    -0.00016340296,
    -0.07492388,
    -0.037318215,
    -0.33747405,
    -0.48088852,
    -0.0028772203,
    -0.0014031371,
    -0.0009877308,
    -0.0042724893,
    -0.0009642852,
    -8.578871e-05,
    -0.002231599
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " m",
    "op",
    "\n",
    " find",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " m",
    "op",
    "\n",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " water",
    " into",
    " m",
    "op",
    "\n",
    " pour",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " the",
    " toilet",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " wash",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " m",
    "op",
    " back",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.0187994
    },
    {
      " 0": -0.008143614
    },
    {
      ":": -0.0021362633
    },
    {
      " walk": -0.30222678
    },
    {
      " to": -0.22069967
    },
    {
      " bathroom": -0.29429016
    },
    {
      "\n": -0.02353186
    },
    {
      " walk": -0.0051812213
    },
    {
      "('": -0.003936009
    },
    {
      "bath": -0.0017908899
    },
    {
      "room": -0.00010021203
    },
    {
      "')": -0.0015846664
    },
    {
      "\n": -0.0071508675
    },
    {
      " #": -0.0035389895
    },
    {
      " 1": -0.0035759583
    },
    {
      ":": -0.000826832
    },
    {
      " find": -0.11722852
    },
    {
      " toilet": -0.3449083
    },
    {
      "op": -0.00021813008
    },
    {
      "\n": -1.0324667
    },
    {
      " find": -0.15224266
    },
    {
      "('": -0.0012714727
    },
    {
      "mop": -0.0011576689
    },
    {
      "')": -0.5555596
    },
    {
      "buck": -0.0011480007
    },
    {
      "et": -0.00073437026
    },
    {
      "')": -0.0029523617
    },
    {
      "\n": -0.0073356037
    },
    {
      " #": -0.036811862
    },
    {
      " 2": -0.0048346138
    },
    {
      ":": -0.0009049231
    },
    {
      " grab": -0.1671676
    },
    {
      " m": -0.12969564
    },
    {
      "op": -6.289782e-05
    },
    {
      "\n": -0.06959679
    },
    {
      " grab": -0.6098708
    },
    {
      "('": -0.0011158369
    },
    {
      "mop": -0.00070747134
    },
    {
      "_": -0.021319283
    },
    {
      "buck": -0.0003838799
    },
    {
      "et": -0.00017520743
    },
    {
      "')": -0.002884155
    },
    {
      "\n": -0.0046057263
    },
    {
      " #": -0.32342243
    },
    {
      " 3": -0.006541844
    },
    {
      ":": -0.0008387032
    },
    {
      " pour": -1.2899588
    },
    {
      " water": -0.7105151
    },
    {
      " in": -0.69452065
    },
    {
      " m": -0.46074715
    },
    {
      "op": -2.2245786e-05
    },
    {
      " bucket": -0.40341416
    },
    {
      " pour": -0.36700886
    },
    {
      "('": -0.0054583643
    },
    {
      "water": -0.631854
    },
    {
      "_": -0.008397713
    },
    {
      "buck": -0.00047326574
    },
    {
      "et": -0.00014349136
    },
    {
      "')": -0.044471793
    },
    {
      "\n": -0.007210782
    },
    {
      " #": -0.028377553
    },
    {
      " 4": -0.0055906414
    },
    {
      ":": -0.0007006726
    },
    {
      " wipe": -0.95978254
    },
    {
      " the": -0.6596898
    },
    {
      " toilet": -0.26479498
    },
    {
      "\n": -0.1207382
    },
    {
      " wash": -0.88668317
    },
    {
      "nt": -7.24364e-05
    },
    {
      "o": -0.00036277244
    },
    {
      "('": -0.00061597634
    },
    {
      "to": -0.0049344026
    },
    {
      "ilet": -0.0001625685
    },
    {
      "')": -0.0017993686
    },
    {
      "\n": -0.0050603803
    },
    {
      " wash": -0.77481586
    },
    {
      "at": -0.000731987
    },
    {
      "('": -0.00050003984
    },
    {
      "to": -0.00061156094
    },
    {
      "ilet": -0.00015672446
    },
    {
      "')": -0.0013131291
    },
    {
      "\n": -0.0036489991
    },
    {
      " assert": -0.46034396
    },
    {
      "('": -0.0010358217
    },
    {
      "close": -0.27276087
    },
    {
      "'": -0.0037841487
    },
    {
      " to": -0.0004352194
    },
    {
      " '": -0.0011877441
    },
    {
      "to": -0.010078222
    },
    {
      "ilet": -0.00083500484
    },
    {
      "')": -0.005096325
    },
    {
      "\n": -0.003139556
    },
    {
      " else": -0.001280663
    },
    {
      ":": -0.0015607271
    },
    {
      " find": -0.026044227
    },
    {
      "('": -0.0015614424
    },
    {
      "to": -0.0007158225
    },
    {
      "ilet": -6.563869e-05
    },
    {
      "')": -0.0011746744
    },
    {
      "\n": -0.0056505213
    },
    {
      " wash": -0.5458268
    },
    {
      "('": -0.0010048547
    },
    {
      "to": -0.007785666
    },
    {
      "ilet": -0.00015875288
    },
    {
      "')": -0.0026497957
    },
    {
      "\n": -0.010245554
    },
    {
      " #": -0.027630832
    },
    {
      " 5": -0.0066455817
    },
    {
      ":": -0.0011813575
    },
    {
      " wipe": -0.54419583
    },
    {
      " m": -0.37518936
    },
    {
      "op": -0.00016340296
    },
    {
      " back": -0.07492388
    },
    {
      "\n": -0.037318215
    },
    {
      " put": -0.33747405
    },
    {
      "obj": -0.48088852
    },
    {
      "back": -0.0028772203
    },
    {
      "('": -0.0014031371
    },
    {
      "mop": -0.0009877308
    },
    {
      "_": -0.0042724893
    },
    {
      "buck": -0.0009642852
    },
    {
      "et": -8.578871e-05
    },
    {
      "')": -0.002231599
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.135690927505493
[(" # 0: walk to computer\n walk('computer')\n # 1: find monitor\n find('monitor')\n # 2: grab cloth\n grab('cloth')\n # 3: wipe the monitor\n assert('close' to 'monitor')\n else: find('monitor')\n wipe('monitor')\n # 4: put the cloth back\n putback('cloth')", <OpenAIObject at 0x7feec8790bd0> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3367,
    3368,
    3373,
    3375,
    3383,
    3385,
    3386,
    3388,
    3390,
    3391,
    3396,
    3404,
    3405,
    3410,
    3412,
    3419,
    3421,
    3422,
    3424,
    3426,
    3427,
    3432,
    3438,
    3439,
    3444,
    3446,
    3451,
    3453,
    3454,
    3456,
    3458,
    3459,
    3464,
    3468,
    3476,
    3477,
    3484,
    3486,
    3491,
    3492,
    3495,
    3497,
    3504,
    3506,
    3507,
    3512,
    3513,
    3518,
    3520,
    3527,
    3529,
    3530,
    3535,
    3537,
    3544,
    3546,
    3547,
    3549,
    3551,
    3552,
    3556,
    3560,
    3566,
    3571,
    3572,
    3576,
    3580,
    3582,
    3587
  ],
  "token_logprobs": [
    -0.025892764,
    -0.008898651,
    -0.0026289963,
    -1.5827901,
    -0.18676658,
    -1.1585133,
    -0.35359782,
    -0.02813126,
    -0.0040964554,
    -0.030544179,
    -0.004262671,
    -0.007945814,
    -0.015364261,
    -0.0038359042,
    -0.0011883412,
    -0.1526637,
    -0.19146526,
    -0.016843563,
    -0.08540011,
    -0.0009950692,
    -0.054644752,
    -0.0024273219,
    -0.00547874,
    -0.0072655347,
    -0.005170437,
    -0.0009862984,
    -0.3848086,
    -1.4932144,
    -0.147143,
    -0.8292437,
    -0.0012359635,
    -0.018671742,
    -0.0017705295,
    -0.005321012,
    -0.07112152,
    -0.0061626816,
    -0.0010683412,
    -0.37044603,
    -0.95071894,
    -0.06955385,
    -0.083674885,
    -1.0365677,
    -0.0020745604,
    -0.32047155,
    -0.0052196267,
    -0.00069601886,
    -0.0020366933,
    -0.027284816,
    -0.010673623,
    -0.0049513546,
    -0.0017844995,
    -0.0018637412,
    -0.0081660915,
    -0.0018913309,
    -0.0013732346,
    -0.0029373558,
    -0.0059305513,
    -0.1328026,
    -0.0013873208,
    -0.10245351,
    -0.1642656,
    -0.03047308,
    -0.41575536,
    -0.008685129,
    -0.0014858679,
    -0.5732171,
    -1.1696131,
    -0.008375956,
    -0.05888266,
    -0.027148657,
    -0.5379295,
    -0.5480502,
    -0.003100691,
    -0.00642534,
    -0.006403263
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " computer",
    "\n",
    " walk",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " monitor",
    "\n",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " cloth",
    "\n",
    " grab",
    "('",
    "cloth",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wipe",
    " the",
    " monitor",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "monitor",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " wipe",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " the",
    " cloth",
    " back",
    "\n",
    " put",
    "back",
    "('",
    "cloth",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.025892764
    },
    {
      " 0": -0.008898651
    },
    {
      ":": -0.0026289963
    },
    {
      " find": -0.4406489
    },
    {
      " to": -0.18676658
    },
    {
      " computer": -1.1585133
    },
    {
      "\n": -0.35359782
    },
    {
      " walk": -0.02813126
    },
    {
      "('": -0.0040964554
    },
    {
      "computer": -0.030544179
    },
    {
      "')": -0.004262671
    },
    {
      "\n": -0.007945814
    },
    {
      " #": -0.015364261
    },
    {
      " 1": -0.0038359042
    },
    {
      ":": -0.0011883412
    },
    {
      " find": -0.1526637
    },
    {
      " monitor": -0.19146526
    },
    {
      "\n": -0.016843563
    },
    {
      " find": -0.08540011
    },
    {
      "('": -0.0009950692
    },
    {
      "monitor": -0.054644752
    },
    {
      "')": -0.0024273219
    },
    {
      "\n": -0.00547874
    },
    {
      " #": -0.0072655347
    },
    {
      " 2": -0.005170437
    },
    {
      ":": -0.0009862984
    },
    {
      " grab": -0.3848086
    },
    {
      " cloth": -1.4932144
    },
    {
      "\n": -0.147143
    },
    {
      " grab": -0.8292437
    },
    {
      "('": -0.0012359635
    },
    {
      "cloth": -0.018671742
    },
    {
      "')": -0.0017705295
    },
    {
      "\n": -0.005321012
    },
    {
      " #": -0.07112152
    },
    {
      " 3": -0.0061626816
    },
    {
      ":": -0.0010683412
    },
    {
      " wipe": -0.37044603
    },
    {
      " monitor": -0.68879807
    },
    {
      " monitor": -0.06955385
    },
    {
      "\n": -0.083674885
    },
    {
      " wipe": -0.5942535
    },
    {
      "('": -0.0020745604
    },
    {
      "close": -0.32047155
    },
    {
      "'": -0.0052196267
    },
    {
      " to": -0.00069601886
    },
    {
      " '": -0.0020366933
    },
    {
      "monitor": -0.027284816
    },
    {
      "')": -0.010673623
    },
    {
      "\n": -0.0049513546
    },
    {
      " else": -0.0017844995
    },
    {
      ":": -0.0018637412
    },
    {
      " find": -0.0081660915
    },
    {
      "('": -0.0018913309
    },
    {
      "monitor": -0.0013732346
    },
    {
      "')": -0.0029373558
    },
    {
      "\n": -0.0059305513
    },
    {
      " wipe": -0.1328026
    },
    {
      "('": -0.0013873208
    },
    {
      "monitor": -0.10245351
    },
    {
      "')": -0.1642656
    },
    {
      "\n": -0.03047308
    },
    {
      " #": -0.41575536
    },
    {
      " 4": -0.008685129
    },
    {
      ":": -0.0014858679
    },
    {
      " put": -0.5732171
    },
    {
      " cloth": -0.75826377
    },
    {
      " cloth": -0.008375956
    },
    {
      " back": -0.05888266
    },
    {
      "\n": -0.027148657
    },
    {
      " put": -0.5379295
    },
    {
      "back": -0.5480502
    },
    {
      "('": -0.003100691
    },
    {
      "cloth": -0.00642534
    },
    {
      "')": -0.006403263
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.88067102432251
[(" # 0: walk to living room\n walk('livingroom')\n # 1: find television\n find('television')\n # 2: turn on tv\n assert('close' to 'television')\n else: find('television')\n switchon('television')\n # 3: find remote control\n find('remote_control')\n # 4: use remote control\n assert('remote_control' in 'hands')\n else: find('remote_control')\n switchon('remote_control')\n # 5: look at the television\n turnto('television')\n lookat('television')", <OpenAIObject at 0x7feec87cc400> JSON: {
  "text_offset": [
    3343,
    3345,
    3347,
    3348,
    3353,
    3356,
    3363,
    3368,
    3369,
    3374,
    3376,
    3382,
    3386,
    3388,
    3389,
    3391,
    3393,
    3394,
    3399,
    3410,
    3411,
    3416,
    3418,
    3420,
    3428,
    3430,
    3431,
    3433,
    3435,
    3436,
    3441,
    3444,
    3447,
    3448,
    3455,
    3457,
    3462,
    3463,
    3466,
    3468,
    3470,
    3478,
    3480,
    3481,
    3486,
    3487,
    3492,
    3494,
    3496,
    3504,
    3506,
    3507,
    3514,
    3516,
    3518,
    3520,
    3528,
    3530,
    3531,
    3533,
    3535,
    3536,
    3541,
    3548,
    3556,
    3557,
    3562,
    3564,
    3570,
    3571,
    3578,
    3580,
    3581,
    3583,
    3585,
    3586,
    3590,
    3597,
    3605,
    3606,
    3613,
    3615,
    3621,
    3622,
    3629,
    3630,
    3633,
    3635,
    3640,
    3642,
    3643,
    3648,
    3649,
    3654,
    3656,
    3662,
    3663,
    3670,
    3672,
    3673,
    3680,
    3682,
    3684,
    3690,
    3691,
    3698,
    3700,
    3701,
    3703,
    3705,
    3706,
    3711,
    3714,
    3718,
    3729,
    3730,
    3734,
    3736,
    3737,
    3739,
    3741,
    3749,
    3751,
    3752,
    3757,
    3759,
    3761,
    3763,
    3771
  ],
  "token_logprobs": [
    -0.01497902,
    -0.0073953476,
    -0.0015967836,
    -0.29068264,
    -0.2456783,
    -0.5113394,
    -0.05608839,
    -0.018864816,
    -0.003932,
    -0.003403456,
    -0.010797011,
    -2.0575168,
    -0.0021106973,
    -0.007169115,
    -0.0014867033,
    -0.0025607527,
    -0.0006472888,
    -0.025696928,
    -1.2892971,
    -0.019821864,
    -0.29412234,
    -0.0007290039,
    -0.0046705194,
    -0.0007851362,
    -0.0016464569,
    -0.0054013096,
    -0.0032849826,
    -0.004966449,
    -0.00054065336,
    -0.23327877,
    -0.010197983,
    -0.6972733,
    -0.46853346,
    -0.21824715,
    -0.0008648324,
    -0.018307563,
    -0.0032802583,
    -0.0009318886,
    -0.0013538345,
    -0.6456931,
    -0.0010177423,
    -0.0044754343,
    -0.005737623,
    -0.0013960944,
    -0.0013787248,
    -0.0044600484,
    -0.0015367877,
    -0.0021727008,
    -0.0016738017,
    -0.0042609954,
    -0.0051451516,
    -0.25186953,
    -0.0027010732,
    -0.00058048975,
    -0.004907927,
    -0.0009112458,
    -0.0017427023,
    -0.82028925,
    -0.07829641,
    -0.007789691,
    -0.0006404911,
    -0.48004103,
    -0.33411422,
    -0.17292032,
    -0.05001308,
    -0.06672874,
    -0.00088278874,
    -0.0027356783,
    -0.010484773,
    -0.0035290013,
    -0.0020143553,
    -0.0058816248,
    -0.044886712,
    -0.0052380217,
    -0.00067472464,
    -2.4229255,
    -0.17491111,
    -0.092423305,
    -1.776156,
    -0.324807,
    -0.0010083135,
    -1.3314044,
    -0.005993272,
    -0.0037449594,
    -0.0028913883,
    -0.028251914,
    -0.007847165,
    -0.01346611,
    -0.27978095,
    -0.0058068656,
    -0.0033133873,
    -0.0025033269,
    -0.18860707,
    -0.0016001271,
    -0.00089340867,
    -0.00071307976,
    -0.006191231,
    -0.0057614218,
    -0.007477253,
    -4.3092566,
    -0.045750886,
    -0.0019030942,
    -0.442722,
    -0.0020387245,
    -0.0019366575,
    -0.0025695355,
    -0.4573846,
    -0.28551617,
    -0.008492389,
    -0.0008569562,
    -1.0062681,
    -0.0044556176,
    -0.53293914,
    -0.15488937,
    -0.0112572005,
    -0.06672085,
    -2.9636725e-05,
    -0.00022468844,
    -0.00040737336,
    -0.0022150497,
    -0.0006008294,
    -0.0011919212,
    -0.0055049327,
    -0.0070191044,
    -0.0006196737,
    -0.0007495219,
    -0.0009187635,
    -0.0006963783,
    -0.0018424217
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " television",
    "\n",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " tv",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "te",
    "levision",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " remote",
    " control",
    "\n",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " use",
    " remote",
    " control",
    "\n",
    " assert",
    "('",
    "remote",
    "_",
    "control",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " look",
    " at",
    " the",
    " television",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "te",
    "levision",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01497902
    },
    {
      " 0": -0.0073953476
    },
    {
      ":": -0.0015967836
    },
    {
      " walk": -0.29068264
    },
    {
      " to": -0.2456783
    },
    {
      " living": -0.5113394
    },
    {
      " room": -0.05608839
    },
    {
      "\n": -0.018864816
    },
    {
      " walk": -0.003932
    },
    {
      "('": -0.003403456
    },
    {
      "living": -0.010797011
    },
    {
      "_": -0.17491594
    },
    {
      "')": -0.0021106973
    },
    {
      "\n": -0.007169115
    },
    {
      " #": -0.0014867033
    },
    {
      " 1": -0.0025607527
    },
    {
      ":": -0.0006472888
    },
    {
      " find": -0.025696928
    },
    {
      " tv": -0.6530122
    },
    {
      "\n": -0.019821864
    },
    {
      " find": -0.29412234
    },
    {
      "('": -0.0007290039
    },
    {
      "te": -0.0046705194
    },
    {
      "levision": -0.0007851362
    },
    {
      "')": -0.0016464569
    },
    {
      "\n": -0.0054013096
    },
    {
      " #": -0.0032849826
    },
    {
      " 2": -0.004966449
    },
    {
      ":": -0.00054065336
    },
    {
      " turn": -0.23327877
    },
    {
      " on": -0.010197983
    },
    {
      " tv": -0.6972733
    },
    {
      "\n": -0.46853346
    },
    {
      " assert": -0.21824715
    },
    {
      "('": -0.0008648324
    },
    {
      "close": -0.018307563
    },
    {
      "'": -0.0032802583
    },
    {
      " to": -0.0009318886
    },
    {
      " '": -0.0013538345
    },
    {
      "te": -0.6456931
    },
    {
      "levision": -0.0010177423
    },
    {
      "')": -0.0044754343
    },
    {
      "\n": -0.005737623
    },
    {
      " else": -0.0013960944
    },
    {
      ":": -0.0013787248
    },
    {
      " find": -0.0044600484
    },
    {
      "('": -0.0015367877
    },
    {
      "te": -0.0021727008
    },
    {
      "levision": -0.0016738017
    },
    {
      "')": -0.0042609954
    },
    {
      "\n": -0.0051451516
    },
    {
      " switch": -0.25186953
    },
    {
      "on": -0.0027010732
    },
    {
      "('": -0.00058048975
    },
    {
      "te": -0.004907927
    },
    {
      "levision": -0.0009112458
    },
    {
      "')": -0.0017427023
    },
    {
      "<|endoftext|>": -0.59881175
    },
    {
      " #": -0.07829641
    },
    {
      " 3": -0.007789691
    },
    {
      ":": -0.0006404911
    },
    {
      " find": -0.48004103
    },
    {
      " remote": -0.33411422
    },
    {
      " control": -0.17292032
    },
    {
      "\n": -0.05001308
    },
    {
      " find": -0.06672874
    },
    {
      "('": -0.00088278874
    },
    {
      "remote": -0.0027356783
    },
    {
      "_": -0.010484773
    },
    {
      "control": -0.0035290013
    },
    {
      "')": -0.0020143553
    },
    {
      "\n": -0.0058816248
    },
    {
      " #": -0.044886712
    },
    {
      " 4": -0.0052380217
    },
    {
      ":": -0.00067472464
    },
    {
      " touch": -0.71737164
    },
    {
      " remote": -0.17491111
    },
    {
      " control": -0.092423305
    },
    {
      " to": -0.20681901
    },
    {
      " assert": -0.324807
    },
    {
      "('": -0.0010083135
    },
    {
      "close": -0.3113926
    },
    {
      "_": -0.005993272
    },
    {
      "control": -0.0037449594
    },
    {
      "'": -0.0028913883
    },
    {
      " in": -0.028251914
    },
    {
      " '": -0.007847165
    },
    {
      "hands": -0.01346611
    },
    {
      "')": -0.27978095
    },
    {
      "\n": -0.0058068656
    },
    {
      " else": -0.0033133873
    },
    {
      ":": -0.0025033269
    },
    {
      " find": -0.18860707
    },
    {
      "('": -0.0016001271
    },
    {
      "remote": -0.00089340867
    },
    {
      "_": -0.00071307976
    },
    {
      "control": -0.006191231
    },
    {
      "')": -0.0057614218
    },
    {
      "\n": -0.007477253
    },
    {
      " touch": -0.45161247
    },
    {
      "on": -0.045750886
    },
    {
      "('": -0.0019030942
    },
    {
      "remote": -0.442722
    },
    {
      "_": -0.0020387245
    },
    {
      "control": -0.0019366575
    },
    {
      "')": -0.0025695355
    },
    {
      "\n": -0.4573846
    },
    {
      " #": -0.28551617
    },
    {
      " 5": -0.008492389
    },
    {
      ":": -0.0008569562
    },
    {
      " look": -1.0062681
    },
    {
      " at": -0.0044556176
    },
    {
      " the": -0.53293914
    },
    {
      " television": -0.15488937
    },
    {
      "\n": -0.0112572005
    },
    {
      " tur": -0.06672085
    },
    {
      "nt": -2.9636725e-05
    },
    {
      "o": -0.00022468844
    },
    {
      "('": -0.00040737336
    },
    {
      "te": -0.0022150497
    },
    {
      "levision": -0.0006008294
    },
    {
      "')": -0.0011919212
    },
    {
      "\n": -0.0055049327
    },
    {
      " look": -0.0070191044
    },
    {
      "at": -0.0006196737
    },
    {
      "('": -0.0007495219
    },
    {
      "te": -0.0009187635
    },
    {
      "levision": -0.0006963783
    },
    {
      "')": -0.0018424217
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.6792070865631104
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find desk\n walk('desk')\n find('desk')\n # 2: find computer\n find('computer')\n # 3: switch on the computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')", <OpenAIObject at 0x7feec8808a90> JSON: {
  "text_offset": [
    3349,
    3351,
    3353,
    3354,
    3359,
    3362,
    3370,
    3371,
    3376,
    3378,
    3385,
    3387,
    3388,
    3390,
    3392,
    3393,
    3398,
    3403,
    3404,
    3409,
    3411,
    3414,
    3415,
    3417,
    3418,
    3423,
    3425,
    3428,
    3429,
    3431,
    3432,
    3434,
    3436,
    3437,
    3442,
    3451,
    3452,
    3457,
    3459,
    3467,
    3469,
    3470,
    3472,
    3474,
    3475,
    3482,
    3485,
    3489,
    3498,
    3499,
    3506,
    3508,
    3513,
    3514,
    3517,
    3519,
    3527,
    3529,
    3530,
    3535,
    3536,
    3541,
    3543,
    3551,
    3553,
    3554,
    3561,
    3563,
    3565,
    3573
  ],
  "token_logprobs": [
    -0.01649544,
    -0.008303953,
    -0.0018431388,
    -0.27993274,
    -0.13013668,
    -1.3937571,
    -0.01785753,
    -0.0040653325,
    -0.0035449124,
    -0.0093517685,
    -0.00095688767,
    -0.003984721,
    -0.0034563264,
    -0.0035389895,
    -0.0005970119,
    -0.023771524,
    -0.4353772,
    -0.006329961,
    -0.12975909,
    -0.00033391267,
    -0.001090837,
    -0.00016531031,
    -0.00068850396,
    -0.0020827423,
    -0.0072867293,
    -0.00051017915,
    -0.00075298175,
    -0.00026493028,
    -0.0009530693,
    -0.004687767,
    -0.0015290863,
    -0.003971795,
    -0.00059975556,
    -0.049859446,
    -0.4054746,
    -0.018667795,
    -0.016992142,
    -0.0006460958,
    -0.0027363955,
    -0.0011934736,
    -0.0053839935,
    -0.0050216787,
    -0.006114704,
    -0.00084550463,
    -2.7420413,
    -0.03504017,
    -0.3423144,
    -0.013113666,
    -0.013358945,
    -0.23734666,
    -0.0008714536,
    -0.009424452,
    -0.0023898592,
    -0.00042090964,
    -0.0016497403,
    -0.002221564,
    -0.0035064502,
    -0.0036704736,
    -0.0015261032,
    -0.0009429253,
    -0.0031105562,
    -0.0012625199,
    -0.0008248027,
    -0.0021906807,
    -0.005090035,
    -0.12588087,
    -0.002738129,
    -0.0008622069,
    -0.0010116551,
    -0.001975953
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " desk",
    "\n",
    " walk",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " switch",
    " on",
    " the",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01649544
    },
    {
      " 0": -0.008303953
    },
    {
      ":": -0.0018431388
    },
    {
      " walk": -0.27993274
    },
    {
      " to": -0.13013668
    },
    {
      " home": -0.9112217
    },
    {
      "\n": -0.01785753
    },
    {
      " walk": -0.0040653325
    },
    {
      "('": -0.0035449124
    },
    {
      "bedroom": -0.0093517685
    },
    {
      "')": -0.00095688767
    },
    {
      "\n": -0.003984721
    },
    {
      " #": -0.0034563264
    },
    {
      " 1": -0.0035389895
    },
    {
      ":": -0.0005970119
    },
    {
      " find": -0.023771524
    },
    {
      " desk": -0.4353772
    },
    {
      "\n": -0.006329961
    },
    {
      " walk": -0.12975909
    },
    {
      "('": -0.00033391267
    },
    {
      "des": -0.001090837
    },
    {
      "k": -0.00016531031
    },
    {
      "')": -0.00068850396
    },
    {
      "\n": -0.0020827423
    },
    {
      " find": -0.0072867293
    },
    {
      "('": -0.00051017915
    },
    {
      "des": -0.00075298175
    },
    {
      "k": -0.00026493028
    },
    {
      "')": -0.0009530693
    },
    {
      "\n": -0.004687767
    },
    {
      " #": -0.0015290863
    },
    {
      " 2": -0.003971795
    },
    {
      ":": -0.00059975556
    },
    {
      " find": -0.049859446
    },
    {
      " computer": -0.4054746
    },
    {
      "\n": -0.018667795
    },
    {
      " find": -0.016992142
    },
    {
      "('": -0.0006460958
    },
    {
      "computer": -0.0027363955
    },
    {
      "')": -0.0011934736
    },
    {
      "\n": -0.0053839935
    },
    {
      " #": -0.0050216787
    },
    {
      " 3": -0.006114704
    },
    {
      ":": -0.00084550463
    },
    {
      " turn": -0.15692027
    },
    {
      " on": -0.03504017
    },
    {
      " the": -0.3423144
    },
    {
      " computer": -0.013113666
    },
    {
      "\n": -0.013358945
    },
    {
      " assert": -0.23734666
    },
    {
      "('": -0.0008714536
    },
    {
      "close": -0.009424452
    },
    {
      "'": -0.0023898592
    },
    {
      " to": -0.00042090964
    },
    {
      " '": -0.0016497403
    },
    {
      "computer": -0.002221564
    },
    {
      "')": -0.0035064502
    },
    {
      "\n": -0.0036704736
    },
    {
      " else": -0.0015261032
    },
    {
      ":": -0.0009429253
    },
    {
      " find": -0.0031105562
    },
    {
      "('": -0.0012625199
    },
    {
      "computer": -0.0008248027
    },
    {
      "')": -0.0021906807
    },
    {
      "\n": -0.005090035
    },
    {
      " switch": -0.12588087
    },
    {
      "on": -0.002738129
    },
    {
      "('": -0.0008622069
    },
    {
      "computer": -0.0010116551
    },
    {
      "')": -0.001975953
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 6.777028799057007
[(" # 0: find electric shaver\n find('electric_shaver')\n # 1: grab electric shaver\n grab('electric_shaver')\n # 2: turn on electric shaver\n assert('close' to 'electric_shaver')\n else: find('electric_shaver')\n switchon('electric_shaver')\n # 3: find shaving cream\n find('shaving_cream')\n # 4: grab shaving cream\n grab('shaving_cream')\n # 5: apply shaving cream to face\n pour('shaving_cream')\n # 6: use electric shaver to shave\n turnto('electric_shaver')\n watch('electric_shaver')\n wipe('electric_shaver')\n # 7: turn off electric shaver\n switchoff('electric_shaver')", <OpenAIObject at 0x7feec87e3bd0> JSON: {
  "text_offset": [
    3338,
    3340,
    3342,
    3343,
    3348,
    3357,
    3360,
    3364,
    3365,
    3370,
    3372,
    3380,
    3381,
    3383,
    3387,
    3389,
    3390,
    3392,
    3394,
    3395,
    3400,
    3409,
    3412,
    3416,
    3417,
    3422,
    3424,
    3432,
    3433,
    3435,
    3439,
    3441,
    3442,
    3444,
    3446,
    3447,
    3452,
    3455,
    3464,
    3467,
    3471,
    3472,
    3479,
    3481,
    3486,
    3487,
    3490,
    3492,
    3500,
    3501,
    3503,
    3507,
    3509,
    3510,
    3515,
    3516,
    3521,
    3523,
    3531,
    3532,
    3534,
    3538,
    3540,
    3541,
    3548,
    3550,
    3552,
    3560,
    3561,
    3563,
    3567,
    3569,
    3570,
    3572,
    3574,
    3575,
    3580,
    3588,
    3594,
    3595,
    3600,
    3602,
    3604,
    3609,
    3610,
    3615,
    3617,
    3618,
    3620,
    3622,
    3623,
    3628,
    3636,
    3642,
    3643,
    3648,
    3650,
    3652,
    3657,
    3658,
    3663,
    3665,
    3666,
    3668,
    3670,
    3671,
    3677,
    3685,
    3691,
    3694,
    3699,
    3700,
    3705,
    3707,
    3709,
    3714,
    3715,
    3720,
    3722,
    3723,
    3725,
    3727,
    3728,
    3732,
    3741,
    3744,
    3748,
    3751,
    3757,
    3758,
    3762,
    3764,
    3765,
    3767,
    3775,
    3776,
    3778,
    3782,
    3784,
    3785,
    3791,
    3793,
    3801,
    3802,
    3804,
    3808,
    3810,
    3811,
    3816,
    3818,
    3826,
    3827,
    3829,
    3833,
    3835,
    3836,
    3838,
    3840,
    3841,
    3846,
    3850,
    3859,
    3862,
    3866,
    3867,
    3874,
    3877,
    3879,
    3887,
    3888,
    3890,
    3894
  ],
  "token_logprobs": [
    -0.023871144,
    -0.012291828,
    -0.0026513494,
    -0.41101098,
    -0.26307425,
    -0.15646084,
    -0.0018846422,
    -0.030658975,
    -0.02179664,
    -0.0026985623,
    -0.012223405,
    -0.0058619636,
    -0.0019319399,
    -0.0009149469,
    -0.0038731212,
    -0.009062181,
    -0.0058839046,
    -0.004201976,
    -0.0009867753,
    -0.264583,
    -0.112993814,
    -0.00576262,
    -0.0018683388,
    -0.015673721,
    -1.0143,
    -0.0014160897,
    -0.001545385,
    -0.0030498104,
    -0.0016865203,
    -0.00051423314,
    -0.0016596515,
    -0.0050475616,
    -0.53898174,
    -0.008249442,
    -0.000974846,
    -1.2582783,
    -0.26700753,
    -0.28194457,
    -0.0028831987,
    -0.0007587086,
    -0.013592321,
    -1.3366196,
    -0.0019502153,
    -0.18331389,
    -0.003875455,
    -0.0005238947,
    -0.006508366,
    -0.016450297,
    -0.002221564,
    -0.0006711474,
    -0.0014803768,
    -0.010056848,
    -0.0069030244,
    -0.0025174874,
    -0.0015475345,
    -0.04991953,
    -0.001873355,
    -0.0016232328,
    -0.0013242323,
    -0.00040952102,
    -0.0011069442,
    -0.0065410044,
    -0.006318504,
    -0.20321515,
    -0.0015847867,
    -0.00082337117,
    -0.002120972,
    -0.0009685204,
    -0.0005641506,
    -0.00086077454,
    -0.0022658298,
    -0.0067340303,
    -0.027079025,
    -0.0069898725,
    -0.00084944133,
    -1.8944374,
    -1.329004,
    -0.008542164,
    -0.0285722,
    -0.03683728,
    -0.0009831962,
    -0.0007157033,
    -0.0004737435,
    -0.0060243923,
    -0.00049514946,
    -0.002946024,
    -0.0042657256,
    -0.02105372,
    -0.0061298776,
    -0.0007837038,
    -0.7341471,
    -0.043119464,
    -0.0017275966,
    -0.015340413,
    -0.049293343,
    -0.0011611878,
    -0.0006373879,
    -0.00020632465,
    -0.0019681887,
    -0.0013535962,
    -0.00056808547,
    -0.00296922,
    -0.015342411,
    -0.0034519008,
    -0.0007522656,
    -0.6326105,
    -0.08654203,
    -0.001000319,
    -2.723246,
    -0.063562855,
    -0.010655368,
    -2.096773,
    -0.0041700713,
    -0.0027142216,
    -0.00087133347,
    -0.0023816742,
    -0.00044118267,
    -0.020578053,
    -0.008259477,
    -0.52309006,
    -0.0041720476,
    -0.0007887144,
    -1.4602141,
    -0.055799067,
    -0.005446259,
    -0.00033987593,
    -0.39840946,
    -0.022026999,
    -0.10957863,
    -2.112775,
    -6.6829845e-05,
    -0.000827428,
    -0.00056832476,
    -0.011109221,
    -0.0011767037,
    -0.0003051177,
    -0.00023786427,
    -0.0027231867,
    -0.0044341246,
    -3.4564793,
    -0.0008420438,
    -0.005884322,
    -0.0007635397,
    -0.0002064448,
    -0.0010170271,
    -0.0026902535,
    -0.009244803,
    -2.7679348,
    -0.0017444942,
    -0.06697014,
    -0.0007668814,
    -0.00024120306,
    -0.0012376334,
    -0.0046002767,
    -0.080470964,
    -0.36192992,
    -0.010755376,
    -0.0014834801,
    -1.3349866,
    -0.015666215,
    -0.039119862,
    -0.003073367,
    -0.00046718423,
    -0.024679448,
    -0.060724698,
    -0.0027953293,
    -0.00065814523,
    -0.000771891,
    -0.0011884613,
    -0.00055890164,
    -0.00105915,
    -0.0050264127
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " electric",
    " sh",
    "aver",
    "\n",
    " find",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " electric",
    " sh",
    "aver",
    "\n",
    " grab",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " electric",
    " sh",
    "aver",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " shaving",
    " cream",
    "\n",
    " find",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " shaving",
    " cream",
    "\n",
    " grab",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " apply",
    " shaving",
    " cream",
    " to",
    " face",
    "\n",
    " pour",
    "('",
    "sh",
    "aving",
    "_",
    "cream",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " use",
    " electric",
    " sh",
    "aver",
    " to",
    " shave",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " watch",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " wipe",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " turn",
    " off",
    " electric",
    " sh",
    "aver",
    "\n",
    " switch",
    "off",
    "('",
    "electric",
    "_",
    "sh",
    "aver",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.023871144
    },
    {
      " 0": -0.012291828
    },
    {
      ":": -0.0026513494
    },
    {
      " find": -0.41101098
    },
    {
      " electric": -0.26307425
    },
    {
      " sh": -0.15646084
    },
    {
      "aver": -0.0018846422
    },
    {
      "\n": -0.030658975
    },
    {
      " find": -0.02179664
    },
    {
      "('": -0.0026985623
    },
    {
      "electric": -0.012223405
    },
    {
      "_": -0.0058619636
    },
    {
      "sh": -0.0019319399
    },
    {
      "aver": -0.0009149469
    },
    {
      "')": -0.0038731212
    },
    {
      "\n": -0.009062181
    },
    {
      " #": -0.0058839046
    },
    {
      " 1": -0.004201976
    },
    {
      ":": -0.0009867753
    },
    {
      " grab": -0.264583
    },
    {
      " electric": -0.112993814
    },
    {
      " sh": -0.00576262
    },
    {
      "aver": -0.0018683388
    },
    {
      "\n": -0.015673721
    },
    {
      " assert": -0.46385074
    },
    {
      "('": -0.0014160897
    },
    {
      "electric": -0.001545385
    },
    {
      "_": -0.0030498104
    },
    {
      "sh": -0.0016865203
    },
    {
      "aver": -0.00051423314
    },
    {
      "')": -0.0016596515
    },
    {
      "\n": -0.0050475616
    },
    {
      " #": -0.53898174
    },
    {
      " 2": -0.008249442
    },
    {
      ":": -0.000974846
    },
    {
      " find": -1.2536263
    },
    {
      " on": -0.26700753
    },
    {
      " electric": -0.28194457
    },
    {
      " sh": -0.0028831987
    },
    {
      "aver": -0.0007587086
    },
    {
      "\n": -0.013592321
    },
    {
      " switch": -0.7310717
    },
    {
      "('": -0.0019502153
    },
    {
      "close": -0.18331389
    },
    {
      "'": -0.003875455
    },
    {
      " to": -0.0005238947
    },
    {
      " '": -0.006508366
    },
    {
      "electric": -0.016450297
    },
    {
      "_": -0.002221564
    },
    {
      "sh": -0.0006711474
    },
    {
      "aver": -0.0014803768
    },
    {
      "')": -0.010056848
    },
    {
      "\n": -0.0069030244
    },
    {
      " else": -0.0025174874
    },
    {
      ":": -0.0015475345
    },
    {
      " find": -0.04991953
    },
    {
      "('": -0.001873355
    },
    {
      "electric": -0.0016232328
    },
    {
      "_": -0.0013242323
    },
    {
      "sh": -0.00040952102
    },
    {
      "aver": -0.0011069442
    },
    {
      "')": -0.0065410044
    },
    {
      "\n": -0.006318504
    },
    {
      " switch": -0.20321515
    },
    {
      "on": -0.0015847867
    },
    {
      "('": -0.00082337117
    },
    {
      "electric": -0.002120972
    },
    {
      "_": -0.0009685204
    },
    {
      "sh": -0.0005641506
    },
    {
      "aver": -0.00086077454
    },
    {
      "')": -0.0022658298
    },
    {
      "\n": -0.0067340303
    },
    {
      " #": -0.027079025
    },
    {
      " 3": -0.0069898725
    },
    {
      ":": -0.00084944133
    },
    {
      " shave": -1.2579389
    },
    {
      " mirror": -1.0644166
    },
    {
      " cream": -0.008542164
    },
    {
      "\n": -0.0285722
    },
    {
      " find": -0.03683728
    },
    {
      "('": -0.0009831962
    },
    {
      "sh": -0.0007157033
    },
    {
      "aving": -0.0004737435
    },
    {
      "_": -0.0060243923
    },
    {
      "cream": -0.00049514946
    },
    {
      "')": -0.002946024
    },
    {
      "\n": -0.0042657256
    },
    {
      " #": -0.02105372
    },
    {
      " 4": -0.0061298776
    },
    {
      ":": -0.0007837038
    },
    {
      " grab": -0.7341471
    },
    {
      " shaving": -0.043119464
    },
    {
      " cream": -0.0017275966
    },
    {
      "\n": -0.015340413
    },
    {
      " grab": -0.049293343
    },
    {
      "('": -0.0011611878
    },
    {
      "sh": -0.0006373879
    },
    {
      "aving": -0.00020632465
    },
    {
      "_": -0.0019681887
    },
    {
      "cream": -0.0013535962
    },
    {
      "')": -0.00056808547
    },
    {
      "\n": -0.00296922
    },
    {
      " #": -0.015342411
    },
    {
      " 5": -0.0034519008
    },
    {
      ":": -0.0007522656
    },
    {
      " apply": -0.6326105
    },
    {
      " shaving": -0.08654203
    },
    {
      " cream": -0.001000319
    },
    {
      "\n": -0.18009901
    },
    {
      " face": -0.063562855
    },
    {
      "\n": -0.010655368
    },
    {
      " assert": -0.9327611
    },
    {
      "('": -0.0041700713
    },
    {
      "sh": -0.0027142216
    },
    {
      "aving": -0.00087133347
    },
    {
      "_": -0.0023816742
    },
    {
      "cream": -0.00044118267
    },
    {
      "')": -0.020578053
    },
    {
      "\n": -0.008259477
    },
    {
      " #": -0.52309006
    },
    {
      " 6": -0.0041720476
    },
    {
      ":": -0.0007887144
    },
    {
      " shave": -0.80669254
    },
    {
      " electric": -0.055799067
    },
    {
      " sh": -0.005446259
    },
    {
      "aver": -0.00033987593
    },
    {
      " to": -0.39840946
    },
    {
      " shave": -0.022026999
    },
    {
      "\n": -0.10957863
    },
    {
      " assert": -1.3664184
    },
    {
      "nt": -6.6829845e-05
    },
    {
      "o": -0.000827428
    },
    {
      "('": -0.00056832476
    },
    {
      "electric": -0.011109221
    },
    {
      "_": -0.0011767037
    },
    {
      "sh": -0.0003051177
    },
    {
      "aver": -0.00023786427
    },
    {
      "')": -0.0027231867
    },
    {
      "\n": -0.0044341246
    },
    {
      " point": -0.599109
    },
    {
      "('": -0.0008420438
    },
    {
      "electric": -0.005884322
    },
    {
      "_": -0.0007635397
    },
    {
      "sh": -0.0002064448
    },
    {
      "aver": -0.0010170271
    },
    {
      "')": -0.0026902535
    },
    {
      "\n": -0.009244803
    },
    {
      " #": -1.6766918
    },
    {
      "('": -0.0017444942
    },
    {
      "electric": -0.06697014
    },
    {
      "_": -0.0007668814
    },
    {
      "sh": -0.00024120306
    },
    {
      "aver": -0.0012376334
    },
    {
      "')": -0.0046002767
    },
    {
      "\n": -0.080470964
    },
    {
      " #": -0.36192992
    },
    {
      " 7": -0.010755376
    },
    {
      ":": -0.0014834801
    },
    {
      " put": -0.6357247
    },
    {
      " off": -0.015666215
    },
    {
      " electric": -0.039119862
    },
    {
      " sh": -0.003073367
    },
    {
      "aver": -0.00046718423
    },
    {
      "\n": -0.024679448
    },
    {
      " switch": -0.060724698
    },
    {
      "off": -0.0027953293
    },
    {
      "('": -0.00065814523
    },
    {
      "electric": -0.000771891
    },
    {
      "_": -0.0011884613
    },
    {
      "sh": -0.00055890164
    },
    {
      "aver": -0.00105915
    },
    {
      "')": -0.0050264127
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.1057748794555664
[(" # 0: find hanger\n find('hanger')\n # 1: grab hanger\n grab('hanger')\n assert('hanger' in 'hands')\n else: grab('hanger')\n # 2: hang up jacket\n puton('jacket')\n # 3: done\n assert('jacket' on 'hanger')\n else: puton('jacket')", <OpenAIObject at 0x7feeb80fd720> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3359,
    3364,
    3365,
    3370,
    3372,
    3373,
    3378,
    3380,
    3381,
    3383,
    3385,
    3386,
    3391,
    3393,
    3398,
    3399,
    3404,
    3406,
    3407,
    3412,
    3414,
    3415,
    3422,
    3424,
    3425,
    3430,
    3431,
    3434,
    3436,
    3441,
    3443,
    3444,
    3449,
    3450,
    3455,
    3457,
    3458,
    3463,
    3465,
    3466,
    3468,
    3470,
    3471,
    3476,
    3479,
    3486,
    3487,
    3491,
    3493,
    3495,
    3496,
    3501,
    3503,
    3504,
    3506,
    3508,
    3509,
    3514,
    3515,
    3522,
    3524,
    3525,
    3530,
    3531,
    3534,
    3536,
    3537,
    3542,
    3544,
    3545,
    3550,
    3551,
    3555,
    3557,
    3559,
    3560,
    3565
  ],
  "token_logprobs": [
    -0.015956892,
    -0.007773713,
    -0.0019446604,
    -0.661747,
    -0.5470919,
    -0.0034861118,
    -0.03499616,
    -0.042252213,
    -0.0018971825,
    -0.00041935995,
    -0.00013025544,
    -0.0016216803,
    -0.008522264,
    -0.0055362177,
    -0.0023813148,
    -0.000563196,
    -0.3243539,
    -0.21462044,
    -0.0012657441,
    -0.021501418,
    -0.95390236,
    -0.0013556245,
    -0.00037863376,
    -0.00022433081,
    -0.0015632352,
    -0.005149764,
    -0.9091684,
    -0.0019939884,
    -0.26143867,
    -0.0007936066,
    -0.0015693234,
    -0.01925077,
    -0.0043451604,
    -0.007319512,
    -0.016953224,
    -0.004400778,
    -0.015879434,
    -0.0042672795,
    -0.0077323252,
    -0.0017243724,
    -0.00058842317,
    -0.00063488266,
    -0.0036948242,
    -0.006130955,
    -0.96617997,
    -0.006600944,
    -0.00080833875,
    -1.9042573,
    -0.37936506,
    -0.3283243,
    -0.19315413,
    -1.8761123,
    -0.028286679,
    -0.001585025,
    -0.35939643,
    -0.00013931624,
    -0.4028301,
    -0.036697526,
    -0.85432214,
    -0.008381489,
    -0.0014506498,
    -2.7240016,
    -0.060121465,
    -1.4702703,
    -0.0030492127,
    -0.18525569,
    -0.00029843824,
    -0.0029889497,
    -1.2634852,
    -0.01105739,
    -0.0011172693,
    -0.001088449,
    -0.0077272193,
    -0.4810722,
    -0.01365498,
    -0.0035078865,
    -0.04933724,
    -0.0038176547,
    -0.0026381414,
    -0.0022425326,
    -2.4152187e-05,
    -0.0039278106
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " h",
    "anger",
    "\n",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " h",
    "anger",
    "\n",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " hang",
    " up",
    " jacket",
    "\n",
    " put",
    "on",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " done",
    "\n",
    " assert",
    "('",
    "j",
    "acket",
    "'",
    " on",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " else",
    ":",
    " put",
    "on",
    "('",
    "j",
    "acket",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.015956892
    },
    {
      " 0": -0.007773713
    },
    {
      ":": -0.0019446604
    },
    {
      " find": -0.661747
    },
    {
      " h": -0.5470919
    },
    {
      "anger": -0.0034861118
    },
    {
      "\n": -0.03499616
    },
    {
      " find": -0.042252213
    },
    {
      "('": -0.0018971825
    },
    {
      "h": -0.00041935995
    },
    {
      "anger": -0.00013025544
    },
    {
      "')": -0.0016216803
    },
    {
      "\n": -0.008522264
    },
    {
      " #": -0.0055362177
    },
    {
      " 1": -0.0023813148
    },
    {
      ":": -0.000563196
    },
    {
      " grab": -0.3243539
    },
    {
      " h": -0.21462044
    },
    {
      "anger": -0.0012657441
    },
    {
      "\n": -0.021501418
    },
    {
      " assert": -0.50688475
    },
    {
      "('": -0.0013556245
    },
    {
      "h": -0.00037863376
    },
    {
      "anger": -0.00022433081
    },
    {
      "')": -0.0015632352
    },
    {
      "\n": -0.005149764
    },
    {
      " #": -0.5880634
    },
    {
      "('": -0.0019939884
    },
    {
      "h": -0.26143867
    },
    {
      "anger": -0.0007936066
    },
    {
      "'": -0.0015693234
    },
    {
      " in": -0.01925077
    },
    {
      " '": -0.0043451604
    },
    {
      "hands": -0.007319512
    },
    {
      "')": -0.016953224
    },
    {
      "\n": -0.004400778
    },
    {
      " else": -0.015879434
    },
    {
      ":": -0.0042672795
    },
    {
      " grab": -0.0077323252
    },
    {
      "('": -0.0017243724
    },
    {
      "h": -0.00058842317
    },
    {
      "anger": -0.00063488266
    },
    {
      "')": -0.0036948242
    },
    {
      "\n": -0.006130955
    },
    {
      " tur": -0.5787897
    },
    {
      " 2": -0.006600944
    },
    {
      ":": -0.00080833875
    },
    {
      " find": -0.72878605
    },
    {
      " up": -0.37936506
    },
    {
      " jacket": -0.3283243
    },
    {
      "\n": -0.19315413
    },
    {
      " assert": -1.0513196
    },
    {
      "on": -0.028286679
    },
    {
      "('": -0.001585025
    },
    {
      "j": -0.35939643
    },
    {
      "acket": -0.00013931624
    },
    {
      "')": -0.4028301
    },
    {
      "\n": -0.036697526
    },
    {
      " #": -0.85432214
    },
    {
      " 3": -0.008381489
    },
    {
      ":": -0.0014506498
    },
    {
      " put": -0.44221643
    },
    {
      "\n": -0.060121465
    },
    {
      "<|endoftext|>": -1.2222292
    },
    {
      "('": -0.0030492127
    },
    {
      "j": -0.18525569
    },
    {
      "acket": -0.00029843824
    },
    {
      "'": -0.0029889497
    },
    {
      " in": -0.8546822
    },
    {
      " '": -0.01105739
    },
    {
      "h": -0.0011172693
    },
    {
      "anger": -0.001088449
    },
    {
      "')": -0.0077272193
    },
    {
      "\n": -0.4810722
    },
    {
      " else": -0.01365498
    },
    {
      ":": -0.0035078865
    },
    {
      " put": -0.04933724
    },
    {
      "on": -0.0038176547
    },
    {
      "('": -0.0026381414
    },
    {
      "j": -0.0022425326
    },
    {
      "acket": -2.4152187e-05
    },
    {
      "')": -0.0039278106
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.230879068374634
[(" # 0: walk in to living room\n walk('living_room')\n # 1: find newspaper\n find('newspaper')\n # 2: grab newspaper\n grab('newspaper')\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n # 3: sit on couch\n find('couch')\n assert('close' to 'couch')\n else: find('couch')\n sit('couch')\n # 4: read newspaper\n turnto('newspaper')\n lookat('newspaper')\n read('newspaper')\n # 5: done\n standup()", <OpenAIObject at 0x7feeb80cb8b0> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3360,
    3363,
    3370,
    3375,
    3376,
    3381,
    3383,
    3389,
    3390,
    3394,
    3396,
    3397,
    3399,
    3401,
    3402,
    3407,
    3417,
    3418,
    3423,
    3425,
    3428,
    3430,
    3434,
    3436,
    3437,
    3439,
    3441,
    3442,
    3447,
    3457,
    3458,
    3463,
    3465,
    3468,
    3470,
    3474,
    3476,
    3477,
    3484,
    3486,
    3489,
    3491,
    3495,
    3496,
    3499,
    3501,
    3506,
    3508,
    3509,
    3514,
    3515,
    3520,
    3522,
    3525,
    3527,
    3531,
    3533,
    3534,
    3536,
    3538,
    3539,
    3543,
    3546,
    3552,
    3553,
    3558,
    3560,
    3561,
    3565,
    3567,
    3568,
    3575,
    3577,
    3582,
    3583,
    3586,
    3588,
    3589,
    3593,
    3595,
    3596,
    3601,
    3602,
    3607,
    3609,
    3610,
    3614,
    3616,
    3617,
    3621,
    3623,
    3624,
    3628,
    3630,
    3631,
    3633,
    3635,
    3636,
    3641,
    3651,
    3652,
    3656,
    3658,
    3659,
    3661,
    3664,
    3666,
    3670,
    3672,
    3673,
    3678,
    3680,
    3682,
    3685,
    3687,
    3691,
    3693,
    3694,
    3699,
    3701,
    3704,
    3706,
    3710,
    3712,
    3713,
    3715,
    3717,
    3718,
    3723,
    3724,
    3730,
    3732
  ],
  "token_logprobs": [
    -0.018892756,
    -0.00855551,
    -0.0020430225,
    -1.1363373,
    -1.9946904,
    -0.06944491,
    -0.45083416,
    -0.064649746,
    -0.021906544,
    -0.0047481335,
    -0.005494983,
    -0.010963137,
    -0.18870713,
    -0.0001589913,
    -0.0018766994,
    -0.0072337138,
    -0.0016644284,
    -0.002903523,
    -0.0005982039,
    -0.042631317,
    -0.28770837,
    -0.023321781,
    -0.13022535,
    -0.001088449,
    -0.0016138003,
    -0.0010660725,
    -0.00023845845,
    -0.0019157556,
    -0.005183378,
    -0.016265385,
    -0.00487187,
    -0.0005400564,
    -0.3612422,
    -0.34991425,
    -0.028711312,
    -0.44320574,
    -0.0011299186,
    -0.00075119274,
    -0.00031501107,
    -0.00010963327,
    -0.0011358274,
    -0.004430952,
    -1.2885118,
    -0.001996259,
    -0.28659964,
    -0.0033655365,
    -0.0011222807,
    -0.0024390933,
    -0.017917179,
    -0.0057412805,
    -0.00856116,
    -0.029787552,
    -0.0048259906,
    -0.01829797,
    -0.0041934163,
    -0.011302107,
    -0.0018125661,
    -0.0008610139,
    -0.00027423137,
    -0.00049622235,
    -0.0027221113,
    -0.004999996,
    -0.5566814,
    -0.0074600796,
    -0.0011311135,
    -0.6401815,
    -0.49836758,
    -0.616897,
    -0.21135385,
    -0.154387,
    -0.0011289659,
    -0.00044249676,
    -0.00019714465,
    -0.0011246686,
    -0.0033398804,
    -0.4475712,
    -0.0006805105,
    -0.014212003,
    -0.0018557385,
    -0.0002903283,
    -0.0011961,
    -0.00049049745,
    -0.00020024595,
    -0.0037095412,
    -0.0024989033,
    -0.0014645586,
    -0.0012468238,
    -0.0047236974,
    -0.0013757398,
    -0.00031584647,
    -0.00031691935,
    -0.0024567184,
    -0.004153075,
    -0.00822306,
    -0.0006850432,
    -0.00016304628,
    -0.0013411234,
    -0.0011055127,
    -0.0047494494,
    -0.024569426,
    -0.0070764306,
    -0.0010946554,
    -0.20987472,
    -0.2928288,
    -0.011232543,
    -0.71302515,
    -7.56541e-05,
    -0.0002095461,
    -0.00046646709,
    -0.019110661,
    -0.00029867573,
    -0.0007420062,
    -0.001176226,
    -0.0043273233,
    -0.3131272,
    -0.0004281842,
    -0.00038042187,
    -0.0008576733,
    -0.0012063632,
    -0.0011207291,
    -0.0015893213,
    -0.26110625,
    -0.3349246,
    -0.0064076423,
    -0.0007154658,
    -0.00027506487,
    -0.00023905636,
    -0.0026649165,
    -0.4776157,
    -0.15816177,
    -0.005613779,
    -0.0014203867,
    -2.011693,
    -0.635455,
    -4.0556436,
    -0.0028255146,
    -0.10447101
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "_",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " newspaper",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " couch",
    "\n",
    " find",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "c",
    "ouch",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " sit",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " read",
    " newspaper",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " done",
    "\n",
    " stand",
    "up",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.018892756
    },
    {
      " 0": -0.00855551
    },
    {
      ":": -0.0020430225
    },
    {
      " find": -0.49498272
    },
    {
      " to": -0.20399614
    },
    {
      " to": -0.06944491
    },
    {
      " living": -0.45083416
    },
    {
      " room": -0.064649746
    },
    {
      "\n": -0.021906544
    },
    {
      " walk": -0.0047481335
    },
    {
      "('": -0.005494983
    },
    {
      "living": -0.010963137
    },
    {
      "_": -0.18870713
    },
    {
      "room": -0.0001589913
    },
    {
      "')": -0.0018766994
    },
    {
      "\n": -0.0072337138
    },
    {
      " #": -0.0016644284
    },
    {
      " 1": -0.002903523
    },
    {
      ":": -0.0005982039
    },
    {
      " find": -0.042631317
    },
    {
      " newspaper": -0.28770837
    },
    {
      "\n": -0.023321781
    },
    {
      " find": -0.13022535
    },
    {
      "('": -0.001088449
    },
    {
      "new": -0.0016138003
    },
    {
      "sp": -0.0010660725
    },
    {
      "aper": -0.00023845845
    },
    {
      "')": -0.0019157556
    },
    {
      "\n": -0.005183378
    },
    {
      " #": -0.016265385
    },
    {
      " 2": -0.00487187
    },
    {
      ":": -0.0005400564
    },
    {
      " grab": -0.3612422
    },
    {
      " newspaper": -0.34991425
    },
    {
      "\n": -0.028711312
    },
    {
      " grab": -0.44320574
    },
    {
      "('": -0.0011299186
    },
    {
      "new": -0.00075119274
    },
    {
      "sp": -0.00031501107
    },
    {
      "aper": -0.00010963327
    },
    {
      "')": -0.0011358274
    },
    {
      "\n": -0.004430952
    },
    {
      " #": -0.37538967
    },
    {
      "('": -0.001996259
    },
    {
      "new": -0.28659964
    },
    {
      "sp": -0.0033655365
    },
    {
      "aper": -0.0011222807
    },
    {
      "'": -0.0024390933
    },
    {
      " in": -0.017917179
    },
    {
      " '": -0.0057412805
    },
    {
      "hands": -0.00856116
    },
    {
      "')": -0.029787552
    },
    {
      "\n": -0.0048259906
    },
    {
      " else": -0.01829797
    },
    {
      ":": -0.0041934163
    },
    {
      " grab": -0.011302107
    },
    {
      "('": -0.0018125661
    },
    {
      "new": -0.0008610139
    },
    {
      "sp": -0.00027423137
    },
    {
      "aper": -0.00049622235
    },
    {
      "')": -0.0027221113
    },
    {
      "\n": -0.004999996
    },
    {
      " #": -0.5566814
    },
    {
      " 3": -0.0074600796
    },
    {
      ":": -0.0011311135
    },
    {
      " sit": -0.6401815
    },
    {
      " on": -0.49836758
    },
    {
      " couch": -0.616897
    },
    {
      "\n": -0.21135385
    },
    {
      " find": -0.154387
    },
    {
      "('": -0.0011289659
    },
    {
      "c": -0.00044249676
    },
    {
      "ouch": -0.00019714465
    },
    {
      "')": -0.0011246686
    },
    {
      "\n": -0.0033398804
    },
    {
      " assert": -0.4475712
    },
    {
      "('": -0.0006805105
    },
    {
      "close": -0.014212003
    },
    {
      "'": -0.0018557385
    },
    {
      " to": -0.0002903283
    },
    {
      " '": -0.0011961
    },
    {
      "c": -0.00049049745
    },
    {
      "ouch": -0.00020024595
    },
    {
      "')": -0.0037095412
    },
    {
      "\n": -0.0024989033
    },
    {
      " else": -0.0014645586
    },
    {
      ":": -0.0012468238
    },
    {
      " find": -0.0047236974
    },
    {
      "('": -0.0013757398
    },
    {
      "c": -0.00031584647
    },
    {
      "ouch": -0.00031691935
    },
    {
      "')": -0.0024567184
    },
    {
      "\n": -0.004153075
    },
    {
      " sit": -0.00822306
    },
    {
      "('": -0.0006850432
    },
    {
      "c": -0.00016304628
    },
    {
      "ouch": -0.0013411234
    },
    {
      "')": -0.0011055127
    },
    {
      "\n": -0.0047494494
    },
    {
      " #": -0.024569426
    },
    {
      " 4": -0.0070764306
    },
    {
      ":": -0.0010946554
    },
    {
      " read": -0.20987472
    },
    {
      " newspaper": -0.2928288
    },
    {
      "\n": -0.011232543
    },
    {
      " tur": -0.71302515
    },
    {
      "nt": -7.56541e-05
    },
    {
      "o": -0.0002095461
    },
    {
      "('": -0.00046646709
    },
    {
      "new": -0.019110661
    },
    {
      "sp": -0.00029867573
    },
    {
      "aper": -0.0007420062
    },
    {
      "')": -0.001176226
    },
    {
      "\n": -0.0043273233
    },
    {
      " look": -0.3131272
    },
    {
      "at": -0.0004281842
    },
    {
      "('": -0.00038042187
    },
    {
      "new": -0.0008576733
    },
    {
      "sp": -0.0012063632
    },
    {
      "aper": -0.0011207291
    },
    {
      "')": -0.0015893213
    },
    {
      "\n": -0.26110625
    },
    {
      " read": -0.3349246
    },
    {
      "('": -0.0064076423
    },
    {
      "new": -0.0007154658
    },
    {
      "sp": -0.00027506487
    },
    {
      "aper": -0.00023905636
    },
    {
      "')": -0.0026649165
    },
    {
      "\n": -0.4776157
    },
    {
      " #": -0.15816177
    },
    {
      " 5": -0.005613779
    },
    {
      ":": -0.0014203867
    },
    {
      " put": -0.8276701
    },
    {
      "\n": -0.635455
    },
    {
      "<|endoftext|>": -1.2970117
    },
    {
      "up": -0.0028255146
    },
    {
      "()": -0.10447101
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.1410880088806152
[(" # 0: Find a chair\n find('chair')\n # 1: Grab the chair\n grab('chair')\n # 2: Put chair in a position of sitting\n turnto('chair')\n lookat('chair')\n assert('close' to 'chair')\n else: find('chair')\n else: turnto('chair')\n sit('chair')", <OpenAIObject at 0x7feeb80fda40> JSON: {
  "text_offset": [
    3336,
    3338,
    3340,
    3341,
    3346,
    3348,
    3354,
    3355,
    3360,
    3362,
    3367,
    3369,
    3370,
    3372,
    3374,
    3375,
    3380,
    3384,
    3390,
    3391,
    3396,
    3398,
    3403,
    3405,
    3406,
    3408,
    3410,
    3411,
    3415,
    3421,
    3424,
    3426,
    3435,
    3438,
    3446,
    3447,
    3451,
    3453,
    3454,
    3456,
    3461,
    3463,
    3464,
    3469,
    3471,
    3473,
    3478,
    3480,
    3481,
    3488,
    3490,
    3495,
    3496,
    3499,
    3501,
    3506,
    3508,
    3509,
    3514,
    3515,
    3520,
    3522,
    3527,
    3529,
    3530,
    3535,
    3536,
    3540,
    3542,
    3543,
    3545,
    3550,
    3552,
    3553,
    3557,
    3559,
    3564
  ],
  "token_logprobs": [
    -0.17329812,
    -0.042369917,
    -0.0044643003,
    -1.8988822,
    -0.9158296,
    -0.11988599,
    -0.12504777,
    -0.026420845,
    -0.014463479,
    -0.0031590487,
    -0.0022750904,
    -0.023412384,
    -0.0069141267,
    -0.008959511,
    -0.00080046343,
    -1.4154522,
    -0.16823472,
    -0.008527975,
    -0.038745057,
    -0.5734601,
    -0.0019437049,
    -0.00060834415,
    -0.0012701586,
    -0.010269342,
    -0.25306487,
    -0.008124025,
    -0.0009528299,
    -2.9036632,
    -3.233141,
    -0.53531057,
    -3.0096967,
    -1.7960181,
    -4.7565513,
    -0.2618156,
    -0.064768665,
    -0.8188485,
    -4.4181128e-05,
    -0.0001375281,
    -0.0011602361,
    -0.0011353506,
    -0.0009840316,
    -0.0073686256,
    -1.0556134,
    -0.00067472464,
    -0.0006064359,
    -0.00054387294,
    -0.0009358863,
    -0.0053434223,
    -0.36665377,
    -0.0015963058,
    -0.03274048,
    -0.0030625444,
    -0.00091649476,
    -0.0020598082,
    -0.0008217013,
    -0.0046749497,
    -0.005254021,
    -0.0019138446,
    -0.0016105169,
    -0.02692734,
    -0.0017112951,
    -0.0005167393,
    -0.0017298653,
    -0.0064237793,
    -0.8540327,
    -0.0017668859,
    -0.08276315,
    -8.566857e-05,
    -6.539934e-05,
    -0.000648005,
    -0.00056367373,
    -0.0021039483,
    -0.004967826,
    -0.13988908,
    -0.009431973,
    -0.0019563015,
    -0.0012338732
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " Find",
    " a",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " Grab",
    " the",
    " chair",
    "\n",
    " grab",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " Put",
    " chair",
    " in",
    " a",
    " position",
    " of",
    " sitting",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "chair",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.17329812
    },
    {
      " 0": -0.042369917
    },
    {
      ":": -0.0044643003
    },
    {
      " find": -0.35392407
    },
    {
      " a": -0.9158296
    },
    {
      " chair": -0.11988599
    },
    {
      "\n": -0.12504777
    },
    {
      " find": -0.026420845
    },
    {
      "('": -0.014463479
    },
    {
      "chair": -0.0031590487
    },
    {
      "')": -0.0022750904
    },
    {
      "\n": -0.023412384
    },
    {
      " #": -0.0069141267
    },
    {
      " 1": -0.008959511
    },
    {
      ":": -0.00080046343
    },
    {
      " Walk": -0.7053376
    },
    {
      " the": -0.16823472
    },
    {
      " chair": -0.008527975
    },
    {
      "\n": -0.038745057
    },
    {
      " grab": -0.5734601
    },
    {
      "('": -0.0019437049
    },
    {
      "chair": -0.00060834415
    },
    {
      "')": -0.0012701586
    },
    {
      "\n": -0.010269342
    },
    {
      " #": -0.25306487
    },
    {
      " 2": -0.008124025
    },
    {
      ":": -0.0009528299
    },
    {
      " Turn": -1.4633899
    },
    {
      " the": -0.09699425
    },
    {
      " in": -0.53531057
    },
    {
      " front": -0.812352
    },
    {
      " desired": -1.6029011
    },
    {
      " to": -0.7071579
    },
    {
      " sitting": -0.2618156
    },
    {
      "\n": -0.064768665
    },
    {
      " tur": -0.8188485
    },
    {
      "nt": -4.4181128e-05
    },
    {
      "o": -0.0001375281
    },
    {
      "('": -0.0011602361
    },
    {
      "chair": -0.0011353506
    },
    {
      "')": -0.0009840316
    },
    {
      "\n": -0.0073686256
    },
    {
      " look": -1.0556134
    },
    {
      "at": -0.00067472464
    },
    {
      "('": -0.0006064359
    },
    {
      "chair": -0.00054387294
    },
    {
      "')": -0.0009358863
    },
    {
      "\n": -0.0053434223
    },
    {
      " assert": -0.36665377
    },
    {
      "('": -0.0015963058
    },
    {
      "close": -0.03274048
    },
    {
      "'": -0.0030625444
    },
    {
      " to": -0.00091649476
    },
    {
      " '": -0.0020598082
    },
    {
      "chair": -0.0008217013
    },
    {
      "')": -0.0046749497
    },
    {
      "\n": -0.005254021
    },
    {
      " else": -0.0019138446
    },
    {
      ":": -0.0016105169
    },
    {
      " find": -0.02692734
    },
    {
      "('": -0.0017112951
    },
    {
      "chair": -0.0005167393
    },
    {
      "')": -0.0017298653
    },
    {
      "\n": -0.0064237793
    },
    {
      " else": -0.8540327
    },
    {
      ":": -0.0017668859
    },
    {
      " tur": -0.08276315
    },
    {
      "nt": -8.566857e-05
    },
    {
      "o": -6.539934e-05
    },
    {
      "('": -0.000648005
    },
    {
      "chair": -0.00056367373
    },
    {
      "')": -0.0021039483
    },
    {
      "\n": -0.004967826
    },
    {
      " sit": -0.13988908
    },
    {
      "('": -0.009431973
    },
    {
      "chair": -0.0019563015
    },
    {
      "')": -0.0012338732
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.658717393875122
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: lay down on bed\n find('bed')\n turnto('bed')\n sit('bed')\n sleep()", <OpenAIObject at 0x7fee88043a90> JSON: {
  "text_offset": [
    3338,
    3340,
    3342,
    3343,
    3348,
    3351,
    3359,
    3360,
    3365,
    3367,
    3374,
    3376,
    3377,
    3379,
    3381,
    3382,
    3386,
    3391,
    3394,
    3398,
    3399,
    3404,
    3406,
    3409,
    3411,
    3412,
    3416,
    3418,
    3419,
    3421,
    3424,
    3426,
    3427,
    3431,
    3433,
    3436,
    3438,
    3439,
    3445
  ],
  "token_logprobs": [
    -0.28731406,
    -0.062138233,
    -0.0027848694,
    -2.5326316,
    -1.2922417,
    -0.4412037,
    -0.015200004,
    -0.007828498,
    -0.0059358897,
    -0.004342769,
    -0.0017169083,
    -0.008649114,
    -0.007945814,
    -0.0042152638,
    -0.0004169739,
    -3.1578934,
    -0.08921706,
    -0.28709418,
    -0.07362359,
    -0.011222298,
    -0.5079282,
    -0.0013799197,
    -0.00056343444,
    -0.0015994118,
    -0.0048486306,
    -0.38954386,
    -4.382537e-05,
    -0.0003201408,
    -0.0005682056,
    -0.00021824928,
    -0.0016414426,
    -0.0031233518,
    -2.7951105,
    -0.0045454884,
    -0.00027101085,
    -0.0005411302,
    -0.00578708,
    -0.27601933,
    -0.0053201737
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " lay",
    " down",
    " on",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " sleep",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.28731406
    },
    {
      " 0": -0.062138233
    },
    {
      ":": -0.0027848694
    },
    {
      " find": -1.0231531
    },
    {
      " in": -0.41915187
    },
    {
      " bedroom": -0.4412037
    },
    {
      "\n": -0.015200004
    },
    {
      " walk": -0.007828498
    },
    {
      "('": -0.0059358897
    },
    {
      "bedroom": -0.004342769
    },
    {
      "')": -0.0017169083
    },
    {
      "\n": -0.008649114
    },
    {
      " #": -0.007945814
    },
    {
      " 1": -0.0042152638
    },
    {
      ":": -0.0004169739
    },
    {
      " find": -0.114563264
    },
    {
      " down": -0.08921706
    },
    {
      " on": -0.28709418
    },
    {
      " bed": -0.07362359
    },
    {
      "\n": -0.011222298
    },
    {
      " find": -0.5079282
    },
    {
      "('": -0.0013799197
    },
    {
      "bed": -0.00056343444
    },
    {
      "')": -0.0015994118
    },
    {
      "\n": -0.0048486306
    },
    {
      " tur": -0.38954386
    },
    {
      "nt": -4.382537e-05
    },
    {
      "o": -0.0003201408
    },
    {
      "('": -0.0005682056
    },
    {
      "bed": -0.00021824928
    },
    {
      "')": -0.0016414426
    },
    {
      "\n": -0.0031233518
    },
    {
      " look": -0.15895262
    },
    {
      "('": -0.0045454884
    },
    {
      "bed": -0.00027101085
    },
    {
      "')": -0.0005411302
    },
    {
      "\n": -0.00578708
    },
    {
      " sleep": -0.27601933
    },
    {
      "()": -0.0053201737
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 12.65555191040039
[(" # 0: find alarm clock\n find('alarm_clock')\n # 1: grab alarm clock\n grab('alarm_clock')\n assert('alarm_clock' in 'hands')\n else: grab('alarm_clock')\n # 2: walk to bedroom\n walk('bedroom')\n # 3: find nightstand\n find('nightstand')\n # 4: put alarm clock on nightstand\n assert('close' to 'nightstand')\n else: find('nightstand')\n puton('nightstand', 'alarm_clock')\n # 5: switch on alarm clock\n switchon('alarm_clock')\n # 6: Done\ndef set_up_computer():\n # 0: find computer\n find('computer')\n # 1: find mouse\n find('mouse')\n # 2: find keyboard\n find('keyboard')\n # 3: find monitor\n find('monitor')\n # 4: plug in computer\n plugin('computer')\n # 5: plug in mouse\n plugin('mouse')\n # 6: plug in keyboard\n plugin('keyboard')\n # 7: plug in monitor\n plugin('monitor')\n # 8: turn on computer\n switchon('computer')\n # 9: done", <OpenAIObject at 0x7fee88066590> JSON: {
  "text_offset": [
    3359,
    3361,
    3363,
    3364,
    3369,
    3375,
    3381,
    3382,
    3387,
    3389,
    3391,
    3394,
    3395,
    3400,
    3402,
    3403,
    3405,
    3407,
    3408,
    3413,
    3419,
    3425,
    3426,
    3431,
    3433,
    3435,
    3438,
    3439,
    3444,
    3446,
    3447,
    3454,
    3456,
    3458,
    3461,
    3462,
    3467,
    3468,
    3471,
    3473,
    3478,
    3480,
    3481,
    3486,
    3487,
    3492,
    3494,
    3496,
    3499,
    3500,
    3505,
    3507,
    3508,
    3510,
    3512,
    3513,
    3518,
    3521,
    3529,
    3530,
    3535,
    3537,
    3544,
    3546,
    3547,
    3549,
    3551,
    3552,
    3557,
    3563,
    3568,
    3569,
    3574,
    3576,
    3581,
    3586,
    3588,
    3589,
    3591,
    3593,
    3594,
    3598,
    3604,
    3610,
    3613,
    3619,
    3624,
    3625,
    3632,
    3634,
    3639,
    3640,
    3643,
    3645,
    3650,
    3655,
    3657,
    3658,
    3663,
    3664,
    3669,
    3671,
    3676,
    3681,
    3683,
    3684,
    3688,
    3690,
    3692,
    3697,
    3702,
    3704,
    3706,
    3708,
    3711,
    3712,
    3717,
    3719,
    3720,
    3722,
    3724,
    3725,
    3732,
    3735,
    3741,
    3747,
    3748,
    3755,
    3757,
    3759,
    3761,
    3764,
    3765,
    3770,
    3772,
    3773,
    3775,
    3777,
    3778,
    3783,
    3784,
    3787,
    3791,
    3792,
    3794,
    3795,
    3803,
    3806,
    3807,
    3809,
    3811,
    3812,
    3817,
    3826,
    3827,
    3832,
    3834,
    3842,
    3844,
    3845,
    3847,
    3849,
    3850,
    3855,
    3861,
    3862,
    3867,
    3869,
    3874,
    3876,
    3877,
    3879,
    3881,
    3882,
    3887,
    3896,
    3897,
    3902,
    3904,
    3907,
    3912,
    3914,
    3915,
    3917,
    3919,
    3920,
    3925,
    3933,
    3934,
    3939,
    3941,
    3948,
    3950,
    3951,
    3953,
    3955,
    3956,
    3961,
    3964,
    3973,
    3974,
    3981,
    3983,
    3991,
    3993,
    3994,
    3996,
    3998,
    3999,
    4004,
    4007,
    4013,
    4014,
    4021,
    4023,
    4028,
    4030,
    4031,
    4033,
    4035,
    4036,
    4041,
    4044,
    4053,
    4054,
    4061,
    4063,
    4066,
    4071,
    4073,
    4074,
    4076,
    4078,
    4079,
    4084,
    4087,
    4095,
    4096,
    4103,
    4105,
    4112,
    4114,
    4115,
    4117,
    4119,
    4120,
    4125,
    4128,
    4137,
    4138,
    4145,
    4147,
    4149,
    4157,
    4159,
    4160,
    4162,
    4164,
    4165
  ],
  "token_logprobs": [
    -0.020296808,
    -0.008335624,
    -0.002094987,
    -0.7513545,
    -0.20501587,
    -0.067661315,
    -0.033077847,
    -0.019228226,
    -0.0021897252,
    -0.0034307868,
    -0.0002396524,
    -0.016027149,
    -0.00039723687,
    -0.0035346237,
    -0.008412439,
    -0.0071054203,
    -0.0021356062,
    -0.00072268123,
    -0.5320986,
    -0.18002743,
    -0.00906675,
    -0.019168075,
    -0.691866,
    -0.0012369163,
    -0.0005339749,
    -0.00011511593,
    -0.0037959334,
    -0.000591883,
    -0.0017478386,
    -0.004999157,
    -0.870653,
    -0.0014784657,
    -0.13119909,
    -0.00031823252,
    -0.0083276965,
    -0.0008267119,
    -0.0023788067,
    -0.020232577,
    -0.005182898,
    -0.007002417,
    -0.03617054,
    -0.0041079447,
    -0.015985964,
    -0.003942771,
    -0.010311134,
    -0.00124408,
    -0.0005407735,
    -0.00023631456,
    -0.0028234825,
    -0.00079420075,
    -0.002244683,
    -0.0065207863,
    -0.2590084,
    -0.007023126,
    -0.0010290202,
    -0.12549718,
    -0.11459407,
    -0.07299402,
    -0.023437463,
    -0.010125426,
    -0.001966038,
    -0.002759167,
    -0.0012724282,
    -0.005480119,
    -0.01677531,
    -0.005582489,
    -0.0008772995,
    -1.0603411,
    -0.19384031,
    -0.1829504,
    -0.019865943,
    -0.32784808,
    -0.0007997482,
    -0.00060929876,
    -0.0022556144,
    -0.0012552998,
    -0.0049238605,
    -0.030838083,
    -0.0070204255,
    -0.0007716535,
    -0.08052322,
    -0.12284755,
    -0.006560202,
    -0.21871983,
    -0.05476537,
    -0.026701732,
    -0.011159732,
    -0.60648704,
    -0.0014337578,
    -0.17664845,
    -0.00232802,
    -0.003287135,
    -0.0024616763,
    -0.009768739,
    -0.0006341674,
    -0.0069459965,
    -0.0039844806,
    -0.0013481642,
    -0.0014119698,
    -0.01097989,
    -0.0019784002,
    -0.0013476864,
    -0.0002656446,
    -0.00205718,
    -0.006154766,
    -0.107325636,
    -0.12220346,
    -0.0016890266,
    -1.2660315,
    -0.0009704297,
    -0.9656572,
    -0.0038070632,
    -0.0007488067,
    -9.782879e-05,
    -0.0019093051,
    -0.00028257692,
    -0.002936159,
    -0.39986706,
    -0.2228048,
    -0.0070351316,
    -0.0019492598,
    -3.564273,
    -0.31050685,
    -0.5059157,
    -0.11022382,
    -0.022281421,
    -0.1711649,
    -0.0012484955,
    -0.00126264,
    -0.0026055714,
    -2.784859e-05,
    -0.0019710534,
    -0.00034392995,
    -0.0027747676,
    -0.16740568,
    -0.0622153,
    -0.006089098,
    -0.002692466,
    -0.17013332,
    -0.73056287,
    -1.0679682,
    -5.0774646,
    -0.0012977934,
    -2.228744,
    -0.00014623316,
    -0.90847594,
    -0.12932846,
    -0.015750028,
    -0.01351257,
    -0.0034355118,
    -0.0014427716,
    -0.7431644,
    -0.32510254,
    -0.041984633,
    -0.015299801,
    -0.001100261,
    -0.0009862984,
    -0.001231963,
    -0.006343218,
    -0.0044831587,
    -0.002229689,
    -0.00095163693,
    -1.1122856,
    -1.436981,
    -0.10229239,
    -0.023510322,
    -0.00072107237,
    -0.00046968853,
    -0.0012800678,
    -0.005390763,
    -0.014839387,
    -0.0021130862,
    -0.00064335304,
    -1.3337312,
    -0.15624256,
    -0.010759715,
    -0.002155914,
    -0.00076998264,
    -0.00017818765,
    -0.00039628413,
    -0.0009434031,
    -0.0031837418,
    -0.0011033642,
    -0.003008797,
    -0.00071451114,
    -1.2253165,
    -0.5202647,
    -0.015331576,
    -0.0023246747,
    -0.0004870414,
    -0.012313856,
    -0.0019392848,
    -0.003660964,
    -0.0010116551,
    -0.0025707297,
    -0.00046575186,
    -0.58459234,
    -0.09347642,
    -0.9456284,
    -0.100972764,
    -0.40113822,
    -0.0010947746,
    -0.0024826496,
    -0.0020654825,
    -0.0066110226,
    -0.03192693,
    -0.002421885,
    -0.0005485249,
    -0.16055687,
    -0.014342056,
    -0.27819088,
    -0.17107353,
    -0.02904972,
    -0.00057679333,
    -0.0007182085,
    -0.0014507698,
    -0.0055515016,
    -0.005347139,
    -0.0011678729,
    -0.001226593,
    -0.0105479,
    -0.0006317222,
    -0.014351247,
    -0.010485978,
    -0.0043977248,
    -0.00059236086,
    -0.00040439412,
    -0.0006144238,
    -0.0018817154,
    -0.003363982,
    -0.0006864756,
    -0.004500822,
    -0.0010671472,
    -0.045197964,
    -0.0013935273,
    -0.0024837262,
    -0.0065014674,
    -0.0030921411,
    -0.0006275471,
    -0.00078895374,
    -0.0009052807,
    -0.005942903,
    -0.0008384657,
    -0.0011909656,
    -0.0013901846,
    -0.8924051,
    -0.008490104,
    -0.17763256,
    -0.012785127,
    -0.062404215,
    -0.00037100064,
    -0.0006129933,
    -0.0008413285,
    -0.0015903959,
    -0.0070451545,
    -0.0027441066,
    -0.003896399,
    -0.0023746232,
    -3.4880111
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " alarm",
    " clock",
    "\n",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " assert",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " night",
    "stand",
    "\n",
    " find",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " alarm",
    " clock",
    " on",
    " night",
    "stand",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "night",
    "stand",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "night",
    "stand",
    "',",
    " '",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " switch",
    " on",
    " alarm",
    " clock",
    "\n",
    " switch",
    "on",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done",
    "\n",
    "def",
    " set",
    "_",
    "up",
    "_",
    "computer",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " mouse",
    "\n",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " keyboard",
    "\n",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " monitor",
    "\n",
    " find",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " plug",
    " in",
    " computer",
    "\n",
    " plugin",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " plug",
    " in",
    " mouse",
    "\n",
    " plugin",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " plug",
    " in",
    " keyboard",
    "\n",
    " plugin",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " plug",
    " in",
    " monitor",
    "\n",
    " plugin",
    "('",
    "monitor",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 9",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.020296808
    },
    {
      " 0": -0.008335624
    },
    {
      ":": -0.002094987
    },
    {
      " find": -0.7513545
    },
    {
      " alarm": -0.20501587
    },
    {
      " clock": -0.067661315
    },
    {
      "\n": -0.033077847
    },
    {
      " find": -0.019228226
    },
    {
      "('": -0.0021897252
    },
    {
      "al": -0.0034307868
    },
    {
      "arm": -0.0002396524
    },
    {
      "_": -0.016027149
    },
    {
      "clock": -0.00039723687
    },
    {
      "')": -0.0035346237
    },
    {
      "\n": -0.008412439
    },
    {
      " #": -0.0071054203
    },
    {
      " 1": -0.0021356062
    },
    {
      ":": -0.00072268123
    },
    {
      " grab": -0.5320986
    },
    {
      " alarm": -0.18002743
    },
    {
      " clock": -0.00906675
    },
    {
      "\n": -0.019168075
    },
    {
      " grab": -0.691866
    },
    {
      "('": -0.0012369163
    },
    {
      "al": -0.0005339749
    },
    {
      "arm": -0.00011511593
    },
    {
      "_": -0.0037959334
    },
    {
      "clock": -0.000591883
    },
    {
      "')": -0.0017478386
    },
    {
      "\n": -0.004999157
    },
    {
      " #": -0.5902984
    },
    {
      "('": -0.0014784657
    },
    {
      "al": -0.13119909
    },
    {
      "arm": -0.00031823252
    },
    {
      "_": -0.0083276965
    },
    {
      "clock": -0.0008267119
    },
    {
      "'": -0.0023788067
    },
    {
      " in": -0.020232577
    },
    {
      " '": -0.005182898
    },
    {
      "hands": -0.007002417
    },
    {
      "')": -0.03617054
    },
    {
      "\n": -0.0041079447
    },
    {
      " else": -0.015985964
    },
    {
      ":": -0.003942771
    },
    {
      " grab": -0.010311134
    },
    {
      "('": -0.00124408
    },
    {
      "al": -0.0005407735
    },
    {
      "arm": -0.00023631456
    },
    {
      "_": -0.0028234825
    },
    {
      "clock": -0.00079420075
    },
    {
      "')": -0.002244683
    },
    {
      "\n": -0.0065207863
    },
    {
      " #": -0.2590084
    },
    {
      " 2": -0.007023126
    },
    {
      ":": -0.0010290202
    },
    {
      " walk": -0.12549718
    },
    {
      " to": -0.11459407
    },
    {
      " bedroom": -0.07299402
    },
    {
      "\n": -0.023437463
    },
    {
      " walk": -0.010125426
    },
    {
      "('": -0.001966038
    },
    {
      "bedroom": -0.002759167
    },
    {
      "')": -0.0012724282
    },
    {
      "\n": -0.005480119
    },
    {
      " #": -0.01677531
    },
    {
      " 3": -0.005582489
    },
    {
      ":": -0.0008772995
    },
    {
      " put": -0.5581171
    },
    {
      " night": -0.19384031
    },
    {
      "stand": -0.1829504
    },
    {
      "\n": -0.019865943
    },
    {
      " find": -0.32784808
    },
    {
      "('": -0.0007997482
    },
    {
      "night": -0.00060929876
    },
    {
      "stand": -0.0022556144
    },
    {
      "')": -0.0012552998
    },
    {
      "\n": -0.0049238605
    },
    {
      " #": -0.030838083
    },
    {
      " 4": -0.0070204255
    },
    {
      ":": -0.0007716535
    },
    {
      " put": -0.08052322
    },
    {
      " alarm": -0.12284755
    },
    {
      " clock": -0.006560202
    },
    {
      " on": -0.21871983
    },
    {
      " night": -0.05476537
    },
    {
      "stand": -0.026701732
    },
    {
      "\n": -0.011159732
    },
    {
      " assert": -0.60648704
    },
    {
      "('": -0.0014337578
    },
    {
      "close": -0.17664845
    },
    {
      "'": -0.00232802
    },
    {
      " to": -0.003287135
    },
    {
      " '": -0.0024616763
    },
    {
      "night": -0.009768739
    },
    {
      "stand": -0.0006341674
    },
    {
      "')": -0.0069459965
    },
    {
      "\n": -0.0039844806
    },
    {
      " else": -0.0013481642
    },
    {
      ":": -0.0014119698
    },
    {
      " find": -0.01097989
    },
    {
      "('": -0.0019784002
    },
    {
      "night": -0.0013476864
    },
    {
      "stand": -0.0002656446
    },
    {
      "')": -0.00205718
    },
    {
      "\n": -0.006154766
    },
    {
      " put": -0.107325636
    },
    {
      "on": -0.12220346
    },
    {
      "('": -0.0016890266
    },
    {
      "al": -0.33255416
    },
    {
      "stand": -0.0009704297
    },
    {
      "')": -0.65462196
    },
    {
      " '": -0.0038070632
    },
    {
      "al": -0.0007488067
    },
    {
      "arm": -9.782879e-05
    },
    {
      "_": -0.0019093051
    },
    {
      "clock": -0.00028257692
    },
    {
      "')": -0.002936159
    },
    {
      "\n": -0.39986706
    },
    {
      " #": -0.2228048
    },
    {
      " 5": -0.0070351316
    },
    {
      ":": -0.0019492598
    },
    {
      " Done": -0.36444977
    },
    {
      " on": -0.31050685
    },
    {
      " alarm": -0.5059157
    },
    {
      " clock": -0.11022382
    },
    {
      "\n": -0.022281421
    },
    {
      " switch": -0.1711649
    },
    {
      "on": -0.0012484955
    },
    {
      "('": -0.00126264
    },
    {
      "al": -0.0026055714
    },
    {
      "arm": -2.784859e-05
    },
    {
      "_": -0.0019710534
    },
    {
      "clock": -0.00034392995
    },
    {
      "')": -0.0027747676
    },
    {
      "\n": -0.16740568
    },
    {
      " #": -0.0622153
    },
    {
      " 6": -0.006089098
    },
    {
      ":": -0.002692466
    },
    {
      " Done": -0.17013332
    },
    {
      "\n": -0.73056287
    },
    {
      "def": -1.0679682
    },
    {
      " make": -1.0730666
    },
    {
      "_": -0.0012977934
    },
    {
      "al": -0.9158435
    },
    {
      "_": -0.00014623316
    },
    {
      "computer": -0.90847594
    },
    {
      "():": -0.12932846
    },
    {
      "\n": -0.015750028
    },
    {
      " #": -0.01351257
    },
    {
      " 0": -0.0034355118
    },
    {
      ":": -0.0014427716
    },
    {
      " find": -0.7431644
    },
    {
      " computer": -0.32510254
    },
    {
      "\n": -0.041984633
    },
    {
      " find": -0.015299801
    },
    {
      "('": -0.001100261
    },
    {
      "computer": -0.0009862984
    },
    {
      "')": -0.001231963
    },
    {
      "\n": -0.006343218
    },
    {
      " #": -0.0044831587
    },
    {
      " 1": -0.002229689
    },
    {
      ":": -0.00095163693
    },
    {
      " find": -1.1122856
    },
    {
      " power": -1.2374305
    },
    {
      "\n": -0.10229239
    },
    {
      " find": -0.023510322
    },
    {
      "('": -0.00072107237
    },
    {
      "mouse": -0.00046968853
    },
    {
      "')": -0.0012800678
    },
    {
      "\n": -0.005390763
    },
    {
      " #": -0.014839387
    },
    {
      " 2": -0.0021130862
    },
    {
      ":": -0.00064335304
    },
    {
      " plug": -0.79093796
    },
    {
      " keyboard": -0.15624256
    },
    {
      "\n": -0.010759715
    },
    {
      " find": -0.002155914
    },
    {
      "('": -0.00076998264
    },
    {
      "key": -0.00017818765
    },
    {
      "board": -0.00039628413
    },
    {
      "')": -0.0009434031
    },
    {
      "\n": -0.0031837418
    },
    {
      " #": -0.0011033642
    },
    {
      " 3": -0.003008797
    },
    {
      ":": -0.00071451114
    },
    {
      " plug": -0.6998077
    },
    {
      " monitor": -0.5202647
    },
    {
      "\n": -0.015331576
    },
    {
      " find": -0.0023246747
    },
    {
      "('": -0.0004870414
    },
    {
      "monitor": -0.012313856
    },
    {
      "')": -0.0019392848
    },
    {
      "\n": -0.003660964
    },
    {
      " #": -0.0010116551
    },
    {
      " 4": -0.0025707297
    },
    {
      ":": -0.00046575186
    },
    {
      " plug": -0.58459234
    },
    {
      " in": -0.09347642
    },
    {
      " computer": -0.9456284
    },
    {
      "\n": -0.100972764
    },
    {
      " plugin": -0.40113822
    },
    {
      "('": -0.0010947746
    },
    {
      "computer": -0.0024826496
    },
    {
      "')": -0.0020654825
    },
    {
      "\n": -0.0066110226
    },
    {
      " #": -0.03192693
    },
    {
      " 5": -0.002421885
    },
    {
      ":": -0.0005485249
    },
    {
      " plug": -0.16055687
    },
    {
      " in": -0.014342056
    },
    {
      " mouse": -0.27819088
    },
    {
      "\n": -0.17107353
    },
    {
      " plugin": -0.02904972
    },
    {
      "('": -0.00057679333
    },
    {
      "mouse": -0.0007182085
    },
    {
      "')": -0.0014507698
    },
    {
      "\n": -0.0055515016
    },
    {
      " #": -0.005347139
    },
    {
      " 6": -0.0011678729
    },
    {
      ":": -0.001226593
    },
    {
      " plug": -0.0105479
    },
    {
      " in": -0.0006317222
    },
    {
      " keyboard": -0.014351247
    },
    {
      "\n": -0.010485978
    },
    {
      " plugin": -0.0043977248
    },
    {
      "('": -0.00059236086
    },
    {
      "key": -0.00040439412
    },
    {
      "board": -0.0006144238
    },
    {
      "')": -0.0018817154
    },
    {
      "\n": -0.003363982
    },
    {
      " #": -0.0006864756
    },
    {
      " 7": -0.004500822
    },
    {
      ":": -0.0010671472
    },
    {
      " plug": -0.045197964
    },
    {
      " in": -0.0013935273
    },
    {
      " monitor": -0.0024837262
    },
    {
      "\n": -0.0065014674
    },
    {
      " plugin": -0.0030921411
    },
    {
      "('": -0.0006275471
    },
    {
      "monitor": -0.00078895374
    },
    {
      "')": -0.0009052807
    },
    {
      "\n": -0.005942903
    },
    {
      " #": -0.0008384657
    },
    {
      " 8": -0.0011909656
    },
    {
      ":": -0.0013901846
    },
    {
      " turn": -0.8924051
    },
    {
      " on": -0.008490104
    },
    {
      " computer": -0.17763256
    },
    {
      "\n": -0.012785127
    },
    {
      " switch": -0.062404215
    },
    {
      "on": -0.00037100064
    },
    {
      "('": -0.0006129933
    },
    {
      "computer": -0.0008413285
    },
    {
      "')": -0.0015903959
    },
    {
      "\n": -0.0070451545
    },
    {
      " #": -0.0027441066
    },
    {
      " 9": -0.003896399
    },
    {
      ":": -0.0023746232
    },
    {
      " Done": -0.14131835
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.739180088043213
[(" # 0: find chair\n find('chair')\n # 1: walk to chair\n walk('chair')\n # 2: sit in the chair\n assert('close' to 'chair')\n else: find('chair')\n else: walk('chair')\n sit('chair')", <OpenAIObject at 0x7fee88066d60> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3361,
    3362,
    3367,
    3369,
    3374,
    3376,
    3377,
    3379,
    3381,
    3382,
    3387,
    3390,
    3396,
    3397,
    3402,
    3404,
    3409,
    3411,
    3412,
    3414,
    3416,
    3417,
    3421,
    3424,
    3428,
    3434,
    3435,
    3442,
    3444,
    3449,
    3450,
    3453,
    3455,
    3460,
    3462,
    3463,
    3468,
    3469,
    3474,
    3476,
    3481,
    3483,
    3484,
    3489,
    3490,
    3495,
    3497,
    3502,
    3504,
    3505,
    3509,
    3511,
    3516
  ],
  "token_logprobs": [
    -0.024507178,
    -0.008203349,
    -0.0017550642,
    -0.4406527,
    -0.1790022,
    -0.027761167,
    -0.032215644,
    -0.0017252096,
    -0.0011459723,
    -0.0015831148,
    -0.007929471,
    -0.003214658,
    -0.0025199975,
    -0.00071021594,
    -0.7379806,
    -0.07920937,
    -0.13044019,
    -0.022656256,
    -0.47215754,
    -0.0046001566,
    -0.0009411362,
    -0.0015366677,
    -0.006211142,
    -0.069124095,
    -0.0043822783,
    -0.00069673505,
    -0.13254778,
    -0.4813941,
    -2.032643,
    -0.0012338732,
    -0.0098665515,
    -0.5245757,
    -0.0014409816,
    -0.011277936,
    -0.0032280525,
    -0.00091387215,
    -0.002446858,
    -0.00074164855,
    -0.0043400144,
    -0.004220828,
    -0.0017007297,
    -0.0011903713,
    -0.032371268,
    -0.001589201,
    -0.000601784,
    -0.0024009119,
    -0.0057348055,
    -2.4598339,
    -0.0018269576,
    -0.20226875,
    -0.005601071,
    -0.0007510726,
    -0.0033733714,
    -0.00548869,
    -0.102883294,
    -0.0015595322,
    -0.00049550895,
    -0.001364459
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " walk",
    " to",
    " chair",
    "\n",
    " walk",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " in",
    " the",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " walk",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.024507178
    },
    {
      " 0": -0.008203349
    },
    {
      ":": -0.0017550642
    },
    {
      " find": -0.4406527
    },
    {
      " chair": -0.1790022
    },
    {
      "\n": -0.027761167
    },
    {
      " find": -0.032215644
    },
    {
      "('": -0.0017252096
    },
    {
      "chair": -0.0011459723
    },
    {
      "')": -0.0015831148
    },
    {
      "\n": -0.007929471
    },
    {
      " #": -0.003214658
    },
    {
      " 1": -0.0025199975
    },
    {
      ":": -0.00071021594
    },
    {
      " walk": -0.7379806
    },
    {
      " to": -0.07920937
    },
    {
      " chair": -0.13044019
    },
    {
      "\n": -0.022656256
    },
    {
      " walk": -0.47215754
    },
    {
      "('": -0.0046001566
    },
    {
      "chair": -0.0009411362
    },
    {
      "')": -0.0015366677
    },
    {
      "\n": -0.006211142
    },
    {
      " #": -0.069124095
    },
    {
      " 2": -0.0043822783
    },
    {
      ":": -0.00069673505
    },
    {
      " sit": -0.13254778
    },
    {
      " in": -0.4813941
    },
    {
      " chair": -0.14374053
    },
    {
      " chair": -0.0012338732
    },
    {
      "\n": -0.0098665515
    },
    {
      " assert": -0.5245757
    },
    {
      "('": -0.0014409816
    },
    {
      "close": -0.011277936
    },
    {
      "'": -0.0032280525
    },
    {
      " to": -0.00091387215
    },
    {
      " '": -0.002446858
    },
    {
      "chair": -0.00074164855
    },
    {
      "')": -0.0043400144
    },
    {
      "\n": -0.004220828
    },
    {
      " else": -0.0017007297
    },
    {
      ":": -0.0011903713
    },
    {
      " find": -0.032371268
    },
    {
      "('": -0.001589201
    },
    {
      "chair": -0.000601784
    },
    {
      "')": -0.0024009119
    },
    {
      "\n": -0.0057348055
    },
    {
      " sit": -0.33434278
    },
    {
      ":": -0.0018269576
    },
    {
      " walk": -0.20226875
    },
    {
      "('": -0.005601071
    },
    {
      "chair": -0.0007510726
    },
    {
      "')": -0.0033733714
    },
    {
      "\n": -0.00548869
    },
    {
      " sit": -0.102883294
    },
    {
      "('": -0.0015595322
    },
    {
      "chair": -0.00049550895
    },
    {
      "')": -0.001364459
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 9.437834978103638
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find window\n find('window')\n # 2: open the window\n assert('close' to 'window')\n else: find('window')\n open('window')\n lookat('window')", <OpenAIObject at 0x7fee6803cc70> JSON: {
  "text_offset": [
    3353,
    3355,
    3357,
    3358,
    3363,
    3366,
    3375,
    3376,
    3381,
    3383,
    3387,
    3391,
    3393,
    3394,
    3396,
    3398,
    3399,
    3404,
    3411,
    3412,
    3417,
    3419,
    3425,
    3427,
    3428,
    3430,
    3432,
    3433,
    3438,
    3442,
    3449,
    3450,
    3457,
    3459,
    3464,
    3465,
    3468,
    3470,
    3476,
    3478,
    3479,
    3484,
    3485,
    3490,
    3492,
    3498,
    3500,
    3501,
    3506,
    3508,
    3514,
    3516,
    3517,
    3522,
    3524,
    3526,
    3532
  ],
  "token_logprobs": [
    -0.020202352,
    -0.009805215,
    -0.0023961924,
    -0.13227297,
    -0.19651535,
    -0.19574338,
    -0.028220095,
    -0.0053756037,
    -0.0041541527,
    -0.0019034519,
    -0.00015708302,
    -0.0017393598,
    -0.008106597,
    -0.002807225,
    -0.0029716126,
    -0.0005086275,
    -0.03372181,
    -0.07874636,
    -0.020607015,
    -0.18255313,
    -0.0011821948,
    -0.0025998943,
    -0.0018538273,
    -0.005109805,
    -0.006670364,
    -0.0047349557,
    -0.00095247134,
    -0.032066632,
    -1.1598957,
    -0.009055203,
    -0.010475618,
    -0.27768877,
    -0.0017352401,
    -0.011156899,
    -0.0030522032,
    -0.0005191226,
    -0.0027741704,
    -0.0012401396,
    -0.0048752245,
    -0.0054904884,
    -0.0016658006,
    -0.0015458626,
    -0.004585367,
    -0.0019391666,
    -0.00078143517,
    -0.0029007727,
    -0.007340227,
    -0.06653302,
    -0.0016351133,
    -0.0009057576,
    -0.0026042573,
    -0.77633697,
    -3.3287418,
    -0.010465559,
    -0.0012034994,
    -0.0031637722,
    -0.0041264985
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " window",
    "\n",
    " find",
    "('",
    "window",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " the",
    " window",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "window",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "window",
    "')",
    "\n",
    " open",
    "('",
    "window",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "window",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.020202352
    },
    {
      " 0": -0.009805215
    },
    {
      ":": -0.0023961924
    },
    {
      " walk": -0.13227297
    },
    {
      " to": -0.19651535
    },
    {
      " bathroom": -0.19574338
    },
    {
      "\n": -0.028220095
    },
    {
      " walk": -0.0053756037
    },
    {
      "('": -0.0041541527
    },
    {
      "bath": -0.0019034519
    },
    {
      "room": -0.00015708302
    },
    {
      "')": -0.0017393598
    },
    {
      "\n": -0.008106597
    },
    {
      " #": -0.002807225
    },
    {
      " 1": -0.0029716126
    },
    {
      ":": -0.0005086275
    },
    {
      " find": -0.03372181
    },
    {
      " window": -0.07874636
    },
    {
      "\n": -0.020607015
    },
    {
      " find": -0.18255313
    },
    {
      "('": -0.0011821948
    },
    {
      "window": -0.0025998943
    },
    {
      "')": -0.0018538273
    },
    {
      "\n": -0.005109805
    },
    {
      " #": -0.006670364
    },
    {
      " 2": -0.0047349557
    },
    {
      ":": -0.00095247134
    },
    {
      " open": -0.032066632
    },
    {
      " window": -0.3951862
    },
    {
      " window": -0.009055203
    },
    {
      "\n": -0.010475618
    },
    {
      " assert": -0.27768877
    },
    {
      "('": -0.0017352401
    },
    {
      "close": -0.011156899
    },
    {
      "'": -0.0030522032
    },
    {
      " to": -0.0005191226
    },
    {
      " '": -0.0027741704
    },
    {
      "window": -0.0012401396
    },
    {
      "')": -0.0048752245
    },
    {
      "\n": -0.0054904884
    },
    {
      " else": -0.0016658006
    },
    {
      ":": -0.0015458626
    },
    {
      " find": -0.004585367
    },
    {
      "('": -0.0019391666
    },
    {
      "window": -0.00078143517
    },
    {
      "')": -0.0029007727
    },
    {
      "\n": -0.007340227
    },
    {
      " open": -0.06653302
    },
    {
      "('": -0.0016351133
    },
    {
      "window": -0.0009057576
    },
    {
      "')": -0.0026042573
    },
    {
      "<|endoftext|>": -0.6423915
    },
    {
      " #": -0.2556531
    },
    {
      "at": -0.010465559
    },
    {
      "('": -0.0012034994
    },
    {
      "window": -0.0031637722
    },
    {
      "')": -0.0041264985
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.830325126647949
[(" # 0: walk to computer\n walk('computer')\n # 1: find computer\n find('computer')\n # 2: sit down on chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 3: find keyboard\n find('keyboard')\n # 4: turn on computer with keyboard\n assert('close' to 'keyboard')\n else: find('keyboard')\n switchon('computer')\n # 5: use computer\n assert('close' to 'computer')\n else: find('computer')\n lookat('computer')\n assert('computer' is 'switchon')\n else: switchon('computer')\n use('computer')", <OpenAIObject at 0x7fee98071c70> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3367,
    3368,
    3373,
    3375,
    3383,
    3385,
    3386,
    3388,
    3390,
    3391,
    3396,
    3405,
    3406,
    3411,
    3413,
    3421,
    3423,
    3424,
    3426,
    3428,
    3429,
    3433,
    3438,
    3441,
    3447,
    3448,
    3455,
    3457,
    3462,
    3463,
    3466,
    3468,
    3473,
    3475,
    3476,
    3481,
    3482,
    3487,
    3489,
    3494,
    3496,
    3497,
    3501,
    3503,
    3508,
    3510,
    3511,
    3513,
    3515,
    3516,
    3521,
    3530,
    3531,
    3536,
    3538,
    3541,
    3546,
    3548,
    3549,
    3551,
    3553,
    3554,
    3559,
    3562,
    3571,
    3576,
    3585,
    3586,
    3593,
    3595,
    3600,
    3601,
    3604,
    3606,
    3609,
    3614,
    3616,
    3617,
    3622,
    3623,
    3628,
    3630,
    3633,
    3638,
    3640,
    3641,
    3648,
    3650,
    3652,
    3660,
    3662,
    3663,
    3665,
    3667,
    3668,
    3672,
    3681,
    3682,
    3689,
    3691,
    3696,
    3697,
    3700,
    3702,
    3710,
    3712,
    3713,
    3718,
    3719,
    3724,
    3726,
    3734,
    3736,
    3737,
    3742,
    3744,
    3746,
    3754,
    3756,
    3757,
    3764,
    3766,
    3774,
    3775,
    3778,
    3780,
    3786,
    3788,
    3790,
    3791,
    3796,
    3797,
    3804,
    3806,
    3808,
    3816,
    3818,
    3819,
    3823,
    3825,
    3833
  ],
  "token_logprobs": [
    -0.018650854,
    -0.0071482854,
    -0.0018608755,
    -0.24175094,
    -0.24357578,
    -2.6378958,
    -0.16511095,
    -0.018050991,
    -0.0037846272,
    -0.08533967,
    -0.0043172645,
    -0.0070138215,
    -0.034642585,
    -0.0030919015,
    -0.0005917629,
    -0.31959423,
    -0.28892693,
    -0.03583749,
    -0.068562575,
    -0.0009760399,
    -0.0011835061,
    -0.0014651567,
    -0.004998317,
    -0.008208097,
    -0.004167078,
    -0.00077726186,
    -1.908141,
    -1.9280008,
    -1.6874312,
    -0.63329476,
    -0.053868156,
    -1.5385242,
    -0.0017071172,
    -0.04198109,
    -0.004135958,
    -0.0008636384,
    -0.0028671185,
    -0.16920434,
    -0.007557547,
    -0.0058856425,
    -0.0018132824,
    -0.0017000125,
    -0.013411982,
    -0.0018584867,
    -0.0022367972,
    -0.003113727,
    -0.0056272643,
    -0.09154157,
    -0.0021961154,
    -0.0031536676,
    -0.00062110514,
    -0.0062104226,
    -0.03323404,
    -0.006589003,
    -0.00084836746,
    -2.9277604,
    -0.7841747,
    -0.17918544,
    -0.07709156,
    -0.0012631178,
    -0.00037660534,
    -0.00047940828,
    -0.0017334473,
    -0.00437695,
    -0.023161398,
    -0.006219659,
    -0.0008259966,
    -1.1899656,
    -0.066457085,
    -0.49011928,
    -3.8435137,
    -0.36705062,
    -0.011917537,
    -0.43186042,
    -0.0015420424,
    -0.1832466,
    -0.0035205667,
    -0.0067543117,
    -0.002474885,
    -0.34888104,
    -0.000787282,
    -0.0075394693,
    -0.004378268,
    -0.0012128681,
    -0.0010152343,
    -0.006122979,
    -0.0012876457,
    -0.0010835568,
    -0.00072697556,
    -0.0025821435,
    -0.0060312888,
    -0.38890812,
    -0.0025055937,
    -0.0012698009,
    -0.04217903,
    -0.005122147,
    -0.014253479,
    -0.028010065,
    -0.0072478224,
    -0.000590093,
    -0.88291395,
    -0.65565526,
    -0.041162524,
    -1.627059,
    -0.0013818298,
    -1.1829553,
    -0.0031980327,
    -0.00066112546,
    -0.0014907621,
    -0.22818032,
    -0.0071620927,
    -0.002852055,
    -0.0014176422,
    -0.0011397669,
    -0.009826581,
    -0.0011207291,
    -0.0015351742,
    -0.004836771,
    -0.0050312052,
    -2.0446215,
    -0.0014607384,
    -0.00066935836,
    -0.005078774,
    -0.0034450223,
    -0.5063841,
    -2.3227363,
    -0.0021311843,
    -0.8533252,
    -0.026566511,
    -0.068338156,
    -0.016672274,
    -0.13938478,
    -0.008144095,
    -0.01353009,
    -0.0078105363,
    -0.007370187,
    -0.0075688376,
    -0.0059042303,
    -0.009309416,
    -0.0022894896,
    -0.0008152585,
    -0.004820421,
    -0.29678798,
    -0.50936675,
    -0.010521033,
    -0.007306482,
    -0.0027362753
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " computer",
    "\n",
    " walk",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " down",
    " on",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " keyboard",
    "\n",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " on",
    " computer",
    " with",
    " keyboard",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "key",
    "board",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " use",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')",
    "\n",
    " assert",
    "('",
    "computer",
    "'",
    " is",
    " '",
    "switch",
    "on",
    "')",
    "\n",
    " else",
    ":",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " use",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018650854
    },
    {
      " 0": -0.0071482854
    },
    {
      ":": -0.0018608755
    },
    {
      " walk": -0.24175094
    },
    {
      " to": -0.24357578
    },
    {
      " home": -0.78639144
    },
    {
      "\n": -0.16511095
    },
    {
      " walk": -0.018050991
    },
    {
      "('": -0.0037846272
    },
    {
      "computer": -0.08533967
    },
    {
      "')": -0.0043172645
    },
    {
      "\n": -0.0070138215
    },
    {
      " #": -0.034642585
    },
    {
      " 1": -0.0030919015
    },
    {
      ":": -0.0005917629
    },
    {
      " find": -0.31959423
    },
    {
      " computer": -0.28892693
    },
    {
      "\n": -0.03583749
    },
    {
      " find": -0.068562575
    },
    {
      "('": -0.0009760399
    },
    {
      "computer": -0.0011835061
    },
    {
      "')": -0.0014651567
    },
    {
      "\n": -0.004998317
    },
    {
      " #": -0.008208097
    },
    {
      " 2": -0.004167078
    },
    {
      ":": -0.00077726186
    },
    {
      " turn": -0.67233264
    },
    {
      " in": -1.0161059
    },
    {
      "\n": -0.9503297
    },
    {
      " chair": -0.63329476
    },
    {
      "\n": -0.053868156
    },
    {
      " find": -0.73869663
    },
    {
      "('": -0.0017071172
    },
    {
      "close": -0.04198109
    },
    {
      "'": -0.004135958
    },
    {
      " to": -0.0008636384
    },
    {
      " '": -0.0028671185
    },
    {
      "chair": -0.16920434
    },
    {
      "')": -0.007557547
    },
    {
      "\n": -0.0058856425
    },
    {
      " else": -0.0018132824
    },
    {
      ":": -0.0017000125
    },
    {
      " find": -0.013411982
    },
    {
      "('": -0.0018584867
    },
    {
      "chair": -0.0022367972
    },
    {
      "')": -0.003113727
    },
    {
      "\n": -0.0056272643
    },
    {
      " sit": -0.09154157
    },
    {
      "('": -0.0021961154
    },
    {
      "chair": -0.0031536676
    },
    {
      "')": -0.00062110514
    },
    {
      "\n": -0.0062104226
    },
    {
      " #": -0.03323404
    },
    {
      " 3": -0.006589003
    },
    {
      ":": -0.00084836746
    },
    {
      " turn": -0.49869597
    },
    {
      " keyboard": -0.7841747
    },
    {
      "\n": -0.17918544
    },
    {
      " find": -0.07709156
    },
    {
      "('": -0.0012631178
    },
    {
      "key": -0.00037660534
    },
    {
      "board": -0.00047940828
    },
    {
      "')": -0.0017334473
    },
    {
      "\n": -0.00437695
    },
    {
      " #": -0.023161398
    },
    {
      " 4": -0.006219659
    },
    {
      ":": -0.0008259966
    },
    {
      " turn": -1.1899656
    },
    {
      " on": -0.066457085
    },
    {
      " computer": -0.49011928
    },
    {
      "\n": -0.055239063
    },
    {
      " keyboard": -0.36705062
    },
    {
      "\n": -0.011917537
    },
    {
      " assert": -0.43186042
    },
    {
      "('": -0.0015420424
    },
    {
      "close": -0.1832466
    },
    {
      "'": -0.0035205667
    },
    {
      " to": -0.0067543117
    },
    {
      " '": -0.002474885
    },
    {
      "key": -0.34888104
    },
    {
      "board": -0.000787282
    },
    {
      "')": -0.0075394693
    },
    {
      "\n": -0.004378268
    },
    {
      " else": -0.0012128681
    },
    {
      ":": -0.0010152343
    },
    {
      " find": -0.006122979
    },
    {
      "('": -0.0012876457
    },
    {
      "key": -0.0010835568
    },
    {
      "board": -0.00072697556
    },
    {
      "')": -0.0025821435
    },
    {
      "\n": -0.0060312888
    },
    {
      " switch": -0.38890812
    },
    {
      "on": -0.0025055937
    },
    {
      "('": -0.0012698009
    },
    {
      "computer": -0.04217903
    },
    {
      "')": -0.005122147
    },
    {
      "\n": -0.014253479
    },
    {
      " #": -0.028010065
    },
    {
      " 5": -0.0072478224
    },
    {
      ":": -0.000590093
    },
    {
      " use": -0.88291395
    },
    {
      " computer": -0.65565526
    },
    {
      "\n": -0.041162524
    },
    {
      " tur": -1.2664603
    },
    {
      "('": -0.0013818298
    },
    {
      "computer": -0.43667078
    },
    {
      "'": -0.0031980327
    },
    {
      " to": -0.00066112546
    },
    {
      " '": -0.0014907621
    },
    {
      "computer": -0.22818032
    },
    {
      "')": -0.0071620927
    },
    {
      "\n": -0.002852055
    },
    {
      " else": -0.0014176422
    },
    {
      ":": -0.0011397669
    },
    {
      " find": -0.009826581
    },
    {
      "('": -0.0011207291
    },
    {
      "computer": -0.0015351742
    },
    {
      "')": -0.004836771
    },
    {
      "\n": -0.0050312052
    },
    {
      " use": -1.0221624
    },
    {
      "at": -0.0014607384
    },
    {
      "('": -0.00066935836
    },
    {
      "computer": -0.005078774
    },
    {
      "')": -0.0034450223
    },
    {
      "\n": -0.5063841
    },
    {
      " use": -1.1790862
    },
    {
      "('": -0.0021311843
    },
    {
      "computer": -0.8533252
    },
    {
      "'": -0.026566511
    },
    {
      " is": -0.068338156
    },
    {
      " '": -0.016672274
    },
    {
      "switch": -0.13938478
    },
    {
      "on": -0.008144095
    },
    {
      "')": -0.01353009
    },
    {
      "\n": -0.0078105363
    },
    {
      " else": -0.007370187
    },
    {
      ":": -0.0075688376
    },
    {
      " switch": -0.0059042303
    },
    {
      "on": -0.009309416
    },
    {
      "('": -0.0022894896
    },
    {
      "computer": -0.0008152585
    },
    {
      "')": -0.004820421
    },
    {
      "\n": -0.29678798
    },
    {
      " use": -0.50936675
    },
    {
      "('": -0.010521033
    },
    {
      "computer": -0.007306482
    },
    {
      "')": -0.0027362753
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.668443918228149
[(" # 0: find sink\n find('sink')\n # 1: turn on faucet\n turnto('faucet')\n assert('close' to 'faucet')\n else: find('faucet')\n turnon('faucet')\n # 2: wet face with hands\n touch('water')\n # 3: add soap\n find('soap')\n grab('soap')\n pour('soap')\n # 4: wash face\n wash('face')\n # 5: rinse face\n rinse('face')\n # 6: turn off faucet\n turnto('faucet')\n assert('close' to 'faucet')\n else: find('faucet')\n turnoff('faucet')\n # 7: done", <OpenAIObject at 0x7fee98099ae0> JSON: {
  "text_offset": [
    3342,
    3344,
    3346,
    3347,
    3352,
    3357,
    3358,
    3363,
    3365,
    3366,
    3369,
    3371,
    3372,
    3374,
    3376,
    3377,
    3382,
    3385,
    3387,
    3390,
    3392,
    3393,
    3397,
    3399,
    3400,
    3402,
    3403,
    3406,
    3408,
    3410,
    3411,
    3418,
    3420,
    3425,
    3426,
    3429,
    3431,
    3432,
    3435,
    3437,
    3439,
    3440,
    3445,
    3446,
    3451,
    3453,
    3454,
    3457,
    3459,
    3461,
    3462,
    3467,
    3469,
    3471,
    3472,
    3475,
    3477,
    3479,
    3480,
    3482,
    3484,
    3485,
    3489,
    3494,
    3499,
    3505,
    3506,
    3512,
    3514,
    3519,
    3521,
    3522,
    3524,
    3526,
    3527,
    3531,
    3536,
    3537,
    3542,
    3544,
    3546,
    3548,
    3550,
    3551,
    3556,
    3558,
    3560,
    3562,
    3564,
    3565,
    3570,
    3572,
    3574,
    3576,
    3578,
    3579,
    3581,
    3583,
    3584,
    3589,
    3594,
    3595,
    3600,
    3602,
    3606,
    3608,
    3609,
    3611,
    3613,
    3614,
    3620,
    3625,
    3626,
    3632,
    3634,
    3638,
    3640,
    3641,
    3643,
    3645,
    3646,
    3651,
    3655,
    3657,
    3660,
    3662,
    3663,
    3667,
    3669,
    3670,
    3672,
    3673,
    3676,
    3678,
    3680,
    3681,
    3688,
    3690,
    3695,
    3696,
    3699,
    3701,
    3702,
    3705,
    3707,
    3709,
    3710,
    3715,
    3716,
    3721,
    3723,
    3724,
    3727,
    3729,
    3731,
    3732,
    3737,
    3740,
    3742,
    3743,
    3746,
    3748,
    3750,
    3751,
    3753,
    3755,
    3756
  ],
  "token_logprobs": [
    -0.018227618,
    -0.0062912125,
    -0.0017117729,
    -0.9751874,
    -0.46289647,
    -0.034774333,
    -0.15335938,
    -0.0019736825,
    -0.0011068278,
    -0.000109035354,
    -0.0018900179,
    -0.0081755845,
    -0.009771207,
    -0.0031863735,
    -0.00072697556,
    -0.8018481,
    -0.23852481,
    -0.909404,
    -0.0018841045,
    -0.0021550776,
    -0.039211784,
    -1.3363303,
    -8.2927705e-05,
    -0.00034571995,
    -0.0009598689,
    -0.31082594,
    -0.00057595887,
    -0.0003707613,
    -0.0021560332,
    -0.00672815,
    -1.3425113,
    -0.0018814761,
    -0.12917204,
    -0.0049748356,
    -0.0008514707,
    -0.0033169745,
    -0.0048264703,
    -0.0006404911,
    -0.0006147833,
    -0.006834308,
    -0.0054005925,
    -0.0026484807,
    -0.0015896789,
    -0.017064232,
    -0.0017973393,
    -0.0017831862,
    -0.00024025032,
    -6.408898e-05,
    -0.0037403523,
    -0.009721491,
    -2.6201556,
    -0.0071963123,
    -0.0028799695,
    -0.0011222807,
    -0.0006883838,
    -0.00033856556,
    -0.0021820788,
    -0.006528946,
    -0.04317491,
    -0.0087458575,
    -0.0008631615,
    -1.6872476,
    -0.41169927,
    -1.7448537,
    -2.4398396,
    -0.018468995,
    -2.9432397,
    -0.0045530936,
    -2.15434,
    -0.03453954,
    -0.007750647,
    -0.4542356,
    -0.005187392,
    -0.0013439853,
    -3.442916,
    -0.13705933,
    -0.2357634,
    -2.2278993,
    -0.002083099,
    -0.0049704635,
    -0.00021097568,
    -0.0038585206,
    -0.004575488,
    -0.41208327,
    -0.0012940904,
    -0.00017520743,
    -6.265847e-05,
    -0.0018181783,
    -0.0038244152,
    -1.7585838,
    -0.007658027,
    -0.010916617,
    -0.0002000066,
    -0.05747563,
    -0.008082987,
    -0.15596087,
    -0.008168794,
    -0.0018855977,
    -0.6788598,
    -0.15305002,
    -0.4201885,
    -0.6102023,
    -0.004098428,
    -0.04961406,
    -0.0038102937,
    -0.0074972506,
    -0.10058756,
    -0.00526151,
    -0.0018025939,
    -0.90229297,
    -0.5591322,
    -0.1325431,
    -0.83146065,
    -0.005249886,
    -0.007513586,
    -0.0025183237,
    -0.009398097,
    -0.018205643,
    -0.004099984,
    -0.0017616312,
    -0.27168638,
    -0.036650535,
    -0.0660435,
    -0.00084502774,
    -0.00089567545,
    -0.015032082,
    -1.5837919,
    -6.13453e-05,
    -0.00046861471,
    -0.00064394815,
    -0.0013770539,
    -0.0007509534,
    -0.00042222187,
    -0.0027319735,
    -0.0042733275,
    -1.5347338,
    -0.0006135903,
    -0.008313389,
    -0.0022957015,
    -0.00031691935,
    -0.0023583714,
    -0.0005845466,
    -0.0001856978,
    -5.8130416e-05,
    -0.002574913,
    -0.0034576424,
    -0.0019288338,
    -0.0009114852,
    -0.004139069,
    -0.0010847488,
    -0.00023404865,
    -0.00050087424,
    -0.00024453807,
    -0.0013642197,
    -0.0067207697,
    -0.089868024,
    -0.0054677133,
    -0.0008856516,
    -0.0005641506,
    -0.0019020184,
    -0.00018641399,
    -0.0031090027,
    -0.18439575,
    -0.01995484,
    -0.012315966,
    -0.001981388,
    -1.9801565
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " turn",
    " on",
    " f",
    "auc",
    "et",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " turn",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " wet",
    " face",
    " with",
    " hands",
    "\n",
    " touch",
    "('",
    "water",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " add",
    " soap",
    "\n",
    " find",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " pour",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " face",
    "\n",
    " wash",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " rinse",
    " face",
    "\n",
    " rinse",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " turn",
    " off",
    " f",
    "auc",
    "et",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " turn",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.018227618
    },
    {
      " 0": -0.0062912125
    },
    {
      ":": -0.0017117729
    },
    {
      " walk": -0.67857945
    },
    {
      " sink": -0.46289647
    },
    {
      "\n": -0.034774333
    },
    {
      " find": -0.15335938
    },
    {
      "('": -0.0019736825
    },
    {
      "s": -0.0011068278
    },
    {
      "ink": -0.000109035354
    },
    {
      "')": -0.0018900179
    },
    {
      "\n": -0.0081755845
    },
    {
      " #": -0.009771207
    },
    {
      " 1": -0.0031863735
    },
    {
      ":": -0.00072697556
    },
    {
      " turn": -0.8018481
    },
    {
      " on": -0.23852481
    },
    {
      " f": -0.909404
    },
    {
      "auc": -0.0018841045
    },
    {
      "et": -0.0021550776
    },
    {
      "\n": -0.039211784
    },
    {
      " assert": -0.72758573
    },
    {
      "nt": -8.2927705e-05
    },
    {
      "o": -0.00034571995
    },
    {
      "('": -0.0009598689
    },
    {
      "f": -0.31082594
    },
    {
      "auc": -0.00057595887
    },
    {
      "et": -0.0003707613
    },
    {
      "')": -0.0021560332
    },
    {
      "\n": -0.00672815
    },
    {
      " switch": -1.1912156
    },
    {
      "('": -0.0018814761
    },
    {
      "close": -0.12917204
    },
    {
      "'": -0.0049748356
    },
    {
      " to": -0.0008514707
    },
    {
      " '": -0.0033169745
    },
    {
      "f": -0.0048264703
    },
    {
      "auc": -0.0006404911
    },
    {
      "et": -0.0006147833
    },
    {
      "')": -0.006834308
    },
    {
      "\n": -0.0054005925
    },
    {
      " else": -0.0026484807
    },
    {
      ":": -0.0015896789
    },
    {
      " find": -0.017064232
    },
    {
      "('": -0.0017973393
    },
    {
      "f": -0.0017831862
    },
    {
      "auc": -0.00024025032
    },
    {
      "et": -6.408898e-05
    },
    {
      "')": -0.0037403523
    },
    {
      "\n": -0.009721491
    },
    {
      " switch": -0.28371155
    },
    {
      "on": -0.0071963123
    },
    {
      "('": -0.0028799695
    },
    {
      "f": -0.0011222807
    },
    {
      "auc": -0.0006883838
    },
    {
      "et": -0.00033856556
    },
    {
      "')": -0.0021820788
    },
    {
      "\n": -0.006528946
    },
    {
      " #": -0.04317491
    },
    {
      " 2": -0.0087458575
    },
    {
      ":": -0.0008631615
    },
    {
      " grab": -1.5032458
    },
    {
      " face": -0.41169927
    },
    {
      "\n": -0.23968484
    },
    {
      " water": -0.31297997
    },
    {
      "\n": -0.018468995
    },
    {
      " assert": -1.111324
    },
    {
      "('": -0.0045530936
    },
    {
      "f": -0.607523
    },
    {
      "')": -0.03453954
    },
    {
      "\n": -0.007750647
    },
    {
      " #": -0.4542356
    },
    {
      " 3": -0.005187392
    },
    {
      ":": -0.0013439853
    },
    {
      " wash": -1.7836474
    },
    {
      " soap": -0.13705933
    },
    {
      "\n": -0.2357634
    },
    {
      " grab": -1.0162579
    },
    {
      "('": -0.002083099
    },
    {
      "so": -0.0049704635
    },
    {
      "ap": -0.00021097568
    },
    {
      "')": -0.0038585206
    },
    {
      "\n": -0.004575488
    },
    {
      " grab": -0.41208327
    },
    {
      "('": -0.0012940904
    },
    {
      "so": -0.00017520743
    },
    {
      "ap": -6.265847e-05
    },
    {
      "')": -0.0018181783
    },
    {
      "\n": -0.0038244152
    },
    {
      " assert": -1.3533247
    },
    {
      "('": -0.007658027
    },
    {
      "so": -0.010916617
    },
    {
      "ap": -0.0002000066
    },
    {
      "')": -0.05747563
    },
    {
      "\n": -0.008082987
    },
    {
      " #": -0.15596087
    },
    {
      " 4": -0.008168794
    },
    {
      ":": -0.0018855977
    },
    {
      " wash": -0.6788598
    },
    {
      " face": -0.15305002
    },
    {
      "\n": -0.4201885
    },
    {
      " wash": -0.6102023
    },
    {
      "('": -0.004098428
    },
    {
      "face": -0.04961406
    },
    {
      "')": -0.0038102937
    },
    {
      "\n": -0.0074972506
    },
    {
      " #": -0.10058756
    },
    {
      " 5": -0.00526151
    },
    {
      ":": -0.0018025939
    },
    {
      " turn": -0.90215474
    },
    {
      " face": -0.5591322
    },
    {
      "\n": -0.1325431
    },
    {
      " rinse": -0.83146065
    },
    {
      "('": -0.005249886
    },
    {
      "face": -0.007513586
    },
    {
      "')": -0.0025183237
    },
    {
      "\n": -0.009398097
    },
    {
      " #": -0.018205643
    },
    {
      " 6": -0.004099984
    },
    {
      ":": -0.0017616312
    },
    {
      " turn": -0.27168638
    },
    {
      " off": -0.036650535
    },
    {
      " f": -0.0660435
    },
    {
      "auc": -0.00084502774
    },
    {
      "et": -0.00089567545
    },
    {
      "\n": -0.015032082
    },
    {
      " turn": -0.38561726
    },
    {
      "nt": -6.13453e-05
    },
    {
      "o": -0.00046861471
    },
    {
      "('": -0.00064394815
    },
    {
      "f": -0.0013770539
    },
    {
      "auc": -0.0007509534
    },
    {
      "et": -0.00042222187
    },
    {
      "')": -0.0027319735
    },
    {
      "\n": -0.0042733275
    },
    {
      " turn": -0.37991336
    },
    {
      "('": -0.0006135903
    },
    {
      "close": -0.008313389
    },
    {
      "'": -0.0022957015
    },
    {
      " to": -0.00031691935
    },
    {
      " '": -0.0023583714
    },
    {
      "f": -0.0005845466
    },
    {
      "auc": -0.0001856978
    },
    {
      "et": -5.8130416e-05
    },
    {
      "')": -0.002574913
    },
    {
      "\n": -0.0034576424
    },
    {
      " else": -0.0019288338
    },
    {
      ":": -0.0009114852
    },
    {
      " find": -0.004139069
    },
    {
      "('": -0.0010847488
    },
    {
      "f": -0.00023404865
    },
    {
      "auc": -0.00050087424
    },
    {
      "et": -0.00024453807
    },
    {
      "')": -0.0013642197
    },
    {
      "\n": -0.0067207697
    },
    {
      " turn": -0.089868024
    },
    {
      "off": -0.0054677133
    },
    {
      "('": -0.0008856516
    },
    {
      "f": -0.0005641506
    },
    {
      "auc": -0.0019020184
    },
    {
      "et": -0.00018641399
    },
    {
      "')": -0.0031090027
    },
    {
      "\n": -0.18439575
    },
    {
      " #": -0.01995484
    },
    {
      " 7": -0.012315966
    },
    {
      ":": -0.001981388
    },
    {
      " dry": -0.7865807
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.722728967666626
[(" # 0: walk to home office\n walk('home_office')\n # 1: find computer\n find('computer')\n # 2: turn on the computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')\n # 3: find keyboard\n find('keyboard')\n # 4: sit in chair\n find('chair')\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 5: type on the keyboard\n touch('keyboard')\n # 6: look at the screen\n turnto('computer')\n lookat('computer')", <OpenAIObject at 0x7fee98099ef0> JSON: {
  "text_offset": [
    3346,
    3348,
    3350,
    3351,
    3356,
    3359,
    3364,
    3371,
    3372,
    3377,
    3379,
    3383,
    3384,
    3390,
    3392,
    3393,
    3395,
    3397,
    3398,
    3403,
    3412,
    3413,
    3418,
    3420,
    3428,
    3430,
    3431,
    3433,
    3435,
    3436,
    3441,
    3444,
    3448,
    3457,
    3458,
    3465,
    3467,
    3472,
    3473,
    3476,
    3478,
    3486,
    3488,
    3489,
    3494,
    3495,
    3500,
    3502,
    3510,
    3512,
    3513,
    3520,
    3522,
    3524,
    3532,
    3534,
    3535,
    3537,
    3539,
    3540,
    3545,
    3554,
    3555,
    3560,
    3562,
    3565,
    3570,
    3572,
    3573,
    3575,
    3577,
    3578,
    3582,
    3585,
    3591,
    3592,
    3597,
    3599,
    3604,
    3606,
    3607,
    3614,
    3616,
    3621,
    3622,
    3625,
    3627,
    3632,
    3634,
    3635,
    3640,
    3641,
    3646,
    3648,
    3653,
    3655,
    3656,
    3660,
    3662,
    3667,
    3669,
    3670,
    3672,
    3674,
    3675,
    3680,
    3683,
    3687,
    3696,
    3697,
    3703,
    3705,
    3708,
    3713,
    3715,
    3716,
    3718,
    3720,
    3721,
    3726,
    3729,
    3733,
    3740,
    3741,
    3745,
    3747,
    3748,
    3750,
    3758,
    3760,
    3761,
    3766,
    3768,
    3770,
    3778
  ],
  "token_logprobs": [
    -0.018052144,
    -0.0078538945,
    -0.002157705,
    -0.2969488,
    -0.25138277,
    -0.5847967,
    -0.060293213,
    -0.025638953,
    -0.0055872244,
    -0.004401496,
    -0.01070748,
    -0.029552761,
    -0.00084407313,
    -0.0025726426,
    -0.0072946534,
    -0.0030751007,
    -0.0035451518,
    -0.0007373542,
    -0.076412246,
    -0.7587601,
    -0.063145824,
    -0.4006177,
    -0.0012573282,
    -0.0015766684,
    -0.00203281,
    -0.00559196,
    -0.010519709,
    -0.0055882437,
    -0.0008505161,
    -0.64197075,
    -0.03982281,
    -0.8486772,
    -0.014112676,
    -0.018921668,
    -0.6766765,
    -0.001620367,
    -0.034491725,
    -0.0041285935,
    -0.0009941747,
    -0.0033562684,
    -0.003031158,
    -0.006855313,
    -0.0046311766,
    -0.0017937564,
    -0.0015365494,
    -0.0048056855,
    -0.0017047293,
    -0.0008091732,
    -0.0015948735,
    -0.005398015,
    -0.27930096,
    -0.0032013238,
    -0.00098606,
    -0.0011591013,
    -0.0019667533,
    -0.005447454,
    -0.018318247,
    -0.0056887665,
    -0.00059963536,
    -1.4051573,
    -1.1832858,
    -0.1704984,
    -0.046735637,
    -0.0012299345,
    -0.00043796306,
    -0.00062015053,
    -0.0018214636,
    -0.004371981,
    -0.026998129,
    -0.006719869,
    -0.0006823005,
    -2.3132114,
    -1.1251805,
    -1.2002674,
    -0.15321174,
    -0.544683,
    -0.0016633535,
    -0.0021135649,
    -0.0019601248,
    -0.003835246,
    -0.8539825,
    -0.001107482,
    -0.007875161,
    -0.0023779694,
    -0.00069864327,
    -0.0020129217,
    -0.003245154,
    -0.0053997533,
    -0.0031794952,
    -0.0017274765,
    -0.0011071835,
    -0.00561222,
    -0.00093224534,
    -0.0011635758,
    -0.0015021657,
    -0.0044701057,
    -0.012528281,
    -0.0014893287,
    -0.0011385729,
    -0.0010621339,
    -0.006171079,
    -0.017442212,
    -0.008139049,
    -0.0006242074,
    -0.9853259,
    -0.37934646,
    -0.7408401,
    -0.109725624,
    -0.013133897,
    -1.907816,
    -0.0011478824,
    -0.003226856,
    -0.00077356264,
    -0.0015647868,
    -0.53709054,
    -0.53455985,
    -0.003948635,
    -0.0015050304,
    -1.179359,
    -0.009772049,
    -0.27368066,
    -1.7391119,
    -0.016838167,
    -0.19116387,
    -6.0753944e-05,
    -0.00028722888,
    -0.0005655811,
    -0.6703768,
    -0.36015227,
    -0.008303353,
    -0.0151991565,
    -0.0012314853,
    -0.0005227035,
    -0.066980846,
    -0.006678283
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " keyboard",
    "\n",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " sit",
    " in",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " type",
    " on",
    " the",
    " keyboard",
    "\n",
    " touch",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " look",
    " at",
    " the",
    " screen",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018052144
    },
    {
      " 0": -0.0078538945
    },
    {
      ":": -0.002157705
    },
    {
      " walk": -0.2969488
    },
    {
      " to": -0.25138277
    },
    {
      " home": -0.5847967
    },
    {
      " office": -0.060293213
    },
    {
      "\n": -0.025638953
    },
    {
      " walk": -0.0055872244
    },
    {
      "('": -0.004401496
    },
    {
      "home": -0.01070748
    },
    {
      "_": -0.029552761
    },
    {
      "office": -0.00084407313
    },
    {
      "')": -0.0025726426
    },
    {
      "\n": -0.0072946534
    },
    {
      " #": -0.0030751007
    },
    {
      " 1": -0.0035451518
    },
    {
      ":": -0.0007373542
    },
    {
      " find": -0.076412246
    },
    {
      " computer": -0.7587601
    },
    {
      "\n": -0.063145824
    },
    {
      " find": -0.4006177
    },
    {
      "('": -0.0012573282
    },
    {
      "computer": -0.0015766684
    },
    {
      "')": -0.00203281
    },
    {
      "\n": -0.00559196
    },
    {
      " #": -0.010519709
    },
    {
      " 2": -0.0055882437
    },
    {
      ":": -0.0008505161
    },
    {
      " turn": -0.64197075
    },
    {
      " on": -0.03982281
    },
    {
      " computer": -0.5835492
    },
    {
      " computer": -0.014112676
    },
    {
      "\n": -0.018921668
    },
    {
      " assert": -0.6766765
    },
    {
      "('": -0.001620367
    },
    {
      "close": -0.034491725
    },
    {
      "'": -0.0041285935
    },
    {
      " to": -0.0009941747
    },
    {
      " '": -0.0033562684
    },
    {
      "computer": -0.003031158
    },
    {
      "')": -0.006855313
    },
    {
      "\n": -0.0046311766
    },
    {
      " else": -0.0017937564
    },
    {
      ":": -0.0015365494
    },
    {
      " find": -0.0048056855
    },
    {
      "('": -0.0017047293
    },
    {
      "computer": -0.0008091732
    },
    {
      "')": -0.0015948735
    },
    {
      "\n": -0.005398015
    },
    {
      " switch": -0.27930096
    },
    {
      "on": -0.0032013238
    },
    {
      "('": -0.00098606
    },
    {
      "computer": -0.0011591013
    },
    {
      "')": -0.0019667533
    },
    {
      "\n": -0.005447454
    },
    {
      " #": -0.018318247
    },
    {
      " 3": -0.0056887665
    },
    {
      ":": -0.00059963536
    },
    {
      " sit": -1.0411532
    },
    {
      " keyboard": -1.1832858
    },
    {
      "\n": -0.1704984
    },
    {
      " find": -0.046735637
    },
    {
      "('": -0.0012299345
    },
    {
      "key": -0.00043796306
    },
    {
      "board": -0.00062015053
    },
    {
      "')": -0.0018214636
    },
    {
      "\n": -0.004371981
    },
    {
      " #": -0.026998129
    },
    {
      " 4": -0.006719869
    },
    {
      ":": -0.0006823005
    },
    {
      " type": -1.2625806
    },
    {
      " on": -0.96438044
    },
    {
      " front": -0.5714872
    },
    {
      "\n": -0.15321174
    },
    {
      " find": -0.544683
    },
    {
      "('": -0.0016633535
    },
    {
      "chair": -0.0021135649
    },
    {
      "')": -0.0019601248
    },
    {
      "\n": -0.003835246
    },
    {
      " sit": -0.69457585
    },
    {
      "('": -0.001107482
    },
    {
      "close": -0.007875161
    },
    {
      "'": -0.0023779694
    },
    {
      " to": -0.00069864327
    },
    {
      " '": -0.0020129217
    },
    {
      "chair": -0.003245154
    },
    {
      "')": -0.0053997533
    },
    {
      "\n": -0.0031794952
    },
    {
      " else": -0.0017274765
    },
    {
      ":": -0.0011071835
    },
    {
      " find": -0.00561222
    },
    {
      "('": -0.00093224534
    },
    {
      "chair": -0.0011635758
    },
    {
      "')": -0.0015021657
    },
    {
      "\n": -0.0044701057
    },
    {
      " sit": -0.012528281
    },
    {
      "('": -0.0014893287
    },
    {
      "chair": -0.0011385729
    },
    {
      "')": -0.0010621339
    },
    {
      "\n": -0.006171079
    },
    {
      " #": -0.017442212
    },
    {
      " 5": -0.008139049
    },
    {
      ":": -0.0006242074
    },
    {
      " type": -0.9853259
    },
    {
      " on": -0.37934646
    },
    {
      " the": -0.7408401
    },
    {
      " keyboard": -0.109725624
    },
    {
      "\n": -0.013133897
    },
    {
      " assert": -0.6379882
    },
    {
      "('": -0.0011478824
    },
    {
      "key": -0.003226856
    },
    {
      "board": -0.00077356264
    },
    {
      "')": -0.0015647868
    },
    {
      "\n": -0.53709054
    },
    {
      " #": -0.53455985
    },
    {
      " 6": -0.003948635
    },
    {
      ":": -0.0015050304
    },
    {
      " look": -1.179359
    },
    {
      " at": -0.009772049
    },
    {
      " the": -0.27368066
    },
    {
      " computer": -0.33913058
    },
    {
      "\n": -0.016838167
    },
    {
      " tur": -0.19116387
    },
    {
      "nt": -6.0753944e-05
    },
    {
      "o": -0.00028722888
    },
    {
      "('": -0.0005655811
    },
    {
      "computer": -0.6703768
    },
    {
      "')": -0.36015227
    },
    {
      "\n": -0.008303353
    },
    {
      " look": -0.0151991565
    },
    {
      "at": -0.0012314853
    },
    {
      "('": -0.0005227035
    },
    {
      "computer": -0.066980846
    },
    {
      "')": -0.006678283
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.0856881141662598
[(" # 0: Find a comfortable spot\n find('comfortable_spot')\n # 1: Lie down\n assert('close' to 'comfortable_spot')\n else: find('comfortable_spot')\n lie('comfortable_spot')\n # 2: Close your eyes\n closeeyes()\n # 3: Take a nap\n nap()", <OpenAIObject at 0x7feec8830cc0> JSON: {
  "text_offset": [
    3341,
    3343,
    3345,
    3346,
    3351,
    3353,
    3365,
    3370,
    3371,
    3376,
    3378,
    3381,
    3389,
    3390,
    3394,
    3396,
    3397,
    3399,
    3401,
    3402,
    3406,
    3411,
    3412,
    3419,
    3421,
    3426,
    3427,
    3430,
    3432,
    3435,
    3443,
    3444,
    3448,
    3450,
    3451,
    3456,
    3457,
    3462,
    3464,
    3467,
    3475,
    3476,
    3480,
    3482,
    3483,
    3487,
    3489,
    3492,
    3500,
    3501,
    3505,
    3507,
    3508,
    3510,
    3512,
    3513,
    3519,
    3524,
    3529,
    3530,
    3536,
    3540,
    3542,
    3543,
    3545,
    3547,
    3548,
    3553,
    3555,
    3559,
    3560,
    3564
  ],
  "token_logprobs": [
    -0.019832628,
    -0.009520667,
    -0.0020971375,
    -3.7586443,
    -1.1229717,
    -0.7911161,
    -0.60974455,
    -0.14123522,
    -0.4269111,
    -0.013345896,
    -0.35187262,
    -0.011171242,
    -0.11181544,
    -0.0072622327,
    -0.0028723795,
    -0.013067649,
    -0.01904602,
    -0.0055269874,
    -0.000595938,
    -0.49597552,
    -0.04847821,
    -0.2291951,
    -0.8528619,
    -0.002500099,
    -0.00856152,
    -0.005447695,
    -0.0005120865,
    -0.0053050136,
    -0.03395215,
    -0.0027600036,
    -0.006342499,
    -0.000586636,
    -0.0075460756,
    -0.0089817075,
    -0.004294217,
    -0.0018926451,
    -0.0060354266,
    -0.0015699213,
    -0.0024448256,
    -0.0009051615,
    -0.0011595789,
    -0.00075059576,
    -0.0044105346,
    -0.005666527,
    -0.12827696,
    -0.017464228,
    -0.028835163,
    -0.0023693065,
    -0.0012643117,
    -0.00053611875,
    -0.0018556202,
    -0.00818562,
    -0.022983901,
    -0.00849299,
    -0.0008267119,
    -0.42277637,
    -0.63272697,
    -0.0018744307,
    -0.15839575,
    -0.3538325,
    -1.5646391,
    -0.018555334,
    -0.0065135276,
    -0.0040580905,
    -0.005887682,
    -0.0009503228,
    -0.4352078,
    -0.023874866,
    -0.12843657,
    -0.015472126,
    -1.3326174,
    -0.0029735246
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " Find",
    " a",
    " comfortable",
    " spot",
    "\n",
    " find",
    "('",
    "com",
    "fortable",
    "_",
    "spot",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " Lie",
    " down",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "com",
    "fortable",
    "_",
    "spot",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "com",
    "fortable",
    "_",
    "spot",
    "')",
    "\n",
    " lie",
    "('",
    "com",
    "fortable",
    "_",
    "spot",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " Close",
    " your",
    " eyes",
    "\n",
    " close",
    "eyes",
    "()",
    "\n",
    " #",
    " 3",
    ":",
    " Take",
    " a",
    " nap",
    "\n",
    " nap",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.019832628
    },
    {
      " 0": -0.009520667
    },
    {
      ":": -0.0020971375
    },
    {
      " walk": -0.6759474
    },
    {
      " bed": -1.0955477
    },
    {
      " comfortable": -0.7911161
    },
    {
      " spot": -0.60974455
    },
    {
      "\n": -0.14123522
    },
    {
      " find": -0.4269111
    },
    {
      "('": -0.013345896
    },
    {
      "com": -0.35187262
    },
    {
      "fortable": -0.011171242
    },
    {
      "_": -0.11181544
    },
    {
      "spot": -0.0072622327
    },
    {
      "')": -0.0028723795
    },
    {
      "\n": -0.013067649
    },
    {
      " #": -0.01904602
    },
    {
      " 1": -0.0055269874
    },
    {
      ":": -0.000595938
    },
    {
      " Lie": -0.49597552
    },
    {
      " down": -0.04847821
    },
    {
      "\n": -0.2291951
    },
    {
      " assert": -0.8528619
    },
    {
      "('": -0.002500099
    },
    {
      "close": -0.00856152
    },
    {
      "'": -0.005447695
    },
    {
      " to": -0.0005120865
    },
    {
      " '": -0.0053050136
    },
    {
      "com": -0.03395215
    },
    {
      "fortable": -0.0027600036
    },
    {
      "_": -0.006342499
    },
    {
      "spot": -0.000586636
    },
    {
      "')": -0.0075460756
    },
    {
      "\n": -0.0089817075
    },
    {
      " else": -0.004294217
    },
    {
      ":": -0.0018926451
    },
    {
      " find": -0.0060354266
    },
    {
      "('": -0.0015699213
    },
    {
      "com": -0.0024448256
    },
    {
      "fortable": -0.0009051615
    },
    {
      "_": -0.0011595789
    },
    {
      "spot": -0.00075059576
    },
    {
      "')": -0.0044105346
    },
    {
      "\n": -0.005666527
    },
    {
      " lie": -0.12827696
    },
    {
      "('": -0.017464228
    },
    {
      "com": -0.028835163
    },
    {
      "fortable": -0.0023693065
    },
    {
      "_": -0.0012643117
    },
    {
      "spot": -0.00053611875
    },
    {
      "')": -0.0018556202
    },
    {
      "\n": -0.00818562
    },
    {
      " #": -0.022983901
    },
    {
      " 2": -0.00849299
    },
    {
      ":": -0.0008267119
    },
    {
      " Close": -0.42277637
    },
    {
      " your": -0.63272697
    },
    {
      " eyes": -0.0018744307
    },
    {
      "\n": -0.15839575
    },
    {
      " close": -0.3538325
    },
    {
      "('": -0.59345144
    },
    {
      "()": -0.018555334
    },
    {
      "\n": -0.0065135276
    },
    {
      " #": -0.0040580905
    },
    {
      " 3": -0.005887682
    },
    {
      ":": -0.0009503228
    },
    {
      " Take": -0.4352078
    },
    {
      " a": -0.023874866
    },
    {
      " nap": -0.12843657
    },
    {
      "\n": -0.015472126
    },
    {
      " sleep": -0.36020532
    },
    {
      "()": -0.0029735246
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.970246315002441
[(" # 0: walk to home office\n walk('home_office')\n # 1: find computer\n walk('computer')\n find('computer')\n # 2: turn on computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')\n # 3: sit on chair\n find('chair')\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 4: turn to computer\n turnto('computer')\n # 5: work on computer\n assert('computer' is 'switchedon')\n else: switchon('computer')\n workon('computer')", <OpenAIObject at 0x7fee780480e0> JSON: {
  "text_offset": [
    3352,
    3354,
    3356,
    3357,
    3362,
    3365,
    3370,
    3377,
    3378,
    3383,
    3385,
    3389,
    3390,
    3396,
    3398,
    3399,
    3401,
    3403,
    3404,
    3409,
    3418,
    3419,
    3424,
    3426,
    3434,
    3436,
    3437,
    3442,
    3444,
    3452,
    3454,
    3455,
    3457,
    3459,
    3460,
    3465,
    3468,
    3477,
    3478,
    3485,
    3487,
    3492,
    3493,
    3496,
    3498,
    3506,
    3508,
    3509,
    3514,
    3515,
    3520,
    3522,
    3530,
    3532,
    3533,
    3540,
    3542,
    3544,
    3552,
    3554,
    3555,
    3557,
    3559,
    3560,
    3564,
    3567,
    3573,
    3574,
    3579,
    3581,
    3586,
    3588,
    3589,
    3596,
    3598,
    3603,
    3604,
    3607,
    3609,
    3614,
    3616,
    3617,
    3622,
    3623,
    3628,
    3630,
    3635,
    3637,
    3638,
    3642,
    3644,
    3649,
    3651,
    3652,
    3654,
    3656,
    3657,
    3662,
    3665,
    3674,
    3675,
    3679,
    3681,
    3682,
    3684,
    3692,
    3694,
    3695,
    3697,
    3699,
    3700,
    3705,
    3708,
    3717,
    3718,
    3725,
    3727,
    3735,
    3736,
    3739,
    3741,
    3743,
    3749,
    3751,
    3753,
    3754,
    3759,
    3760,
    3767,
    3769,
    3771,
    3779,
    3781,
    3782,
    3787,
    3789,
    3791,
    3799
  ],
  "token_logprobs": [
    -0.01812989,
    -0.0075634923,
    -0.0018631442,
    -0.17768367,
    -0.2253658,
    -0.5711396,
    -0.04984547,
    -0.024778547,
    -0.0051324535,
    -0.0046523716,
    -0.009136944,
    -0.031880718,
    -0.00085373747,
    -0.0025075069,
    -0.0078693945,
    -0.0027860652,
    -0.003157255,
    -0.0006715069,
    -0.05696472,
    -0.69937825,
    -0.037035316,
    -1.0965958,
    -0.0016884304,
    -0.0030114274,
    -0.0017087897,
    -0.0044011376,
    -0.0147276595,
    -0.00094149384,
    -0.0005775095,
    -0.00094042,
    -0.0042126877,
    -0.0043580933,
    -0.0048462343,
    -0.0008228944,
    -0.6851263,
    -0.03384696,
    -0.695541,
    -0.03191733,
    -0.4581632,
    -0.0014372787,
    -0.034985233,
    -0.004219694,
    -0.0018613534,
    -0.0032918593,
    -0.0026097558,
    -0.005968269,
    -0.003935291,
    -0.0015299215,
    -0.0014243271,
    -0.0063509564,
    -0.0015652627,
    -0.00071212515,
    -0.0017109356,
    -0.0051610298,
    -0.4235478,
    -0.006011979,
    -0.0010333165,
    -0.0011745561,
    -0.0018707276,
    -0.0063881455,
    -0.020127907,
    -0.005905311,
    -0.0006627972,
    -1.1092044,
    -0.85475427,
    -0.2562612,
    -0.0744795,
    -0.23317845,
    -0.0012033792,
    -0.0019148,
    -0.001682639,
    -0.0038040718,
    -0.2870565,
    -0.00076377817,
    -0.0042820047,
    -0.0021629632,
    -0.00056224136,
    -0.0016206064,
    -0.0059649083,
    -0.0046552466,
    -0.0030666708,
    -0.0014349518,
    -0.0011336177,
    -0.0041101,
    -0.0012743383,
    -0.001568607,
    -0.0013014926,
    -0.0042363927,
    -0.013033407,
    -0.0013821865,
    -0.002141637,
    -0.0013150392,
    -0.0052119573,
    -0.010242968,
    -0.007823993,
    -0.00085385767,
    -2.303449,
    -0.28503606,
    -0.17372905,
    -0.15487331,
    -0.078474134,
    -5.2765092e-05,
    -0.00037934902,
    -0.00072107237,
    -0.0014371614,
    -0.0013514466,
    -0.006352097,
    -0.84132683,
    -0.0041367947,
    -0.00105205,
    -1.9280485,
    -0.12026128,
    -0.14324999,
    -0.014488576,
    -2.044527,
    -0.0020780228,
    -0.62159157,
    -0.0230588,
    -0.18626617,
    -0.017078662,
    -3.162558,
    -0.075013116,
    -0.1184123,
    -0.019780947,
    -0.006937654,
    -0.013737282,
    -0.009369519,
    -0.014372169,
    -0.002852175,
    -0.0026491978,
    -0.0009395846,
    -0.0064173606,
    -0.013085762,
    -1.3325793,
    -0.43691728,
    -0.006693105,
    -0.0017991302,
    -0.0028634716
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " walk",
    "('",
    "computer",
    "')",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " to",
    " computer",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " work",
    " on",
    " computer",
    "\n",
    " assert",
    "('",
    "computer",
    "'",
    " is",
    " '",
    "sw",
    "itched",
    "on",
    "')",
    "\n",
    " else",
    ":",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " work",
    "on",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01812989
    },
    {
      " 0": -0.0075634923
    },
    {
      ":": -0.0018631442
    },
    {
      " walk": -0.17768367
    },
    {
      " to": -0.2253658
    },
    {
      " home": -0.5711396
    },
    {
      " office": -0.04984547
    },
    {
      "\n": -0.024778547
    },
    {
      " walk": -0.0051324535
    },
    {
      "('": -0.0046523716
    },
    {
      "home": -0.009136944
    },
    {
      "_": -0.031880718
    },
    {
      "office": -0.00085373747
    },
    {
      "')": -0.0025075069
    },
    {
      "\n": -0.0078693945
    },
    {
      " #": -0.0027860652
    },
    {
      " 1": -0.003157255
    },
    {
      ":": -0.0006715069
    },
    {
      " find": -0.05696472
    },
    {
      " computer": -0.69937825
    },
    {
      "\n": -0.037035316
    },
    {
      " find": -0.43440247
    },
    {
      "('": -0.0016884304
    },
    {
      "computer": -0.0030114274
    },
    {
      "')": -0.0017087897
    },
    {
      "\n": -0.0044011376
    },
    {
      " find": -0.0147276595
    },
    {
      "('": -0.00094149384
    },
    {
      "computer": -0.0005775095
    },
    {
      "')": -0.00094042
    },
    {
      "\n": -0.0042126877
    },
    {
      " #": -0.0043580933
    },
    {
      " 2": -0.0048462343
    },
    {
      ":": -0.0008228944
    },
    {
      " turn": -0.6851263
    },
    {
      " on": -0.03384696
    },
    {
      " computer": -0.695541
    },
    {
      "\n": -0.03191733
    },
    {
      " assert": -0.4581632
    },
    {
      "('": -0.0014372787
    },
    {
      "close": -0.034985233
    },
    {
      "'": -0.004219694
    },
    {
      " to": -0.0018613534
    },
    {
      " '": -0.0032918593
    },
    {
      "computer": -0.0026097558
    },
    {
      "')": -0.005968269
    },
    {
      "\n": -0.003935291
    },
    {
      " else": -0.0015299215
    },
    {
      ":": -0.0014243271
    },
    {
      " find": -0.0063509564
    },
    {
      "('": -0.0015652627
    },
    {
      "computer": -0.00071212515
    },
    {
      "')": -0.0017109356
    },
    {
      "\n": -0.0051610298
    },
    {
      " switch": -0.4235478
    },
    {
      "on": -0.006011979
    },
    {
      "('": -0.0010333165
    },
    {
      "computer": -0.0011745561
    },
    {
      "')": -0.0018707276
    },
    {
      "\n": -0.0063881455
    },
    {
      " #": -0.020127907
    },
    {
      " 3": -0.005905311
    },
    {
      ":": -0.0006627972
    },
    {
      " sit": -1.1092044
    },
    {
      " on": -0.85475427
    },
    {
      " chair": -0.2562612
    },
    {
      "\n": -0.0744795
    },
    {
      " find": -0.23317845
    },
    {
      "('": -0.0012033792
    },
    {
      "chair": -0.0019148
    },
    {
      "')": -0.001682639
    },
    {
      "\n": -0.0038040718
    },
    {
      " assert": -0.2870565
    },
    {
      "('": -0.00076377817
    },
    {
      "close": -0.0042820047
    },
    {
      "'": -0.0021629632
    },
    {
      " to": -0.00056224136
    },
    {
      " '": -0.0016206064
    },
    {
      "chair": -0.0059649083
    },
    {
      "')": -0.0046552466
    },
    {
      "\n": -0.0030666708
    },
    {
      " else": -0.0014349518
    },
    {
      ":": -0.0011336177
    },
    {
      " find": -0.0041101
    },
    {
      "('": -0.0012743383
    },
    {
      "chair": -0.001568607
    },
    {
      "')": -0.0013014926
    },
    {
      "\n": -0.0042363927
    },
    {
      " sit": -0.013033407
    },
    {
      "('": -0.0013821865
    },
    {
      "chair": -0.002141637
    },
    {
      "')": -0.0013150392
    },
    {
      "\n": -0.0052119573
    },
    {
      " #": -0.010242968
    },
    {
      " 4": -0.007823993
    },
    {
      ":": -0.00085385767
    },
    {
      " open": -1.398367
    },
    {
      " to": -0.28503606
    },
    {
      " computer": -0.17372905
    },
    {
      "\n": -0.15487331
    },
    {
      " tur": -0.078474134
    },
    {
      "nt": -5.2765092e-05
    },
    {
      "o": -0.00037934902
    },
    {
      "('": -0.00072107237
    },
    {
      "computer": -0.0014371614
    },
    {
      "')": -0.0013514466
    },
    {
      "\n": -0.006352097
    },
    {
      " look": -0.65272343
    },
    {
      " 5": -0.0041367947
    },
    {
      ":": -0.00105205
    },
    {
      " start": -1.7093146
    },
    {
      " on": -0.12026128
    },
    {
      " computer": -0.14324999
    },
    {
      "\n": -0.014488576
    },
    {
      " look": -0.5536003
    },
    {
      "('": -0.0020780228
    },
    {
      "computer": -0.62159157
    },
    {
      "'": -0.0230588
    },
    {
      " is": -0.18626617
    },
    {
      " '": -0.017078662
    },
    {
      "switch": -0.24746098
    },
    {
      "itched": -0.075013116
    },
    {
      "on": -0.1184123
    },
    {
      "')": -0.019780947
    },
    {
      "\n": -0.006937654
    },
    {
      " else": -0.013737282
    },
    {
      ":": -0.009369519
    },
    {
      " switch": -0.014372169
    },
    {
      "on": -0.002852175
    },
    {
      "('": -0.0026491978
    },
    {
      "computer": -0.0009395846
    },
    {
      "')": -0.0064173606
    },
    {
      "\n": -0.013085762
    },
    {
      " look": -0.91884583
    },
    {
      "on": -0.43691728
    },
    {
      "('": -0.006693105
    },
    {
      "computer": -0.0017991302
    },
    {
      "')": -0.0028634716
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.141596794128418
[(" # 0: walk to living room\n walk('living_room')\n # 1: find newspaper\n find('newspaper')\n # 2: grab newspaper\n grab('newspaper')\n # 3: sit on couch\n find('couch')\n assert('close' to 'couch')\n else: find('couch')\n sit('couch')\n # 4: read newspaper\n turnto('newspaper')\n lookat('newspaper')\n read('newspaper')\n # 5: Done", <OpenAIObject at 0x7feec8853a40> JSON: {
  "text_offset": [
    3342,
    3344,
    3346,
    3347,
    3352,
    3355,
    3362,
    3367,
    3368,
    3373,
    3375,
    3381,
    3382,
    3386,
    3388,
    3389,
    3391,
    3393,
    3394,
    3399,
    3409,
    3410,
    3415,
    3417,
    3420,
    3422,
    3426,
    3428,
    3429,
    3431,
    3433,
    3434,
    3439,
    3449,
    3450,
    3455,
    3457,
    3460,
    3462,
    3466,
    3468,
    3469,
    3471,
    3473,
    3474,
    3478,
    3481,
    3487,
    3488,
    3493,
    3495,
    3496,
    3500,
    3502,
    3503,
    3510,
    3512,
    3517,
    3518,
    3521,
    3523,
    3524,
    3528,
    3530,
    3531,
    3536,
    3537,
    3542,
    3544,
    3545,
    3549,
    3551,
    3552,
    3556,
    3558,
    3559,
    3563,
    3565,
    3566,
    3568,
    3570,
    3571,
    3576,
    3586,
    3587,
    3591,
    3593,
    3594,
    3596,
    3599,
    3601,
    3605,
    3607,
    3608,
    3613,
    3615,
    3617,
    3620,
    3622,
    3626,
    3628,
    3629,
    3634,
    3636,
    3639,
    3641,
    3645,
    3647,
    3648,
    3650,
    3652,
    3653
  ],
  "token_logprobs": [
    -0.019605508,
    -0.0093974965,
    -0.002127242,
    -0.84299296,
    -0.22886738,
    -0.61189353,
    -0.074272364,
    -0.024086226,
    -0.005196739,
    -0.003637454,
    -0.009440035,
    -0.15951407,
    -0.00015112259,
    -0.002121807,
    -0.008819396,
    -0.0018305402,
    -0.0032422235,
    -0.00067866227,
    -0.0478257,
    -0.40032223,
    -0.024486471,
    -0.13298015,
    -0.0011280102,
    -0.002065842,
    -0.00054864504,
    -0.00036742157,
    -0.001966514,
    -0.0049617775,
    -0.013660841,
    -0.004614889,
    -0.00070019584,
    -0.282466,
    -0.31280944,
    -0.024959235,
    -0.3879742,
    -0.0011544465,
    -0.0008949583,
    -0.00033963655,
    -7.839496e-05,
    -0.0013043573,
    -0.0039662896,
    -0.27783173,
    -0.004357853,
    -0.0006071512,
    -1.0364903,
    -0.42871147,
    -0.54677427,
    -0.081708446,
    -0.2595899,
    -0.001295046,
    -0.00042961474,
    -0.00020238983,
    -0.0013885148,
    -0.0037721829,
    -0.8952793,
    -0.0011869096,
    -0.009962748,
    -0.0027830764,
    -0.0007752325,
    -0.0018698924,
    -0.0006552833,
    -0.00037911057,
    -0.0066505633,
    -0.0040003993,
    -0.0022863816,
    -0.0018367484,
    -0.0063549755,
    -0.002066915,
    -0.00033892225,
    -0.000447267,
    -0.0019116942,
    -0.0051646237,
    -0.008057567,
    -0.0008193153,
    -0.0001783078,
    -0.00020084012,
    -0.0014573958,
    -0.0047501675,
    -0.010784538,
    -0.008161222,
    -0.0011639334,
    -0.162086,
    -0.32998148,
    -0.010912337,
    -0.9318697,
    -7.458028e-05,
    -0.00033880305,
    -0.00055878155,
    -0.02786584,
    -0.00028961492,
    -0.00039461427,
    -0.0012352474,
    -0.0044246637,
    -0.41658133,
    -0.00047821619,
    -0.00050206826,
    -0.0012505258,
    -0.0011313519,
    -0.0007972429,
    -0.0015754735,
    -0.29867846,
    -0.3719212,
    -0.004934523,
    -0.0017172667,
    -0.00032491007,
    -0.00029426313,
    -0.002214814,
    -1.2270958,
    -0.094077975,
    -0.006694966,
    -0.001662398,
    -1.0351435
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "_",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " newspaper",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " couch",
    "\n",
    " find",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "c",
    "ouch",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " sit",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " read",
    " newspaper",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.019605508
    },
    {
      " 0": -0.0093974965
    },
    {
      ":": -0.002127242
    },
    {
      " find": -0.7179567
    },
    {
      " to": -0.22886738
    },
    {
      " living": -0.61189353
    },
    {
      " room": -0.074272364
    },
    {
      "\n": -0.024086226
    },
    {
      " walk": -0.005196739
    },
    {
      "('": -0.003637454
    },
    {
      "living": -0.009440035
    },
    {
      "_": -0.15951407
    },
    {
      "room": -0.00015112259
    },
    {
      "')": -0.002121807
    },
    {
      "\n": -0.008819396
    },
    {
      " #": -0.0018305402
    },
    {
      " 1": -0.0032422235
    },
    {
      ":": -0.00067866227
    },
    {
      " find": -0.0478257
    },
    {
      " newspaper": -0.40032223
    },
    {
      "\n": -0.024486471
    },
    {
      " find": -0.13298015
    },
    {
      "('": -0.0011280102
    },
    {
      "new": -0.002065842
    },
    {
      "sp": -0.00054864504
    },
    {
      "aper": -0.00036742157
    },
    {
      "')": -0.001966514
    },
    {
      "\n": -0.0049617775
    },
    {
      " #": -0.013660841
    },
    {
      " 2": -0.004614889
    },
    {
      ":": -0.00070019584
    },
    {
      " grab": -0.282466
    },
    {
      " newspaper": -0.31280944
    },
    {
      "\n": -0.024959235
    },
    {
      " grab": -0.3879742
    },
    {
      "('": -0.0011544465
    },
    {
      "new": -0.0008949583
    },
    {
      "sp": -0.00033963655
    },
    {
      "aper": -7.839496e-05
    },
    {
      "')": -0.0013043573
    },
    {
      "\n": -0.0039662896
    },
    {
      " #": -0.27783173
    },
    {
      " 3": -0.004357853
    },
    {
      ":": -0.0006071512
    },
    {
      " read": -0.97181404
    },
    {
      " on": -0.42871147
    },
    {
      " couch": -0.54677427
    },
    {
      "\n": -0.081708446
    },
    {
      " find": -0.2595899
    },
    {
      "('": -0.001295046
    },
    {
      "c": -0.00042961474
    },
    {
      "ouch": -0.00020238983
    },
    {
      "')": -0.0013885148
    },
    {
      "\n": -0.0037721829
    },
    {
      " sit": -0.5997881
    },
    {
      "('": -0.0011869096
    },
    {
      "close": -0.009962748
    },
    {
      "'": -0.0027830764
    },
    {
      " to": -0.0007752325
    },
    {
      " '": -0.0018698924
    },
    {
      "c": -0.0006552833
    },
    {
      "ouch": -0.00037911057
    },
    {
      "')": -0.0066505633
    },
    {
      "\n": -0.0040003993
    },
    {
      " else": -0.0022863816
    },
    {
      ":": -0.0018367484
    },
    {
      " find": -0.0063549755
    },
    {
      "('": -0.002066915
    },
    {
      "c": -0.00033892225
    },
    {
      "ouch": -0.000447267
    },
    {
      "')": -0.0019116942
    },
    {
      "\n": -0.0051646237
    },
    {
      " sit": -0.008057567
    },
    {
      "('": -0.0008193153
    },
    {
      "c": -0.0001783078
    },
    {
      "ouch": -0.00020084012
    },
    {
      "')": -0.0014573958
    },
    {
      "\n": -0.0047501675
    },
    {
      " #": -0.010784538
    },
    {
      " 4": -0.008161222
    },
    {
      ":": -0.0011639334
    },
    {
      " read": -0.162086
    },
    {
      " newspaper": -0.32998148
    },
    {
      "\n": -0.010912337
    },
    {
      " tur": -0.9318697
    },
    {
      "nt": -7.458028e-05
    },
    {
      "o": -0.00033880305
    },
    {
      "('": -0.00055878155
    },
    {
      "new": -0.02786584
    },
    {
      "sp": -0.00028961492
    },
    {
      "aper": -0.00039461427
    },
    {
      "')": -0.0012352474
    },
    {
      "\n": -0.0044246637
    },
    {
      " look": -0.41658133
    },
    {
      "at": -0.00047821619
    },
    {
      "('": -0.00050206826
    },
    {
      "new": -0.0012505258
    },
    {
      "sp": -0.0011313519
    },
    {
      "aper": -0.0007972429
    },
    {
      "')": -0.0015754735
    },
    {
      "\n": -0.29867846
    },
    {
      " read": -0.3719212
    },
    {
      "('": -0.004934523
    },
    {
      "new": -0.0017172667
    },
    {
      "sp": -0.00032491007
    },
    {
      "aper": -0.00029426313
    },
    {
      "')": -0.002214814
    },
    {
      "<|endoftext|>": -0.35914928
    },
    {
      " #": -0.094077975
    },
    {
      " 5": -0.006694966
    },
    {
      ":": -0.001662398
    },
    {
      " put": -0.79851025
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.730397939682007
[(" # 0: go to bathroom\n walk('bathroom')\n # 1: find sink\n find('sink')\n # 2: turn on the sink\n turnto('sink')\n lookat('sink')\n assert('close' to 'sink')\n else: find('sink')\n plugin('sink')\n # 3: grab soap\n assert('close' to 'soap')\n else: find('soap')\n grab('soap')\n assert('soap' in 'hands')\n else: grab('soap')\n # 4: wash hands\n turnto('soap')\n lookat('soap')\n wash('soap')\n # 5: turn off the sink\n turnto('sink')\n lookat('sink')\n switchoff('sink')\n # 6: put the soap back\n assert('soap' in 'hands')\n else: grab('soap')\n putobjback('soap')", <OpenAIObject at 0x7fee7805a270> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3353,
    3356,
    3365,
    3366,
    3371,
    3373,
    3377,
    3381,
    3383,
    3384,
    3386,
    3388,
    3389,
    3394,
    3399,
    3400,
    3405,
    3407,
    3408,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3424,
    3427,
    3431,
    3436,
    3437,
    3441,
    3443,
    3444,
    3446,
    3447,
    3450,
    3452,
    3453,
    3458,
    3460,
    3462,
    3463,
    3466,
    3468,
    3469,
    3476,
    3478,
    3483,
    3484,
    3487,
    3489,
    3490,
    3493,
    3495,
    3496,
    3501,
    3502,
    3507,
    3509,
    3510,
    3513,
    3515,
    3516,
    3523,
    3525,
    3526,
    3529,
    3531,
    3532,
    3534,
    3536,
    3537,
    3542,
    3547,
    3548,
    3555,
    3557,
    3562,
    3563,
    3566,
    3568,
    3570,
    3572,
    3574,
    3575,
    3580,
    3581,
    3586,
    3588,
    3590,
    3592,
    3594,
    3595,
    3600,
    3602,
    3604,
    3606,
    3608,
    3609,
    3616,
    3618,
    3620,
    3622,
    3623,
    3626,
    3628,
    3633,
    3635,
    3636,
    3641,
    3642,
    3647,
    3649,
    3651,
    3653,
    3655,
    3656,
    3658,
    3660,
    3661,
    3666,
    3672,
    3673,
    3677,
    3679,
    3680,
    3682,
    3684,
    3686,
    3688,
    3689,
    3694,
    3696,
    3698,
    3700,
    3702,
    3704,
    3705,
    3710,
    3712,
    3714,
    3716,
    3718,
    3719,
    3721,
    3723,
    3724,
    3729,
    3733,
    3737,
    3742,
    3743,
    3747,
    3749,
    3750,
    3752,
    3753,
    3756,
    3758,
    3759,
    3764,
    3766,
    3768,
    3769,
    3772,
    3774,
    3775,
    3782,
    3785,
    3787,
    3788,
    3791,
    3793,
    3794,
    3796,
    3798,
    3799,
    3803,
    3807,
    3812,
    3817,
    3818,
    3825,
    3827,
    3829,
    3831,
    3832,
    3835,
    3837,
    3842,
    3844,
    3845,
    3850,
    3851,
    3856,
    3858,
    3860,
    3862,
    3864,
    3865,
    3869,
    3872,
    3876,
    3878,
    3880,
    3882
  ],
  "token_logprobs": [
    -0.023426969,
    -0.0106859105,
    -0.0021599764,
    -3.3558486,
    -0.020025985,
    -0.5154471,
    -0.026015354,
    -0.023731364,
    -0.0047635837,
    -0.0025921252,
    -0.00015565252,
    -0.0016155912,
    -0.008199804,
    -0.0064189197,
    -0.0047304644,
    -0.0013363475,
    -0.19155796,
    -0.18757556,
    -0.035937082,
    -0.20857948,
    -0.0011432267,
    -0.0009867753,
    -0.00014837986,
    -0.0016559504,
    -0.005978581,
    -0.029446501,
    -0.005726592,
    -0.0014807344,
    -0.33889523,
    -0.14530763,
    -1.0514199,
    -2.2624085,
    -0.064276785,
    -1.5123898,
    -8.5549356e-05,
    -0.00051971956,
    -0.00081907597,
    -0.010049262,
    -0.0005062424,
    -0.0020208047,
    -0.005664968,
    -0.8103563,
    -0.0008862496,
    -0.00062623486,
    -0.0011576689,
    -0.0002516953,
    -0.001313727,
    -0.0048619276,
    -0.5355347,
    -0.001101455,
    -0.011820368,
    -0.0031561772,
    -0.00043271598,
    -0.0014976274,
    -0.0060839993,
    -0.00016197246,
    -0.008054566,
    -0.0037803198,
    -0.002155317,
    -0.0013954965,
    -0.00802422,
    -0.0014833598,
    -0.0007729657,
    -0.0002058497,
    -0.0012134659,
    -0.008257017,
    -2.341554,
    -0.0010471578,
    -0.041162957,
    -0.00038006424,
    -0.004856358,
    -0.008368141,
    -0.045429662,
    -0.007822911,
    -0.001141556,
    -1.7297614,
    -0.25732327,
    -0.1158422,
    -1.8252285,
    -0.0013050736,
    -0.032212198,
    -0.0024776314,
    -0.00035931446,
    -0.002554597,
    -0.00920191,
    -0.00012620141,
    -0.014845376,
    -0.0038247742,
    -0.001233157,
    -0.001105035,
    -0.0071553686,
    -0.0013042382,
    -0.00054613885,
    -0.00018700723,
    -0.0017842611,
    -0.004461904,
    -0.010162577,
    -0.0010909562,
    -0.00021121504,
    -0.0001086796,
    -0.0017048494,
    -0.0050264127,
    -1.0698019,
    -0.0013852906,
    -0.008613401,
    -0.00011404399,
    -0.0015509952,
    -0.016730398,
    -0.003875575,
    -0.012449881,
    -0.011477606,
    -0.003788397,
    -0.018907275,
    -0.00260342,
    -0.003334319,
    -0.0015131489,
    -0.0003477465,
    -0.00011762026,
    -0.0022902056,
    -0.0044460385,
    -0.53524095,
    -0.0073501337,
    -0.0012336348,
    -0.60110825,
    -0.20580207,
    -0.24272436,
    -0.98841846,
    -8.3165185e-05,
    -0.0006936328,
    -0.000492525,
    -0.55315083,
    -9.699527e-05,
    -0.001453277,
    -0.004294217,
    -0.3132325,
    -0.0003742193,
    -0.00043044917,
    -0.0030174665,
    -0.00023774413,
    -0.00073365314,
    -0.0043278,
    -0.6359485,
    -0.0033997474,
    -0.21309568,
    -0.00016650239,
    -0.0029746015,
    -0.01911795,
    -0.17634389,
    -0.0050825467,
    -0.0018062359,
    -0.782018,
    -0.022080256,
    -0.5651929,
    -0.024876798,
    -0.025590338,
    -1.0033917,
    -5.6223078e-05,
    -0.00031739712,
    -0.00043092694,
    -0.008410819,
    -0.000118811404,
    -0.0018343596,
    -0.0031222142,
    -0.08137593,
    -0.00032562626,
    -0.0003739799,
    -0.0004649183,
    -0.0003042804,
    -0.00044523858,
    -0.004344203,
    -0.43580225,
    -0.002899697,
    -0.00080022594,
    -0.00147554,
    -0.00033617954,
    -0.0020624348,
    -0.30403444,
    -0.022358948,
    -0.004712678,
    -0.0019547537,
    -1.1146554,
    -2.1083426,
    -0.0014874195,
    -0.02692079,
    -0.027122445,
    -0.43854758,
    -0.0009323654,
    -0.31044692,
    -9.663671e-05,
    -0.0010710839,
    -0.0038221413,
    -0.0022203692,
    -0.002568459,
    -0.004294097,
    -0.002655054,
    -0.0018683388,
    -0.00095318665,
    -0.0071398797,
    -0.0009116053,
    -0.00039413653,
    -0.00014957195,
    -0.0014658737,
    -0.003899091,
    -0.019260492,
    -0.31143564,
    -0.0026711915,
    -0.0011161945,
    -0.0011521796,
    -0.00020906834,
    -0.0067813178
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " go",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " sink",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " plugin",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " soap",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "so",
    "ap",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " assert",
    "('",
    "so",
    "ap",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " hands",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " wash",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " off",
    " the",
    " sink",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " switch",
    "off",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " put",
    " the",
    " soap",
    " back",
    "\n",
    " assert",
    "('",
    "so",
    "ap",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "so",
    "ap",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.023426969
    },
    {
      " 0": -0.0106859105
    },
    {
      ":": -0.0021599764
    },
    {
      " find": -0.86576396
    },
    {
      " to": -0.020025985
    },
    {
      " bathroom": -0.5154471
    },
    {
      "\n": -0.026015354
    },
    {
      " walk": -0.023731364
    },
    {
      "('": -0.0047635837
    },
    {
      "bath": -0.0025921252
    },
    {
      "room": -0.00015565252
    },
    {
      "')": -0.0016155912
    },
    {
      "\n": -0.008199804
    },
    {
      " #": -0.0064189197
    },
    {
      " 1": -0.0047304644
    },
    {
      ":": -0.0013363475
    },
    {
      " find": -0.19155796
    },
    {
      " sink": -0.18757556
    },
    {
      "\n": -0.035937082
    },
    {
      " find": -0.20857948
    },
    {
      "('": -0.0011432267
    },
    {
      "s": -0.0009867753
    },
    {
      "ink": -0.00014837986
    },
    {
      "')": -0.0016559504
    },
    {
      "\n": -0.005978581
    },
    {
      " #": -0.029446501
    },
    {
      " 2": -0.005726592
    },
    {
      ":": -0.0014807344
    },
    {
      " turn": -0.33889523
    },
    {
      " on": -0.14530763
    },
    {
      " f": -0.977165
    },
    {
      " f": -0.50443685
    },
    {
      "\n": -0.064276785
    },
    {
      " assert": -1.1040416
    },
    {
      "nt": -8.5549356e-05
    },
    {
      "o": -0.00051971956
    },
    {
      "('": -0.00081907597
    },
    {
      "s": -0.010049262
    },
    {
      "ink": -0.0005062424
    },
    {
      "')": -0.0020208047
    },
    {
      "\n": -0.005664968
    },
    {
      " look": -0.8103563
    },
    {
      "at": -0.0008862496
    },
    {
      "('": -0.00062623486
    },
    {
      "s": -0.0011576689
    },
    {
      "ink": -0.0002516953
    },
    {
      "')": -0.001313727
    },
    {
      "\n": -0.0048619276
    },
    {
      " assert": -0.5355347
    },
    {
      "('": -0.001101455
    },
    {
      "close": -0.011820368
    },
    {
      "'": -0.0031561772
    },
    {
      " to": -0.00043271598
    },
    {
      " '": -0.0014976274
    },
    {
      "s": -0.0060839993
    },
    {
      "ink": -0.00016197246
    },
    {
      "')": -0.008054566
    },
    {
      "\n": -0.0037803198
    },
    {
      " else": -0.002155317
    },
    {
      ":": -0.0013954965
    },
    {
      " find": -0.00802422
    },
    {
      "('": -0.0014833598
    },
    {
      "s": -0.0007729657
    },
    {
      "ink": -0.0002058497
    },
    {
      "')": -0.0012134659
    },
    {
      "\n": -0.008257017
    },
    {
      " switch": -0.28619134
    },
    {
      "('": -0.0010471578
    },
    {
      "s": -0.041162957
    },
    {
      "ink": -0.00038006424
    },
    {
      "')": -0.004856358
    },
    {
      "\n": -0.008368141
    },
    {
      " #": -0.045429662
    },
    {
      " 3": -0.007822911
    },
    {
      ":": -0.001141556
    },
    {
      " pour": -1.3331836
    },
    {
      " soap": -0.25732327
    },
    {
      "\n": -0.1158422
    },
    {
      " find": -0.62243724
    },
    {
      "('": -0.0013050736
    },
    {
      "close": -0.032212198
    },
    {
      "'": -0.0024776314
    },
    {
      " to": -0.00035931446
    },
    {
      " '": -0.002554597
    },
    {
      "so": -0.00920191
    },
    {
      "ap": -0.00012620141
    },
    {
      "')": -0.014845376
    },
    {
      "\n": -0.0038247742
    },
    {
      " else": -0.001233157
    },
    {
      ":": -0.001105035
    },
    {
      " find": -0.0071553686
    },
    {
      "('": -0.0013042382
    },
    {
      "so": -0.00054613885
    },
    {
      "ap": -0.00018700723
    },
    {
      "')": -0.0017842611
    },
    {
      "\n": -0.004461904
    },
    {
      " grab": -0.010162577
    },
    {
      "('": -0.0010909562
    },
    {
      "so": -0.00021121504
    },
    {
      "ap": -0.0001086796
    },
    {
      "')": -0.0017048494
    },
    {
      "\n": -0.0050264127
    },
    {
      " #": -0.5143382
    },
    {
      "('": -0.0013852906
    },
    {
      "so": -0.008613401
    },
    {
      "ap": -0.00011404399
    },
    {
      "'": -0.0015509952
    },
    {
      " in": -0.016730398
    },
    {
      " '": -0.003875575
    },
    {
      "hands": -0.012449881
    },
    {
      "')": -0.011477606
    },
    {
      "\n": -0.003788397
    },
    {
      " else": -0.018907275
    },
    {
      ":": -0.00260342
    },
    {
      " grab": -0.003334319
    },
    {
      "('": -0.0015131489
    },
    {
      "so": -0.0003477465
    },
    {
      "ap": -0.00011762026
    },
    {
      "')": -0.0022902056
    },
    {
      "\n": -0.0044460385
    },
    {
      " #": -0.53524095
    },
    {
      " 4": -0.0073501337
    },
    {
      ":": -0.0012336348
    },
    {
      " wash": -0.60110825
    },
    {
      " hands": -0.20580207
    },
    {
      "\n": -0.24272436
    },
    {
      " wash": -0.814081
    },
    {
      "nt": -8.3165185e-05
    },
    {
      "o": -0.0006936328
    },
    {
      "('": -0.000492525
    },
    {
      "so": -0.55315083
    },
    {
      "ap": -9.699527e-05
    },
    {
      "')": -0.001453277
    },
    {
      "\n": -0.004294217
    },
    {
      " look": -0.3132325
    },
    {
      "at": -0.0003742193
    },
    {
      "('": -0.00043044917
    },
    {
      "so": -0.0030174665
    },
    {
      "ap": -0.00023774413
    },
    {
      "')": -0.00073365314
    },
    {
      "\n": -0.0043278
    },
    {
      " wash": -0.6359485
    },
    {
      "('": -0.0033997474
    },
    {
      "so": -0.21309568
    },
    {
      "ap": -0.00016650239
    },
    {
      "')": -0.0029746015
    },
    {
      "\n": -0.01911795
    },
    {
      " #": -0.17634389
    },
    {
      " 5": -0.0050825467
    },
    {
      ":": -0.0018062359
    },
    {
      " turn": -0.782018
    },
    {
      " off": -0.022080256
    },
    {
      " the": -0.5651929
    },
    {
      " sink": -0.024876798
    },
    {
      "\n": -0.025590338
    },
    {
      " tur": -1.0033917
    },
    {
      "nt": -5.6223078e-05
    },
    {
      "o": -0.00031739712
    },
    {
      "('": -0.00043092694
    },
    {
      "s": -0.008410819
    },
    {
      "ink": -0.000118811404
    },
    {
      "')": -0.0018343596
    },
    {
      "\n": -0.0031222142
    },
    {
      " look": -0.08137593
    },
    {
      "at": -0.00032562626
    },
    {
      "('": -0.0003739799
    },
    {
      "s": -0.0004649183
    },
    {
      "ink": -0.0003042804
    },
    {
      "')": -0.00044523858
    },
    {
      "\n": -0.004344203
    },
    {
      " switch": -0.43580225
    },
    {
      "off": -0.002899697
    },
    {
      "('": -0.00080022594
    },
    {
      "s": -0.00147554
    },
    {
      "ink": -0.00033617954
    },
    {
      "')": -0.0020624348
    },
    {
      "\n": -0.30403444
    },
    {
      " #": -0.022358948
    },
    {
      " 6": -0.004712678
    },
    {
      ":": -0.0019547537
    },
    {
      " Done": -0.9522789
    },
    {
      " soap": -0.6445346
    },
    {
      " soap": -0.0014874195
    },
    {
      " back": -0.02692079
    },
    {
      "\n": -0.027122445
    },
    {
      " assert": -0.43854758
    },
    {
      "('": -0.0009323654
    },
    {
      "so": -0.31044692
    },
    {
      "ap": -9.663671e-05
    },
    {
      "'": -0.0010710839
    },
    {
      " in": -0.0038221413
    },
    {
      " '": -0.0022203692
    },
    {
      "hands": -0.002568459
    },
    {
      "')": -0.004294097
    },
    {
      "\n": -0.002655054
    },
    {
      " else": -0.0018683388
    },
    {
      ":": -0.00095318665
    },
    {
      " grab": -0.0071398797
    },
    {
      "('": -0.0009116053
    },
    {
      "so": -0.00039413653
    },
    {
      "ap": -0.00014957195
    },
    {
      "')": -0.0014658737
    },
    {
      "\n": -0.003899091
    },
    {
      " put": -0.019260492
    },
    {
      "obj": -0.31143564
    },
    {
      "back": -0.0026711915
    },
    {
      "('": -0.0011161945
    },
    {
      "so": -0.0011521796
    },
    {
      "ap": -0.00020906834
    },
    {
      "')": -0.0067813178
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 6.732061147689819
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find sponge\n find('sponge')\n # 2: grab sponge\n grab('sponge')\n assert('sponge' in 'hands')\n else: grab('sponge')\n # 3: wash bathroom counter\n turnto('bathroom_counter')\n lookat('bathroom_counter')\n assert('sponge' in 'hands')\n else: grab('sponge')\n wash('bathroom_counter')\n # 4: find mop and bucket\n find('mop_bucket')\n # 5: mop the floor\n grab('mop_bucket')\n assert('mop_bucket' in 'hands')\n else: grab('mop_bucket')\n turnto('floor')\n lookat('floor')\n assert('mop_bucket' in 'hands')\n else: grab('mop_bucket')\n mop('floor')\n # 6: put mop and bucket back\n assert('mop_bucket' in 'hands')\n else: grab('mop_bucket')\n putobjback('mop_bucket')\n # 7: Done", <OpenAIObject at 0x7feec88abbd0> JSON: {
  "text_offset": [
    3347,
    3349,
    3351,
    3352,
    3357,
    3360,
    3369,
    3370,
    3375,
    3377,
    3381,
    3385,
    3387,
    3388,
    3390,
    3392,
    3393,
    3398,
    3405,
    3406,
    3411,
    3413,
    3415,
    3419,
    3421,
    3422,
    3424,
    3426,
    3427,
    3432,
    3439,
    3440,
    3445,
    3447,
    3449,
    3453,
    3455,
    3456,
    3463,
    3465,
    3467,
    3471,
    3472,
    3475,
    3477,
    3482,
    3484,
    3485,
    3490,
    3491,
    3496,
    3498,
    3500,
    3504,
    3506,
    3507,
    3509,
    3511,
    3512,
    3517,
    3526,
    3534,
    3535,
    3539,
    3541,
    3542,
    3544,
    3548,
    3552,
    3553,
    3560,
    3562,
    3563,
    3568,
    3570,
    3572,
    3576,
    3580,
    3581,
    3588,
    3590,
    3591,
    3598,
    3600,
    3602,
    3606,
    3607,
    3610,
    3612,
    3617,
    3619,
    3620,
    3625,
    3626,
    3631,
    3633,
    3635,
    3639,
    3641,
    3642,
    3647,
    3649,
    3653,
    3657,
    3658,
    3665,
    3667,
    3668,
    3670,
    3672,
    3673,
    3678,
    3680,
    3682,
    3686,
    3693,
    3694,
    3699,
    3701,
    3704,
    3705,
    3709,
    3711,
    3713,
    3714,
    3716,
    3718,
    3719,
    3721,
    3723,
    3727,
    3733,
    3734,
    3739,
    3741,
    3744,
    3745,
    3749,
    3751,
    3753,
    3754,
    3761,
    3763,
    3766,
    3767,
    3771,
    3773,
    3774,
    3777,
    3779,
    3784,
    3786,
    3787,
    3792,
    3793,
    3798,
    3800,
    3803,
    3804,
    3808,
    3810,
    3812,
    3813,
    3817,
    3819,
    3820,
    3822,
    3827,
    3829,
    3830,
    3835,
    3837,
    3839,
    3844,
    3846,
    3847,
    3854,
    3856,
    3859,
    3860,
    3864,
    3866,
    3867,
    3870,
    3872,
    3877,
    3879,
    3880,
    3885,
    3886,
    3891,
    3893,
    3896,
    3897,
    3901,
    3903,
    3905,
    3906,
    3908,
    3910,
    3912,
    3917,
    3919,
    3920,
    3922,
    3924,
    3925,
    3929,
    3931,
    3933,
    3937,
    3944,
    3949,
    3950,
    3957,
    3959,
    3962,
    3963,
    3967,
    3969,
    3970,
    3973,
    3975,
    3980,
    3982,
    3983,
    3988,
    3989,
    3994,
    3996,
    3999,
    4000,
    4004,
    4006,
    4008,
    4009,
    4013,
    4016,
    4020,
    4022,
    4025,
    4026,
    4030,
    4032,
    4034,
    4035,
    4037,
    4039,
    4040
  ],
  "token_logprobs": [
    -0.01782895,
    -0.0072029163,
    -0.0023992993,
    -0.13735728,
    -0.3309186,
    -0.16805574,
    -0.023471693,
    -0.0052117165,
    -0.004086699,
    -0.0014082697,
    -0.00014992956,
    -0.0014884952,
    -0.0074764118,
    -0.003019618,
    -0.003070019,
    -0.00082301453,
    -0.21868984,
    -1.8936015,
    -0.075058475,
    -0.08344582,
    -0.0010727547,
    -0.0005750042,
    -0.0003838799,
    -0.0013857675,
    -0.005664848,
    -0.021587474,
    -0.0038045503,
    -0.0008573138,
    -0.10621516,
    -0.11642415,
    -0.035873383,
    -0.6342403,
    -0.0012349479,
    -0.0001033124,
    -0.0001390797,
    -0.00038423753,
    -0.0042666816,
    -1.3429292,
    -0.0020065324,
    -0.14026433,
    -0.0014197907,
    -0.0015544589,
    -0.020412935,
    -0.0041061495,
    -0.009697896,
    -0.017589852,
    -0.0043048724,
    -0.014637895,
    -0.0045850086,
    -0.007388863,
    -0.0017696341,
    -0.00030749902,
    -0.00079658773,
    -0.0021433088,
    -0.0051407767,
    -0.48259935,
    -0.0070628035,
    -0.0008377485,
    -1.8843023,
    -1.6053249,
    -0.9339439,
    -0.15715961,
    -0.91084826,
    -4.8353428e-05,
    -0.00056069077,
    -0.00069327606,
    -0.007065084,
    -0.0005947469,
    -0.016072815,
    -0.00089543615,
    -0.0012463459,
    -0.005194881,
    -0.32132664,
    -0.00059999485,
    -0.0006028587,
    -0.001097997,
    -0.00012930272,
    -0.001750466,
    -0.00049455435,
    -0.002290445,
    -0.00431128,
    -0.34368172,
    -0.0009211495,
    -0.39372456,
    -0.00036026907,
    -0.00086244626,
    -0.0039172783,
    -0.0026318647,
    -0.0036499556,
    -0.004795505,
    -0.0026398143,
    -0.00083065045,
    -0.0011640536,
    -0.0037672764,
    -0.00081490085,
    -0.00043319192,
    -0.00036468072,
    -0.0011862527,
    -0.005179183,
    -0.024547677,
    -0.0011311135,
    -0.1136702,
    -0.000118572985,
    -0.0020394386,
    -0.00037791664,
    -0.00513437,
    -0.006500387,
    -0.097687505,
    -0.006957461,
    -0.0014997778,
    -2.1131086,
    -0.35966438,
    -0.00010498132,
    -0.82689947,
    -0.02506826,
    -0.01572325,
    -0.034137096,
    -0.0022047763,
    -0.0012227726,
    -0.010423096,
    -0.0014990605,
    -0.00027518315,
    -0.0019180843,
    -0.0052222637,
    -0.041439816,
    -0.0037036184,
    -0.000702105,
    -1.8605088,
    -0.0003280123,
    -0.50743824,
    -0.20969805,
    -0.026391592,
    -0.5511591,
    -0.001014641,
    -0.0011928758,
    -0.056730717,
    -0.000846937,
    -0.00017604003,
    -0.0016895044,
    -0.0039477986,
    -0.128814,
    -0.0011207291,
    -0.034230966,
    -0.01885546,
    -0.0010285433,
    -0.00052675663,
    -0.002290445,
    -0.0036245314,
    -0.0018153125,
    -0.0022482066,
    -0.0056047267,
    -0.0027588087,
    -0.0015498032,
    -0.0020230152,
    -0.015416679,
    -0.0015994118,
    -0.00074164855,
    -0.00072268123,
    -0.00048024458,
    -0.0003819716,
    -0.0015615626,
    -0.0049005575,
    -1.0049134,
    -3.8457234e-05,
    -0.0006910083,
    -0.0005005176,
    -0.014042616,
    -0.0006660177,
    -0.0039458824,
    -0.13109037,
    -0.00037016338,
    -0.0003891288,
    -0.0005542479,
    -0.0010989525,
    -0.0030685836,
    -0.58921987,
    -0.0005714252,
    -0.0039814883,
    -0.00573025,
    -0.0007384261,
    -0.00014492373,
    -0.0011173876,
    -0.0010281838,
    -0.0011689449,
    -0.0010640441,
    -0.0013738306,
    -0.0014678984,
    -0.000795513,
    -0.0013907817,
    -0.0015428759,
    -0.0009334393,
    -0.00037660534,
    -0.00041995506,
    -0.0003850729,
    -0.00010951312,
    -0.0013860068,
    -0.004668781,
    -0.047048345,
    -0.00016340296,
    -0.005601191,
    -0.0022173212,
    -0.0018029516,
    -0.0562008,
    -0.014481076,
    -0.0057986523,
    -0.0017846196,
    -0.54059726,
    -0.70676666,
    -0.00022039504,
    -0.25163248,
    -0.003357943,
    -0.13673924,
    -0.020945314,
    -1.4669415,
    -0.0008400163,
    -0.005170318,
    -0.0012184783,
    -0.0006495566,
    -0.00021491051,
    -0.0013452994,
    -0.0017761398,
    -0.0014632464,
    -0.0010339124,
    -0.0017825883,
    -0.0016498585,
    -0.0016204864,
    -0.0008075043,
    -0.002164576,
    -0.00066911994,
    -0.0003487011,
    -0.00047171512,
    -0.00018307802,
    -6.206056e-05,
    -0.0010695333,
    -0.0033899988,
    -0.011869162,
    -0.3666575,
    -0.0025648172,
    -0.0012441993,
    -0.00067591673,
    -0.0016567857,
    -0.0005783439,
    -0.00021729656,
    -0.0150602795,
    -0.28200588,
    -0.030401494,
    -0.010088458,
    -0.0023164917,
    -0.30577475
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sponge",
    "\n",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " sponge",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wash",
    " bathroom",
    " counter",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bath",
    "room",
    "_",
    "counter",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bath",
    "room",
    "_",
    "counter",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " wash",
    "('",
    "bath",
    "room",
    "_",
    "counter",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " find",
    " m",
    "op",
    " and",
    " bucket",
    "\n",
    " find",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " m",
    "op",
    " the",
    " floor",
    "\n",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " assert",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "floor",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "floor",
    "')",
    "\n",
    " assert",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " m",
    "op",
    "('",
    "floor",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " put",
    " m",
    "op",
    " and",
    " bucket",
    " back",
    "\n",
    " assert",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "mop",
    "_",
    "buck",
    "et",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01782895
    },
    {
      " 0": -0.0072029163
    },
    {
      ":": -0.0023992993
    },
    {
      " walk": -0.13735728
    },
    {
      " to": -0.3309186
    },
    {
      " bathroom": -0.16805574
    },
    {
      "\n": -0.023471693
    },
    {
      " walk": -0.0052117165
    },
    {
      "('": -0.004086699
    },
    {
      "bath": -0.0014082697
    },
    {
      "room": -0.00014992956
    },
    {
      "')": -0.0014884952
    },
    {
      "\n": -0.0074764118
    },
    {
      " #": -0.003019618
    },
    {
      " 1": -0.003070019
    },
    {
      ":": -0.00082301453
    },
    {
      " find": -0.21868984
    },
    {
      " m": -0.5874454
    },
    {
      "\n": -0.075058475
    },
    {
      " find": -0.08344582
    },
    {
      "('": -0.0010727547
    },
    {
      "sp": -0.0005750042
    },
    {
      "onge": -0.0003838799
    },
    {
      "')": -0.0013857675
    },
    {
      "\n": -0.005664848
    },
    {
      " #": -0.021587474
    },
    {
      " 2": -0.0038045503
    },
    {
      ":": -0.0008573138
    },
    {
      " grab": -0.10621516
    },
    {
      " sponge": -0.11642415
    },
    {
      "\n": -0.035873383
    },
    {
      " grab": -0.6342403
    },
    {
      "('": -0.0012349479
    },
    {
      "sp": -0.0001033124
    },
    {
      "onge": -0.0001390797
    },
    {
      "')": -0.00038423753
    },
    {
      "\n": -0.0042666816
    },
    {
      " #": -0.37012425
    },
    {
      "('": -0.0020065324
    },
    {
      "sp": -0.14026433
    },
    {
      "onge": -0.0014197907
    },
    {
      "'": -0.0015544589
    },
    {
      " in": -0.020412935
    },
    {
      " '": -0.0041061495
    },
    {
      "hands": -0.009697896
    },
    {
      "')": -0.017589852
    },
    {
      "\n": -0.0043048724
    },
    {
      " else": -0.014637895
    },
    {
      ":": -0.0045850086
    },
    {
      " grab": -0.007388863
    },
    {
      "('": -0.0017696341
    },
    {
      "sp": -0.00030749902
    },
    {
      "onge": -0.00079658773
    },
    {
      "')": -0.0021433088
    },
    {
      "\n": -0.0051407767
    },
    {
      " #": -0.48259935
    },
    {
      " 3": -0.0070628035
    },
    {
      ":": -0.0008377485
    },
    {
      " wipe": -1.1486323
    },
    {
      " sink": -1.0594237
    },
    {
      " counter": -0.9339439
    },
    {
      "\n": -0.15715961
    },
    {
      " tur": -0.91084826
    },
    {
      "nt": -4.8353428e-05
    },
    {
      "o": -0.00056069077
    },
    {
      "('": -0.00069327606
    },
    {
      "bath": -0.007065084
    },
    {
      "room": -0.0005947469
    },
    {
      "_": -0.016072815
    },
    {
      "counter": -0.00089543615
    },
    {
      "')": -0.0012463459
    },
    {
      "\n": -0.005194881
    },
    {
      " look": -0.32132664
    },
    {
      "at": -0.00059999485
    },
    {
      "('": -0.0006028587
    },
    {
      "bath": -0.001097997
    },
    {
      "room": -0.00012930272
    },
    {
      "_": -0.001750466
    },
    {
      "counter": -0.00049455435
    },
    {
      "')": -0.002290445
    },
    {
      "\n": -0.00431128
    },
    {
      " assert": -0.34368172
    },
    {
      "('": -0.0009211495
    },
    {
      "sp": -0.39372456
    },
    {
      "onge": -0.00036026907
    },
    {
      "'": -0.00086244626
    },
    {
      " in": -0.0039172783
    },
    {
      " '": -0.0026318647
    },
    {
      "hands": -0.0036499556
    },
    {
      "')": -0.004795505
    },
    {
      "\n": -0.0026398143
    },
    {
      " else": -0.00083065045
    },
    {
      ":": -0.0011640536
    },
    {
      " grab": -0.0037672764
    },
    {
      "('": -0.00081490085
    },
    {
      "sp": -0.00043319192
    },
    {
      "onge": -0.00036468072
    },
    {
      "')": -0.0011862527
    },
    {
      "\n": -0.005179183
    },
    {
      " wash": -0.024547677
    },
    {
      "('": -0.0011311135
    },
    {
      "bath": -0.1136702
    },
    {
      "room": -0.000118572985
    },
    {
      "_": -0.0020394386
    },
    {
      "counter": -0.00037791664
    },
    {
      "')": -0.00513437
    },
    {
      "\n": -0.006500387
    },
    {
      " #": -0.097687505
    },
    {
      " 4": -0.006957461
    },
    {
      ":": -0.0014997778
    },
    {
      " wipe": -0.7621204
    },
    {
      " m": -0.35966438
    },
    {
      "op": -0.00010498132
    },
    {
      " and": -0.82689947
    },
    {
      " bucket": -0.02506826
    },
    {
      "\n": -0.01572325
    },
    {
      " find": -0.034137096
    },
    {
      "('": -0.0022047763
    },
    {
      "mop": -0.0012227726
    },
    {
      "_": -0.010423096
    },
    {
      "buck": -0.0014990605
    },
    {
      "et": -0.00027518315
    },
    {
      "')": -0.0019180843
    },
    {
      "\n": -0.0052222637
    },
    {
      " #": -0.041439816
    },
    {
      " 5": -0.0037036184
    },
    {
      ":": -0.000702105
    },
    {
      " grab": -0.6910972
    },
    {
      "op": -0.0003280123
    },
    {
      " the": -0.50743824
    },
    {
      " floor": -0.20969805
    },
    {
      "\n": -0.026391592
    },
    {
      " grab": -0.5511591
    },
    {
      "('": -0.001014641
    },
    {
      "mop": -0.0011928758
    },
    {
      "_": -0.056730717
    },
    {
      "buck": -0.000846937
    },
    {
      "et": -0.00017604003
    },
    {
      "')": -0.0016895044
    },
    {
      "\n": -0.0039477986
    },
    {
      " assert": -0.128814
    },
    {
      "('": -0.0011207291
    },
    {
      "mop": -0.034230966
    },
    {
      "_": -0.01885546
    },
    {
      "buck": -0.0010285433
    },
    {
      "et": -0.00052675663
    },
    {
      "'": -0.002290445
    },
    {
      " in": -0.0036245314
    },
    {
      " '": -0.0018153125
    },
    {
      "hands": -0.0022482066
    },
    {
      "')": -0.0056047267
    },
    {
      "\n": -0.0027588087
    },
    {
      " else": -0.0015498032
    },
    {
      ":": -0.0020230152
    },
    {
      " grab": -0.015416679
    },
    {
      "('": -0.0015994118
    },
    {
      "mop": -0.00074164855
    },
    {
      "_": -0.00072268123
    },
    {
      "buck": -0.00048024458
    },
    {
      "et": -0.0003819716
    },
    {
      "')": -0.0015615626
    },
    {
      "\n": -0.0049005575
    },
    {
      " m": -0.78562546
    },
    {
      "nt": -3.8457234e-05
    },
    {
      "o": -0.0006910083
    },
    {
      "('": -0.0005005176
    },
    {
      "floor": -0.014042616
    },
    {
      "')": -0.0006660177
    },
    {
      "\n": -0.0039458824
    },
    {
      " look": -0.13109037
    },
    {
      "at": -0.00037016338
    },
    {
      "('": -0.0003891288
    },
    {
      "floor": -0.0005542479
    },
    {
      "')": -0.0010989525
    },
    {
      "\n": -0.0030685836
    },
    {
      " assert": -0.58921987
    },
    {
      "('": -0.0005714252
    },
    {
      "mop": -0.0039814883
    },
    {
      "_": -0.00573025
    },
    {
      "buck": -0.0007384261
    },
    {
      "et": -0.00014492373
    },
    {
      "'": -0.0011173876
    },
    {
      " in": -0.0010281838
    },
    {
      " '": -0.0011689449
    },
    {
      "hands": -0.0010640441
    },
    {
      "')": -0.0013738306
    },
    {
      "\n": -0.0014678984
    },
    {
      " else": -0.000795513
    },
    {
      ":": -0.0013907817
    },
    {
      " grab": -0.0015428759
    },
    {
      "('": -0.0009334393
    },
    {
      "mop": -0.00037660534
    },
    {
      "_": -0.00041995506
    },
    {
      "buck": -0.0003850729
    },
    {
      "et": -0.00010951312
    },
    {
      "')": -0.0013860068
    },
    {
      "\n": -0.004668781
    },
    {
      " m": -0.047048345
    },
    {
      "op": -0.00016340296
    },
    {
      "('": -0.005601191
    },
    {
      "floor": -0.0022173212
    },
    {
      "')": -0.0018029516
    },
    {
      "\n": -0.0562008
    },
    {
      " #": -0.014481076
    },
    {
      " 6": -0.0057986523
    },
    {
      ":": -0.0017846196
    },
    {
      " put": -0.54059726
    },
    {
      " m": -0.70676666
    },
    {
      "op": -0.00022039504
    },
    {
      " and": -0.25163248
    },
    {
      " bucket": -0.003357943
    },
    {
      " back": -0.13673924
    },
    {
      "\n": -0.020945314
    },
    {
      " put": -0.3208415
    },
    {
      "('": -0.0008400163
    },
    {
      "mop": -0.005170318
    },
    {
      "_": -0.0012184783
    },
    {
      "buck": -0.0006495566
    },
    {
      "et": -0.00021491051
    },
    {
      "'": -0.0013452994
    },
    {
      " in": -0.0017761398
    },
    {
      " '": -0.0014632464
    },
    {
      "hands": -0.0010339124
    },
    {
      "')": -0.0017825883
    },
    {
      "\n": -0.0016498585
    },
    {
      " else": -0.0016204864
    },
    {
      ":": -0.0008075043
    },
    {
      " grab": -0.002164576
    },
    {
      "('": -0.00066911994
    },
    {
      "mop": -0.0003487011
    },
    {
      "_": -0.00047171512
    },
    {
      "buck": -0.00018307802
    },
    {
      "et": -6.206056e-05
    },
    {
      "')": -0.0010695333
    },
    {
      "\n": -0.0033899988
    },
    {
      " put": -0.011869162
    },
    {
      "obj": -0.3666575
    },
    {
      "back": -0.0025648172
    },
    {
      "('": -0.0012441993
    },
    {
      "mop": -0.00067591673
    },
    {
      "_": -0.0016567857
    },
    {
      "buck": -0.0005783439
    },
    {
      "et": -0.00021729656
    },
    {
      "')": -0.0150602795
    },
    {
      "\n": -0.28200588
    },
    {
      " #": -0.030401494
    },
    {
      " 7": -0.010088458
    },
    {
      ":": -0.0023164917
    },
    {
      " Done": -0.30577475
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.1069979667663574
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find phone\n walk('phone')\n find('phone')\n # 2: grab phone\n assert('close' to 'phone')\n else: find('phone')\n grab('phone')\n # 3: pick up the phone\n assert('close' to 'phone')\n else: find('phone')\n pickup('phone')", <OpenAIObject at 0x7feec8878450> JSON: {
  "text_offset": [
    3346,
    3348,
    3350,
    3351,
    3356,
    3359,
    3367,
    3368,
    3373,
    3375,
    3382,
    3384,
    3385,
    3387,
    3389,
    3390,
    3395,
    3401,
    3402,
    3407,
    3409,
    3414,
    3416,
    3417,
    3422,
    3424,
    3429,
    3431,
    3432,
    3434,
    3436,
    3437,
    3442,
    3448,
    3449,
    3456,
    3458,
    3463,
    3464,
    3467,
    3469,
    3474,
    3476,
    3477,
    3482,
    3483,
    3488,
    3490,
    3495,
    3497,
    3498,
    3503,
    3505,
    3510,
    3512,
    3513,
    3515,
    3517,
    3518,
    3523,
    3526,
    3530,
    3536,
    3537,
    3544,
    3546,
    3551,
    3552,
    3555,
    3557,
    3562,
    3564,
    3565,
    3570,
    3571,
    3576,
    3578,
    3583,
    3585,
    3586,
    3591,
    3593,
    3595,
    3600
  ],
  "token_logprobs": [
    -0.019634018,
    -0.008753432,
    -0.0019955419,
    -0.842647,
    -0.21279086,
    -0.3649948,
    -0.01863482,
    -0.0047908328,
    -0.0038645647,
    -0.0021773593,
    -0.0010018698,
    -0.009355318,
    -0.002727192,
    -0.0030898694,
    -0.00063858187,
    -0.034537256,
    -0.6206241,
    -0.026639905,
    -0.9633098,
    -0.001496911,
    -0.006992994,
    -0.0018156711,
    -0.0043650963,
    -0.011407488,
    -0.0008060728,
    -0.00033355693,
    -0.0007286473,
    -0.0045567458,
    -0.0044167005,
    -0.0044757943,
    -0.00093117333,
    -0.63263094,
    -0.36882466,
    -0.02375523,
    -0.5196184,
    -0.0014130446,
    -0.0052832,
    -0.0029831508,
    -0.0006318414,
    -0.0021550776,
    -0.00072363584,
    -0.0053335954,
    -0.00553388,
    -0.0015360716,
    -0.0013153987,
    -0.0043622223,
    -0.0016111122,
    -0.0005038554,
    -0.001901063,
    -0.0059875767,
    -0.014327481,
    -0.0010182201,
    -0.00015911051,
    -0.0013755014,
    -0.02942888,
    -0.57124305,
    -0.012251705,
    -0.0016854446,
    -2.5334277,
    -0.03609051,
    -1.1822149,
    -0.015574432,
    -0.018686136,
    -0.44321042,
    -0.0015323095,
    -1.5176395,
    -0.0031699915,
    -0.0054689124,
    -0.0026771687,
    -0.0008007028,
    -0.0052776285,
    -0.0043396545,
    -0.0013356323,
    -0.00089901616,
    -0.025931671,
    -0.0008841019,
    -0.00014933258,
    -0.0015455042,
    -0.0048758835,
    -0.54101187,
    -0.95534736,
    -0.0021569896,
    -0.0001884396,
    -0.0015527881
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " phone",
    "\n",
    " walk",
    "('",
    "phone",
    "')",
    "\n",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " phone",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pick",
    " up",
    " the",
    " phone",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " pick",
    "up",
    "('",
    "phone",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.019634018
    },
    {
      " 0": -0.008753432
    },
    {
      ":": -0.0019955419
    },
    {
      " find": -0.72072643
    },
    {
      " to": -0.21279086
    },
    {
      " bedroom": -0.3649948
    },
    {
      "\n": -0.01863482
    },
    {
      " walk": -0.0047908328
    },
    {
      "('": -0.0038645647
    },
    {
      "bedroom": -0.0021773593
    },
    {
      "')": -0.0010018698
    },
    {
      "\n": -0.009355318
    },
    {
      " #": -0.002727192
    },
    {
      " 1": -0.0030898694
    },
    {
      ":": -0.00063858187
    },
    {
      " find": -0.034537256
    },
    {
      " phone": -0.6206241
    },
    {
      "\n": -0.026639905
    },
    {
      " find": -0.51002467
    },
    {
      "('": -0.001496911
    },
    {
      "phone": -0.006992994
    },
    {
      "')": -0.0018156711
    },
    {
      "\n": -0.0043650963
    },
    {
      " find": -0.011407488
    },
    {
      "('": -0.0008060728
    },
    {
      "phone": -0.00033355693
    },
    {
      "')": -0.0007286473
    },
    {
      "\n": -0.0045567458
    },
    {
      " #": -0.0044167005
    },
    {
      " 2": -0.0044757943
    },
    {
      ":": -0.00093117333
    },
    {
      " grab": -0.63263094
    },
    {
      " phone": -0.36882466
    },
    {
      "\n": -0.02375523
    },
    {
      " assert": -0.5196184
    },
    {
      "('": -0.0014130446
    },
    {
      "close": -0.0052832
    },
    {
      "'": -0.0029831508
    },
    {
      " to": -0.0006318414
    },
    {
      " '": -0.0021550776
    },
    {
      "phone": -0.00072363584
    },
    {
      "')": -0.0053335954
    },
    {
      "\n": -0.00553388
    },
    {
      " else": -0.0015360716
    },
    {
      ":": -0.0013153987
    },
    {
      " find": -0.0043622223
    },
    {
      "('": -0.0016111122
    },
    {
      "phone": -0.0005038554
    },
    {
      "')": -0.001901063
    },
    {
      "\n": -0.0059875767
    },
    {
      " grab": -0.014327481
    },
    {
      "('": -0.0010182201
    },
    {
      "phone": -0.00015911051
    },
    {
      "')": -0.0013755014
    },
    {
      "\n": -0.02942888
    },
    {
      " #": -0.57124305
    },
    {
      " 3": -0.012251705
    },
    {
      ":": -0.0016854446
    },
    {
      " put": -1.4317527
    },
    {
      " up": -0.03609051
    },
    {
      " phone": -0.4231616
    },
    {
      " phone": -0.015574432
    },
    {
      "\n": -0.018686136
    },
    {
      " assert": -0.44321042
    },
    {
      "('": -0.0015323095
    },
    {
      "phone": -0.27434778
    },
    {
      "'": -0.0031699915
    },
    {
      " to": -0.0054689124
    },
    {
      " '": -0.0026771687
    },
    {
      "phone": -0.0008007028
    },
    {
      "')": -0.0052776285
    },
    {
      "\n": -0.0043396545
    },
    {
      " else": -0.0013356323
    },
    {
      ":": -0.00089901616
    },
    {
      " find": -0.025931671
    },
    {
      "('": -0.0008841019
    },
    {
      "phone": -0.00014933258
    },
    {
      "')": -0.0015455042
    },
    {
      "\n": -0.0048758835
    },
    {
      " pick": -0.54101187
    },
    {
      "('": -0.6826527
    },
    {
      "('": -0.0021569896
    },
    {
      "phone": -0.0001884396
    },
    {
      "')": -0.0015527881
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.4378602504730225
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n walk('toilet')\n find('toilet')\n # 2: sit on toilet\n assert('close' to 'toilet')\n else: find('toilet')\n turnto('toilet')\n sit('toilet')", <OpenAIObject at 0x7feec8830ef0> JSON: {
  "text_offset": [
    3345,
    3347,
    3349,
    3350,
    3355,
    3358,
    3367,
    3368,
    3373,
    3375,
    3379,
    3383,
    3385,
    3386,
    3388,
    3390,
    3391,
    3396,
    3403,
    3404,
    3409,
    3411,
    3413,
    3417,
    3419,
    3420,
    3425,
    3427,
    3429,
    3433,
    3435,
    3436,
    3438,
    3440,
    3441,
    3445,
    3448,
    3455,
    3456,
    3463,
    3465,
    3470,
    3471,
    3474,
    3476,
    3478,
    3482,
    3484,
    3485,
    3490,
    3491,
    3496,
    3498,
    3500,
    3504,
    3506,
    3507,
    3511,
    3513,
    3514,
    3516,
    3518,
    3522,
    3524,
    3525,
    3529,
    3531,
    3533,
    3537
  ],
  "token_logprobs": [
    -0.016610155,
    -0.008056126,
    -0.0024990232,
    -0.13135834,
    -0.24047345,
    -0.32686672,
    -0.021000031,
    -0.0053420444,
    -0.0036842932,
    -0.0021679213,
    -0.00014456424,
    -0.0014776293,
    -0.0068565723,
    -0.0020745604,
    -0.003173519,
    -0.00058347365,
    -0.14651269,
    -0.069897994,
    -0.022915717,
    -1.8139958,
    -0.0018280313,
    -0.0018581273,
    -0.00023786427,
    -0.0014686156,
    -0.0053421645,
    -0.023945864,
    -0.00073687645,
    -0.00033051384,
    -0.0005894979,
    -0.000775592,
    -0.0035963552,
    -0.006808741,
    -0.006056056,
    -0.0006933953,
    -0.58476347,
    -0.06977713,
    -0.4381818,
    -0.025600364,
    -1.3826725,
    -0.0010678634,
    -0.0017557815,
    -0.0029750802,
    -0.00035692935,
    -0.0014129244,
    -0.0013971673,
    -4.2511267e-05,
    -0.003612267,
    -0.0041447543,
    -0.0017148779,
    -0.0011378567,
    -0.0087590255,
    -0.0011095114,
    -0.00043545783,
    -9.771052e-05,
    -0.0011077214,
    -0.0051434143,
    -2.5303025,
    -3.1901687e-05,
    -0.0002004825,
    -0.0004899005,
    -0.0005583038,
    -0.0003282479,
    -0.0013676825,
    -0.00468561,
    -0.80131614,
    -0.0009814043,
    -0.0003165636,
    -1.3542607e-05,
    -0.0015657406
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " walk",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " sit",
    "('",
    "to",
    "ilet",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.016610155
    },
    {
      " 0": -0.008056126
    },
    {
      ":": -0.0024990232
    },
    {
      " walk": -0.13135834
    },
    {
      " to": -0.24047345
    },
    {
      " bathroom": -0.32686672
    },
    {
      "\n": -0.021000031
    },
    {
      " walk": -0.0053420444
    },
    {
      "('": -0.0036842932
    },
    {
      "bath": -0.0021679213
    },
    {
      "room": -0.00014456424
    },
    {
      "')": -0.0014776293
    },
    {
      "\n": -0.0068565723
    },
    {
      " #": -0.0020745604
    },
    {
      " 1": -0.003173519
    },
    {
      ":": -0.00058347365
    },
    {
      " find": -0.14651269
    },
    {
      " toilet": -0.069897994
    },
    {
      "\n": -0.022915717
    },
    {
      " find": -0.21193461
    },
    {
      "('": -0.0018280313
    },
    {
      "to": -0.0018581273
    },
    {
      "ilet": -0.00023786427
    },
    {
      "')": -0.0014686156
    },
    {
      "\n": -0.0053421645
    },
    {
      " find": -0.023945864
    },
    {
      "('": -0.00073687645
    },
    {
      "to": -0.00033051384
    },
    {
      "ilet": -0.0005894979
    },
    {
      "')": -0.000775592
    },
    {
      "\n": -0.0035963552
    },
    {
      " #": -0.006808741
    },
    {
      " 2": -0.006056056
    },
    {
      ":": -0.0006933953
    },
    {
      " sit": -0.58476347
    },
    {
      " on": -0.06977713
    },
    {
      " toilet": -0.4381818
    },
    {
      "\n": -0.025600364
    },
    {
      " tur": -0.58387005
    },
    {
      "('": -0.0010678634
    },
    {
      "close": -0.0017557815
    },
    {
      "'": -0.0029750802
    },
    {
      " to": -0.00035692935
    },
    {
      " '": -0.0014129244
    },
    {
      "to": -0.0013971673
    },
    {
      "ilet": -4.2511267e-05
    },
    {
      "')": -0.003612267
    },
    {
      "\n": -0.0041447543
    },
    {
      " else": -0.0017148779
    },
    {
      ":": -0.0011378567
    },
    {
      " find": -0.0087590255
    },
    {
      "('": -0.0011095114
    },
    {
      "to": -0.00043545783
    },
    {
      "ilet": -9.771052e-05
    },
    {
      "')": -0.0011077214
    },
    {
      "\n": -0.0051434143
    },
    {
      " sit": -0.257935
    },
    {
      "nt": -3.1901687e-05
    },
    {
      "o": -0.0002004825
    },
    {
      "('": -0.0004899005
    },
    {
      "to": -0.0005583038
    },
    {
      "ilet": -0.0003282479
    },
    {
      "')": -0.0013676825
    },
    {
      "\n": -0.00468561
    },
    {
      " look": -0.70489395
    },
    {
      "('": -0.0009814043
    },
    {
      "to": -0.0003165636
    },
    {
      "ilet": -1.3542607e-05
    },
    {
      "')": -0.0015657406
    }
  ]
})]
experiment time3 on environment scene2
Clean toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Pour] <mop_bucket> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', '[Wash] <toilet> (1)', '[Putobjback] <mop_bucket> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Pour] <mop_bucket> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', '[Wash] <toilet> (1)', '[Putobjback] <mop_bucket> (1)']}
Wash monitor {'script': ['[Walk] <computer> (1)', '[Find] <monitor> (1)', '[Grab] <cloth> (1)', '[Wipe] <monitor> (1)', '[Putback] <cloth> (1)'], 'assert_script': ['[Walk] <computer> (1)', '[Find] <monitor> (1)', '[Grab] <cloth> (1)', "assert('close' to 'monitor')", 'else: [Find] <monitor> (1)', '[Wipe] <monitor> (1)', '[Putback] <cloth> (1)']}
Turn on TV {'script': ['[Walk] <livingroom> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', '[Switchon] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)'], 'assert_script': ['[Walk] <livingroom> (1)', '[Find] <television> (1)', "assert('close' to 'television')", 'else: [Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', "assert('remote_control' in 'hands')", 'else: [Find] <remote_control> (1)', '[Switchon] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']}
Turn on computer {'script': ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)']}
Shave {'script': ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', '[Switchon] <electric_shaver> (1)', '[Find] <shaving_cream> (1)', '[Grab] <shaving_cream> (1)', '[Pour] <shaving_cream> (1)', '[Turnto] <electric_shaver> (1)', '[Watch] <electric_shaver> (1)', '[Wipe] <electric_shaver> (1)', '[Switchoff] <electric_shaver> (1)'], 'assert_script': ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', "assert('close' to 'electric_shaver')", 'else: [Find] <electric_shaver> (1)', '[Switchon] <electric_shaver> (1)', '[Find] <shaving_cream> (1)', '[Grab] <shaving_cream> (1)', '[Pour] <shaving_cream> (1)', '[Turnto] <electric_shaver> (1)', '[Watch] <electric_shaver> (1)', '[Wipe] <electric_shaver> (1)', '[Switchoff] <electric_shaver> (1)']}
Hang up jacket {'script': ['[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Puton] <jacket> (1)'], 'assert_script': ['[Find] <hanger> (1)', '[Grab] <hanger> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Puton] <jacket> (1)', "assert('jacket' on 'hanger')", 'else: [Puton] <jacket> (1)']}
Read newspaper {'script': ['[Walk] <living_room> (1)', '[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <couch> (1)', '[Sit] <couch> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)'], 'assert_script': ['[Walk] <living_room> (1)', '[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Find] <couch> (1)', "assert('close' to 'couch')", 'else: [Find] <couch> (1)', '[Sit] <couch> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)']}
Sit {'script': ['[Find] <chair> (1)', '[Grab] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', '[Grab] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', 'else: [Turnto] <chair> (1)', '[Sit] <chair> (1)']}
Sleep {'script': ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Sit] <bed> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Sit] <bed> (1)']}
Put alarm clock in bedroom {'script': ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Find] <nightstand> (1)', '[Puton] <nightstand> (1) <alarm_clock> (1)', '[Switchon] <alarm_clock> (1)', '[Find] <computer> (1)', '[Find] <mouse> (1)', '[Find] <keyboard> (1)', '[Find] <monitor> (1)', '[Plugin] <computer> (1)', '[Plugin] <mouse> (1)', '[Plugin] <keyboard> (1)', '[Plugin] <monitor> (1)', '[Switchon] <computer> (1)'], 'assert_script': ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', "assert('alarm_clock' in 'hands')", 'else: [Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Find] <nightstand> (1)', "assert('close' to 'nightstand')", 'else: [Find] <nightstand> (1)', '[Puton] <nightstand> (1) <alarm_clock> (1)', '[Switchon] <alarm_clock> (1)', '[Find] <computer> (1)', '[Find] <mouse> (1)', '[Find] <keyboard> (1)', '[Find] <monitor> (1)', '[Plugin] <computer> (1)', '[Plugin] <mouse> (1)', '[Plugin] <keyboard> (1)', '[Plugin] <monitor> (1)', '[Switchon] <computer> (1)']}
Sit in chair {'script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', 'else: [Walk] <chair> (1)', '[Sit] <chair> (1)']}
Open bathroom window {'script': ['[Walk] <bathroom> (1)', '[Find] <window> (1)', '[Open] <window> (1)', '[Lookat] <window> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <window> (1)', "assert('close' to 'window')", 'else: [Find] <window> (1)', '[Open] <window> (1)', '[Lookat] <window> (1)']}
Use computer {'script': ['[Walk] <computer> (1)', '[Find] <computer> (1)', '[Sit] <chair> (1)', '[Find] <keyboard> (1)', '[Switchon] <computer> (1)', '[Lookat] <computer> (1)', '[Use] <computer> (1)'], 'assert_script': ['[Walk] <computer> (1)', '[Find] <computer> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Find] <keyboard> (1)', "assert('close' to 'keyboard')", 'else: [Find] <keyboard> (1)', '[Switchon] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Lookat] <computer> (1)', "assert('computer' is 'switchon')", 'else: [Switchon] <computer> (1)', '[Use] <computer> (1)']}
Wash face {'script': ['[Find] <sink> (1)', '[Turnto] <faucet> (1)', '[Turnon] <faucet> (1)', '[Touch] <water> (1)', '[Find] <soap> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1)', '[Wash] <face> (1)', '[Rinse] <face> (1)', '[Turnto] <faucet> (1)', '[Turnoff] <faucet> (1)'], 'assert_script': ['[Find] <sink> (1)', '[Turnto] <faucet> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Turnon] <faucet> (1)', '[Touch] <water> (1)', '[Find] <soap> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1)', '[Wash] <face> (1)', '[Rinse] <face> (1)', '[Turnto] <faucet> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Turnoff] <faucet> (1)']}
Computer work {'script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <keyboard> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <keyboard> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <keyboard> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <keyboard> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)']}
Take nap {'script': ['[Find] <comfortable_spot> (1)', '[Lie] <comfortable_spot> (1)'], 'assert_script': ['[Find] <comfortable_spot> (1)', "assert('close' to 'comfortable_spot')", 'else: [Find] <comfortable_spot> (1)', '[Lie] <comfortable_spot> (1)']}
Do work on computer {'script': ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', '[Workon] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', "assert('computer' is 'switchedon')", 'else: [Switchon] <computer> (1)', '[Workon] <computer> (1)']}
Read news {'script': ['[Walk] <living_room> (1)', '[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <couch> (1)', '[Sit] <couch> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)'], 'assert_script': ['[Walk] <living_room> (1)', '[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <couch> (1)', "assert('close' to 'couch')", 'else: [Find] <couch> (1)', '[Sit] <couch> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)']}
Hand washing {'script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Plugin] <sink> (1)', '[Grab] <soap> (1)', '[Turnto] <soap> (1)', '[Lookat] <soap> (1)', '[Wash] <soap> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Switchoff] <sink> (1)', '[Putobjback] <soap> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', "assert('close' to 'sink')", 'else: [Find] <sink> (1)', '[Plugin] <sink> (1)', "assert('close' to 'soap')", 'else: [Find] <soap> (1)', '[Grab] <soap> (1)', "assert('soap' in 'hands')", 'else: [Grab] <soap> (1)', '[Turnto] <soap> (1)', '[Lookat] <soap> (1)', '[Wash] <soap> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Switchoff] <sink> (1)', "assert('soap' in 'hands')", 'else: [Grab] <soap> (1)', '[Putobjback] <soap> (1)']}
Clean bathroom {'script': ['[Walk] <bathroom> (1)', '[Find] <sponge> (1)', '[Grab] <sponge> (1)', '[Turnto] <bathroom_counter> (1)', '[Lookat] <bathroom_counter> (1)', '[Wash] <bathroom_counter> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Turnto] <floor> (1)', '[Lookat] <floor> (1)', '[Mop] <floor> (1)', '[Putobjback] <mop_bucket> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sponge> (1)', '[Grab] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Turnto] <bathroom_counter> (1)', '[Lookat] <bathroom_counter> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Wash] <bathroom_counter> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', "assert('mop_bucket' in 'hands')", 'else: [Grab] <mop_bucket> (1)', '[Turnto] <floor> (1)', '[Lookat] <floor> (1)', "assert('mop_bucket' in 'hands')", 'else: [Grab] <mop_bucket> (1)', '[Mop] <floor> (1)', "assert('mop_bucket' in 'hands')", 'else: [Grab] <mop_bucket> (1)', '[Putobjback] <mop_bucket> (1)']}
Pick up phone {'script': ['[Walk] <bedroom> (1)', '[Walk] <phone> (1)', '[Find] <phone> (1)', '[Grab] <phone> (1)', '[Pickup] <phone> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <phone> (1)', '[Find] <phone> (1)', "assert('close' to 'phone')", 'else: [Find] <phone> (1)', '[Grab] <phone> (1)', "assert('close' to 'phone')", 'else: [Find] <phone> (1)', '[Pickup] <phone> (1)']}
Go to toilet {'script': ['[Walk] <bathroom> (1)', '[Walk] <toilet> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Sit] <toilet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Walk] <toilet> (1)', '[Find] <toilet> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Sit] <toilet> (1)']}
experiment time3 on environment scene2
Clean toilet
script before ['[Walk] <bathroom> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Pour] <mop_bucket> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', '[Wash] <toilet> (1)', '[Putobjback] <mop_bucket> (1)']
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Wash monitor
script before ['[Walk] <computer> (1)', '[Find] <monitor> (1)', '[Grab] <cloth> (1)', '[Wipe] <monitor> (1)', '[Putback] <cloth> (1)']
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('cloth', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "PUTBACK". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Turn on TV
script before ['[Walk] <livingroom> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', '[Switchon] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']
illegal action ('livingroom', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Turn on computer
script before ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)']
illegal action Unknown action "END"  be deleted
Shave
script before ['[Find] <electric_shaver> (1)', '[Grab] <electric_shaver> (1)', '[Switchon] <electric_shaver> (1)', '[Find] <shaving_cream> (1)', '[Grab] <shaving_cream> (1)', '[Pour] <shaving_cream> (1)', '[Turnto] <electric_shaver> (1)', '[Watch] <electric_shaver> (1)', '[Wipe] <electric_shaver> (1)', '[Switchoff] <electric_shaver> (1)']
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action ('electric_shaver', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Hang up jacket
script before ['[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Puton] <jacket> (1)']
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Read newspaper
script before ['[Walk] <living_room> (1)', '[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <couch> (1)', '[Sit] <couch> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)']
illegal action 'living_room'  be deleted
illegal action Unknown action "END"  be deleted
Sit
script before ['[Find] <chair> (1)', '[Grab] <chair> (1)', '[Turnto] <chair> (1)', '[Lookat] <chair> (1)', '[Sit] <chair> (1)']
illegal action Unknown action "END"  be deleted
Sleep
script before ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Sit] <bed> (1)']
illegal action Unknown action "END"  be deleted
Put alarm clock in bedroom
script before ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Find] <nightstand> (1)', '[Puton] <nightstand> (1) <alarm_clock> (1)', '[Switchon] <alarm_clock> (1)', '[Find] <computer> (1)', '[Find] <mouse> (1)', '[Find] <keyboard> (1)', '[Find] <monitor> (1)', '[Plugin] <computer> (1)', '[Plugin] <mouse> (1)', '[Plugin] <keyboard> (1)', '[Plugin] <monitor> (1)', '[Switchon] <computer> (1)']
illegal action Wrong number of parameters for "PUTON". Got 2, expected 1  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action ('monitor', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Sit in chair
script before ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)']
illegal action Unknown action "END"  be deleted
Open bathroom window
script before ['[Walk] <bathroom> (1)', '[Find] <window> (1)', '[Open] <window> (1)', '[Lookat] <window> (1)']
illegal action Unknown action "END"  be deleted
Use computer
script before ['[Walk] <computer> (1)', '[Find] <computer> (1)', '[Sit] <chair> (1)', '[Find] <keyboard> (1)', '[Switchon] <computer> (1)', '[Lookat] <computer> (1)', '[Use] <computer> (1)']
illegal action Unknown action "USE"  be deleted
illegal action Unknown action "END"  be deleted
Wash face
script before ['[Find] <sink> (1)', '[Turnto] <faucet> (1)', '[Turnon] <faucet> (1)', '[Touch] <water> (1)', '[Find] <soap> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1)', '[Wash] <face> (1)', '[Rinse] <face> (1)', '[Turnto] <faucet> (1)', '[Turnoff] <faucet> (1)']
illegal action Unknown action "TURNON"  be deleted
illegal action ('water', 1) does not exist in the environment  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action Unknown action "TURNOFF"  be deleted
illegal action Unknown action "END"  be deleted
Computer work
script before ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <keyboard> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <keyboard> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)']
illegal action Unknown action "END"  be deleted
Take nap
script before ['[Find] <comfortable_spot> (1)', '[Lie] <comfortable_spot> (1)']
illegal action ('comfortable_spot', 1) does not exist in the environment  be deleted
illegal action ('comfortable_spot', 1) does not exist in the environment  be deleted
illegal action ('comfortable_spot', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Do work on computer
script before ['[Walk] <home_office> (1)', '[Walk] <computer> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', '[Workon] <computer> (1)']
illegal action Unknown action "WORKON"  be deleted
illegal action Unknown action "END"  be deleted
Read news
script before ['[Walk] <living_room> (1)', '[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <couch> (1)', '[Sit] <couch> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)']
illegal action 'living_room'  be deleted
illegal action Unknown action "END"  be deleted
Hand washing
script before ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Plugin] <sink> (1)', '[Grab] <soap> (1)', '[Turnto] <soap> (1)', '[Lookat] <soap> (1)', '[Wash] <soap> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Switchoff] <sink> (1)', '[Putobjback] <soap> (1)']
illegal action Unknown action "END"  be deleted
Clean bathroom
script before ['[Walk] <bathroom> (1)', '[Find] <sponge> (1)', '[Grab] <sponge> (1)', '[Turnto] <bathroom_counter> (1)', '[Lookat] <bathroom_counter> (1)', '[Wash] <bathroom_counter> (1)', '[Find] <mop_bucket> (1)', '[Grab] <mop_bucket> (1)', '[Turnto] <floor> (1)', '[Lookat] <floor> (1)', '[Mop] <floor> (1)', '[Putobjback] <mop_bucket> (1)']
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action Unknown action "MOP"  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action ('mop_bucket', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Pick up phone
script before ['[Walk] <bedroom> (1)', '[Walk] <phone> (1)', '[Find] <phone> (1)', '[Grab] <phone> (1)', '[Pickup] <phone> (1)']
illegal action Unknown action "PICKUP"  be deleted
illegal action Unknown action "END"  be deleted
Go to toilet
script before ['[Walk] <bathroom> (1)', '[Walk] <toilet> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Sit] <toilet> (1)']
illegal action Unknown action "END"  be deleted
Args info:
language_planner_result_file: language_planner.json
retry_times: 0
n_shots: 1
instruction: False
step_by_step_generation_prompt_path: None
step_by_step_generation_result_file: None
object_topk: 5
grounded_deciding_prompt_path: None
grounded_deciding_result_file: default_gd.json
prompt_choices_sequence: False
dataset_split: validation
dataset: ./data/val.json
retrieval_dataset: ./data/train.json
example_idx_file: None
api_keys_file: key.txt
save_dir: results/
plan_generation_result_file: default_pg.json
processed_plan_generation_result_file: None
graph_dict_path: None
plan_generation_prompt_path: None
graph_num: 2
exp_times: 3
n_processes: 1
seed: 42
engine: text-davinci-003
n_parallel_prompts: 1
max_generation_tokens: 512
max_api_total_tokens: 4096
temperature: 0.4
sampling_n: 20
top_p: 1.0
stop_tokens: ['\n\n']
verbose: False
experiment time3 on environment scene2
['[WALK] <bathroom> (1)', '[FIND] <mop_bucket> (2025)', '[GRAB] <mop_bucket> (2025)', '[TURNTO] <toilet> (15)', '[LOOKAT] <toilet> (15)', '[WASH] <toilet> (15)', '[PUTOBJBACK] <mop_bucket> (2025)']
execute failed at [TURNTO] <toilet> (15)
['[WALK] <computer> (209)']
end of script
gcr, sr 0.0 0
['[FIND] <television> (281)', '[SWITCHON] <television> (281)', '[FIND] <remote_control> (1000)', '[SWITCHON] <remote_control> (1000)', '[TURNTO] <television> (281)', '[LOOKAT] <television> (281)']
next step------- assert('close' to 'television')else: [Find] <television> (1)
prompt You see television is clean, off, plugged_in
television is close to character
floor is facing television
ceiling is close to television
table is facing television
character is close to television
television is facing drawing
television is close to ceiling
walllamp is facing television
floor is close to television
drawing is facing television
television is close to powersocket
mat is facing television
chair is close to television
television is close to doorjamb
tvstand is facing television
powersocket is close to television
ceiling is facing television
television is close to floor
television is close to wall
doorjamb is close to television
tvstand is close to television
orchid is facing television
television is close to tvstand
television is on tvstand
television is inside home_office
ceilinglamp is facing television
wall is close to television
television is close to chair
wall is facing television
television is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'television'), 
prediction True
next step------- assert('remote_control' in 'hands')else: [Find] <remote_control> (1)
prompt You see remote_control is clean
remote_control is close to character
remote_control is close to chair
remote_control is inside home_office
character is close to remote_control
chair is close to remote_control
remote_control is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('remote_control' in 'hands'), 
prediction False
execute failed at [SWITCHON] <remote_control> (1000)
['[WALK] <bedroom> (162)', '[WALK] <desk> (193)', '[FIND] <desk> (193)', '[FIND] <computer> (209)', '[SWITCHON] <computer> (209)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off, plugged_in
ceiling is facing computer
computer is close to chair
mouse is close to computer
desk is close to computer
table is facing computer
computer is close to character
computer is close to wall
bed is facing computer
keyboard is close to computer
computer is close to cpuscreen
floor is close to computer
chair is close to computer
computer is close to desk
wall is close to computer
doorjamb is close to computer
computer is close to keyboard
chair is facing computer
nightstand is facing computer
tablelamp is facing computer
character is close to computer
computer is close to mousepad
wall is facing computer
mousepad is close to computer
floor is facing computer
computer is close to doorjamb
computer is inside bedroom
computer is close to floor
computer is close to mouse
cpuscreen is close to computer
computer is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction True
end of script
gcr, sr 0.0 0
['[FIND] <shaving_cream> (2025)', '[GRAB] <shaving_cream> (2025)']
end of script
gcr, sr 0.5 0
['[FIND] <hanger> (294)', '[GRAB] <hanger> (294)']
execute failed at [GRAB] <hanger> (294)
['[FIND] <newspaper> (2020)', '[GRAB] <newspaper> (2020)', '[FIND] <couch> (198)', '[SIT] <couch> (198)', '[TURNTO] <newspaper> (2020)', '[LOOKAT] <newspaper> (2020)', '[READ] <newspaper> (2020)']
next step------- assert('newspaper' in 'hands')else: [Grab] <newspaper> (1)
prompt You see newspaper is closed, clean
character is holds_rh newspaper
newspaper is inside home_office
newspaper is close to character
character is close to newspaper
newspaper is inside home_office
You have Currently, you are standing in the home_office, and holding newspaper in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('newspaper' in 'hands'), 
prediction False
next step------- assert('close' to 'couch')else: [Find] <couch> (1)
prompt You see couch is clean
couch is close to mat
couch is close to floor
couch is inside bedroom
couch is close to cup
floor is close to couch
couch is close to wall
table is close to couch
character is close to couch
cup is on couch
couch is close to sheets
cup is close to couch
couch is close to table
sheets is close to couch
couch is close to character
mat is close to couch
wall is close to couch
sheets is on couch
couch is inside bedroom
You have Currently, you are standing in the bedroom, and holding newspaper in your right hand and newspaper in your left hand., give one word answer True or False to this assert statement: assert('close' to 'couch'), 
prediction False
end of script
gcr, sr 0.25 0
['[FIND] <chair> (1000)', '[GRAB] <chair> (1000)', '[TURNTO] <chair> (1000)', '[LOOKAT] <chair> (1000)', '[SIT] <chair> (1000)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)else: [Turnto] <chair> (1)
prompt You see chair is clean
chair is close to character
character is holds_rh chair
chair is inside dining_room
character is facing chair
character is close to chair
chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding chair in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
end of script
gcr, sr 0.6666666666666666 0
['[WALK] <bedroom> (162)', '[FIND] <bed> (197)', '[TURNTO] <bed> (197)', '[SIT] <bed> (197)']
end of script
gcr, sr 0.6666666666666666 0
['[FIND] <alarm_clock> (1000)', '[GRAB] <alarm_clock> (1000)', '[WALK] <bedroom> (162)', '[FIND] <nightstand> (192)', '[SWITCHON] <alarm_clock> (1000)', '[FIND] <computer> (209)', '[FIND] <mouse> (213)', '[FIND] <keyboard> (211)', '[PLUGIN] <computer> (209)', '[PLUGIN] <mouse> (213)', '[PLUGIN] <keyboard> (211)', '[SWITCHON] <computer> (209)']
next step------- assert('alarm_clock' in 'hands')else: [Grab] <alarm_clock> (1)
prompt You see alarm_clock is clean, off, plugged_in
alarm_clock is close to character
character is close to alarm_clock
character is holds_rh alarm_clock
alarm_clock is inside bedroom
alarm_clock is inside bedroom
You have Currently, you are standing in the bedroom, and holding alarm_clock in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('alarm_clock' in 'hands'), 
prediction False
next step------- assert('close' to 'nightstand')else: [Find] <nightstand> (1)
prompt You see nightstand is closed, clean
nightstand is close to wall
nightstand is close to drawing
nightstand is inside bedroom
nightstand is close to floor
nightstand is close to pillow
nightstand is facing drawing
character is close to nightstand
nightstand is close to character
bed is close to nightstand
nightstand is facing computer
nightstand is close to bed
pillow is close to nightstand
chair is close to nightstand
tablelamp is close to nightstand
drawing is close to nightstand
nightstand is close to tablelamp
nightstand is close to chair
floor is close to nightstand
nightstand is on floor
tablelamp is on nightstand
wall is close to nightstand
nightstand,nightstand is inside bedroom
You have Currently, you are standing in the bedroom, and holding alarm_clock in your right hand and alarm_clock in your left hand., give one word answer True or False to this assert statement: assert('close' to 'nightstand'), 
prediction True
execute failed at [PLUGIN] <computer> (209)
['[FIND] <chair> (194)', '[WALK] <chair> (194)', '[SIT] <chair> (194)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)else: [Walk] <chair> (1)
prompt You see chair is clean
ceiling is close to chair
keyboard is close to chair
mousepad is close to chair
chair is close to ceiling
tablelamp is close to chair
mouse is close to chair
computer is close to chair
chair is close to desk
chair is close to mouse
chair is inside bedroom
chair is close to character
chair is close to wall
chair is on couch
chair is close to computer
wall is close to chair
desk is close to chair
chair is facing computer
chair is close to couch
chair is close to mousepad
chair is close to nightstand
chair is close to keyboard
character is close to chair
couch is close to chair
nightstand is close to chair
floor is close to chair
chair is close to floor
chair is close to tablelamp
chair,chair is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
execute failed at [SIT] <chair> (194)
['[WALK] <bathroom> (1)', '[FIND] <window> (1000)', '[OPEN] <window> (1000)', '[LOOKAT] <window> (1000)']
next step------- assert('close' to 'window')else: [Find] <window> (1)
prompt You see window is closed, clean
window is close to character
window is inside bathroom
character is close to window
window is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'window'), 
prediction False
execute failed at [OPEN] <window> (1000)
['[WALK] <computer> (209)', '[FIND] <computer> (209)', '[SIT] <chair> (194)', '[FIND] <keyboard> (2025)', '[SWITCHON] <computer> (209)', '[LOOKAT] <computer> (209)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
ceiling is close to chair
keyboard is close to chair
mousepad is close to chair
chair is close to ceiling
tablelamp is close to chair
mouse is close to chair
computer is close to chair
chair is close to desk
chair is close to mouse
chair is inside bedroom
chair is close to wall
chair is close to computer
wall is close to chair
desk is close to chair
chair is facing computer
chair is close to mousepad
chair is close to nightstand
chair is close to keyboard
nightstand is close to chair
floor is close to chair
chair is close to floor
chair is close to tablelamp
chair is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction True
execute failed at [SIT] <chair> (194)
['[FIND] <sink> (19)', '[TURNTO] <faucet> (20)', '[WASH] <face> (1002)', '[RINSE] <face> (1002)', '[TURNTO] <faucet> (20)']
execute failed at [TURNTO] <faucet> (20)
['[WALK] <home_office> (241)', '[FIND] <computer> (276)', '[SWITCHON] <computer> (276)', '[FIND] <keyboard> (278)', '[FIND] <chair> (271)', '[SIT] <chair> (271)', '[TOUCH] <keyboard> (278)', '[TURNTO] <computer> (276)', '[LOOKAT] <computer> (276)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off
ceilinglamp is facing computer
ceiling is facing computer
computer is close to chair
computer is close to walllamp
mouse is close to computer
desk is close to computer
table is facing computer
computer is close to character
computer is close to wall
computer is inside home_office
keyboard is close to computer
computer is close to cpuscreen
floor is close to computer
orchid is facing computer
chair is close to computer
computer is close to desk
wall is close to computer
computer is close to keyboard
chair is facing computer
character is close to computer
computer is close to mousepad
wall is facing computer
mousepad is close to computer
floor is facing computer
mat is facing computer
computer is close to floor
walllamp is close to computer
computer is close to mouse
cpuscreen is close to computer
mousepad is facing computer
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction True
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
ceiling is close to chair
walllamp is close to chair
keyboard is close to chair
mousepad is close to chair
chair is close to ceiling
cpuscreen is close to chair
mouse is close to chair
computer is close to chair
chair is close to desk
chair is close to cpuscreen
chair is close to mouse
chair is close to walllamp
chair is close to character
chair is close to wall
chair is close to computer
chair is inside home_office
wall is close to chair
desk is close to chair
chair is facing computer
chair is close to mousepad
chair is close to keyboard
character is close to chair
mat is close to chair
chair is close to floor
floor is close to chair
chair is close to mat
chair is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
end of script
gcr, sr 1.0 1
script 15 has illegal [action]()
['[WALK] <home_office> (241)', '[WALK] <computer> (276)', '[FIND] <computer> (276)', '[SWITCHON] <computer> (276)', '[FIND] <chair> (271)', '[SIT] <chair> (271)', '[TURNTO] <computer> (276)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off
ceilinglamp is facing computer
ceiling is facing computer
computer is close to chair
computer is close to walllamp
mouse is close to computer
desk is close to computer
table is facing computer
computer is close to character
computer is close to wall
computer is inside home_office
keyboard is close to computer
computer is close to cpuscreen
floor is close to computer
orchid is facing computer
chair is close to computer
computer is close to desk
wall is close to computer
computer is close to keyboard
chair is facing computer
character is close to computer
computer is close to mousepad
wall is facing computer
mousepad is close to computer
floor is facing computer
mat is facing computer
computer is close to floor
walllamp is close to computer
computer is close to mouse
cpuscreen is close to computer
mousepad is facing computer
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction True
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
ceiling is close to chair
walllamp is close to chair
keyboard is close to chair
mousepad is close to chair
chair is close to ceiling
cpuscreen is close to chair
mouse is close to chair
computer is close to chair
chair is close to desk
chair is close to cpuscreen
chair is close to mouse
chair is close to walllamp
chair is close to character
chair is close to wall
chair is close to computer
chair is inside home_office
wall is close to chair
desk is close to chair
chair is facing computer
chair is close to mousepad
chair is close to keyboard
character is close to chair
mat is close to chair
chair is close to floor
floor is close to chair
chair is close to mat
chair is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
next step------- assert('computer' is 'switchedon')else: [Switchon] <computer> (1)
prompt You see computer is clean, on
ceilinglamp is facing computer
ceiling is facing computer
computer is close to chair
computer is close to walllamp
mouse is close to computer
desk is close to computer
table is facing computer
computer is close to character
computer is close to wall
computer is inside home_office
keyboard is close to computer
computer is close to cpuscreen
floor is close to computer
character is facing computer
orchid is facing computer
chair is close to computer
computer is close to desk
wall is close to computer
computer is close to keyboard
chair is facing computer
character is close to computer
computer is close to mousepad
wall is facing computer
mousepad is close to computer
floor is facing computer
mat is facing computer
computer is close to floor
walllamp is close to computer
computer is close to mouse
cpuscreen is close to computer
mousepad is facing computer
computer is inside home_office
You have Currently, you are sitting on chair in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('computer' is 'switchedon'), 
prediction False
execute failed at assert else at ['[SWITCHON] <computer> (276)']
['[FIND] <newspaper> (1000)', '[GRAB] <newspaper> (1000)', '[FIND] <couch> (198)', '[SIT] <couch> (198)', '[TURNTO] <newspaper> (1000)', '[LOOKAT] <newspaper> (1000)', '[READ] <newspaper> (1000)']
next step------- assert('close' to 'couch')else: [Find] <couch> (1)
prompt You see couch is clean
couch is close to clothes_dress
couch is close to wall
couch is close to character
pillow is close to couch
clothes_dress is on couch
couch is close to floor
couch is close to table
chessboard is close to couch
couch is close to mat
couch is inside bedroom
floor is close to couch
table is close to couch
couch is close to chessboard
wall is close to couch
mat is close to couch
pillow is on couch
clothes_dress is close to couch
chessboard is on couch
couch is close to pillow
character is close to couch
couch is inside bedroom
You have Currently, you are standing in the bedroom, and holding newspaper in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'couch'), 
prediction False
end of script
gcr, sr 0.5 0
['[WALK] <bathroom> (1)', '[FIND] <sink> (19)', '[TURNTO] <sink> (19)', '[LOOKAT] <sink> (19)', '[PLUGIN] <sink> (19)', '[GRAB] <soap> (1000)', '[TURNTO] <soap> (1000)', '[LOOKAT] <soap> (1000)', '[WASH] <soap> (1000)', '[TURNTO] <sink> (19)', '[LOOKAT] <sink> (19)', '[SWITCHOFF] <sink> (19)', '[PUTOBJBACK] <soap> (1000)']
next step------- assert('close' to 'sink')else: [Find] <sink> (1)
prompt You see 
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'sink'), 
prediction False
execute failed at [PLUGIN] <sink> (19)
['[WALK] <bathroom> (1)', '[TURNTO] <bathroom_counter> (18)', '[LOOKAT] <bathroom_counter> (18)', '[WASH] <bathroom_counter> (18)', '[TURNTO] <floor> (10)', '[LOOKAT] <floor> (10)']
execute failed at [TURNTO] <bathroom_counter> (18)
['[WALK] <bedroom> (162)', '[WALK] <phone> (71)', '[FIND] <phone> (71)', '[GRAB] <phone> (71)']
next step------- assert('close' to 'phone')else: [Find] <phone> (1)
prompt You see phone is clean, off, plugged_in
phone is close to pillow
phone is close to drawing
door is close to phone
pillow is close to phone
phone is close to tvstand
ceiling is close to phone
wall is close to phone
phone is close to floor
phone is inside dining_room
phone is close to ceiling
phone is close to door
phone is close to wall
phone is close to character
drawing is close to phone
floor is close to phone
tvstand is close to phone
character is close to phone
phone is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'phone'), 
prediction False
next step------- assert('close' to 'phone')else: [Find] <phone> (1)
prompt You see phone is clean, off, plugged_in
phone is close to character
phone is inside dining_room
character is holds_rh phone
character is close to phone
phone is inside dining_room
You have Currently, you are standing in the dining_room, and holding phone in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'phone'), 
prediction False
end of script
gcr, sr 1.0 1
['[WALK] <bathroom> (1)', '[WALK] <toilet> (15)', '[FIND] <toilet> (15)', '[TURNTO] <toilet> (15)', '[SIT] <toilet> (15)']
next step------- assert('close' to 'toilet')else: [Find] <toilet> (1)
prompt You see toilet is closed, clean, off
toilet is close to doorjamb
doorjamb is close to toilet
door is close to toilet
shower is close to toilet
toilet is close to floor
toilet is inside bathroom
toilet is facing drawing
toilet is close to shower
toilet is close to curtain
wall is close to toilet
toilet is close to character
character is close to toilet
curtain is close to toilet
floor is close to toilet
toilet is close to wall
toilet is close to door
toilet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'toilet'), 
prediction True
end of script
gcr, sr 1.0 1
experiment time1 on environment scene4
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 18.254181146621704
[(" # 0: find laptop\n find('laptop')\n # 1: find power socket\n find('powersocket')\n # 2: connect laptop to power socket\n plug('laptop', 'powersocket')\n # 3: open laptop\n assert('close' to 'laptop')\n else: find('laptop')\n open('laptop')\n # 4: press the power button\n press('power_button')\n # 5: Done\n", <OpenAIObject at 0x7f9fb2444f40> JSON: {
  "text_offset": [
    3380,
    3382,
    3384,
    3385,
    3390,
    3397,
    3398,
    3403,
    3405,
    3406,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3424,
    3430,
    3437,
    3438,
    3443,
    3445,
    3451,
    3456,
    3458,
    3459,
    3461,
    3463,
    3464,
    3472,
    3479,
    3482,
    3488,
    3495,
    3496,
    3501,
    3503,
    3504,
    3509,
    3511,
    3513,
    3519,
    3524,
    3526,
    3527,
    3529,
    3531,
    3532,
    3537,
    3544,
    3545,
    3552,
    3554,
    3559,
    3560,
    3563,
    3565,
    3566,
    3571,
    3573,
    3574,
    3579,
    3580,
    3585,
    3587,
    3588,
    3593,
    3595,
    3596,
    3601,
    3603,
    3604,
    3609,
    3611,
    3612,
    3614,
    3616,
    3617,
    3623,
    3627,
    3633,
    3640,
    3641,
    3647,
    3649,
    3654,
    3655,
    3661,
    3663,
    3664,
    3666,
    3668,
    3669,
    3674
  ],
  "token_logprobs": [
    -0.0156001635,
    -0.007446148,
    -0.0016680702,
    -1.4024136,
    -1.5249814,
    -0.037688274,
    -0.046062026,
    -0.0022593795,
    -0.002514021,
    -0.0005219864,
    -0.0025038049,
    -0.008594705,
    -0.006021935,
    -0.0036488802,
    -0.0006959005,
    -2.4777925,
    -0.4239552,
    -0.06759582,
    -0.031091066,
    -0.0827199,
    -0.0012263537,
    -0.53499967,
    -0.0007842989,
    -0.0014023026,
    -0.0062737004,
    -0.010290239,
    -0.0046881246,
    -0.000670909,
    -3.0705245,
    -0.55708414,
    -0.07661956,
    -0.19707559,
    -0.025988005,
    -0.01624945,
    -1.4625993,
    -0.26733053,
    -0.23323135,
    -0.0002429912,
    -0.7523924,
    -0.0051323334,
    -0.0340465,
    -0.0007983168,
    -0.002546351,
    -0.012207537,
    -0.011679668,
    -0.004665906,
    -0.0012252779,
    -1.9081435,
    -0.19302411,
    -0.1394692,
    -1.6196667,
    -0.0023654837,
    -0.13334362,
    -0.003315421,
    -0.0013544315,
    -0.004543691,
    -0.0036370945,
    -0.00010522067,
    -0.008309482,
    -0.0048891804,
    -0.003234152,
    -0.0021951608,
    -0.0066919047,
    -0.0020252839,
    -0.0016632335,
    -4.9069615e-05,
    -0.0022519117,
    -0.0067697945,
    -0.038599774,
    -0.0026929446,
    -0.0007991522,
    -3.058758e-05,
    -0.0013534761,
    -0.009901887,
    -0.010827076,
    -0.007348273,
    -0.001744374,
    -1.6190026,
    -1.4129514,
    -0.059630837,
    -0.025507055,
    -0.07367864,
    -0.74341404,
    -0.033601783,
    -0.23427472,
    -0.4088885,
    -0.002707946,
    -0.01872877,
    -0.193226,
    -0.030861197,
    -0.0049520745,
    -0.0018105349,
    -0.46729276,
    -0.43163112
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " laptop",
    "\n",
    " find",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " power",
    " socket",
    "\n",
    " find",
    "('",
    "powers",
    "ocket",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " connect",
    " laptop",
    " to",
    " power",
    " socket",
    "\n",
    " plug",
    "('",
    "l",
    "aptop",
    "',",
    " '",
    "powers",
    "ocket",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " open",
    " laptop",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "l",
    "aptop",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " open",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " press",
    " the",
    " power",
    " button",
    "\n",
    " press",
    "('",
    "power",
    "_",
    "button",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done",
    "\n"
  ],
  "top_logprobs": [
    {
      " #": -0.0156001635
    },
    {
      " 0": -0.007446148
    },
    {
      ":": -0.0016680702
    },
    {
      " walk": -0.35566637
    },
    {
      " computer": -0.6648176
    },
    {
      "\n": -0.037688274
    },
    {
      " find": -0.046062026
    },
    {
      "('": -0.0022593795
    },
    {
      "l": -0.002514021
    },
    {
      "aptop": -0.0005219864
    },
    {
      "')": -0.0025038049
    },
    {
      "\n": -0.008594705
    },
    {
      " #": -0.006021935
    },
    {
      " 1": -0.0036488802
    },
    {
      ":": -0.0006959005
    },
    {
      " open": -0.6007803
    },
    {
      " power": -0.4239552
    },
    {
      " socket": -0.06759582
    },
    {
      "\n": -0.031091066
    },
    {
      " find": -0.0827199
    },
    {
      "('": -0.0012263537
    },
    {
      "powers": -0.53499967
    },
    {
      "ocket": -0.0007842989
    },
    {
      "')": -0.0014023026
    },
    {
      "\n": -0.0062737004
    },
    {
      " #": -0.010290239
    },
    {
      " 2": -0.0046881246
    },
    {
      ":": -0.000670909
    },
    {
      " plug": -0.3667608
    },
    {
      " laptop": -0.55708414
    },
    {
      " to": -0.07661956
    },
    {
      " power": -0.19707559
    },
    {
      " socket": -0.025988005
    },
    {
      "\n": -0.01624945
    },
    {
      " assert": -0.792111
    },
    {
      "('": -0.26733053
    },
    {
      "l": -0.23323135
    },
    {
      "aptop": -0.0002429912
    },
    {
      "',": -0.7523924
    },
    {
      " '": -0.0051323334
    },
    {
      "powers": -0.0340465
    },
    {
      "ocket": -0.0007983168
    },
    {
      "')": -0.002546351
    },
    {
      "\n": -0.012207537
    },
    {
      " #": -0.011679668
    },
    {
      " 3": -0.004665906
    },
    {
      ":": -0.0012252779
    },
    {
      " turn": -0.65336084
    },
    {
      " laptop": -0.19302411
    },
    {
      "\n": -0.1394692
    },
    {
      " open": -0.28540286
    },
    {
      "('": -0.0023654837
    },
    {
      "close": -0.13334362
    },
    {
      "'": -0.003315421
    },
    {
      " to": -0.0013544315
    },
    {
      " '": -0.004543691
    },
    {
      "l": -0.0036370945
    },
    {
      "aptop": -0.00010522067
    },
    {
      "')": -0.008309482
    },
    {
      "\n": -0.0048891804
    },
    {
      " else": -0.003234152
    },
    {
      ":": -0.0021951608
    },
    {
      " find": -0.0066919047
    },
    {
      "('": -0.0020252839
    },
    {
      "l": -0.0016632335
    },
    {
      "aptop": -4.9069615e-05
    },
    {
      "')": -0.0022519117
    },
    {
      "\n": -0.0067697945
    },
    {
      " open": -0.038599774
    },
    {
      "('": -0.0026929446
    },
    {
      "l": -0.0007991522
    },
    {
      "aptop": -3.058758e-05
    },
    {
      "')": -0.0013534761
    },
    {
      "\n": -0.009901887
    },
    {
      " #": -0.010827076
    },
    {
      " 4": -0.007348273
    },
    {
      ":": -0.001744374
    },
    {
      " turn": -0.66762084
    },
    {
      " power": -0.35706788
    },
    {
      " power": -0.059630837
    },
    {
      " button": -0.025507055
    },
    {
      "\n": -0.07367864
    },
    {
      " press": -0.74341404
    },
    {
      "('": -0.033601783
    },
    {
      "power": -0.23427472
    },
    {
      "_": -0.4088885
    },
    {
      "button": -0.002707946
    },
    {
      "')": -0.01872877
    },
    {
      "\n": -0.193226
    },
    {
      " #": -0.030861197
    },
    {
      " 5": -0.0049520745
    },
    {
      ":": -0.0018105349
    },
    {
      " Done": -0.46729276
    },
    {
      "\n": -0.43163112
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.434998035430908
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: grab toilet brush\n grab('toilet_brush')\n # 3: wash the toilet\n assert('close' to 'toilet')\n else: find('toilet')\n assert('toilet_brush' in 'hands')\n else: grab('toilet_brush')\n wash('toilet')\n # 4: put the brush back\n putobjback('toilet_brush')\n # 5: flush the toilet\n flush('toilet')\n # 6: done", <OpenAIObject at 0x7f9f901a8db0> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3398,
    3399,
    3404,
    3406,
    3410,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3434,
    3435,
    3440,
    3442,
    3444,
    3448,
    3450,
    3451,
    3453,
    3455,
    3456,
    3461,
    3468,
    3474,
    3475,
    3480,
    3482,
    3484,
    3488,
    3489,
    3494,
    3496,
    3497,
    3499,
    3501,
    3502,
    3507,
    3511,
    3518,
    3519,
    3526,
    3528,
    3533,
    3534,
    3537,
    3539,
    3541,
    3545,
    3547,
    3548,
    3553,
    3554,
    3559,
    3561,
    3563,
    3567,
    3569,
    3570,
    3577,
    3579,
    3581,
    3585,
    3586,
    3591,
    3592,
    3595,
    3597,
    3602,
    3604,
    3605,
    3610,
    3611,
    3616,
    3618,
    3620,
    3624,
    3625,
    3630,
    3632,
    3633,
    3638,
    3640,
    3642,
    3646,
    3648,
    3649,
    3651,
    3653,
    3654,
    3658,
    3662,
    3668,
    3673,
    3674,
    3678,
    3681,
    3685,
    3687,
    3689,
    3693,
    3694,
    3699,
    3701,
    3702,
    3704,
    3706,
    3707,
    3713,
    3717,
    3724,
    3725,
    3731,
    3733,
    3735,
    3739,
    3741,
    3742,
    3744,
    3746,
    3747
  ],
  "token_logprobs": [
    -0.018675873,
    -0.007980659,
    -0.0021326195,
    -0.27917653,
    -0.2492501,
    -0.28581053,
    -0.020890534,
    -0.005397175,
    -0.004152955,
    -0.0021301105,
    -0.00013061494,
    -0.0019597672,
    -0.007417023,
    -0.003262318,
    -0.003404771,
    -0.0008145432,
    -0.09989954,
    -0.13681039,
    -0.05313591,
    -0.27798226,
    -0.001029498,
    -0.00077236874,
    -0.000319663,
    -0.0026166267,
    -0.005522493,
    -0.011840393,
    -0.005150364,
    -0.0012443194,
    -1.1446289,
    -0.50934154,
    -0.5753067,
    -0.029876962,
    -0.5588017,
    -0.0012943298,
    -0.01595229,
    -0.0014907621,
    -0.08967241,
    -0.00041661627,
    -0.0027901295,
    -0.0049696234,
    -0.09785202,
    -0.0074357,
    -0.0009358863,
    -0.7934583,
    -0.8613557,
    -0.012258645,
    -0.11776997,
    -0.840445,
    -0.0018940766,
    -0.77867806,
    -0.004612373,
    -0.0011240707,
    -0.0020920613,
    -0.0050605005,
    -0.00045024627,
    -0.08792343,
    -0.0038341691,
    -0.0016086057,
    -0.0018566939,
    -0.008318618,
    -0.001717386,
    -0.00090504135,
    -0.00012107918,
    -0.0027382486,
    -0.0060105417,
    -1.0853858,
    -0.0018207474,
    -0.1356949,
    -0.0009136328,
    -0.014600459,
    -0.0003881742,
    -0.0024834876,
    -0.017256508,
    -0.005779708,
    -0.009650051,
    -0.10504195,
    -0.003891612,
    -0.0011736015,
    -0.002586328,
    -0.023207761,
    -0.0016963114,
    -0.0014163271,
    -2.6060465e-05,
    -0.0018809984,
    -0.00079420075,
    -0.003957073,
    -0.007588117,
    -0.051368512,
    -0.0011320681,
    -0.00030404294,
    -0.00011905076,
    -0.11944641,
    -0.0069298507,
    -0.6630525,
    -0.0077078193,
    -0.0011800453,
    -0.30113515,
    -1.3194661,
    -0.5613522,
    -0.016369287,
    -0.036268253,
    -0.60624725,
    -0.6780985,
    -0.0037527978,
    -0.001084271,
    -0.024534972,
    -0.00030130113,
    -0.0037471126,
    -0.0001283481,
    -0.0046492014,
    -0.22438152,
    -0.009841931,
    -0.004331154,
    -0.0019398826,
    -2.1263478,
    -0.20655414,
    -0.0019454958,
    -0.016321002,
    -0.13219705,
    -0.007155609,
    -0.00041083325,
    -0.00048000526,
    -0.0025783796,
    -0.16950822,
    -0.011481826,
    -0.004581655,
    -0.002073843,
    -1.7445788
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " toilet",
    " brush",
    "\n",
    " grab",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wash",
    " the",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " assert",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " wash",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " the",
    " brush",
    " back",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " flush",
    " the",
    " toilet",
    "\n",
    " flush",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.018675873
    },
    {
      " 0": -0.007980659
    },
    {
      ":": -0.0021326195
    },
    {
      " walk": -0.27917653
    },
    {
      " to": -0.2492501
    },
    {
      " bathroom": -0.28581053
    },
    {
      "\n": -0.020890534
    },
    {
      " walk": -0.005397175
    },
    {
      "('": -0.004152955
    },
    {
      "bath": -0.0021301105
    },
    {
      "room": -0.00013061494
    },
    {
      "')": -0.0019597672
    },
    {
      "\n": -0.007417023
    },
    {
      " #": -0.003262318
    },
    {
      " 1": -0.003404771
    },
    {
      ":": -0.0008145432
    },
    {
      " find": -0.09989954
    },
    {
      " toilet": -0.13681039
    },
    {
      "\n": -0.05313591
    },
    {
      " find": -0.27798226
    },
    {
      "('": -0.001029498
    },
    {
      "to": -0.00077236874
    },
    {
      "ilet": -0.000319663
    },
    {
      "')": -0.0026166267
    },
    {
      "\n": -0.005522493
    },
    {
      " #": -0.011840393
    },
    {
      " 2": -0.005150364
    },
    {
      ":": -0.0012443194
    },
    {
      " grab": -1.1446289
    },
    {
      " toilet": -0.50934154
    },
    {
      " brush": -0.5753067
    },
    {
      "\n": -0.029876962
    },
    {
      " grab": -0.5588017
    },
    {
      "('": -0.0012943298
    },
    {
      "to": -0.01595229
    },
    {
      "ilet": -0.0014907621
    },
    {
      "_": -0.08967241
    },
    {
      "brush": -0.00041661627
    },
    {
      "')": -0.0027901295
    },
    {
      "\n": -0.0049696234
    },
    {
      " #": -0.09785202
    },
    {
      " 3": -0.0074357
    },
    {
      ":": -0.0009358863
    },
    {
      " wash": -0.7934583
    },
    {
      " toilet": -0.61530286
    },
    {
      " toilet": -0.012258645
    },
    {
      "\n": -0.11776997
    },
    {
      " assert": -0.840445
    },
    {
      "('": -0.0018940766
    },
    {
      "to": -0.70646584
    },
    {
      "'": -0.004612373
    },
    {
      " to": -0.0011240707
    },
    {
      " '": -0.0020920613
    },
    {
      "to": -0.0050605005
    },
    {
      "ilet": -0.00045024627
    },
    {
      "')": -0.08792343
    },
    {
      "\n": -0.0038341691
    },
    {
      " else": -0.0016086057
    },
    {
      ":": -0.0018566939
    },
    {
      " find": -0.008318618
    },
    {
      "('": -0.001717386
    },
    {
      "to": -0.00090504135
    },
    {
      "ilet": -0.00012107918
    },
    {
      "')": -0.0027382486
    },
    {
      "\n": -0.0060105417
    },
    {
      " wash": -0.5134043
    },
    {
      "('": -0.0018207474
    },
    {
      "to": -0.1356949
    },
    {
      "ilet": -0.0009136328
    },
    {
      "_": -0.014600459
    },
    {
      "brush": -0.0003881742
    },
    {
      "'": -0.0024834876
    },
    {
      " in": -0.017256508
    },
    {
      " '": -0.005779708
    },
    {
      "hands": -0.009650051
    },
    {
      "')": -0.10504195
    },
    {
      "\n": -0.003891612
    },
    {
      " else": -0.0011736015
    },
    {
      ":": -0.002586328
    },
    {
      " grab": -0.023207761
    },
    {
      "('": -0.0016963114
    },
    {
      "to": -0.0014163271
    },
    {
      "ilet": -2.6060465e-05
    },
    {
      "_": -0.0018809984
    },
    {
      "brush": -0.00079420075
    },
    {
      "')": -0.003957073
    },
    {
      "\n": -0.007588117
    },
    {
      " wash": -0.051368512
    },
    {
      "('": -0.0011320681
    },
    {
      "to": -0.00030404294
    },
    {
      "ilet": -0.00011905076
    },
    {
      "')": -0.11944641
    },
    {
      "\n": -0.0069298507
    },
    {
      " #": -0.6630525
    },
    {
      " 4": -0.0077078193
    },
    {
      ":": -0.0011800453
    },
    {
      " put": -0.30113515
    },
    {
      " toilet": -1.2732539
    },
    {
      " brush": -0.5613522
    },
    {
      " back": -0.016369287
    },
    {
      "\n": -0.036268253
    },
    {
      " put": -0.60624725
    },
    {
      "obj": -0.6780985
    },
    {
      "back": -0.0037527978
    },
    {
      "('": -0.001084271
    },
    {
      "to": -0.024534972
    },
    {
      "ilet": -0.00030130113
    },
    {
      "_": -0.0037471126
    },
    {
      "brush": -0.0001283481
    },
    {
      "')": -0.0046492014
    },
    {
      "\n": -0.22438152
    },
    {
      " #": -0.009841931
    },
    {
      " 5": -0.004331154
    },
    {
      ":": -0.0019398826
    },
    {
      " Done": -0.6453
    },
    {
      " the": -0.20655414
    },
    {
      " toilet": -0.0019454958
    },
    {
      "\n": -0.016321002
    },
    {
      " flush": -0.13219705
    },
    {
      "('": -0.007155609
    },
    {
      "to": -0.00041083325
    },
    {
      "ilet": -0.00048000526
    },
    {
      "')": -0.0025783796
    },
    {
      "\n": -0.16950822
    },
    {
      " #": -0.011481826
    },
    {
      " 6": -0.004581655
    },
    {
      ":": -0.002073843
    },
    {
      " Done": -0.49456742
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.9363210201263428
[(" # 0: walk in to bedroom\n walk('bedroom')\n # 1: find dresser\n find('dresser')\n # 2: open dresser\n assert('close' to 'dresser')\n else: find('dresser')\n open('dresser')\n # 3: look for spare change\n turnto('dresser')\n lookat('dresser')\n # 4: grab spare change\n assert('close' to 'spare_change')\n else: find('spare_change')\n grab('spare_change')\n # 5: close dresser\n assert('close' to 'dresser')\n else: find('dresser')\n close('dresser')\n # 6: Done", <OpenAIObject at 0x7f9fa1a7fdb0> JSON: {
  "text_offset": [
    3395,
    3397,
    3399,
    3400,
    3405,
    3408,
    3411,
    3419,
    3420,
    3425,
    3427,
    3434,
    3436,
    3437,
    3439,
    3441,
    3442,
    3447,
    3453,
    3455,
    3456,
    3461,
    3463,
    3468,
    3470,
    3472,
    3473,
    3475,
    3477,
    3478,
    3483,
    3489,
    3491,
    3492,
    3499,
    3501,
    3506,
    3507,
    3510,
    3512,
    3517,
    3519,
    3521,
    3522,
    3527,
    3528,
    3533,
    3535,
    3540,
    3542,
    3544,
    3545,
    3550,
    3552,
    3557,
    3559,
    3561,
    3562,
    3564,
    3566,
    3567,
    3572,
    3576,
    3582,
    3589,
    3590,
    3594,
    3596,
    3597,
    3599,
    3604,
    3606,
    3608,
    3609,
    3614,
    3616,
    3618,
    3623,
    3625,
    3627,
    3628,
    3630,
    3632,
    3633,
    3638,
    3644,
    3651,
    3652,
    3659,
    3661,
    3666,
    3667,
    3670,
    3672,
    3674,
    3677,
    3678,
    3684,
    3686,
    3687,
    3692,
    3693,
    3698,
    3700,
    3702,
    3705,
    3706,
    3712,
    3714,
    3715,
    3720,
    3722,
    3724,
    3727,
    3728,
    3734,
    3736,
    3737,
    3739,
    3741,
    3742,
    3748,
    3754,
    3756,
    3757,
    3764,
    3766,
    3771,
    3772,
    3775,
    3777,
    3782,
    3784,
    3786,
    3787,
    3792,
    3793,
    3798,
    3800,
    3805,
    3807,
    3809,
    3810,
    3816,
    3818,
    3823,
    3825,
    3827,
    3828,
    3830,
    3832,
    3833
  ],
  "token_logprobs": [
    -0.02229538,
    -0.011193063,
    -0.002570969,
    -0.25144368,
    -2.1043751,
    -0.05667824,
    -0.20730634,
    -0.027398078,
    -0.00556277,
    -0.006687285,
    -0.0028654449,
    -0.001632488,
    -0.007539109,
    -0.0020673936,
    -0.003061109,
    -0.0007465398,
    -0.04380692,
    -0.03696202,
    -0.0007044901,
    -0.01840658,
    -0.6760564,
    -0.00085540453,
    -0.0011145219,
    -0.00016709937,
    -0.0012785153,
    -0.00467459,
    -0.03831707,
    -0.0046616555,
    -0.0009161371,
    -0.54704005,
    -0.6422304,
    -0.0013211282,
    -0.24895625,
    -0.787604,
    -0.0018676817,
    -0.01488379,
    -0.0024895242,
    -0.00083834643,
    -0.0026474642,
    -0.0023198389,
    -0.00019750134,
    -0.0054553663,
    -0.006410522,
    -0.0016412033,
    -0.0018177005,
    -0.0057645394,
    -0.0019402403,
    -0.0015130286,
    -0.00019893186,
    -0.0025390014,
    -0.0077189323,
    -0.029664624,
    -0.0017255673,
    -0.0028221665,
    -0.0001419407,
    -0.0014994182,
    -0.008283637,
    -0.030549955,
    -0.0076995306,
    -0.0012138217,
    -2.0246053,
    -0.3765996,
    -0.32927677,
    -0.013932004,
    -0.07506394,
    -1.840392,
    -6.587617e-05,
    -0.00035860104,
    -0.0007363996,
    -0.01001693,
    -0.00026779127,
    -0.0015222819,
    -0.005359783,
    -0.044932786,
    -0.04648566,
    -0.00075059576,
    -0.022026515,
    -0.0003910371,
    -0.0019577357,
    -0.0066155205,
    -0.20655099,
    -0.0070843534,
    -0.0022657097,
    -0.6269985,
    -0.48090145,
    -0.0037566265,
    -0.03170636,
    -1.8602444,
    -0.00150109,
    -0.26499033,
    -0.0030612282,
    -0.00051447254,
    -0.003010113,
    -0.09602049,
    -0.00015386345,
    -0.060384,
    -0.00138374,
    -0.009655649,
    -0.0047839456,
    -0.0020305403,
    -0.0015188211,
    -0.09685839,
    -0.0014311315,
    -0.0014987021,
    -0.00030213463,
    -0.0021705495,
    -0.00032765282,
    -0.0031185076,
    -0.0058586053,
    -0.00938047,
    -0.001120134,
    -0.0009920279,
    -0.0003176346,
    -0.0051485063,
    -0.00018081025,
    -0.0013447015,
    -0.07547805,
    -0.059493553,
    -0.005035938,
    -0.0013285887,
    -1.1122617,
    -0.19630876,
    -0.00031346135,
    -0.034355137,
    -2.159458,
    -0.001097997,
    -0.23821473,
    -0.0015130286,
    -0.00031286344,
    -0.0010333165,
    -0.007778459,
    -0.00015565252,
    -0.0028943769,
    -0.0032455134,
    -0.0028697497,
    -0.0009205525,
    -0.0054823975,
    -0.0006661369,
    -0.00094232924,
    -0.00011535529,
    -0.002212184,
    -0.007306242,
    -0.009278913,
    -0.0006698352,
    -0.0010697717,
    -0.0001779483,
    -0.001986284,
    -0.23820625,
    -0.02005779,
    -0.005224061,
    -0.0019229823,
    -0.26080105
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " dress",
    "er",
    "\n",
    " find",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " dress",
    "er",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "dress",
    "er",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " open",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " look",
    " for",
    " spare",
    " change",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " spare",
    " change",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " grab",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " close",
    " dress",
    "er",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "dress",
    "er",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " close",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.02229538
    },
    {
      " 0": -0.011193063
    },
    {
      ":": -0.002570969
    },
    {
      " walk": -0.25144368
    },
    {
      " to": -0.1959861
    },
    {
      " to": -0.05667824
    },
    {
      " bedroom": -0.20730634
    },
    {
      "\n": -0.027398078
    },
    {
      " walk": -0.00556277
    },
    {
      "('": -0.006687285
    },
    {
      "bedroom": -0.0028654449
    },
    {
      "')": -0.001632488
    },
    {
      "\n": -0.007539109
    },
    {
      " #": -0.0020673936
    },
    {
      " 1": -0.003061109
    },
    {
      ":": -0.0007465398
    },
    {
      " find": -0.04380692
    },
    {
      " dress": -0.03696202
    },
    {
      "er": -0.0007044901
    },
    {
      "\n": -0.01840658
    },
    {
      " find": -0.6760564
    },
    {
      "('": -0.00085540453
    },
    {
      "dress": -0.0011145219
    },
    {
      "er": -0.00016709937
    },
    {
      "')": -0.0012785153
    },
    {
      "\n": -0.00467459
    },
    {
      " #": -0.03831707
    },
    {
      " 2": -0.0046616555
    },
    {
      ":": -0.0009161371
    },
    {
      " open": -0.54704005
    },
    {
      " dress": -0.6422304
    },
    {
      "er": -0.0013211282
    },
    {
      "\n": -0.24895625
    },
    {
      " assert": -0.787604
    },
    {
      "('": -0.0018676817
    },
    {
      "close": -0.01488379
    },
    {
      "'": -0.0024895242
    },
    {
      " to": -0.00083834643
    },
    {
      " '": -0.0026474642
    },
    {
      "dress": -0.0023198389
    },
    {
      "er": -0.00019750134
    },
    {
      "')": -0.0054553663
    },
    {
      "\n": -0.006410522
    },
    {
      " else": -0.0016412033
    },
    {
      ":": -0.0018177005
    },
    {
      " find": -0.0057645394
    },
    {
      "('": -0.0019402403
    },
    {
      "dress": -0.0015130286
    },
    {
      "er": -0.00019893186
    },
    {
      "')": -0.0025390014
    },
    {
      "\n": -0.0077189323
    },
    {
      " open": -0.029664624
    },
    {
      "('": -0.0017255673
    },
    {
      "dress": -0.0028221665
    },
    {
      "er": -0.0001419407
    },
    {
      "')": -0.0014994182
    },
    {
      "\n": -0.008283637
    },
    {
      " #": -0.030549955
    },
    {
      " 3": -0.0076995306
    },
    {
      ":": -0.0012138217
    },
    {
      " find": -0.90597105
    },
    {
      " for": -0.3765996
    },
    {
      " spare": -0.32927677
    },
    {
      " change": -0.013932004
    },
    {
      "\n": -0.07506394
    },
    {
      " look": -0.30063513
    },
    {
      "nt": -6.587617e-05
    },
    {
      "o": -0.00035860104
    },
    {
      "('": -0.0007363996
    },
    {
      "dress": -0.01001693
    },
    {
      "er": -0.00026779127
    },
    {
      "')": -0.0015222819
    },
    {
      "\n": -0.005359783
    },
    {
      " look": -0.044932786
    },
    {
      "at": -0.04648566
    },
    {
      "('": -0.00075059576
    },
    {
      "dress": -0.022026515
    },
    {
      "er": -0.0003910371
    },
    {
      "')": -0.0019577357
    },
    {
      "\n": -0.0066155205
    },
    {
      " #": -0.20655099
    },
    {
      " 4": -0.0070843534
    },
    {
      ":": -0.0022657097
    },
    {
      " grab": -0.6269985
    },
    {
      " spare": -0.48090145
    },
    {
      " change": -0.0037566265
    },
    {
      "\n": -0.03170636
    },
    {
      " grab": -0.31709552
    },
    {
      "('": -0.00150109
    },
    {
      "close": -0.26499033
    },
    {
      "'": -0.0030612282
    },
    {
      " to": -0.00051447254
    },
    {
      " '": -0.003010113
    },
    {
      "sp": -0.09602049
    },
    {
      "are": -0.00015386345
    },
    {
      "_": -0.060384
    },
    {
      "change": -0.00138374
    },
    {
      "')": -0.009655649
    },
    {
      "\n": -0.0047839456
    },
    {
      " else": -0.0020305403
    },
    {
      ":": -0.0015188211
    },
    {
      " find": -0.09685839
    },
    {
      "('": -0.0014311315
    },
    {
      "sp": -0.0014987021
    },
    {
      "are": -0.00030213463
    },
    {
      "_": -0.0021705495
    },
    {
      "change": -0.00032765282
    },
    {
      "')": -0.0031185076
    },
    {
      "\n": -0.0058586053
    },
    {
      " grab": -0.00938047
    },
    {
      "('": -0.001120134
    },
    {
      "sp": -0.0009920279
    },
    {
      "are": -0.0003176346
    },
    {
      "_": -0.0051485063
    },
    {
      "change": -0.00018081025
    },
    {
      "')": -0.0013447015
    },
    {
      "\n": -0.07547805
    },
    {
      " #": -0.059493553
    },
    {
      " 5": -0.005035938
    },
    {
      ":": -0.0013285887
    },
    {
      " put": -0.6533477
    },
    {
      " dress": -0.19630876
    },
    {
      "er": -0.00031346135
    },
    {
      "\n": -0.034355137
    },
    {
      " close": -0.17190893
    },
    {
      "('": -0.001097997
    },
    {
      "close": -0.23821473
    },
    {
      "'": -0.0015130286
    },
    {
      " to": -0.00031286344
    },
    {
      " '": -0.0010333165
    },
    {
      "dress": -0.007778459
    },
    {
      "er": -0.00015565252
    },
    {
      "')": -0.0028943769
    },
    {
      "\n": -0.0032455134
    },
    {
      " else": -0.0028697497
    },
    {
      ":": -0.0009205525
    },
    {
      " find": -0.0054823975
    },
    {
      "('": -0.0006661369
    },
    {
      "dress": -0.00094232924
    },
    {
      "er": -0.00011535529
    },
    {
      "')": -0.002212184
    },
    {
      "\n": -0.007306242
    },
    {
      " close": -0.009278913
    },
    {
      "('": -0.0006698352
    },
    {
      "dress": -0.0010697717
    },
    {
      "er": -0.0001779483
    },
    {
      "')": -0.001986284
    },
    {
      "\n": -0.23820625
    },
    {
      " #": -0.02005779
    },
    {
      " 6": -0.005224061
    },
    {
      ":": -0.0019229823
    },
    {
      " Done": -0.26080105
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.3334639072418213
[(" # 0: walk to living room\n walk('living_room')\n # 1: find television\n find('television')\n # 2: turn on the television\n assert('close' to 'television')\n else: find('television')\n switchon('television')", <OpenAIObject at 0x7f9f9018d4a0> JSON: {
  "text_offset": [
    3374,
    3376,
    3378,
    3379,
    3384,
    3387,
    3394,
    3399,
    3400,
    3405,
    3407,
    3413,
    3414,
    3418,
    3420,
    3421,
    3423,
    3425,
    3426,
    3431,
    3442,
    3443,
    3448,
    3450,
    3452,
    3460,
    3462,
    3463,
    3465,
    3467,
    3468,
    3473,
    3476,
    3480,
    3491,
    3492,
    3499,
    3501,
    3506,
    3507,
    3510,
    3512,
    3514,
    3522,
    3524,
    3525,
    3530,
    3531,
    3536,
    3538,
    3540,
    3548,
    3550,
    3551,
    3558,
    3560,
    3562,
    3564,
    3572
  ],
  "token_logprobs": [
    -0.0156212915,
    -0.007577907,
    -0.0015001354,
    -0.44109687,
    -0.33705005,
    -0.7046777,
    -0.050990406,
    -0.01751603,
    -0.0043478543,
    -0.0036015008,
    -0.015292962,
    -0.27173346,
    -0.00016900577,
    -0.0021878139,
    -0.0068660527,
    -0.001469571,
    -0.002629595,
    -0.00045525676,
    -0.01885625,
    -1.0932535,
    -0.015845161,
    -0.31906348,
    -0.0006149016,
    -0.004440111,
    -0.00048537247,
    -0.0013451793,
    -0.0054373294,
    -0.003165566,
    -0.004535369,
    -0.00047195444,
    -0.14830136,
    -0.010351968,
    -1.107422,
    -0.5130532,
    -0.018860381,
    -0.25286907,
    -0.00093779556,
    -0.008248121,
    -0.0022592593,
    -0.00081585546,
    -0.0013242323,
    -0.14253367,
    -0.00060428825,
    -0.0042416,
    -0.005976661,
    -0.0013780096,
    -0.0012511218,
    -0.003996092,
    -0.001421223,
    -0.001612367,
    -0.0006981674,
    -0.0030354613,
    -0.006145889,
    -0.1362679,
    -0.0022382298,
    -0.0005045725,
    -0.002469087,
    -0.00042580004,
    -0.0016708159
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "_",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " television",
    "\n",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " television",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "te",
    "levision",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "te",
    "levision",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.0156212915
    },
    {
      " 0": -0.007577907
    },
    {
      ":": -0.0015001354
    },
    {
      " walk": -0.44109687
    },
    {
      " to": -0.33705005
    },
    {
      " living": -0.7046777
    },
    {
      " room": -0.050990406
    },
    {
      "\n": -0.01751603
    },
    {
      " walk": -0.0043478543
    },
    {
      "('": -0.0036015008
    },
    {
      "living": -0.015292962
    },
    {
      "_": -0.27173346
    },
    {
      "room": -0.00016900577
    },
    {
      "')": -0.0021878139
    },
    {
      "\n": -0.0068660527
    },
    {
      " #": -0.001469571
    },
    {
      " 1": -0.002629595
    },
    {
      ":": -0.00045525676
    },
    {
      " find": -0.01885625
    },
    {
      " tv": -0.6745153
    },
    {
      "\n": -0.015845161
    },
    {
      " find": -0.31906348
    },
    {
      "('": -0.0006149016
    },
    {
      "te": -0.004440111
    },
    {
      "levision": -0.00048537247
    },
    {
      "')": -0.0013451793
    },
    {
      "\n": -0.0054373294
    },
    {
      " #": -0.003165566
    },
    {
      " 2": -0.004535369
    },
    {
      ":": -0.00047195444
    },
    {
      " turn": -0.14830136
    },
    {
      " on": -0.010351968
    },
    {
      " tv": -0.63340867
    },
    {
      " television": -0.5130532
    },
    {
      "\n": -0.018860381
    },
    {
      " assert": -0.25286907
    },
    {
      "('": -0.00093779556
    },
    {
      "close": -0.008248121
    },
    {
      "'": -0.0022592593
    },
    {
      " to": -0.00081585546
    },
    {
      " '": -0.0013242323
    },
    {
      "te": -0.14253367
    },
    {
      "levision": -0.00060428825
    },
    {
      "')": -0.0042416
    },
    {
      "\n": -0.005976661
    },
    {
      " else": -0.0013780096
    },
    {
      ":": -0.0012511218
    },
    {
      " find": -0.003996092
    },
    {
      "('": -0.001421223
    },
    {
      "te": -0.001612367
    },
    {
      "levision": -0.0006981674
    },
    {
      "')": -0.0030354613
    },
    {
      "\n": -0.006145889
    },
    {
      " switch": -0.1362679
    },
    {
      "on": -0.0022382298
    },
    {
      "('": -0.0005045725
    },
    {
      "te": -0.002469087
    },
    {
      "levision": -0.00042580004
    },
    {
      "')": -0.0016708159
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.196495056152344
[(" # 0: walk to closet\n walk('closet')\n # 1: find hanger\n find('hanger')\n # 2: hang up jacket\n grab('hanger')\n assert('hanger' in 'hands')\n else: grab('hanger')\n grab('clothes_jacket')\n assert('clothes_jacket' in 'hands')\n else: grab('clothes_jacket')\n puton('clothes_jacket', 'hanger')\n # 3: put back hanger\n putback('hanger', 'closet')\n # 4: Done", <OpenAIObject at 0x7f9fa1aad4a0> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3398,
    3399,
    3404,
    3406,
    3408,
    3410,
    3412,
    3414,
    3415,
    3417,
    3419,
    3420,
    3425,
    3427,
    3432,
    3433,
    3438,
    3440,
    3441,
    3446,
    3448,
    3449,
    3451,
    3453,
    3454,
    3459,
    3462,
    3469,
    3470,
    3475,
    3477,
    3478,
    3483,
    3485,
    3486,
    3493,
    3495,
    3496,
    3501,
    3502,
    3505,
    3507,
    3512,
    3514,
    3515,
    3520,
    3521,
    3526,
    3528,
    3529,
    3534,
    3536,
    3537,
    3542,
    3544,
    3546,
    3551,
    3552,
    3553,
    3558,
    3560,
    3561,
    3568,
    3570,
    3572,
    3577,
    3578,
    3579,
    3584,
    3585,
    3588,
    3590,
    3595,
    3597,
    3598,
    3603,
    3604,
    3609,
    3611,
    3613,
    3618,
    3619,
    3620,
    3625,
    3627,
    3628,
    3632,
    3634,
    3636,
    3638,
    3643,
    3644,
    3645,
    3650,
    3652,
    3654,
    3655,
    3660,
    3662,
    3663,
    3665,
    3667,
    3668,
    3672,
    3677,
    3679,
    3684,
    3685,
    3689,
    3693,
    3695,
    3696,
    3701,
    3703,
    3705,
    3707,
    3709,
    3711,
    3713,
    3714,
    3716,
    3718,
    3719
  ],
  "token_logprobs": [
    -0.01678749,
    -0.0072549083,
    -0.0019094244,
    -0.9735024,
    -0.30452356,
    -0.6352879,
    -0.052329388,
    -0.010505431,
    -0.0036327266,
    -0.002695096,
    -0.004541058,
    -0.0007722504,
    -0.0063550957,
    -0.007231252,
    -0.004794666,
    -0.0029484169,
    -0.0007928895,
    -0.10682072,
    -0.23343112,
    -0.011350999,
    -0.030361619,
    -0.1793632,
    -0.0010410706,
    -0.00045454057,
    -0.0005258039,
    -0.0016322485,
    -0.005007124,
    -0.016061185,
    -0.004295654,
    -0.0005628365,
    -3.5835505,
    -0.30918136,
    -0.38246027,
    -0.14449774,
    -1.094376,
    -0.0013492389,
    -1.4478573,
    -0.0030971037,
    -0.0025341008,
    -0.006748131,
    -0.56689817,
    -0.0022758078,
    -1.098666,
    -0.0026820085,
    -0.002543304,
    -0.02933724,
    -0.005543949,
    -0.015382539,
    -0.028390983,
    -0.0064543136,
    -0.007728781,
    -0.0053730872,
    -0.07190887,
    -0.0016823997,
    -0.0006906526,
    -0.00033820607,
    -0.0034156574,
    -0.0064665535,
    -1.7729508,
    -0.0013182644,
    -0.998453,
    -0.0065195863,
    -0.01036835,
    -0.0014034958,
    -0.0004746981,
    -0.0021537654,
    -0.0064616934,
    -0.20425865,
    -0.0011626201,
    -0.11953992,
    -0.004396409,
    -0.0027940155,
    -0.00070974004,
    -4.1200903e-05,
    -0.0024436344,
    -0.0073707267,
    -0.002644715,
    -0.0024915535,
    -0.008273785,
    -0.0046727937,
    -0.0024574355,
    -0.0042938585,
    -0.030415075,
    -0.0015640707,
    -0.0009400614,
    -0.0009533068,
    -0.0013338423,
    -0.0007266188,
    -0.00019881358,
    -0.0069165886,
    -0.006333022,
    -0.99756,
    -0.030587563,
    -0.0016686664,
    -0.42537454,
    -0.0010462021,
    -0.00057369197,
    -0.00047255142,
    -1.8310955e-05,
    -0.83493114,
    -0.008222578,
    -0.0014349518,
    -0.0004291388,
    -0.0025378054,
    -0.16404161,
    -0.6778645,
    -0.011085056,
    -0.0017628261,
    -1.0609272,
    -1.5579389,
    -0.11354594,
    -0.0012650279,
    -0.059687965,
    -0.41461277,
    -0.21332332,
    -0.0028287428,
    -0.005152641,
    -0.00032478993,
    -1.1424625,
    -0.0028608418,
    -0.0055729593,
    -0.02304904,
    -0.00073675625,
    -0.005558514,
    -0.6435577,
    -0.07219136,
    -0.0081480015,
    -0.0024670565,
    -0.26952663
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " closet",
    "\n",
    " walk",
    "('",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " h",
    "anger",
    "\n",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " hang",
    " up",
    " jacket",
    "\n",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " grab",
    "('",
    "cl",
    "othes",
    "_",
    "j",
    "acket",
    "')",
    "\n",
    " assert",
    "('",
    "cl",
    "othes",
    "_",
    "j",
    "acket",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "cl",
    "othes",
    "_",
    "j",
    "acket",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "cl",
    "othes",
    "_",
    "j",
    "acket",
    "',",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " back",
    " h",
    "anger",
    "\n",
    " put",
    "back",
    "('",
    "h",
    "anger",
    "',",
    " '",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01678749
    },
    {
      " 0": -0.0072549083
    },
    {
      ":": -0.0019094244
    },
    {
      " find": -0.6398118
    },
    {
      " to": -0.30452356
    },
    {
      " closet": -0.6352879
    },
    {
      "\n": -0.052329388
    },
    {
      " walk": -0.010505431
    },
    {
      "('": -0.0036327266
    },
    {
      "cl": -0.002695096
    },
    {
      "os": -0.004541058
    },
    {
      "et": -0.0007722504
    },
    {
      "')": -0.0063550957
    },
    {
      "\n": -0.007231252
    },
    {
      " #": -0.004794666
    },
    {
      " 1": -0.0029484169
    },
    {
      ":": -0.0007928895
    },
    {
      " find": -0.10682072
    },
    {
      " h": -0.23343112
    },
    {
      "anger": -0.011350999
    },
    {
      "\n": -0.030361619
    },
    {
      " find": -0.1793632
    },
    {
      "('": -0.0010410706
    },
    {
      "h": -0.00045454057
    },
    {
      "anger": -0.0005258039
    },
    {
      "')": -0.0016322485
    },
    {
      "\n": -0.005007124
    },
    {
      " #": -0.016061185
    },
    {
      " 2": -0.004295654
    },
    {
      ":": -0.0005628365
    },
    {
      " grab": -0.25339013
    },
    {
      " up": -0.30918136
    },
    {
      " jacket": -0.38246027
    },
    {
      "\n": -0.14449774
    },
    {
      " assert": -0.51499486
    },
    {
      "('": -0.0013492389
    },
    {
      "j": -0.35527828
    },
    {
      "anger": -0.0030971037
    },
    {
      "')": -0.0025341008
    },
    {
      "\n": -0.006748131
    },
    {
      " assert": -0.56689817
    },
    {
      "('": -0.0022758078
    },
    {
      "close": -0.74763757
    },
    {
      "anger": -0.0026820085
    },
    {
      "'": -0.002543304
    },
    {
      " in": -0.02933724
    },
    {
      " '": -0.005543949
    },
    {
      "hands": -0.015382539
    },
    {
      "')": -0.028390983
    },
    {
      "\n": -0.0064543136
    },
    {
      " else": -0.007728781
    },
    {
      ":": -0.0053730872
    },
    {
      " grab": -0.07190887
    },
    {
      "('": -0.0016823997
    },
    {
      "h": -0.0006906526
    },
    {
      "anger": -0.00033820607
    },
    {
      "')": -0.0034156574
    },
    {
      "\n": -0.0064665535
    },
    {
      " tur": -1.2372892
    },
    {
      "('": -0.0013182644
    },
    {
      "j": -0.4701479
    },
    {
      "othes": -0.0065195863
    },
    {
      "_": -0.01036835
    },
    {
      "j": -0.0014034958
    },
    {
      "acket": -0.0004746981
    },
    {
      "')": -0.0021537654
    },
    {
      "\n": -0.0064616934
    },
    {
      " assert": -0.20425865
    },
    {
      "('": -0.0011626201
    },
    {
      "cl": -0.11953992
    },
    {
      "othes": -0.004396409
    },
    {
      "_": -0.0027940155
    },
    {
      "j": -0.00070974004
    },
    {
      "acket": -4.1200903e-05
    },
    {
      "'": -0.0024436344
    },
    {
      " in": -0.0073707267
    },
    {
      " '": -0.002644715
    },
    {
      "hands": -0.0024915535
    },
    {
      "')": -0.008273785
    },
    {
      "\n": -0.0046727937
    },
    {
      " else": -0.0024574355
    },
    {
      ":": -0.0042938585
    },
    {
      " grab": -0.030415075
    },
    {
      "('": -0.0015640707
    },
    {
      "cl": -0.0009400614
    },
    {
      "othes": -0.0009533068
    },
    {
      "_": -0.0013338423
    },
    {
      "j": -0.0007266188
    },
    {
      "acket": -0.00019881358
    },
    {
      "')": -0.0069165886
    },
    {
      "\n": -0.006333022
    },
    {
      " put": -0.99756
    },
    {
      "on": -0.030587563
    },
    {
      "('": -0.0016686664
    },
    {
      "cl": -0.42537454
    },
    {
      "othes": -0.0010462021
    },
    {
      "_": -0.00057369197
    },
    {
      "j": -0.00047255142
    },
    {
      "acket": -1.8310955e-05
    },
    {
      "',": -0.83493114
    },
    {
      " '": -0.008222578
    },
    {
      "h": -0.0014349518
    },
    {
      "anger": -0.0004291388
    },
    {
      "')": -0.0025378054
    },
    {
      "\n": -0.16404161
    },
    {
      " #": -0.6778645
    },
    {
      " 3": -0.011085056
    },
    {
      ":": -0.0017628261
    },
    {
      " Done": -0.84693396
    },
    {
      " h": -0.34847873
    },
    {
      " h": -0.11354594
    },
    {
      "anger": -0.0012650279
    },
    {
      "\n": -0.059687965
    },
    {
      " put": -0.41461277
    },
    {
      "back": -0.21332332
    },
    {
      "('": -0.0028287428
    },
    {
      "h": -0.005152641
    },
    {
      "anger": -0.00032478993
    },
    {
      "')": -0.41186965
    },
    {
      " '": -0.0028608418
    },
    {
      "cl": -0.0055729593
    },
    {
      "os": -0.02304904
    },
    {
      "et": -0.00073675625
    },
    {
      "')": -0.005558514
    },
    {
      "\n": -0.6435577
    },
    {
      " #": -0.07219136
    },
    {
      " 4": -0.0081480015
    },
    {
      ":": -0.0024670565
    },
    {
      " Done": -0.26952663
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.0140469074249268
[(" # 0: find chair\n find('chair')\n # 1: move to chair\n assert('close' to 'chair')\n else: find('chair')\n walk('chair')\n # 2: sit on chair\n sit('chair')", <OpenAIObject at 0x7f9fa1abcc70> JSON: {
  "text_offset": [
    3367,
    3369,
    3371,
    3372,
    3377,
    3383,
    3384,
    3389,
    3391,
    3396,
    3398,
    3399,
    3401,
    3403,
    3404,
    3409,
    3412,
    3418,
    3419,
    3426,
    3428,
    3433,
    3434,
    3437,
    3439,
    3444,
    3446,
    3447,
    3452,
    3453,
    3458,
    3460,
    3465,
    3467,
    3468,
    3473,
    3475,
    3480,
    3482,
    3483,
    3485,
    3487,
    3488,
    3492,
    3495,
    3501,
    3502,
    3506,
    3508,
    3513
  ],
  "token_logprobs": [
    -0.1634517,
    -0.03467819,
    -0.004197128,
    -0.28112385,
    -0.6863156,
    -0.053935025,
    -0.0292731,
    -0.0049838815,
    -0.0017430609,
    -0.002606169,
    -0.011434918,
    -0.003836742,
    -0.0041179396,
    -0.0007728455,
    -2.4772937,
    -1.0335076,
    -0.3054139,
    -0.04114364,
    -0.31051517,
    -0.0027615589,
    -0.00393116,
    -0.003558969,
    -0.0007842989,
    -0.0028885189,
    -0.0008010614,
    -0.005363019,
    -0.008631018,
    -0.001938211,
    -0.0020765925,
    -0.008271801,
    -0.0020238487,
    -0.0008511112,
    -0.0016396517,
    -0.006694365,
    -0.4144892,
    -0.009098809,
    -0.0015367877,
    -0.0014477851,
    -0.0092349965,
    -0.043201864,
    -0.0074657854,
    -0.0014002724,
    -0.031033764,
    -0.23686036,
    -0.19702137,
    -0.012920369,
    -1.115905,
    -0.0026972473,
    -0.0008892307,
    -0.0020783804
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " move",
    " to",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " walk",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.1634517
    },
    {
      " 0": -0.03467819
    },
    {
      ":": -0.004197128
    },
    {
      " find": -0.28112385
    },
    {
      " chair": -0.6863156
    },
    {
      "\n": -0.053935025
    },
    {
      " find": -0.0292731
    },
    {
      "('": -0.0049838815
    },
    {
      "chair": -0.0017430609
    },
    {
      "')": -0.002606169
    },
    {
      "\n": -0.011434918
    },
    {
      " #": -0.003836742
    },
    {
      " 1": -0.0041179396
    },
    {
      ":": -0.0007728455
    },
    {
      " grab": -0.9809071
    },
    {
      " close": -0.9650615
    },
    {
      " chair": -0.3054139
    },
    {
      "\n": -0.04114364
    },
    {
      " assert": -0.31051517
    },
    {
      "('": -0.0027615589
    },
    {
      "close": -0.00393116
    },
    {
      "'": -0.003558969
    },
    {
      " to": -0.0007842989
    },
    {
      " '": -0.0028885189
    },
    {
      "chair": -0.0008010614
    },
    {
      "')": -0.005363019
    },
    {
      "\n": -0.008631018
    },
    {
      " else": -0.001938211
    },
    {
      ":": -0.0020765925
    },
    {
      " find": -0.008271801
    },
    {
      "('": -0.0020238487
    },
    {
      "chair": -0.0008511112
    },
    {
      "')": -0.0016396517
    },
    {
      "\n": -0.006694365
    },
    {
      " walk": -0.4144892
    },
    {
      "('": -0.009098809
    },
    {
      "chair": -0.0015367877
    },
    {
      "')": -0.0014477851
    },
    {
      "\n": -0.0092349965
    },
    {
      " #": -0.043201864
    },
    {
      " 2": -0.0074657854
    },
    {
      ":": -0.0014002724
    },
    {
      " sit": -0.031033764
    },
    {
      " on": -0.23686036
    },
    {
      " chair": -0.19702137
    },
    {
      "\n": -0.012920369
    },
    {
      " tur": -0.75702405
    },
    {
      "('": -0.0026972473
    },
    {
      "chair": -0.0008892307
    },
    {
      "')": -0.0020783804
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.333806037902832
[(" # 0: walk to the bathroom\n walk('bathroom')\n # 1: find sink\n find('sink')\n # 2: turn on faucet\n turnon('faucet')\n # 3: pour detergent\n assert('detergent' in 'hands')\n else: find('detergent')\n pour('detergent')\n # 4: wash sink\n wash('sink')\n # 5: turn off faucet\n turnoff('faucet')\n # 6: Done", <OpenAIObject at 0x7f9fb2424ae0> JSON: {
  "text_offset": [
    3373,
    3375,
    3377,
    3378,
    3383,
    3386,
    3390,
    3399,
    3400,
    3405,
    3407,
    3411,
    3415,
    3417,
    3418,
    3420,
    3422,
    3423,
    3428,
    3433,
    3434,
    3439,
    3441,
    3442,
    3445,
    3447,
    3448,
    3450,
    3452,
    3453,
    3458,
    3461,
    3463,
    3466,
    3468,
    3469,
    3474,
    3476,
    3478,
    3479,
    3482,
    3484,
    3486,
    3487,
    3489,
    3491,
    3492,
    3497,
    3503,
    3507,
    3508,
    3515,
    3517,
    3518,
    3522,
    3526,
    3527,
    3530,
    3532,
    3537,
    3539,
    3540,
    3545,
    3546,
    3551,
    3553,
    3554,
    3558,
    3562,
    3564,
    3565,
    3570,
    3572,
    3573,
    3577,
    3581,
    3583,
    3584,
    3586,
    3588,
    3589,
    3594,
    3599,
    3600,
    3605,
    3607,
    3608,
    3611,
    3613,
    3614,
    3616,
    3618,
    3619,
    3624,
    3628,
    3630,
    3633,
    3635,
    3636,
    3641,
    3644,
    3646,
    3647,
    3650,
    3652,
    3654,
    3655,
    3657,
    3659,
    3660
  ],
  "token_logprobs": [
    -0.021236172,
    -0.0069880118,
    -0.0018999892,
    -0.62025833,
    -0.22091798,
    -1.7991111,
    -0.39435893,
    -0.024534972,
    -0.0062886346,
    -0.0044774706,
    -0.0026037793,
    -0.00017270124,
    -0.002117984,
    -0.007390723,
    -0.0022826176,
    -0.0031139646,
    -0.00084717636,
    -0.057157945,
    -0.53443027,
    -0.026214011,
    -0.17296419,
    -0.0008147807,
    -0.0005820413,
    -5.312365e-05,
    -0.001413284,
    -0.0050716423,
    -0.017530346,
    -0.0053636185,
    -0.0010089115,
    -0.5430254,
    -0.0528573,
    -1.4188448,
    -0.0020214617,
    -0.0032444957,
    -0.05384608,
    -1.9804083,
    -0.07068937,
    -0.006917188,
    -0.0039592893,
    -0.0006190786,
    -0.00048072237,
    -0.0019957812,
    -0.0050030504,
    -0.04074865,
    -0.006640363,
    -0.0007300778,
    -1.0510559,
    -1.6038233,
    -0.0018405108,
    -0.58947235,
    -0.9261579,
    -0.0024775122,
    -0.87250805,
    -0.0009496076,
    -0.0013718604,
    -0.006355996,
    -0.09271041,
    -0.016701367,
    -0.037877567,
    -0.04222603,
    -0.009532221,
    -0.004446159,
    -0.003664075,
    -0.93575865,
    -0.0028957513,
    -0.00077761855,
    -0.00037588822,
    -0.00076556916,
    -0.0047042337,
    -0.008346385,
    -0.55236375,
    -0.0036938668,
    -0.0014359064,
    -0.0002844852,
    -0.00040916432,
    -0.028012274,
    -0.008309062,
    -0.0518472,
    -0.007320112,
    -0.0009876108,
    -0.848468,
    -0.47092095,
    -0.12911697,
    -0.26199344,
    -0.0010428615,
    -0.0017739894,
    -0.00013371343,
    -0.0015382211,
    -0.007300478,
    -0.03239811,
    -0.0039767604,
    -0.0020041426,
    -0.20635925,
    -0.030858556,
    -0.076813206,
    -0.0018632645,
    -0.00048429958,
    -0.01745968,
    -0.0883715,
    -0.0032860574,
    -0.00086590525,
    -0.0007638983,
    -0.00033904242,
    -0.00027506487,
    -0.0016592939,
    -0.24411644,
    -0.03148484,
    -0.0033756448,
    -0.002090628,
    -0.7417705
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " the",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " f",
    "auc",
    "et",
    "\n",
    " turn",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " deter",
    "gent",
    "\n",
    " assert",
    "('",
    "d",
    "eter",
    "gent",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " pour",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " sink",
    "\n",
    " wash",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " off",
    " f",
    "auc",
    "et",
    "\n",
    " turn",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.021236172
    },
    {
      " 0": -0.0069880118
    },
    {
      ":": -0.0018999892
    },
    {
      " walk": -0.62025833
    },
    {
      " to": -0.22091798
    },
    {
      " bathroom": -0.3685787
    },
    {
      " bathroom": -0.39435893
    },
    {
      "\n": -0.024534972
    },
    {
      " walk": -0.0062886346
    },
    {
      "('": -0.0044774706
    },
    {
      "bath": -0.0026037793
    },
    {
      "room": -0.00017270124
    },
    {
      "')": -0.002117984
    },
    {
      "\n": -0.007390723
    },
    {
      " #": -0.0022826176
    },
    {
      " 1": -0.0031139646
    },
    {
      ":": -0.00084717636
    },
    {
      " find": -0.057157945
    },
    {
      " sink": -0.53443027
    },
    {
      "\n": -0.026214011
    },
    {
      " find": -0.17296419
    },
    {
      "('": -0.0008147807
    },
    {
      "s": -0.0005820413
    },
    {
      "ink": -5.312365e-05
    },
    {
      "')": -0.001413284
    },
    {
      "\n": -0.0050716423
    },
    {
      " #": -0.017530346
    },
    {
      " 2": -0.0053636185
    },
    {
      ":": -0.0010089115
    },
    {
      " turn": -0.5430254
    },
    {
      " on": -0.0528573
    },
    {
      " the": -0.4424016
    },
    {
      "auc": -0.0020214617
    },
    {
      "et": -0.0032444957
    },
    {
      "\n": -0.05384608
    },
    {
      " assert": -0.6954533
    },
    {
      "on": -0.07068937
    },
    {
      "('": -0.006917188
    },
    {
      "f": -0.0039592893
    },
    {
      "auc": -0.0006190786
    },
    {
      "et": -0.00048072237
    },
    {
      "')": -0.0019957812
    },
    {
      "\n": -0.0050030504
    },
    {
      " #": -0.04074865
    },
    {
      " 3": -0.006640363
    },
    {
      ":": -0.0007300778
    },
    {
      " pour": -1.0510559
    },
    {
      " water": -1.1133934
    },
    {
      "gent": -0.0018405108
    },
    {
      "\n": -0.58947235
    },
    {
      " assert": -0.9261579
    },
    {
      "('": -0.0024775122
    },
    {
      "close": -0.56231403
    },
    {
      "eter": -0.0009496076
    },
    {
      "gent": -0.0013718604
    },
    {
      "'": -0.006355996
    },
    {
      " in": -0.09271041
    },
    {
      " '": -0.016701367
    },
    {
      "hands": -0.037877567
    },
    {
      "')": -0.04222603
    },
    {
      "\n": -0.009532221
    },
    {
      " else": -0.004446159
    },
    {
      ":": -0.003664075
    },
    {
      " grab": -0.520464
    },
    {
      "('": -0.0028957513
    },
    {
      "d": -0.00077761855
    },
    {
      "eter": -0.00037588822
    },
    {
      "gent": -0.00076556916
    },
    {
      "')": -0.0047042337
    },
    {
      "\n": -0.008346385
    },
    {
      " pour": -0.55236375
    },
    {
      "('": -0.0036938668
    },
    {
      "d": -0.0014359064
    },
    {
      "eter": -0.0002844852
    },
    {
      "gent": -0.00040916432
    },
    {
      "')": -0.028012274
    },
    {
      "\n": -0.008309062
    },
    {
      " #": -0.0518472
    },
    {
      " 4": -0.007320112
    },
    {
      ":": -0.0009876108
    },
    {
      " wash": -0.848468
    },
    {
      " sink": -0.47092095
    },
    {
      "\n": -0.12911697
    },
    {
      " wash": -0.26199344
    },
    {
      "('": -0.0010428615
    },
    {
      "s": -0.0017739894
    },
    {
      "ink": -0.00013371343
    },
    {
      "')": -0.0015382211
    },
    {
      "\n": -0.007300478
    },
    {
      " #": -0.03239811
    },
    {
      " 5": -0.0039767604
    },
    {
      ":": -0.0020041426
    },
    {
      " turn": -0.20635925
    },
    {
      " off": -0.030858556
    },
    {
      " f": -0.076813206
    },
    {
      "auc": -0.0018632645
    },
    {
      "et": -0.00048429958
    },
    {
      "\n": -0.01745968
    },
    {
      " turn": -0.0883715
    },
    {
      "off": -0.0032860574
    },
    {
      "('": -0.00086590525
    },
    {
      "f": -0.0007638983
    },
    {
      "auc": -0.00033904242
    },
    {
      "et": -0.00027506487
    },
    {
      "')": -0.0016592939
    },
    {
      "\n": -0.24411644
    },
    {
      " #": -0.03148484
    },
    {
      " 6": -0.0033756448
    },
    {
      ":": -0.002090628
    },
    {
      " Done": -0.7417705
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.6608688831329346
[(" # 0: Close eyes\n close('eyes')\n # 1: Relax\n relax()\n # 2: Take deep breaths\n deepbreaths()\n # 3: Done", <OpenAIObject at 0x7f9fa1aad680> JSON: {
  "text_offset": [
    3369,
    3371,
    3373,
    3374,
    3380,
    3385,
    3386,
    3392,
    3394,
    3398,
    3400,
    3401,
    3403,
    3405,
    3406,
    3412,
    3413,
    3419,
    3421,
    3422,
    3424,
    3426,
    3427,
    3432,
    3437,
    3445,
    3446,
    3451,
    3452,
    3456,
    3458,
    3460,
    3461,
    3463,
    3465,
    3466
  ],
  "token_logprobs": [
    -0.2651128,
    -0.057295535,
    -0.0027454214,
    -4.814769,
    -0.69443,
    -0.1071727,
    -0.23126379,
    -0.37439066,
    -0.023771163,
    -0.003097463,
    -0.022707963,
    -0.0072216475,
    -0.004218495,
    -0.0004698068,
    -0.9096074,
    -1.469903,
    -0.07973397,
    -0.046588752,
    -0.028314762,
    -0.0038415284,
    -0.004100464,
    -0.00046575186,
    -2.7139683,
    -0.46398073,
    -0.23374319,
    -0.011904025,
    -1.3209199,
    -1.4548966,
    -0.50030136,
    -0.2142561,
    -0.007328758,
    -0.102091886,
    -0.005912805,
    -0.0055040936,
    -0.0007797653,
    -1.4990298
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " Close",
    " eyes",
    "\n",
    " close",
    "('",
    "eyes",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " Relax",
    "\n",
    " relax",
    "()",
    "\n",
    " #",
    " 2",
    ":",
    " Take",
    " deep",
    " breaths",
    "\n",
    " deep",
    "b",
    "reat",
    "hs",
    "()",
    "\n",
    " #",
    " 3",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.2651128
    },
    {
      " 0": -0.057295535
    },
    {
      ":": -0.0027454214
    },
    {
      " find": -0.95641327
    },
    {
      " eyes": -0.69443
    },
    {
      "\n": -0.1071727
    },
    {
      " close": -0.23126379
    },
    {
      "('": -0.37439066
    },
    {
      "eyes": -0.023771163
    },
    {
      "')": -0.003097463
    },
    {
      "\n": -0.022707963
    },
    {
      " #": -0.0072216475
    },
    {
      " 1": -0.004218495
    },
    {
      ":": -0.0004698068
    },
    {
      " Relax": -0.9096074
    },
    {
      " body": -0.6215258
    },
    {
      " relax": -0.07973397
    },
    {
      "()": -0.046588752
    },
    {
      "\n": -0.028314762
    },
    {
      " #": -0.0038415284
    },
    {
      " 2": -0.004100464
    },
    {
      ":": -0.00046575186
    },
    {
      " Stop": -2.0080872
    },
    {
      " deep": -0.46398073
    },
    {
      " breaths": -0.23374319
    },
    {
      "\n": -0.011904025
    },
    {
      " take": -0.54524785
    },
    {
      "_": -0.46563601
    },
    {
      "reat": -0.50030136
    },
    {
      "hs": -0.2142561
    },
    {
      "()": -0.007328758
    },
    {
      "\n": -0.102091886
    },
    {
      " #": -0.005912805
    },
    {
      " 3": -0.0055040936
    },
    {
      ":": -0.0007797653
    },
    {
      " Done": -1.4990298
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.9514060020446777
[(" # 0: find glasses\n find('glasses')\n # 1: grab glasses\n grab('glasses')\n # 2: put on glasses\n puton('glasses')\n # 3: look through glasses\n turnto('glasses')\n lookat('glasses')\n # 4: Done", <OpenAIObject at 0x7f9f901e0900> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3396,
    3397,
    3402,
    3404,
    3406,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3424,
    3432,
    3433,
    3438,
    3440,
    3442,
    3447,
    3449,
    3450,
    3452,
    3454,
    3455,
    3459,
    3462,
    3470,
    3471,
    3475,
    3477,
    3479,
    3481,
    3486,
    3488,
    3489,
    3491,
    3493,
    3494,
    3499,
    3507,
    3515,
    3516,
    3520,
    3522,
    3523,
    3525,
    3527,
    3532,
    3534,
    3535,
    3540,
    3542,
    3544,
    3546,
    3551,
    3553,
    3554,
    3556,
    3558,
    3559
  ],
  "token_logprobs": [
    -0.017204965,
    -0.008009922,
    -0.0019269227,
    -0.18419938,
    -0.46079206,
    -0.030366225,
    -0.022903888,
    -0.0020743217,
    -0.13957801,
    -0.0023785674,
    -0.0032685965,
    -0.008125649,
    -0.0048497096,
    -0.002357058,
    -0.0006728154,
    -0.09830152,
    -0.07906021,
    -0.018036244,
    -0.94221926,
    -0.0013082369,
    -0.0008122764,
    -0.0020330495,
    -0.0014418162,
    -0.0051168157,
    -0.52669334,
    -0.0056547774,
    -0.0007318678,
    -0.08376996,
    -0.24644376,
    -0.052676965,
    -0.01571877,
    -0.7586946,
    -0.009013158,
    -0.0009811659,
    -0.0009471023,
    -0.004336123,
    -0.0021681597,
    -0.15052634,
    -0.075554155,
    -0.0076413294,
    -0.0012290973,
    -1.8536369,
    -1.0680875,
    -0.17466916,
    -0.019697968,
    -0.8346685,
    -4.5135734e-05,
    -0.0002915213,
    -0.0006076289,
    -0.0045065703,
    -0.00085397495,
    -0.0010374935,
    -0.012481624,
    -0.08155925,
    -0.0736676,
    -0.0009783021,
    -0.0011997992,
    -0.00059021317,
    -0.0019872403,
    -0.84820455,
    -0.16837889,
    -0.012505344,
    -0.0020826224,
    -0.34247908
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " glasses",
    "\n",
    " find",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " glasses",
    "\n",
    " grab",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " on",
    " glasses",
    "\n",
    " put",
    "on",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " look",
    " through",
    " glasses",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.017204965
    },
    {
      " 0": -0.008009922
    },
    {
      ":": -0.0019269227
    },
    {
      " find": -0.18419938
    },
    {
      " glasses": -0.46079206
    },
    {
      "\n": -0.030366225
    },
    {
      " find": -0.022903888
    },
    {
      "('": -0.0020743217
    },
    {
      "gl": -0.13957801
    },
    {
      "asses": -0.0023785674
    },
    {
      "')": -0.0032685965
    },
    {
      "\n": -0.008125649
    },
    {
      " #": -0.0048497096
    },
    {
      " 1": -0.002357058
    },
    {
      ":": -0.0006728154
    },
    {
      " grab": -0.09830152
    },
    {
      " glasses": -0.07906021
    },
    {
      "\n": -0.018036244
    },
    {
      " assert": -0.509604
    },
    {
      "('": -0.0013082369
    },
    {
      "gl": -0.0008122764
    },
    {
      "asses": -0.0020330495
    },
    {
      "')": -0.0014418162
    },
    {
      "\n": -0.0051168157
    },
    {
      " #": -0.52669334
    },
    {
      " 2": -0.0056547774
    },
    {
      ":": -0.0007318678
    },
    {
      " put": -0.08376996
    },
    {
      " on": -0.24644376
    },
    {
      " glasses": -0.052676965
    },
    {
      "\n": -0.01571877
    },
    {
      " put": -0.7586946
    },
    {
      "on": -0.009013158
    },
    {
      "('": -0.0009811659
    },
    {
      "gl": -0.0009471023
    },
    {
      "asses": -0.004336123
    },
    {
      "')": -0.0021681597
    },
    {
      "\n": -0.15052634
    },
    {
      " #": -0.075554155
    },
    {
      " 3": -0.0076413294
    },
    {
      ":": -0.0012290973
    },
    {
      " Done": -0.7733679
    },
    {
      " at": -0.7967089
    },
    {
      " glasses": -0.17466916
    },
    {
      "\n": -0.019697968
    },
    {
      " tur": -0.8346685
    },
    {
      "nt": -4.5135734e-05
    },
    {
      "o": -0.0002915213
    },
    {
      "('": -0.0006076289
    },
    {
      "gl": -0.0045065703
    },
    {
      "asses": -0.00085397495
    },
    {
      "')": -0.0010374935
    },
    {
      "\n": -0.012481624
    },
    {
      " look": -0.08155925
    },
    {
      "at": -0.0736676
    },
    {
      "('": -0.0009783021
    },
    {
      "gl": -0.0011997992
    },
    {
      "asses": -0.00059021317
    },
    {
      "')": -0.0019872403
    },
    {
      "<|endoftext|>": -0.5768738
    },
    {
      " #": -0.16837889
    },
    {
      " 4": -0.012505344
    },
    {
      ":": -0.0020826224
    },
    {
      " Done": -0.34247908
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.178906202316284
[(" # 0: find laptop\n find('laptop')\n # 1: open laptop\n assert('close' to 'laptop')\n else: find('laptop')\n open('laptop')\n # 2: find power socket\n find('powersocket')\n # 3: plug in laptop\n assert('close' to 'powersocket')\n else: find('powersocket')\n plugin('laptop')\n # 4: turn on laptop\n turnto('laptop')\n switchon('laptop')\n # 5: Done", <OpenAIObject at 0x7f9f901f2040> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3395,
    3396,
    3401,
    3403,
    3404,
    3409,
    3411,
    3412,
    3414,
    3416,
    3417,
    3422,
    3429,
    3430,
    3437,
    3439,
    3444,
    3445,
    3448,
    3450,
    3451,
    3456,
    3458,
    3459,
    3464,
    3465,
    3470,
    3472,
    3473,
    3478,
    3480,
    3481,
    3486,
    3488,
    3489,
    3494,
    3496,
    3497,
    3499,
    3501,
    3502,
    3507,
    3513,
    3520,
    3521,
    3526,
    3528,
    3534,
    3539,
    3541,
    3542,
    3544,
    3546,
    3547,
    3552,
    3555,
    3562,
    3563,
    3570,
    3572,
    3577,
    3578,
    3581,
    3583,
    3589,
    3594,
    3596,
    3597,
    3602,
    3603,
    3608,
    3610,
    3616,
    3621,
    3623,
    3624,
    3631,
    3633,
    3634,
    3639,
    3641,
    3642,
    3644,
    3646,
    3647,
    3652,
    3655,
    3662,
    3663,
    3667,
    3669,
    3670,
    3672,
    3673,
    3678,
    3680,
    3681,
    3688,
    3690,
    3692,
    3693,
    3698,
    3700,
    3701,
    3703,
    3705,
    3706
  ],
  "token_logprobs": [
    -0.021074418,
    -0.00849263,
    -0.0018745499,
    -0.9800595,
    -1.1982565,
    -0.04112606,
    -0.05937192,
    -0.0025441386,
    -0.0020647054,
    -0.00026194818,
    -0.0022533438,
    -0.009844516,
    -0.007170976,
    -0.0037172586,
    -0.00096488127,
    -0.3330213,
    -0.3004578,
    -0.062397048,
    -0.6531287,
    -0.0023132663,
    -0.02595467,
    -0.003322059,
    -0.0006404911,
    -0.0046203374,
    -0.0030278086,
    -0.0003033258,
    -0.009478063,
    -0.006901104,
    -0.0024629922,
    -0.0020320928,
    -0.0051908074,
    -0.0017837832,
    -0.0014233725,
    -0.00023989083,
    -0.0023742055,
    -0.0083231265,
    -0.03863645,
    -0.0029973767,
    -0.000845744,
    -6.1516675e-06,
    -0.0020171017,
    -0.0070507377,
    -0.048733138,
    -0.006508607,
    -0.0008276665,
    -1.2362158,
    -0.2984853,
    -0.14319277,
    -0.050853927,
    -0.0767538,
    -0.0010471578,
    -0.44447806,
    -0.0008815948,
    -0.0014765556,
    -0.007137119,
    -0.025866158,
    -0.0059641902,
    -0.00085981993,
    -0.38495854,
    -0.17225039,
    -0.62531793,
    -0.19127198,
    -0.7279573,
    -0.0012831083,
    -0.031054238,
    -0.0022373954,
    -0.00046324843,
    -0.0017766177,
    -0.058428284,
    -0.0007693875,
    -0.007997843,
    -0.006031649,
    -0.0014933893,
    -0.0004576428,
    -0.003696021,
    -0.0011902513,
    -0.0047229785,
    -0.0005653418,
    -0.002849425,
    -0.006139472,
    -0.33006072,
    -0.0012877658,
    -0.5078773,
    -0.00057679333,
    -0.012086568,
    -0.017311027,
    -0.029812852,
    -0.0077964193,
    -0.0010945352,
    -0.97457165,
    -0.02171782,
    -0.14341144,
    -0.0170013,
    -2.968696,
    -7.601266e-05,
    -0.00026087437,
    -0.0006517033,
    -0.007827417,
    -0.00018295787,
    -0.0017007297,
    -0.004481122,
    -0.84707683,
    -0.0012677707,
    -0.00088493637,
    -0.0015674131,
    -4.3108244e-05,
    -0.0012174046,
    -0.14351553,
    -0.09179204,
    -0.0046643508,
    -0.0011679893,
    -0.75528973
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " laptop",
    "\n",
    " find",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " open",
    " laptop",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "l",
    "aptop",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " open",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " power",
    " socket",
    "\n",
    " find",
    "('",
    "powers",
    "ocket",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " plug",
    " in",
    " laptop",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "powers",
    "ocket",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "powers",
    "ocket",
    "')",
    "\n",
    " plugin",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " on",
    " laptop",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.021074418
    },
    {
      " 0": -0.00849263
    },
    {
      ":": -0.0018745499
    },
    {
      " walk": -0.61597896
    },
    {
      " computer": -0.88727385
    },
    {
      "\n": -0.04112606
    },
    {
      " find": -0.05937192
    },
    {
      "('": -0.0025441386
    },
    {
      "l": -0.0020647054
    },
    {
      "aptop": -0.00026194818
    },
    {
      "')": -0.0022533438
    },
    {
      "\n": -0.009844516
    },
    {
      " #": -0.007170976
    },
    {
      " 1": -0.0037172586
    },
    {
      ":": -0.00096488127
    },
    {
      " open": -0.3330213
    },
    {
      " laptop": -0.3004578
    },
    {
      "\n": -0.062397048
    },
    {
      " assert": -0.6531287
    },
    {
      "('": -0.0023132663
    },
    {
      "close": -0.02595467
    },
    {
      "'": -0.003322059
    },
    {
      " to": -0.0006404911
    },
    {
      " '": -0.0046203374
    },
    {
      "l": -0.0030278086
    },
    {
      "aptop": -0.0003033258
    },
    {
      "')": -0.009478063
    },
    {
      "\n": -0.006901104
    },
    {
      " else": -0.0024629922
    },
    {
      ":": -0.0020320928
    },
    {
      " find": -0.0051908074
    },
    {
      "('": -0.0017837832
    },
    {
      "l": -0.0014233725
    },
    {
      "aptop": -0.00023989083
    },
    {
      "')": -0.0023742055
    },
    {
      "\n": -0.0083231265
    },
    {
      " open": -0.03863645
    },
    {
      "('": -0.0029973767
    },
    {
      "l": -0.000845744
    },
    {
      "aptop": -6.1516675e-06
    },
    {
      "')": -0.0020171017
    },
    {
      "\n": -0.0070507377
    },
    {
      " #": -0.048733138
    },
    {
      " 2": -0.006508607
    },
    {
      ":": -0.0008276665
    },
    {
      " find": -1.2362158
    },
    {
      " power": -0.2984853
    },
    {
      " socket": -0.14319277
    },
    {
      "\n": -0.050853927
    },
    {
      " find": -0.0767538
    },
    {
      "('": -0.0010471578
    },
    {
      "powers": -0.44447806
    },
    {
      "ocket": -0.0008815948
    },
    {
      "')": -0.0014765556
    },
    {
      "\n": -0.007137119
    },
    {
      " #": -0.025866158
    },
    {
      " 3": -0.0059641902
    },
    {
      ":": -0.00085981993
    },
    {
      " plug": -0.38495854
    },
    {
      " in": -0.17225039
    },
    {
      " laptop": -0.62531793
    },
    {
      "\n": -0.19127198
    },
    {
      " assert": -0.7279573
    },
    {
      "('": -0.0012831083
    },
    {
      "close": -0.031054238
    },
    {
      "'": -0.0022373954
    },
    {
      " to": -0.00046324843
    },
    {
      " '": -0.0017766177
    },
    {
      "powers": -0.058428284
    },
    {
      "ocket": -0.0007693875
    },
    {
      "')": -0.007997843
    },
    {
      "\n": -0.006031649
    },
    {
      " else": -0.0014933893
    },
    {
      ":": -0.0004576428
    },
    {
      " find": -0.003696021
    },
    {
      "('": -0.0011902513
    },
    {
      "powers": -0.0047229785
    },
    {
      "ocket": -0.0005653418
    },
    {
      "')": -0.002849425
    },
    {
      "\n": -0.006139472
    },
    {
      " plugin": -0.33006072
    },
    {
      "('": -0.0012877658
    },
    {
      "l": -0.5078773
    },
    {
      "aptop": -0.00057679333
    },
    {
      "')": -0.012086568
    },
    {
      "\n": -0.017311027
    },
    {
      " #": -0.029812852
    },
    {
      " 4": -0.0077964193
    },
    {
      ":": -0.0010945352
    },
    {
      " turn": -0.97457165
    },
    {
      " on": -0.02171782
    },
    {
      " laptop": -0.14341144
    },
    {
      "\n": -0.0170013
    },
    {
      " switch": -0.4533194
    },
    {
      "nt": -7.601266e-05
    },
    {
      "o": -0.00026087437
    },
    {
      "('": -0.0006517033
    },
    {
      "l": -0.007827417
    },
    {
      "aptop": -0.00018295787
    },
    {
      "')": -0.0017007297
    },
    {
      "\n": -0.004481122
    },
    {
      " switch": -0.84707683
    },
    {
      "on": -0.0012677707
    },
    {
      "('": -0.00088493637
    },
    {
      "l": -0.0015674131
    },
    {
      "aptop": -4.3108244e-05
    },
    {
      "')": -0.0012174046
    },
    {
      "\n": -0.14351553
    },
    {
      " #": -0.09179204
    },
    {
      " 5": -0.0046643508
    },
    {
      ":": -0.0011679893
    },
    {
      " Done": -0.75528973
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.0962729454040527
[(" # 0: find alarm clock\n find('alarm_clock')\n # 1: walk to bedroom\n walk('bedroom')\n # 2: put alarm clock in bedroom\n assert('close' to 'alarm_clock')\n else: find('alarm_clock')\n putin('alarm_clock', 'bedroom')", <OpenAIObject at 0x7f9f901ffd60> JSON: {
  "text_offset": [
    3390,
    3392,
    3394,
    3395,
    3400,
    3406,
    3412,
    3413,
    3418,
    3420,
    3422,
    3425,
    3426,
    3431,
    3433,
    3434,
    3436,
    3438,
    3439,
    3444,
    3447,
    3455,
    3456,
    3461,
    3463,
    3470,
    3472,
    3473,
    3475,
    3477,
    3478,
    3482,
    3488,
    3494,
    3497,
    3505,
    3506,
    3513,
    3515,
    3520,
    3521,
    3524,
    3526,
    3528,
    3531,
    3532,
    3537,
    3539,
    3540,
    3545,
    3546,
    3551,
    3553,
    3555,
    3558,
    3559,
    3564,
    3566,
    3567,
    3571,
    3573,
    3575,
    3577,
    3580,
    3581,
    3586,
    3588,
    3590,
    3597
  ],
  "token_logprobs": [
    -0.020086797,
    -0.008219754,
    -0.0020866848,
    -0.5962538,
    -0.16760492,
    -0.07595929,
    -0.031766087,
    -0.018033998,
    -0.0021451025,
    -0.004043848,
    -0.00023047146,
    -0.014513369,
    -0.00041792757,
    -0.0033398804,
    -0.008302991,
    -0.007284267,
    -0.0022466532,
    -0.00075119274,
    -0.976361,
    -0.1599493,
    -0.0721847,
    -0.021767037,
    -0.025190013,
    -0.0029038815,
    -0.0022311213,
    -0.0013833805,
    -0.006959441,
    -0.010566452,
    -0.0038012594,
    -0.00066947757,
    -1.0675098,
    -0.16324805,
    -0.013498011,
    -0.46389595,
    -0.07085527,
    -0.020186052,
    -0.27684006,
    -0.0016906993,
    -0.10339694,
    -0.003600902,
    -0.0016692643,
    -0.003003954,
    -0.6921121,
    -0.000116426294,
    -0.0048943916,
    -0.0005967725,
    -0.0075168894,
    -0.005936369,
    -0.0013952572,
    -0.0016049029,
    -0.0068007,
    -0.0013718604,
    -0.00069768965,
    -0.00011416413,
    -0.0011518201,
    -0.00032252402,
    -0.004440649,
    -0.006436317,
    -0.89292353,
    -0.23927866,
    -0.010304392,
    -0.050696522,
    -0.00010581859,
    -0.0019704555,
    -0.0009364814,
    -0.30708736,
    -0.002956189,
    -0.0075148474,
    -0.0018319736
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " alarm",
    " clock",
    " in",
    " bedroom",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " put",
    "in",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "',",
    " '",
    "bedroom",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.020086797
    },
    {
      " 0": -0.008219754
    },
    {
      ":": -0.0020866848
    },
    {
      " find": -0.5962538
    },
    {
      " alarm": -0.16760492
    },
    {
      " clock": -0.07595929
    },
    {
      "\n": -0.031766087
    },
    {
      " find": -0.018033998
    },
    {
      "('": -0.0021451025
    },
    {
      "al": -0.004043848
    },
    {
      "arm": -0.00023047146
    },
    {
      "_": -0.014513369
    },
    {
      "clock": -0.00041792757
    },
    {
      "')": -0.0033398804
    },
    {
      "\n": -0.008302991
    },
    {
      " #": -0.007284267
    },
    {
      " 1": -0.0022466532
    },
    {
      ":": -0.00075119274
    },
    {
      " grab": -0.66183734
    },
    {
      " to": -0.1599493
    },
    {
      " bedroom": -0.0721847
    },
    {
      "\n": -0.021767037
    },
    {
      " walk": -0.025190013
    },
    {
      "('": -0.0029038815
    },
    {
      "bedroom": -0.0022311213
    },
    {
      "')": -0.0013833805
    },
    {
      "\n": -0.006959441
    },
    {
      " #": -0.010566452
    },
    {
      " 2": -0.0038012594
    },
    {
      ":": -0.00066947757
    },
    {
      " find": -0.8147661
    },
    {
      " alarm": -0.16324805
    },
    {
      " clock": -0.013498011
    },
    {
      " in": -0.46389595
    },
    {
      " bedroom": -0.07085527
    },
    {
      "\n": -0.020186052
    },
    {
      " assert": -0.27684006
    },
    {
      "('": -0.0016906993
    },
    {
      "close": -0.10339694
    },
    {
      "'": -0.003600902
    },
    {
      " to": -0.0016692643
    },
    {
      " '": -0.003003954
    },
    {
      "al": -0.6921121
    },
    {
      "arm": -0.000116426294
    },
    {
      "_": -0.0048943916
    },
    {
      "clock": -0.0005967725
    },
    {
      "')": -0.0075168894
    },
    {
      "\n": -0.005936369
    },
    {
      " else": -0.0013952572
    },
    {
      ":": -0.0016049029
    },
    {
      " find": -0.0068007
    },
    {
      "('": -0.0013718604
    },
    {
      "al": -0.00069768965
    },
    {
      "arm": -0.00011416413
    },
    {
      "_": -0.0011518201
    },
    {
      "clock": -0.00032252402
    },
    {
      "')": -0.004440649
    },
    {
      "\n": -0.006436317
    },
    {
      " put": -0.89292353
    },
    {
      "in": -0.23927866
    },
    {
      "('": -0.010304392
    },
    {
      "al": -0.050696522
    },
    {
      "arm": -0.00010581859
    },
    {
      "_": -0.0019704555
    },
    {
      "clock": -0.0009364814
    },
    {
      "',": -0.30708736
    },
    {
      " '": -0.002956189
    },
    {
      "bedroom": -0.0075148474
    },
    {
      "')": -0.0018319736
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 6.950729846954346
[(" # 0: find chair\n find('chair')\n # 1: grab chair\n assert('close' to 'chair')\n else: find('chair')\n grab('chair')\n assert('chair' in 'hands')\n else: grab('chair')\n turnto('chair')\n assert('chair' in 'hands')\n else: grab('chair')\n pointat('chair')\n # 2: sit on chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n lookat('chair')\n # 3: turn chair\n turnto('chair')", <OpenAIObject at 0x7f9f902206d0> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3392,
    3393,
    3398,
    3400,
    3405,
    3407,
    3408,
    3410,
    3412,
    3413,
    3418,
    3424,
    3425,
    3432,
    3434,
    3439,
    3440,
    3443,
    3445,
    3450,
    3452,
    3453,
    3458,
    3459,
    3464,
    3466,
    3471,
    3473,
    3474,
    3479,
    3481,
    3486,
    3488,
    3489,
    3496,
    3498,
    3503,
    3504,
    3507,
    3509,
    3514,
    3516,
    3517,
    3522,
    3523,
    3528,
    3530,
    3535,
    3537,
    3538,
    3542,
    3544,
    3545,
    3547,
    3552,
    3554,
    3555,
    3562,
    3564,
    3569,
    3570,
    3573,
    3575,
    3580,
    3582,
    3583,
    3588,
    3589,
    3594,
    3596,
    3601,
    3603,
    3604,
    3610,
    3612,
    3614,
    3619,
    3621,
    3622,
    3624,
    3626,
    3627,
    3631,
    3634,
    3640,
    3641,
    3648,
    3650,
    3655,
    3656,
    3659,
    3661,
    3666,
    3668,
    3669,
    3674,
    3675,
    3680,
    3682,
    3687,
    3689,
    3690,
    3694,
    3696,
    3701,
    3703,
    3704,
    3709,
    3711,
    3713,
    3718,
    3720,
    3721,
    3723,
    3725,
    3726,
    3731,
    3737,
    3738,
    3742,
    3744,
    3745,
    3747,
    3752
  ],
  "token_logprobs": [
    -0.02354492,
    -0.008183338,
    -0.0017354785,
    -0.57903904,
    -0.17297141,
    -0.02746461,
    -0.05162374,
    -0.0018031899,
    -0.001255418,
    -0.0015326691,
    -0.00888981,
    -0.0039265538,
    -0.0025668447,
    -0.0005732152,
    -1.5433472,
    -0.0859978,
    -0.019356383,
    -0.37191558,
    -0.0014288637,
    -0.0027151783,
    -0.00186613,
    -0.001042502,
    -0.002035856,
    -0.0006994787,
    -0.0044231075,
    -0.0052227424,
    -0.001097997,
    -0.0012993431,
    -0.0030312778,
    -0.0012376334,
    -0.0007528626,
    -0.0015503992,
    -0.0060357875,
    -0.0067640343,
    -0.0008489645,
    -0.00041095246,
    -0.0016043067,
    -0.004713875,
    -0.73633635,
    -0.0009951874,
    -0.0078787645,
    -0.0017135639,
    -0.017854618,
    -0.0029165552,
    -0.004318162,
    -0.01162654,
    -0.0026746579,
    -0.0063947462,
    -0.0022031637,
    -0.0021103378,
    -0.0012162096,
    -0.0004311635,
    -0.002144147,
    -0.0038766519,
    -0.48226175,
    -2.8206221e-05,
    -0.00013490739,
    -0.00037374342,
    -0.00042293806,
    -0.0012162096,
    -0.0026716702,
    -0.26472497,
    -0.00033749174,
    -0.004281289,
    -0.0006778259,
    -0.0018721609,
    -0.00078644656,
    -0.0011253858,
    -0.0009479367,
    -0.0011220442,
    -0.0012809024,
    -0.0006580251,
    -0.0008917378,
    -0.00056033314,
    -0.00047678567,
    -0.0006060773,
    -0.0022663085,
    -0.06649868,
    -0.00045871665,
    -0.0003512045,
    -0.0003881742,
    -0.001114167,
    -0.004622254,
    -0.002632703,
    -0.0057340865,
    -0.0006682836,
    -0.093583494,
    -0.63015443,
    -0.17876321,
    -0.009181159,
    -0.17618087,
    -0.00047797684,
    -0.5682717,
    -0.0012300529,
    -0.0021159528,
    -0.0014653959,
    -0.0004434504,
    -0.0028723795,
    -0.002124137,
    -0.000585442,
    -0.00051900244,
    -0.013183541,
    -0.0007366371,
    -0.00030702315,
    -0.0016197691,
    -0.004001837,
    -0.0135673685,
    -0.0009882086,
    -0.00036623323,
    -0.0013489996,
    -0.14341949,
    -2.2917955,
    -0.010198345,
    -0.00060834415,
    -0.0008123946,
    -0.0012606097,
    -0.34760994,
    -0.029617103,
    -0.007184725,
    -0.0009993663,
    -5.091084,
    -1.7376077,
    -1.3103412,
    -0.26518673,
    -4.406191e-05,
    -0.00156001,
    -0.0015886051,
    -0.00206823,
    -0.0031854163
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " grab",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "chair",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "chair",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "chair",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "chair",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " turn",
    " chair",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.02354492
    },
    {
      " 0": -0.008183338
    },
    {
      ":": -0.0017354785
    },
    {
      " find": -0.57903904
    },
    {
      " chair": -0.17297141
    },
    {
      "\n": -0.02746461
    },
    {
      " find": -0.05162374
    },
    {
      "('": -0.0018031899
    },
    {
      "chair": -0.001255418
    },
    {
      "')": -0.0015326691
    },
    {
      "\n": -0.00888981
    },
    {
      " #": -0.0039265538
    },
    {
      " 1": -0.0025668447
    },
    {
      ":": -0.0005732152
    },
    {
      " walk": -0.8084716
    },
    {
      " chair": -0.0859978
    },
    {
      "\n": -0.019356383
    },
    {
      " assert": -0.37191558
    },
    {
      "('": -0.0014288637
    },
    {
      "close": -0.0027151783
    },
    {
      "'": -0.00186613
    },
    {
      " to": -0.001042502
    },
    {
      " '": -0.002035856
    },
    {
      "chair": -0.0006994787
    },
    {
      "')": -0.0044231075
    },
    {
      "\n": -0.0052227424
    },
    {
      " else": -0.001097997
    },
    {
      ":": -0.0012993431
    },
    {
      " find": -0.0030312778
    },
    {
      "('": -0.0012376334
    },
    {
      "chair": -0.0007528626
    },
    {
      "')": -0.0015503992
    },
    {
      "\n": -0.0060357875
    },
    {
      " grab": -0.0067640343
    },
    {
      "('": -0.0008489645
    },
    {
      "chair": -0.00041095246
    },
    {
      "')": -0.0016043067
    },
    {
      "\n": -0.004713875
    },
    {
      " #": -0.7050939
    },
    {
      "('": -0.0009951874
    },
    {
      "chair": -0.0078787645
    },
    {
      "'": -0.0017135639
    },
    {
      " in": -0.017854618
    },
    {
      " '": -0.0029165552
    },
    {
      "hands": -0.004318162
    },
    {
      "')": -0.01162654
    },
    {
      "\n": -0.0026746579
    },
    {
      " else": -0.0063947462
    },
    {
      ":": -0.0022031637
    },
    {
      " grab": -0.0021103378
    },
    {
      "('": -0.0012162096
    },
    {
      "chair": -0.0004311635
    },
    {
      "')": -0.002144147
    },
    {
      "\n": -0.0038766519
    },
    {
      " tur": -0.48226175
    },
    {
      "nt": -2.8206221e-05
    },
    {
      "o": -0.00013490739
    },
    {
      "('": -0.00037374342
    },
    {
      "chair": -0.00042293806
    },
    {
      "')": -0.0012162096
    },
    {
      "\n": -0.0026716702
    },
    {
      " assert": -0.26472497
    },
    {
      "('": -0.00033749174
    },
    {
      "chair": -0.004281289
    },
    {
      "'": -0.0006778259
    },
    {
      " in": -0.0018721609
    },
    {
      " '": -0.00078644656
    },
    {
      "hands": -0.0011253858
    },
    {
      "')": -0.0009479367
    },
    {
      "\n": -0.0011220442
    },
    {
      " else": -0.0012809024
    },
    {
      ":": -0.0006580251
    },
    {
      " grab": -0.0008917378
    },
    {
      "('": -0.00056033314
    },
    {
      "chair": -0.00047678567
    },
    {
      "')": -0.0006060773
    },
    {
      "\n": -0.0022663085
    },
    {
      " point": -0.06649868
    },
    {
      "at": -0.00045871665
    },
    {
      "('": -0.0003512045
    },
    {
      "chair": -0.0003881742
    },
    {
      "')": -0.001114167
    },
    {
      "\n": -0.004622254
    },
    {
      " #": -0.002632703
    },
    {
      " 2": -0.0057340865
    },
    {
      ":": -0.0006682836
    },
    {
      " sit": -0.093583494
    },
    {
      " on": -0.63015443
    },
    {
      " chair": -0.17876321
    },
    {
      "\n": -0.009181159
    },
    {
      " assert": -0.17618087
    },
    {
      "('": -0.00047797684
    },
    {
      "close": -0.5682717
    },
    {
      "'": -0.0012300529
    },
    {
      " to": -0.0021159528
    },
    {
      " '": -0.0014653959
    },
    {
      "chair": -0.0004434504
    },
    {
      "')": -0.0028723795
    },
    {
      "\n": -0.002124137
    },
    {
      " else": -0.000585442
    },
    {
      ":": -0.00051900244
    },
    {
      " find": -0.013183541
    },
    {
      "('": -0.0007366371
    },
    {
      "chair": -0.00030702315
    },
    {
      "')": -0.0016197691
    },
    {
      "\n": -0.004001837
    },
    {
      " sit": -0.0135673685
    },
    {
      "('": -0.0009882086
    },
    {
      "chair": -0.00036623323
    },
    {
      "')": -0.0013489996
    },
    {
      "\n": -0.14341949
    },
    {
      " #": -0.41922003
    },
    {
      "at": -0.010198345
    },
    {
      "('": -0.00060834415
    },
    {
      "chair": -0.0008123946
    },
    {
      "')": -0.0012606097
    },
    {
      "\n": -0.34760994
    },
    {
      " #": -0.029617103
    },
    {
      " 3": -0.007184725
    },
    {
      ":": -0.0009993663
    },
    {
      " Done": -0.7936684
    },
    {
      " to": -0.5333383
    },
    {
      " to": -0.7724432
    },
    {
      " tur": -0.26518673
    },
    {
      "nt": -4.406191e-05
    },
    {
      "o": -0.00156001
    },
    {
      "('": -0.0015886051
    },
    {
      "chair": -0.00206823
    },
    {
      "')": -0.0031854163
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.4372150897979736
[(" # 0: wake up\n wakeup()\n # 1: find alarm clock\n find('alarm_clock')\n # 2: turn off the alarm\n switchoff('alarm_clock')\n # 3: Done\n standup()", <OpenAIObject at 0x7f9fa1b08720> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3392,
    3397,
    3399,
    3401,
    3402,
    3404,
    3406,
    3407,
    3412,
    3418,
    3424,
    3425,
    3430,
    3432,
    3434,
    3437,
    3438,
    3443,
    3445,
    3446,
    3448,
    3450,
    3451,
    3456,
    3460,
    3464,
    3470,
    3471,
    3478,
    3481,
    3483,
    3485,
    3488,
    3489,
    3494,
    3496,
    3497,
    3499,
    3501,
    3502,
    3507,
    3508,
    3514,
    3516
  ],
  "token_logprobs": [
    -0.02114942,
    -0.011756138,
    -0.0025113919,
    -2.993698,
    -0.1690592,
    -0.06369898,
    -0.016388493,
    -0.002868913,
    -0.011087346,
    -0.011480318,
    -0.005376502,
    -0.004689023,
    -0.0008650708,
    -0.2546635,
    -0.2563698,
    -0.6512392,
    -0.023864307,
    -0.16787305,
    -0.0020039033,
    -0.008335984,
    -0.0005747649,
    -0.0254837,
    -0.00067866227,
    -0.003522841,
    -0.007500675,
    -0.014305536,
    -0.0058685583,
    -0.001551473,
    -0.62201005,
    -0.030601453,
    -0.8631715,
    -0.007992737,
    -0.22139572,
    -1.3738497,
    -0.0042541116,
    -0.0013799197,
    -0.0010807512,
    -0.00024048591,
    -0.015451665,
    -0.0004432111,
    -0.002966709,
    -0.27076983,
    -0.037258882,
    -0.006489651,
    -0.00060094945,
    -1.4173112,
    -0.5076504,
    -3.018484,
    -0.0017234168,
    -0.007831442
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " wake",
    " up",
    "\n",
    " wake",
    "up",
    "()",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " off",
    " the",
    " alarm",
    "\n",
    " switch",
    "off",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " Done",
    "\n",
    " stand",
    "up",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.02114942
    },
    {
      " 0": -0.011756138
    },
    {
      ":": -0.0025113919
    },
    {
      " find": -0.35482767
    },
    {
      " up": -0.1690592
    },
    {
      "\n": -0.06369898
    },
    {
      " wake": -0.016388493
    },
    {
      "up": -0.002868913
    },
    {
      "()": -0.011087346
    },
    {
      "\n": -0.011480318
    },
    {
      " #": -0.005376502
    },
    {
      " 1": -0.004689023
    },
    {
      ":": -0.0008650708
    },
    {
      " find": -0.2546635
    },
    {
      " alarm": -0.2563698
    },
    {
      " clock": -0.6512392
    },
    {
      "\n": -0.023864307
    },
    {
      " find": -0.16787305
    },
    {
      "('": -0.0020039033
    },
    {
      "al": -0.008335984
    },
    {
      "arm": -0.0005747649
    },
    {
      "_": -0.0254837
    },
    {
      "clock": -0.00067866227
    },
    {
      "')": -0.003522841
    },
    {
      "\n": -0.007500675
    },
    {
      " #": -0.014305536
    },
    {
      " 2": -0.0058685583
    },
    {
      ":": -0.001551473
    },
    {
      " turn": -0.62201005
    },
    {
      " off": -0.030601453
    },
    {
      " alarm": -0.56023884
    },
    {
      " alarm": -0.007992737
    },
    {
      "\n": -0.22139572
    },
    {
      " assert": -0.73969936
    },
    {
      "off": -0.0042541116
    },
    {
      "('": -0.0013799197
    },
    {
      "al": -0.0010807512
    },
    {
      "arm": -0.00024048591
    },
    {
      "_": -0.015451665
    },
    {
      "clock": -0.0004432111
    },
    {
      "')": -0.002966709
    },
    {
      "\n": -0.27076983
    },
    {
      " #": -0.037258882
    },
    {
      " 3": -0.006489651
    },
    {
      ":": -0.00060094945
    },
    {
      " Done": -1.4173112
    },
    {
      "\n": -0.5076504
    },
    {
      "<|endoftext|>": -1.5679598
    },
    {
      "up": -0.0017234168
    },
    {
      "()": -0.007831442
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.0362088680267334
[(" # 0: find bed\n find('bed')\n # 1: lay down on bed\n assert('close' to 'bed')\n else: find('bed')\n turnto('bed')\n lookat('bed')\n lie('bed')\n # 2: turn off lights\n switchoff('light')\n # 3: sleep\n sleep()", <OpenAIObject at 0x7f9fa1b08e50> JSON: {
  "text_offset": [
    3372,
    3374,
    3376,
    3377,
    3382,
    3386,
    3387,
    3392,
    3394,
    3397,
    3399,
    3400,
    3402,
    3404,
    3405,
    3409,
    3414,
    3417,
    3421,
    3422,
    3429,
    3431,
    3436,
    3437,
    3440,
    3442,
    3445,
    3447,
    3448,
    3453,
    3454,
    3459,
    3461,
    3464,
    3466,
    3467,
    3471,
    3473,
    3474,
    3476,
    3479,
    3481,
    3482,
    3487,
    3489,
    3491,
    3494,
    3496,
    3497,
    3501,
    3503,
    3506,
    3508,
    3509,
    3511,
    3513,
    3514,
    3519,
    3523,
    3530,
    3531,
    3538,
    3541,
    3543,
    3548,
    3550,
    3551,
    3553,
    3555,
    3556,
    3562,
    3563,
    3569
  ],
  "token_logprobs": [
    -0.01718459,
    -0.009373189,
    -0.0019921982,
    -1.1156139,
    -0.7642398,
    -0.031130971,
    -0.27292696,
    -0.0018110126,
    -0.00044333027,
    -0.001624546,
    -0.0076163425,
    -0.0044060443,
    -0.0031075676,
    -0.0007056832,
    -0.63628185,
    -0.11063692,
    -0.2038521,
    -0.07409128,
    -0.01495869,
    -1.5235035,
    -0.0016286067,
    -0.006365173,
    -0.0029677858,
    -0.00083088985,
    -0.0027330504,
    -0.00028102813,
    -0.004205086,
    -0.004855638,
    -0.0015598917,
    -0.0014763171,
    -0.0046699196,
    -0.001464201,
    -0.00028734808,
    -0.001033077,
    -0.0051910467,
    -0.9087063,
    -3.8217877e-05,
    -0.00031608582,
    -0.0005855612,
    -0.00018248011,
    -0.0019383293,
    -0.0041795294,
    -0.24217898,
    -0.00049813156,
    -0.0004508442,
    -0.00024060514,
    -0.0007534595,
    -0.003554661,
    -0.6352978,
    -0.011364079,
    -0.0013001795,
    -0.0012690857,
    -0.00476035,
    -0.035174813,
    -0.007321193,
    -0.00096983457,
    -3.6227012,
    -0.31771207,
    -2.0075939,
    -0.04626296,
    -2.0340033,
    -0.007039875,
    -0.0016180993,
    -0.20430516,
    -0.0034465778,
    -0.012087292,
    -0.018659964,
    -0.0067649344,
    -0.0011176269,
    -1.0597237,
    -0.0687458,
    -0.018364687,
    -0.005709627
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " lay",
    " down",
    " on",
    " bed",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " lie",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " off",
    " lights",
    "\n",
    " switch",
    "off",
    "('",
    "light",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sleep",
    "\n",
    " sleep",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.01718459
    },
    {
      " 0": -0.009373189
    },
    {
      ":": -0.0019921982
    },
    {
      " walk": -0.742176
    },
    {
      " bed": -0.7642398
    },
    {
      "\n": -0.031130971
    },
    {
      " find": -0.27292696
    },
    {
      "('": -0.0018110126
    },
    {
      "bed": -0.00044333027
    },
    {
      "')": -0.001624546
    },
    {
      "\n": -0.0076163425
    },
    {
      " #": -0.0044060443
    },
    {
      " 1": -0.0031075676
    },
    {
      ":": -0.0007056832
    },
    {
      " lay": -0.63628185
    },
    {
      " down": -0.11063692
    },
    {
      " on": -0.2038521
    },
    {
      " bed": -0.07409128
    },
    {
      "\n": -0.01495869
    },
    {
      " tur": -0.2884058
    },
    {
      "('": -0.0016286067
    },
    {
      "close": -0.006365173
    },
    {
      "'": -0.0029677858
    },
    {
      " to": -0.00083088985
    },
    {
      " '": -0.0027330504
    },
    {
      "bed": -0.00028102813
    },
    {
      "')": -0.004205086
    },
    {
      "\n": -0.004855638
    },
    {
      " else": -0.0015598917
    },
    {
      ":": -0.0014763171
    },
    {
      " find": -0.0046699196
    },
    {
      "('": -0.001464201
    },
    {
      "bed": -0.00028734808
    },
    {
      "')": -0.001033077
    },
    {
      "\n": -0.0051910467
    },
    {
      " tur": -0.9087063
    },
    {
      "nt": -3.8217877e-05
    },
    {
      "o": -0.00031608582
    },
    {
      "('": -0.0005855612
    },
    {
      "bed": -0.00018248011
    },
    {
      "')": -0.0019383293
    },
    {
      "\n": -0.0041795294
    },
    {
      " look": -0.24217898
    },
    {
      "at": -0.00049813156
    },
    {
      "('": -0.0004508442
    },
    {
      "bed": -0.00024060514
    },
    {
      "')": -0.0007534595
    },
    {
      "\n": -0.003554661
    },
    {
      " lie": -0.6352978
    },
    {
      "('": -0.011364079
    },
    {
      "bed": -0.0013001795
    },
    {
      "')": -0.0012690857
    },
    {
      "\n": -0.00476035
    },
    {
      " #": -0.035174813
    },
    {
      " 2": -0.007321193
    },
    {
      ":": -0.00096983457
    },
    {
      " close": -0.76593935
    },
    {
      " off": -0.31771207
    },
    {
      " the": -0.44693923
    },
    {
      "\n": -0.04626296
    },
    {
      " find": -0.66051686
    },
    {
      "off": -0.007039875
    },
    {
      "('": -0.0016180993
    },
    {
      "light": -0.20430516
    },
    {
      "')": -0.0034465778
    },
    {
      "\n": -0.012087292
    },
    {
      " #": -0.018659964
    },
    {
      " 3": -0.0067649344
    },
    {
      ":": -0.0011176269
    },
    {
      " sleep": -1.0597237
    },
    {
      "\n": -0.0687458
    },
    {
      " sleep": -0.018364687
    },
    {
      "()": -0.005709627
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.753411054611206
[(" # 0: find computer\n find('computer')\n # 1: sit on chair\n find('chair')\n sit('chair')\n # 2: turn on computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')\n # 3: use the mouse\n assert('close' to 'computer')\n else: find('computer')\n lookat('computer')\n find('mouse')\n grab('mouse')\n pointat('mousepad')\n move('mouse')\n # 4: use keyboard\n find('keyboard')\n grab('keyboard')\n pointat('keyboard')\n type('keyboard')", <OpenAIObject at 0x7f9fa1be49f0> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3395,
    3396,
    3401,
    3403,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3423,
    3426,
    3432,
    3433,
    3438,
    3440,
    3445,
    3447,
    3448,
    3452,
    3454,
    3459,
    3461,
    3462,
    3464,
    3466,
    3467,
    3472,
    3475,
    3484,
    3485,
    3492,
    3494,
    3499,
    3500,
    3503,
    3505,
    3513,
    3515,
    3516,
    3521,
    3522,
    3527,
    3529,
    3537,
    3539,
    3540,
    3547,
    3549,
    3551,
    3559,
    3561,
    3562,
    3564,
    3566,
    3567,
    3571,
    3575,
    3581,
    3582,
    3589,
    3591,
    3596,
    3597,
    3600,
    3602,
    3610,
    3612,
    3613,
    3618,
    3619,
    3624,
    3626,
    3634,
    3636,
    3637,
    3642,
    3644,
    3646,
    3654,
    3656,
    3657,
    3662,
    3664,
    3669,
    3671,
    3672,
    3677,
    3679,
    3684,
    3686,
    3687,
    3693,
    3695,
    3697,
    3702,
    3705,
    3707,
    3708,
    3713,
    3715,
    3720,
    3722,
    3723,
    3725,
    3727,
    3728,
    3732,
    3741,
    3742,
    3747,
    3749,
    3752,
    3757,
    3759,
    3760,
    3765,
    3767,
    3770,
    3775,
    3777,
    3778,
    3784,
    3786,
    3788,
    3791,
    3796,
    3798,
    3799,
    3804,
    3806,
    3809,
    3814
  ],
  "token_logprobs": [
    -0.018559342,
    -0.006762114,
    -0.0017548259,
    -1.4099461,
    -0.72321194,
    -0.030856157,
    -0.096304365,
    -0.0022219217,
    -0.0021992233,
    -0.0019528427,
    -0.007908561,
    -0.005676239,
    -0.003554661,
    -0.000751311,
    -1.7898972,
    -0.7592721,
    -0.30322573,
    -0.085537486,
    -0.47423106,
    -0.0013997947,
    -0.0031482272,
    -0.0019062002,
    -0.0048211985,
    -0.83505696,
    -0.0022683397,
    -0.0013128925,
    -0.0008396568,
    -0.0064546736,
    -0.04099813,
    -0.0083483085,
    -0.0013070428,
    -0.5560379,
    -0.05328011,
    -0.42742217,
    -0.025593638,
    -0.6396607,
    -0.0018795651,
    -0.06413479,
    -0.004364138,
    -0.0010255584,
    -0.004219694,
    -0.0035255912,
    -0.0069968957,
    -0.005244793,
    -0.0018764609,
    -0.001789218,
    -0.005185356,
    -0.0017476002,
    -0.00095628976,
    -0.0026725063,
    -0.0067643346,
    -0.24149723,
    -0.004066531,
    -0.00089722703,
    -0.0009883279,
    -0.0020773106,
    -0.0058835447,
    -0.019903762,
    -0.007451073,
    -0.00062718947,
    -1.4919356,
    -1.3431538,
    -1.0879183,
    -0.38785806,
    -1.1301467,
    -0.0017374487,
    -0.3457903,
    -0.004306668,
    -0.00043903594,
    -0.0027659808,
    -1.4918756,
    -0.019317674,
    -0.0041163852,
    -0.003783671,
    -0.0016567857,
    -0.0050334204,
    -0.0012979099,
    -0.0023837036,
    -0.002746916,
    -0.0061426507,
    -4.3007126,
    -0.0049363202,
    -0.0009946515,
    -0.4204272,
    -0.013931761,
    -0.0063305614,
    -1.1338477,
    -0.0018204479,
    -0.0041209925,
    -0.0801929,
    -0.005796074,
    -0.5130739,
    -0.0010473961,
    -0.00038554877,
    -0.0031405133,
    -0.009231328,
    -1.5058929,
    -0.0084439395,
    -0.0009560504,
    -0.15821546,
    -2.054734,
    -0.0020850103,
    -0.06974914,
    -2.100321,
    -0.03195487,
    -0.0067171087,
    -0.22260253,
    -0.27389517,
    -0.17014547,
    -0.01151734,
    -0.0017505842,
    -1.161487,
    -1.7900797,
    -0.037287466,
    -0.51394916,
    -0.0010519318,
    -0.0016861609,
    -0.0006499133,
    -0.0024323417,
    -0.005917181,
    -0.44326073,
    -0.00054649834,
    -0.0004045105,
    -0.0014831205,
    -0.0024966944,
    -0.0036443332,
    -0.840381,
    -0.0014861063,
    -0.0004998033,
    -0.11220705,
    -0.0021931296,
    -0.0021701907,
    -0.006375429,
    -0.30012566,
    -0.06231578,
    -0.03330989,
    -0.003351304,
    -0.0041970075
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " use",
    " the",
    " mouse",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')",
    "\n",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " grab",
    "('",
    "mouse",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "mouse",
    "pad",
    "')",
    "\n",
    " move",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " use",
    " keyboard",
    "\n",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " grab",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " type",
    "('",
    "key",
    "board",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018559342
    },
    {
      " 0": -0.006762114
    },
    {
      ":": -0.0017548259
    },
    {
      " walk": -0.37261468
    },
    {
      " computer": -0.72321194
    },
    {
      "\n": -0.030856157
    },
    {
      " find": -0.096304365
    },
    {
      "('": -0.0022219217
    },
    {
      "computer": -0.0021992233
    },
    {
      "')": -0.0019528427
    },
    {
      "\n": -0.007908561
    },
    {
      " #": -0.005676239
    },
    {
      " 1": -0.003554661
    },
    {
      ":": -0.000751311
    },
    {
      " turn": -1.0634302
    },
    {
      " on": -0.7592721
    },
    {
      " chair": -0.30322573
    },
    {
      "\n": -0.085537486
    },
    {
      " find": -0.47423106
    },
    {
      "('": -0.0013997947
    },
    {
      "chair": -0.0031482272
    },
    {
      "')": -0.0019062002
    },
    {
      "\n": -0.0048211985
    },
    {
      " assert": -0.6720913
    },
    {
      "('": -0.0022683397
    },
    {
      "chair": -0.0013128925
    },
    {
      "')": -0.0008396568
    },
    {
      "\n": -0.0064546736
    },
    {
      " #": -0.04099813
    },
    {
      " 2": -0.0083483085
    },
    {
      ":": -0.0013070428
    },
    {
      " turn": -0.5560379
    },
    {
      " on": -0.05328011
    },
    {
      " computer": -0.42742217
    },
    {
      "\n": -0.025593638
    },
    {
      " assert": -0.6396607
    },
    {
      "('": -0.0018795651
    },
    {
      "close": -0.06413479
    },
    {
      "'": -0.004364138
    },
    {
      " to": -0.0010255584
    },
    {
      " '": -0.004219694
    },
    {
      "computer": -0.0035255912
    },
    {
      "')": -0.0069968957
    },
    {
      "\n": -0.005244793
    },
    {
      " else": -0.0018764609
    },
    {
      ":": -0.001789218
    },
    {
      " find": -0.005185356
    },
    {
      "('": -0.0017476002
    },
    {
      "computer": -0.00095628976
    },
    {
      "')": -0.0026725063
    },
    {
      "\n": -0.0067643346
    },
    {
      " switch": -0.24149723
    },
    {
      "on": -0.004066531
    },
    {
      "('": -0.00089722703
    },
    {
      "computer": -0.0009883279
    },
    {
      "')": -0.0020773106
    },
    {
      "\n": -0.0058835447
    },
    {
      " #": -0.019903762
    },
    {
      " 3": -0.007451073
    },
    {
      ":": -0.00062718947
    },
    {
      " open": -1.163124
    },
    {
      " computer": -0.9786415
    },
    {
      " computer": -0.7123965
    },
    {
      "\n": -0.38785806
    },
    {
      " find": -0.55902463
    },
    {
      "('": -0.0017374487
    },
    {
      "close": -0.3457903
    },
    {
      "'": -0.004306668
    },
    {
      " to": -0.00043903594
    },
    {
      " '": -0.0027659808
    },
    {
      "mouse": -0.25834176
    },
    {
      "')": -0.019317674
    },
    {
      "\n": -0.0041163852
    },
    {
      " else": -0.003783671
    },
    {
      ":": -0.0016567857
    },
    {
      " find": -0.0050334204
    },
    {
      "('": -0.0012979099
    },
    {
      "computer": -0.0023837036
    },
    {
      "')": -0.002746916
    },
    {
      "\n": -0.0061426507
    },
    {
      " find": -0.8819049
    },
    {
      "at": -0.0049363202
    },
    {
      "('": -0.0009946515
    },
    {
      "computer": -0.4204272
    },
    {
      "')": -0.013931761
    },
    {
      "\n": -0.0063305614
    },
    {
      " find": -1.1338477
    },
    {
      "('": -0.0018204479
    },
    {
      "mouse": -0.0041209925
    },
    {
      "')": -0.0801929
    },
    {
      "\n": -0.005796074
    },
    {
      " grab": -0.5130739
    },
    {
      "('": -0.0010473961
    },
    {
      "mouse": -0.00038554877
    },
    {
      "')": -0.0031405133
    },
    {
      "\n": -0.009231328
    },
    {
      " #": -1.2570707
    },
    {
      "at": -0.0084439395
    },
    {
      "('": -0.0009560504
    },
    {
      "mouse": -0.15821546
    },
    {
      "')": -0.13937442
    },
    {
      "')": -0.0020850103
    },
    {
      "\n": -0.06974914
    },
    {
      " #": -0.29836315
    },
    {
      "('": -0.03195487
    },
    {
      "mouse": -0.0067171087
    },
    {
      "')": -0.22260253
    },
    {
      "\n": -0.27389517
    },
    {
      " #": -0.17014547
    },
    {
      " 4": -0.01151734
    },
    {
      ":": -0.0017505842
    },
    {
      " use": -1.161487
    },
    {
      " the": -0.19665009
    },
    {
      "\n": -0.037287466
    },
    {
      " find": -0.51394916
    },
    {
      "('": -0.0010519318
    },
    {
      "key": -0.0016861609
    },
    {
      "board": -0.0006499133
    },
    {
      "')": -0.0024323417
    },
    {
      "\n": -0.005917181
    },
    {
      " grab": -0.44326073
    },
    {
      "('": -0.00054649834
    },
    {
      "key": -0.0004045105
    },
    {
      "board": -0.0014831205
    },
    {
      "')": -0.0024966944
    },
    {
      "\n": -0.0036443332
    },
    {
      " point": -0.840381
    },
    {
      "at": -0.0014861063
    },
    {
      "('": -0.0004998033
    },
    {
      "key": -0.11220705
    },
    {
      "board": -0.0021931296
    },
    {
      "')": -0.0021701907
    },
    {
      "\n": -0.006375429
    },
    {
      " type": -0.30012566
    },
    {
      "('": -0.06231578
    },
    {
      "key": -0.03330989
    },
    {
      "board": -0.003351304
    },
    {
      "')": -0.0041970075
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.5705270767211914
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find sink\n find('sink')\n # 2: turn on tap\n turnon('tap')\n # 3: wash face\n assert('close' to 'sink')\n else: find('sink')\n wash('face')\n # 4: turn off tap\n turnoff('tap')\n # 5: Done", <OpenAIObject at 0x7f9fa1be4cc0> JSON: {
  "text_offset": [
    3373,
    3375,
    3377,
    3378,
    3383,
    3386,
    3395,
    3396,
    3401,
    3403,
    3407,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3424,
    3429,
    3430,
    3435,
    3437,
    3438,
    3441,
    3443,
    3444,
    3446,
    3448,
    3449,
    3454,
    3457,
    3461,
    3462,
    3467,
    3469,
    3471,
    3474,
    3476,
    3477,
    3479,
    3481,
    3482,
    3487,
    3492,
    3493,
    3500,
    3502,
    3507,
    3508,
    3511,
    3513,
    3514,
    3517,
    3519,
    3520,
    3525,
    3526,
    3531,
    3533,
    3534,
    3537,
    3539,
    3540,
    3545,
    3547,
    3551,
    3553,
    3554,
    3556,
    3558,
    3559,
    3564,
    3568,
    3572,
    3573,
    3578,
    3581,
    3583,
    3586,
    3588,
    3589,
    3591,
    3593,
    3594
  ],
  "token_logprobs": [
    -0.01664591,
    -0.0060567767,
    -0.0017549442,
    -0.7070579,
    -0.31223115,
    -0.13107936,
    -0.017197689,
    -0.0052694185,
    -0.0038622904,
    -0.0027497853,
    -0.00014003337,
    -0.002224549,
    -0.006465713,
    -0.0021066957,
    -0.0031148018,
    -0.00073950086,
    -0.08246451,
    -0.12055085,
    -0.026069188,
    -0.32684398,
    -0.00081442395,
    -0.00080022594,
    -5.1930627e-05,
    -0.0014220575,
    -0.0052444334,
    -0.019510021,
    -0.0049172123,
    -0.00073794933,
    -0.42742902,
    -0.07801457,
    -2.56605,
    -0.08824174,
    -1.6548091,
    -0.08437499,
    -0.0030371968,
    -0.1414477,
    -0.0033479547,
    -0.004665906,
    -0.030290533,
    -0.0061976467,
    -0.0003407113,
    -1.2383703,
    -0.10992579,
    -0.16010955,
    -0.7690956,
    -0.0019472886,
    -0.04819595,
    -0.004336961,
    -0.0010989525,
    -0.003230445,
    -0.23130381,
    -4.489638e-05,
    -0.0065958425,
    -0.004213468,
    -0.0015325489,
    -0.0019439443,
    -0.011232185,
    -0.0019532004,
    -0.00081191683,
    -2.8565719e-05,
    -0.0028594064,
    -0.005827968,
    -0.52371037,
    -0.013770697,
    -0.042537767,
    -0.0073347627,
    -0.032336175,
    -0.21078086,
    -0.0073821354,
    -0.0023528747,
    -0.1381684,
    -0.029236522,
    -0.07004815,
    -0.022174038,
    -0.11187716,
    -0.0026526642,
    -0.0007869244,
    -0.0016614423,
    -0.0023219902,
    -0.17788105,
    -0.019378807,
    -0.0041912002,
    -0.0027346038,
    -1.0073903
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " tap",
    "\n",
    " turn",
    "on",
    "('",
    "tap",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wash",
    " face",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " wash",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " off",
    " tap",
    "\n",
    " turn",
    "off",
    "('",
    "tap",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01664591
    },
    {
      " 0": -0.0060567767
    },
    {
      ":": -0.0017549442
    },
    {
      " walk": -0.7070579
    },
    {
      " to": -0.31223115
    },
    {
      " bathroom": -0.13107936
    },
    {
      "\n": -0.017197689
    },
    {
      " walk": -0.0052694185
    },
    {
      "('": -0.0038622904
    },
    {
      "bath": -0.0027497853
    },
    {
      "room": -0.00014003337
    },
    {
      "')": -0.002224549
    },
    {
      "\n": -0.006465713
    },
    {
      " #": -0.0021066957
    },
    {
      " 1": -0.0031148018
    },
    {
      ":": -0.00073950086
    },
    {
      " find": -0.08246451
    },
    {
      " sink": -0.12055085
    },
    {
      "\n": -0.026069188
    },
    {
      " find": -0.32684398
    },
    {
      "('": -0.00081442395
    },
    {
      "s": -0.00080022594
    },
    {
      "ink": -5.1930627e-05
    },
    {
      "')": -0.0014220575
    },
    {
      "\n": -0.0052444334
    },
    {
      " #": -0.019510021
    },
    {
      " 2": -0.0049172123
    },
    {
      ":": -0.00073794933
    },
    {
      " turn": -0.42742902
    },
    {
      " on": -0.07801457
    },
    {
      " f": -0.90891296
    },
    {
      "\n": -0.08824174
    },
    {
      " assert": -0.9913819
    },
    {
      "on": -0.08437499
    },
    {
      "('": -0.0030371968
    },
    {
      "tap": -0.1414477
    },
    {
      "')": -0.0033479547
    },
    {
      "\n": -0.004665906
    },
    {
      " #": -0.030290533
    },
    {
      " 3": -0.0061976467
    },
    {
      ":": -0.0003407113
    },
    {
      " wash": -1.2383703
    },
    {
      " face": -0.10992579
    },
    {
      "\n": -0.16010955
    },
    {
      " assert": -0.7690956
    },
    {
      "('": -0.0019472886
    },
    {
      "close": -0.04819595
    },
    {
      "'": -0.004336961
    },
    {
      " to": -0.0010989525
    },
    {
      " '": -0.003230445
    },
    {
      "s": -0.23130381
    },
    {
      "ink": -4.489638e-05
    },
    {
      "')": -0.0065958425
    },
    {
      "\n": -0.004213468
    },
    {
      " else": -0.0015325489
    },
    {
      ":": -0.0019439443
    },
    {
      " find": -0.011232185
    },
    {
      "('": -0.0019532004
    },
    {
      "s": -0.00081191683
    },
    {
      "ink": -2.8565719e-05
    },
    {
      "')": -0.0028594064
    },
    {
      "\n": -0.005827968
    },
    {
      " wash": -0.52371037
    },
    {
      "('": -0.013770697
    },
    {
      "face": -0.042537767
    },
    {
      "')": -0.0073347627
    },
    {
      "\n": -0.032336175
    },
    {
      " #": -0.21078086
    },
    {
      " 4": -0.0073821354
    },
    {
      ":": -0.0023528747
    },
    {
      " turn": -0.1381684
    },
    {
      " off": -0.029236522
    },
    {
      " tap": -0.07004815
    },
    {
      "\n": -0.022174038
    },
    {
      " turn": -0.11187716
    },
    {
      "off": -0.0026526642
    },
    {
      "('": -0.0007869244
    },
    {
      "tap": -0.0016614423
    },
    {
      "')": -0.0023219902
    },
    {
      "\n": -0.17788105
    },
    {
      " #": -0.019378807
    },
    {
      " 5": -0.0041912002
    },
    {
      ":": -0.0027346038
    },
    {
      " Done": -1.0073903
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.2049131393432617
[(" # 0: find newspaper\n find('newspaper')\n # 1: grab newspaper\n assert('close' to 'newspaper')\n else: find('newspaper')\n grab('newspaper')\n # 2: sit on chair\n find('chair')\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 3: read newspaper\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n read('newspaper')", <OpenAIObject at 0x7f9fb244ae50> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3398,
    3399,
    3404,
    3406,
    3409,
    3411,
    3415,
    3417,
    3418,
    3420,
    3422,
    3423,
    3428,
    3438,
    3439,
    3446,
    3448,
    3453,
    3454,
    3457,
    3459,
    3462,
    3464,
    3468,
    3470,
    3471,
    3476,
    3477,
    3482,
    3484,
    3487,
    3489,
    3493,
    3495,
    3496,
    3501,
    3503,
    3506,
    3508,
    3512,
    3514,
    3515,
    3517,
    3519,
    3520,
    3524,
    3527,
    3533,
    3534,
    3539,
    3541,
    3546,
    3548,
    3549,
    3556,
    3558,
    3563,
    3564,
    3567,
    3569,
    3574,
    3576,
    3577,
    3582,
    3583,
    3588,
    3590,
    3595,
    3597,
    3598,
    3602,
    3604,
    3609,
    3611,
    3612,
    3614,
    3616,
    3617,
    3622,
    3632,
    3633,
    3640,
    3642,
    3645,
    3647,
    3651,
    3652,
    3655,
    3657,
    3662,
    3664,
    3665,
    3670,
    3671,
    3676,
    3678,
    3681,
    3683,
    3687,
    3689,
    3690,
    3695,
    3697,
    3700,
    3702,
    3706
  ],
  "token_logprobs": [
    -0.018005779,
    -0.0076669743,
    -0.0018256424,
    -0.3597068,
    -0.3433708,
    -0.028388897,
    -0.031808604,
    -0.0019873597,
    -0.002094271,
    -0.0005682056,
    -0.00071964,
    -0.0028579724,
    -0.007786387,
    -0.0047193253,
    -0.002472852,
    -0.0004490551,
    -0.22128692,
    -0.13214868,
    -0.014128999,
    -0.5872305,
    -0.0014613363,
    -0.0038562464,
    -0.0020757553,
    -0.0005838295,
    -0.0017939958,
    -0.0036645536,
    -0.00044642974,
    -0.003359258,
    -0.0047884965,
    -0.005977142,
    -0.0015718323,
    -0.0013880371,
    -0.0032162126,
    -0.0011198947,
    -0.0009093366,
    -0.0003553787,
    -0.00032276337,
    -0.0019229823,
    -0.006072665,
    -0.0026098741,
    -0.0007078308,
    -0.0006760368,
    -0.0004992054,
    -0.00012572645,
    -0.0015326691,
    -0.004379344,
    -1.0294089,
    -0.0072817462,
    -0.00063524215,
    -0.7457316,
    -0.6807554,
    -1.3285819,
    -0.12944901,
    -0.2109876,
    -0.0010159514,
    -0.0015290863,
    -0.0014987021,
    -0.0037772674,
    -0.41946352,
    -0.00065158313,
    -0.0050974647,
    -0.0018799246,
    -0.0007038932,
    -0.0012698009,
    -0.0014668246,
    -0.003477322,
    -0.0028635918,
    -0.001524192,
    -0.0012152551,
    -0.0036943455,
    -0.00097460754,
    -0.0009932191,
    -0.0014256403,
    -0.0050026905,
    -0.008697574,
    -0.0009482962,
    -0.0007259036,
    -0.0013424365,
    -0.0057225768,
    -0.020222783,
    -0.009321203,
    -0.0008082195,
    -0.2881541,
    -0.25952387,
    -0.010418398,
    -1.3982357,
    -0.0011408407,
    -0.14388388,
    -0.0009305755,
    -0.0008052355,
    -0.003005987,
    -0.013736497,
    -0.004427357,
    -0.008688797,
    -0.02429671,
    -0.0040579713,
    -0.0035005275,
    -0.002631388,
    -0.024849117,
    -0.0014294606,
    -0.0010203687,
    -0.0005082699,
    -0.0016935649,
    -0.0035781697,
    -0.005647284,
    -0.58802336,
    -0.00091590156,
    -0.0007534595,
    -0.00039664176,
    -0.00028043022,
    -0.0018577697
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " newspaper",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " read",
    " newspaper",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018005779
    },
    {
      " 0": -0.0076669743
    },
    {
      ":": -0.0018256424
    },
    {
      " find": -0.3597068
    },
    {
      " newspaper": -0.3433708
    },
    {
      "\n": -0.028388897
    },
    {
      " find": -0.031808604
    },
    {
      "('": -0.0019873597
    },
    {
      "new": -0.002094271
    },
    {
      "sp": -0.0005682056
    },
    {
      "aper": -0.00071964
    },
    {
      "')": -0.0028579724
    },
    {
      "\n": -0.007786387
    },
    {
      " #": -0.0047193253
    },
    {
      " 1": -0.002472852
    },
    {
      ":": -0.0004490551
    },
    {
      " grab": -0.22128692
    },
    {
      " newspaper": -0.13214868
    },
    {
      "\n": -0.014128999
    },
    {
      " assert": -0.5872305
    },
    {
      "('": -0.0014613363
    },
    {
      "close": -0.0038562464
    },
    {
      "'": -0.0020757553
    },
    {
      " to": -0.0005838295
    },
    {
      " '": -0.0017939958
    },
    {
      "new": -0.0036645536
    },
    {
      "sp": -0.00044642974
    },
    {
      "aper": -0.003359258
    },
    {
      "')": -0.0047884965
    },
    {
      "\n": -0.005977142
    },
    {
      " else": -0.0015718323
    },
    {
      ":": -0.0013880371
    },
    {
      " find": -0.0032162126
    },
    {
      "('": -0.0011198947
    },
    {
      "new": -0.0009093366
    },
    {
      "sp": -0.0003553787
    },
    {
      "aper": -0.00032276337
    },
    {
      "')": -0.0019229823
    },
    {
      "\n": -0.006072665
    },
    {
      " grab": -0.0026098741
    },
    {
      "('": -0.0007078308
    },
    {
      "new": -0.0006760368
    },
    {
      "sp": -0.0004992054
    },
    {
      "aper": -0.00012572645
    },
    {
      "')": -0.0015326691
    },
    {
      "\n": -0.004379344
    },
    {
      " assert": -0.48867747
    },
    {
      " 2": -0.0072817462
    },
    {
      ":": -0.00063524215
    },
    {
      " sit": -0.7457316
    },
    {
      " on": -0.6807554
    },
    {
      " couch": -1.2072003
    },
    {
      "\n": -0.12944901
    },
    {
      " find": -0.2109876
    },
    {
      "('": -0.0010159514
    },
    {
      "chair": -0.0015290863
    },
    {
      "')": -0.0014987021
    },
    {
      "\n": -0.0037772674
    },
    {
      " assert": -0.41946352
    },
    {
      "('": -0.00065158313
    },
    {
      "close": -0.0050974647
    },
    {
      "'": -0.0018799246
    },
    {
      " to": -0.0007038932
    },
    {
      " '": -0.0012698009
    },
    {
      "chair": -0.0014668246
    },
    {
      "')": -0.003477322
    },
    {
      "\n": -0.0028635918
    },
    {
      " else": -0.001524192
    },
    {
      ":": -0.0012152551
    },
    {
      " find": -0.0036943455
    },
    {
      "('": -0.00097460754
    },
    {
      "chair": -0.0009932191
    },
    {
      "')": -0.0014256403
    },
    {
      "\n": -0.0050026905
    },
    {
      " sit": -0.008697574
    },
    {
      "('": -0.0009482962
    },
    {
      "chair": -0.0007259036
    },
    {
      "')": -0.0013424365
    },
    {
      "\n": -0.0057225768
    },
    {
      " #": -0.020222783
    },
    {
      " 3": -0.009321203
    },
    {
      ":": -0.0008082195
    },
    {
      " read": -0.2881541
    },
    {
      " newspaper": -0.25952387
    },
    {
      "\n": -0.010418398
    },
    {
      " tur": -0.95520526
    },
    {
      "('": -0.0011408407
    },
    {
      "new": -0.14388388
    },
    {
      "sp": -0.0009305755
    },
    {
      "aper": -0.0008052355
    },
    {
      "'": -0.003005987
    },
    {
      " in": -0.013736497
    },
    {
      " '": -0.004427357
    },
    {
      "hands": -0.008688797
    },
    {
      "')": -0.02429671
    },
    {
      "\n": -0.0040579713
    },
    {
      " else": -0.0035005275
    },
    {
      ":": -0.002631388
    },
    {
      " grab": -0.024849117
    },
    {
      "('": -0.0014294606
    },
    {
      "new": -0.0010203687
    },
    {
      "sp": -0.0005082699
    },
    {
      "aper": -0.0016935649
    },
    {
      "')": -0.0035781697
    },
    {
      "\n": -0.005647284
    },
    {
      " read": -0.58802336
    },
    {
      "('": -0.00091590156
    },
    {
      "new": -0.0007534595
    },
    {
      "sp": -0.00039664176
    },
    {
      "aper": -0.00028043022
    },
    {
      "')": -0.0018577697
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.4095358848571777
[(" # 0: find a cup\n find('cup')\n # 1: grab cup\n grab('cup')\n # 2: fill cup with water\n assert('close' to 'faucet')\n else: find('faucet')\n pour('cup')\n # 3: drink water\n assert('close' to 'cup')\n else: find('cup')\n drink('cup')\n # 4: put cup back\n assert('close' to 'cup')\n else: find('cup')\n putback('cup')", <OpenAIObject at 0x7f9fb246d540> JSON: {
  "text_offset": [
    3369,
    3371,
    3373,
    3374,
    3379,
    3381,
    3385,
    3386,
    3391,
    3393,
    3396,
    3398,
    3399,
    3401,
    3403,
    3404,
    3409,
    3413,
    3414,
    3419,
    3421,
    3424,
    3426,
    3427,
    3429,
    3431,
    3432,
    3437,
    3441,
    3446,
    3452,
    3453,
    3460,
    3462,
    3467,
    3468,
    3471,
    3473,
    3474,
    3477,
    3479,
    3481,
    3482,
    3487,
    3488,
    3493,
    3495,
    3496,
    3499,
    3501,
    3503,
    3504,
    3509,
    3511,
    3514,
    3516,
    3517,
    3519,
    3521,
    3522,
    3528,
    3534,
    3535,
    3542,
    3544,
    3549,
    3550,
    3553,
    3555,
    3558,
    3560,
    3561,
    3566,
    3567,
    3572,
    3574,
    3577,
    3579,
    3580,
    3586,
    3588,
    3591,
    3593,
    3594,
    3596,
    3598,
    3599,
    3603,
    3607,
    3612,
    3613,
    3620,
    3622,
    3627,
    3628,
    3631,
    3633,
    3636,
    3638,
    3639,
    3644,
    3645,
    3650,
    3652,
    3655,
    3657,
    3658,
    3662,
    3666,
    3668,
    3671
  ],
  "token_logprobs": [
    -0.08876882,
    -0.033353154,
    -0.0045676436,
    -0.16587976,
    -2.336152,
    -0.2623013,
    -0.056535497,
    -0.022043634,
    -0.0047818488,
    -0.00067866227,
    -0.0025617091,
    -0.014161341,
    -0.010042821,
    -0.00476023,
    -0.0010347478,
    -0.16955158,
    -1.0792898,
    -0.03243844,
    -0.7727051,
    -0.0018483935,
    -0.00020596985,
    -0.0015074194,
    -0.0061024716,
    -0.5767079,
    -0.008846093,
    -0.0012816186,
    -0.7554751,
    -0.37503096,
    -0.3480359,
    -0.5773113,
    -0.033409297,
    -0.77534443,
    -0.0038299803,
    -0.04303023,
    -0.0087625105,
    -0.0010581954,
    -0.004364858,
    -1.022785,
    -0.0040280493,
    -0.0003718351,
    -0.019188127,
    -0.0078538945,
    -0.002444466,
    -0.0029551112,
    -0.02506178,
    -0.0024980668,
    -0.00086531014,
    -0.0005210318,
    -0.0002512175,
    -0.0036807049,
    -0.009154089,
    -0.71568143,
    -0.0073035397,
    -1.0958506,
    -0.2797275,
    -0.009448758,
    -0.0836743,
    -0.010804119,
    -0.0012803064,
    -0.12046136,
    -1.6742166,
    -0.14103733,
    -1.3905742,
    -0.0019014224,
    -0.37651637,
    -0.0024794242,
    -0.0005750042,
    -0.0049317665,
    -0.019011633,
    -0.008305578,
    -0.0040469,
    -0.0017312987,
    -0.0018425409,
    -0.46283007,
    -0.0014787051,
    -0.0004893054,
    -0.0043756324,
    -0.005585066,
    -0.56154066,
    -0.002953676,
    -0.030210607,
    -0.0019948257,
    -0.22715802,
    -0.033074092,
    -0.010729892,
    -0.0016832352,
    -0.31123286,
    -0.20807356,
    -0.13070358,
    -0.031553667,
    -0.8133699,
    -0.0013151594,
    -0.11183624,
    -0.0024754792,
    -0.004912898,
    -0.003343589,
    -0.013296608,
    -0.0153514305,
    -0.0022237136,
    -0.0008480099,
    -0.0008387032,
    -0.022055455,
    -0.0010562862,
    -0.0001779483,
    -0.0012712333,
    -0.005533641,
    -0.053810723,
    -0.63101286,
    -0.0032519712,
    -0.00026421316,
    -0.0043919175
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " a",
    " cup",
    "\n",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " cup",
    "\n",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " fill",
    " cup",
    " with",
    " water",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " pour",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " drink",
    " water",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cup",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " drink",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " cup",
    " back",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cup",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " put",
    "back",
    "('",
    "cup",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.08876882
    },
    {
      " 0": -0.033353154
    },
    {
      ":": -0.0045676436
    },
    {
      " find": -0.16587976
    },
    {
      " cup": -0.90839875
    },
    {
      " cup": -0.2623013
    },
    {
      "\n": -0.056535497
    },
    {
      " find": -0.022043634
    },
    {
      "('": -0.0047818488
    },
    {
      "cup": -0.00067866227
    },
    {
      "')": -0.0025617091
    },
    {
      "\n": -0.014161341
    },
    {
      " #": -0.010042821
    },
    {
      " 1": -0.00476023
    },
    {
      ":": -0.0010347478
    },
    {
      " grab": -0.16955158
    },
    {
      " the": -0.7946123
    },
    {
      "\n": -0.03243844
    },
    {
      " assert": -0.63976675
    },
    {
      "('": -0.0018483935
    },
    {
      "cup": -0.00020596985
    },
    {
      "')": -0.0015074194
    },
    {
      "\n": -0.0061024716
    },
    {
      " #": -0.5767079
    },
    {
      " 2": -0.008846093
    },
    {
      ":": -0.0012816186
    },
    {
      " fill": -0.7554751
    },
    {
      " cup": -0.37503096
    },
    {
      " with": -0.3480359
    },
    {
      " water": -0.5773113
    },
    {
      "\n": -0.033409297
    },
    {
      " assert": -0.77534443
    },
    {
      "('": -0.0038299803
    },
    {
      "close": -0.04303023
    },
    {
      "'": -0.0087625105
    },
    {
      " to": -0.0010581954
    },
    {
      " '": -0.004364858
    },
    {
      "f": -1.022785
    },
    {
      "auc": -0.0040280493
    },
    {
      "et": -0.0003718351
    },
    {
      "')": -0.019188127
    },
    {
      "\n": -0.0078538945
    },
    {
      " else": -0.002444466
    },
    {
      ":": -0.0029551112
    },
    {
      " find": -0.02506178
    },
    {
      "('": -0.0024980668
    },
    {
      "f": -0.00086531014
    },
    {
      "auc": -0.0005210318
    },
    {
      "et": -0.0002512175
    },
    {
      "')": -0.0036807049
    },
    {
      "\n": -0.009154089
    },
    {
      " pour": -0.71568143
    },
    {
      "('": -0.0073035397
    },
    {
      "water": -0.9371858
    },
    {
      "')": -0.2797275
    },
    {
      "\n": -0.009448758
    },
    {
      " #": -0.0836743
    },
    {
      " 3": -0.010804119
    },
    {
      ":": -0.0012803064
    },
    {
      " drink": -0.12046136
    },
    {
      "\n": -1.3522792
    },
    {
      "\n": -0.14103733
    },
    {
      " tur": -0.79442096
    },
    {
      "('": -0.0019014224
    },
    {
      "close": -0.37651637
    },
    {
      "'": -0.0024794242
    },
    {
      " to": -0.0005750042
    },
    {
      " '": -0.0049317665
    },
    {
      "cup": -0.019011633
    },
    {
      "')": -0.008305578
    },
    {
      "\n": -0.0040469
    },
    {
      " else": -0.0017312987
    },
    {
      ":": -0.0018425409
    },
    {
      " find": -0.46283007
    },
    {
      "('": -0.0014787051
    },
    {
      "cup": -0.0004893054
    },
    {
      "')": -0.0043756324
    },
    {
      "\n": -0.005585066
    },
    {
      " drink": -0.56154066
    },
    {
      "('": -0.002953676
    },
    {
      "cup": -0.030210607
    },
    {
      "')": -0.0019948257
    },
    {
      "\n": -0.22715802
    },
    {
      " #": -0.033074092
    },
    {
      " 4": -0.010729892
    },
    {
      ":": -0.0016832352
    },
    {
      " put": -0.31123286
    },
    {
      " cup": -0.20807356
    },
    {
      " back": -0.13070358
    },
    {
      "\n": -0.031553667
    },
    {
      " put": -0.623148
    },
    {
      "('": -0.0013151594
    },
    {
      "close": -0.11183624
    },
    {
      "'": -0.0024754792
    },
    {
      " to": -0.004912898
    },
    {
      " '": -0.003343589
    },
    {
      "cup": -0.013296608
    },
    {
      "')": -0.0153514305
    },
    {
      "\n": -0.0022237136
    },
    {
      " else": -0.0008480099
    },
    {
      ":": -0.0008387032
    },
    {
      " find": -0.022055455
    },
    {
      "('": -0.0010562862
    },
    {
      "cup": -0.0001779483
    },
    {
      "')": -0.0012712333
    },
    {
      "\n": -0.005533641
    },
    {
      " put": -0.053810723
    },
    {
      "back": -0.63101286
    },
    {
      "('": -0.0032519712
    },
    {
      "cup": -0.00026421316
    },
    {
      "')": -0.0043919175
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.0529890060424805
[(" # 0: walk into bathroom\n walk('bathroom')\n # 1: find sink\n find('sink')\n # 2: turn on the faucet\n turnon('faucet')\n # 3: grab a towel\n find('towel')\n # 4: wipe the sink\n assert('towel' in 'hands')\n else: find('towel')\n grab('towel')\n wipe('sink')\n # 5: turn off the faucet\n turnoff('faucet')\n # 6: grab the soap\n find('soap')\n # 7: wash the sink\n assert('soap' in 'hands')\n else: find('soap')\n grab('soap')\n wash('sink')\n # 8: Done", <OpenAIObject at 0x7f9fb246dcc0> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3393,
    3402,
    3403,
    3408,
    3410,
    3414,
    3418,
    3420,
    3421,
    3423,
    3425,
    3426,
    3431,
    3436,
    3437,
    3442,
    3444,
    3445,
    3448,
    3450,
    3451,
    3453,
    3455,
    3456,
    3461,
    3464,
    3468,
    3470,
    3473,
    3475,
    3476,
    3481,
    3483,
    3485,
    3486,
    3489,
    3491,
    3493,
    3494,
    3496,
    3498,
    3499,
    3504,
    3506,
    3512,
    3513,
    3518,
    3520,
    3521,
    3523,
    3525,
    3527,
    3528,
    3530,
    3532,
    3533,
    3538,
    3542,
    3547,
    3548,
    3555,
    3557,
    3558,
    3560,
    3562,
    3563,
    3566,
    3568,
    3573,
    3575,
    3576,
    3581,
    3582,
    3587,
    3589,
    3590,
    3592,
    3594,
    3596,
    3597,
    3602,
    3604,
    3605,
    3607,
    3609,
    3611,
    3612,
    3617,
    3619,
    3620,
    3623,
    3625,
    3626,
    3628,
    3630,
    3631,
    3636,
    3640,
    3644,
    3646,
    3649,
    3651,
    3652,
    3657,
    3660,
    3662,
    3663,
    3666,
    3668,
    3670,
    3671,
    3673,
    3675,
    3676,
    3681,
    3685,
    3690,
    3691,
    3696,
    3698,
    3700,
    3702,
    3704,
    3705,
    3707,
    3709,
    3710,
    3715,
    3719,
    3724,
    3725,
    3732,
    3734,
    3736,
    3738,
    3739,
    3742,
    3744,
    3749,
    3751,
    3752,
    3757,
    3758,
    3763,
    3765,
    3767,
    3769,
    3771,
    3772,
    3777,
    3779,
    3781,
    3783,
    3785,
    3786,
    3791,
    3793,
    3794,
    3797,
    3799,
    3800,
    3802,
    3804,
    3805
  ],
  "token_logprobs": [
    -0.016097046,
    -0.0064232997,
    -0.0022269397,
    -0.14136854,
    -2.4453676,
    -0.29318652,
    -0.022157218,
    -0.005246351,
    -0.005724914,
    -0.0015779806,
    -0.00013287991,
    -0.0016678318,
    -0.00750704,
    -0.0024478144,
    -0.0029675467,
    -0.0008364372,
    -0.114556044,
    -1.2983487,
    -0.04153233,
    -0.16965581,
    -0.0008345872,
    -0.000526521,
    -0.00011058788,
    -0.0015563098,
    -0.005983319,
    -0.016971895,
    -0.004150082,
    -0.0011189391,
    -0.9207804,
    -0.047521196,
    -1.062937,
    -0.3375195,
    -0.0017201925,
    -0.0023203157,
    -0.04428841,
    -2.2461576,
    -0.05191896,
    -0.0038390146,
    -0.003102484,
    -0.0004602654,
    -0.00034762823,
    -0.0022643965,
    -0.0057593226,
    -0.04192384,
    -0.0062717805,
    -0.00083410944,
    -0.8777105,
    -1.4873697,
    -0.9869784,
    -0.081005536,
    -0.7513177,
    -0.0013436314,
    -0.00070079096,
    -0.0007722504,
    -0.00023714808,
    -0.0025494588,
    -0.0050262925,
    -3.3319867,
    -0.007057101,
    -0.0011860142,
    -0.44138542,
    -0.29466528,
    -0.045329742,
    -0.12976581,
    -1.4966753,
    -0.002537446,
    -1.037014,
    -0.001422417,
    -0.00018605449,
    -0.00322309,
    -0.032542616,
    -0.009367293,
    -0.020700844,
    -0.046497274,
    -0.0078000836,
    -0.0070496565,
    -0.0038785664,
    -0.88447475,
    -0.0021800485,
    -0.00041178783,
    -0.00046324843,
    -2.9041616e-05,
    -0.0048463545,
    -0.0069715665,
    -3.2994816,
    -0.0014630081,
    -0.00016852893,
    -0.00014170136,
    -0.00047773935,
    -0.001975235,
    -0.005526148,
    -0.26564747,
    -0.0014308931,
    -0.066272885,
    -9.305951e-05,
    -0.013111067,
    -0.008253591,
    -0.084193476,
    -0.008281834,
    -0.0022025649,
    -0.4701647,
    -0.02995367,
    -0.21419223,
    -0.009667564,
    -0.00081406545,
    -0.0013257839,
    -0.016526889,
    -0.14580539,
    -0.003443945,
    -0.00091100833,
    -0.00070556306,
    -0.00037934902,
    -0.00017961723,
    -0.0020977345,
    -0.08297897,
    -0.02096187,
    -0.0030801224,
    -0.001983776,
    -2.4980023,
    -1.5015608,
    -1.9450483,
    -0.06321554,
    -0.06026434,
    -0.001241572,
    -0.0003985491,
    -0.00016328375,
    -0.002286022,
    -0.0065405252,
    -0.88250047,
    -0.0078716185,
    -0.00086626475,
    -0.34628645,
    -0.2217511,
    -0.5439478,
    -0.0681224,
    -0.60109496,
    -0.0013831421,
    -0.018422302,
    -0.00014575632,
    -0.0014359064,
    -0.007772632,
    -0.0020992889,
    -0.003091662,
    -0.0057276716,
    -0.0043492913,
    -0.0016533223,
    -0.001699057,
    -0.031374924,
    -0.001239782,
    -0.0011755116,
    -9.878341e-05,
    -0.0023126684,
    -0.004818144,
    -0.10147651,
    -0.00078763964,
    -0.00025515142,
    -0.00011082348,
    -0.0015676515,
    -0.0035039384,
    -0.026475495,
    -0.0009244911,
    -0.024492519,
    -0.00011583212,
    -0.0015388172,
    -0.034497153,
    -0.016063971,
    -0.0023847802,
    -0.001885718,
    -1.4411446
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " into",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " turn",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " a",
    " towel",
    "\n",
    " find",
    "('",
    "t",
    "ow",
    "el",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wipe",
    " the",
    " sink",
    "\n",
    " assert",
    "('",
    "t",
    "ow",
    "el",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "t",
    "ow",
    "el",
    "')",
    "\n",
    " grab",
    "('",
    "t",
    "ow",
    "el",
    "')",
    "\n",
    " wipe",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " off",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " turn",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " grab",
    " the",
    " soap",
    "\n",
    " find",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " wash",
    " the",
    " sink",
    "\n",
    " assert",
    "('",
    "so",
    "ap",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " wash",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.016097046
    },
    {
      " 0": -0.0064232997
    },
    {
      ":": -0.0022269397
    },
    {
      " walk": -0.14136854
    },
    {
      " to": -0.37119007
    },
    {
      " bathroom": -0.29318652
    },
    {
      "\n": -0.022157218
    },
    {
      " walk": -0.005246351
    },
    {
      "('": -0.005724914
    },
    {
      "bath": -0.0015779806
    },
    {
      "room": -0.00013287991
    },
    {
      "')": -0.0016678318
    },
    {
      "\n": -0.00750704
    },
    {
      " #": -0.0024478144
    },
    {
      " 1": -0.0029675467
    },
    {
      ":": -0.0008364372
    },
    {
      " find": -0.114556044
    },
    {
      " sink": -1.2983487
    },
    {
      "\n": -0.04153233
    },
    {
      " find": -0.16965581
    },
    {
      "('": -0.0008345872
    },
    {
      "s": -0.000526521
    },
    {
      "ink": -0.00011058788
    },
    {
      "')": -0.0015563098
    },
    {
      "\n": -0.005983319
    },
    {
      " #": -0.016971895
    },
    {
      " 2": -0.004150082
    },
    {
      ":": -0.0011189391
    },
    {
      " turn": -0.9207804
    },
    {
      " on": -0.047521196
    },
    {
      " f": -0.7639191
    },
    {
      " f": -0.3375195
    },
    {
      "auc": -0.0017201925
    },
    {
      "et": -0.0023203157
    },
    {
      "\n": -0.04428841
    },
    {
      " assert": -0.61813366
    },
    {
      "on": -0.05191896
    },
    {
      "('": -0.0038390146
    },
    {
      "f": -0.003102484
    },
    {
      "auc": -0.0004602654
    },
    {
      "et": -0.00034762823
    },
    {
      "')": -0.0022643965
    },
    {
      "\n": -0.0057593226
    },
    {
      " #": -0.04192384
    },
    {
      " 3": -0.0062717805
    },
    {
      ":": -0.00083410944
    },
    {
      " grab": -0.8777105
    },
    {
      " a": -1.4873697
    },
    {
      " towel": -0.9869784
    },
    {
      "\n": -0.081005536
    },
    {
      " find": -0.7513177
    },
    {
      "('": -0.0013436314
    },
    {
      "t": -0.00070079096
    },
    {
      "ow": -0.0007722504
    },
    {
      "el": -0.00023714808
    },
    {
      "')": -0.0025494588
    },
    {
      "\n": -0.0050262925
    },
    {
      " grab": -0.071382284
    },
    {
      " 4": -0.007057101
    },
    {
      ":": -0.0011860142
    },
    {
      " wipe": -0.44138542
    },
    {
      " the": -0.29466528
    },
    {
      " sink": -0.045329742
    },
    {
      "\n": -0.12976581
    },
    {
      " wipe": -0.54511726
    },
    {
      "('": -0.002537446
    },
    {
      "close": -0.44584474
    },
    {
      "ow": -0.001422417
    },
    {
      "el": -0.00018605449
    },
    {
      "'": -0.00322309
    },
    {
      " in": -0.032542616
    },
    {
      " '": -0.009367293
    },
    {
      "hands": -0.020700844
    },
    {
      "')": -0.046497274
    },
    {
      "\n": -0.0078000836
    },
    {
      " else": -0.0070496565
    },
    {
      ":": -0.0038785664
    },
    {
      " grab": -0.5468627
    },
    {
      "('": -0.0021800485
    },
    {
      "t": -0.00041178783
    },
    {
      "ow": -0.00046324843
    },
    {
      "el": -2.9041616e-05
    },
    {
      "')": -0.0048463545
    },
    {
      "\n": -0.0069715665
    },
    {
      " wipe": -0.1567769
    },
    {
      "('": -0.0014630081
    },
    {
      "t": -0.00016852893
    },
    {
      "ow": -0.00014170136
    },
    {
      "el": -0.00047773935
    },
    {
      "')": -0.001975235
    },
    {
      "\n": -0.005526148
    },
    {
      " wipe": -0.26564747
    },
    {
      "('": -0.0014308931
    },
    {
      "s": -0.066272885
    },
    {
      "ink": -9.305951e-05
    },
    {
      "')": -0.013111067
    },
    {
      "\n": -0.008253591
    },
    {
      " #": -0.084193476
    },
    {
      " 5": -0.008281834
    },
    {
      ":": -0.0022025649
    },
    {
      " turn": -0.4701647
    },
    {
      " off": -0.02995367
    },
    {
      " the": -0.21419223
    },
    {
      " f": -0.009667564
    },
    {
      "auc": -0.00081406545
    },
    {
      "et": -0.0013257839
    },
    {
      "\n": -0.016526889
    },
    {
      " turn": -0.14580539
    },
    {
      "off": -0.003443945
    },
    {
      "('": -0.00091100833
    },
    {
      "f": -0.00070556306
    },
    {
      "auc": -0.00037934902
    },
    {
      "et": -0.00017961723
    },
    {
      "')": -0.0020977345
    },
    {
      "\n": -0.08297897
    },
    {
      " #": -0.02096187
    },
    {
      " 6": -0.0030801224
    },
    {
      ":": -0.001983776
    },
    {
      " put": -1.0795165
    },
    {
      " a": -0.84439427
    },
    {
      " soap": -1.9450483
    },
    {
      "\n": -0.06321554
    },
    {
      " find": -0.06026434
    },
    {
      "('": -0.001241572
    },
    {
      "so": -0.0003985491
    },
    {
      "ap": -0.00016328375
    },
    {
      "')": -0.002286022
    },
    {
      "\n": -0.0065405252
    },
    {
      " grab": -0.5875996
    },
    {
      " 7": -0.0078716185
    },
    {
      ":": -0.00086626475
    },
    {
      " wash": -0.34628645
    },
    {
      " the": -0.2217511
    },
    {
      " sink": -0.5439478
    },
    {
      "\n": -0.0681224
    },
    {
      " assert": -0.60109496
    },
    {
      "('": -0.0013831421
    },
    {
      "so": -0.018422302
    },
    {
      "ap": -0.00014575632
    },
    {
      "'": -0.0014359064
    },
    {
      " in": -0.007772632
    },
    {
      " '": -0.0020992889
    },
    {
      "hands": -0.003091662
    },
    {
      "')": -0.0057276716
    },
    {
      "\n": -0.0043492913
    },
    {
      " else": -0.0016533223
    },
    {
      ":": -0.001699057
    },
    {
      " find": -0.031374924
    },
    {
      "('": -0.001239782
    },
    {
      "so": -0.0011755116
    },
    {
      "ap": -9.878341e-05
    },
    {
      "')": -0.0023126684
    },
    {
      "\n": -0.004818144
    },
    {
      " grab": -0.10147651
    },
    {
      "('": -0.00078763964
    },
    {
      "so": -0.00025515142
    },
    {
      "ap": -0.00011082348
    },
    {
      "')": -0.0015676515
    },
    {
      "\n": -0.0035039384
    },
    {
      " wash": -0.026475495
    },
    {
      "('": -0.0009244911
    },
    {
      "s": -0.024492519
    },
    {
      "ink": -0.00011583212
    },
    {
      "')": -0.0015388172
    },
    {
      "\n": -0.034497153
    },
    {
      " #": -0.016063971
    },
    {
      " 8": -0.0023847802
    },
    {
      ":": -0.001885718
    },
    {
      " put": -1.4229646
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.5701229572296143
[(" # 0: find phone\n find('phone')\n # 1: pick up phone\n assert('close' to 'phone')\n else: find('phone')\n grab('phone')\n # 2: put phone to ear\n turnto('phone')\n putin('phone', 'ear')", <OpenAIObject at 0x7f9f60008e50> JSON: {
  "text_offset": [
    3377,
    3379,
    3381,
    3382,
    3387,
    3393,
    3394,
    3399,
    3401,
    3406,
    3408,
    3409,
    3411,
    3413,
    3414,
    3419,
    3422,
    3428,
    3429,
    3436,
    3438,
    3443,
    3444,
    3447,
    3449,
    3454,
    3456,
    3457,
    3462,
    3463,
    3468,
    3470,
    3475,
    3477,
    3478,
    3483,
    3485,
    3490,
    3492,
    3493,
    3495,
    3497,
    3498,
    3502,
    3508,
    3511,
    3515,
    3516,
    3520,
    3522,
    3523,
    3525,
    3530,
    3532,
    3533,
    3537,
    3539,
    3541,
    3546,
    3548,
    3550,
    3553
  ],
  "token_logprobs": [
    -0.018531835,
    -0.008579617,
    -0.0018916896,
    -0.691579,
    -0.21879585,
    -0.039587695,
    -0.045269184,
    -0.00214092,
    -0.001310147,
    -0.0026711915,
    -0.009107892,
    -0.004470344,
    -0.0025338614,
    -0.001090837,
    -2.023519,
    -0.038579885,
    -0.33834147,
    -0.01980642,
    -0.53482044,
    -0.00190608,
    -0.009948478,
    -0.0029533175,
    -0.0015826372,
    -0.0023695459,
    -0.0005935529,
    -0.005259833,
    -0.0064955275,
    -0.001929671,
    -0.0016618,
    -0.0038088579,
    -0.0015900383,
    -0.00035180151,
    -0.0021002456,
    -0.007910666,
    -0.07425818,
    -0.0009204334,
    -0.00017866449,
    -0.0020176987,
    -0.026603665,
    -0.846654,
    -0.011895766,
    -0.0012381112,
    -1.7158763,
    -0.268091,
    -1.3164327,
    -0.20294276,
    -0.033838447,
    -1.1049166,
    -5.5149267e-05,
    -0.00022826564,
    -0.0007785713,
    -0.0033427516,
    -0.0015164923,
    -0.0043686293,
    -2.1928194,
    -2.973679,
    -0.007510944,
    -0.19508372,
    -0.4466872,
    -0.0067250286,
    -0.023741372,
    -0.0019271622
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " phone",
    "\n",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " pick",
    " up",
    " phone",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " phone",
    " to",
    " ear",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "phone",
    "')",
    "\n",
    " put",
    "in",
    "('",
    "phone",
    "',",
    " '",
    "ear",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018531835
    },
    {
      " 0": -0.008579617
    },
    {
      ":": -0.0018916896
    },
    {
      " find": -0.691579
    },
    {
      " phone": -0.21879585
    },
    {
      "\n": -0.039587695
    },
    {
      " find": -0.045269184
    },
    {
      "('": -0.00214092
    },
    {
      "phone": -0.001310147
    },
    {
      "')": -0.0026711915
    },
    {
      "\n": -0.009107892
    },
    {
      " #": -0.004470344
    },
    {
      " 1": -0.0025338614
    },
    {
      ":": -0.001090837
    },
    {
      " grab": -0.18449372
    },
    {
      " up": -0.038579885
    },
    {
      " phone": -0.33834147
    },
    {
      "\n": -0.01980642
    },
    {
      " assert": -0.53482044
    },
    {
      "('": -0.00190608
    },
    {
      "close": -0.009948478
    },
    {
      "'": -0.0029533175
    },
    {
      " to": -0.0015826372
    },
    {
      " '": -0.0023695459
    },
    {
      "phone": -0.0005935529
    },
    {
      "')": -0.005259833
    },
    {
      "\n": -0.0064955275
    },
    {
      " else": -0.001929671
    },
    {
      ":": -0.0016618
    },
    {
      " find": -0.0038088579
    },
    {
      "('": -0.0015900383
    },
    {
      "phone": -0.00035180151
    },
    {
      "')": -0.0021002456
    },
    {
      "\n": -0.007910666
    },
    {
      " grab": -0.07425818
    },
    {
      "('": -0.0009204334
    },
    {
      "phone": -0.00017866449
    },
    {
      "')": -0.0020176987
    },
    {
      "\n": -0.026603665
    },
    {
      " assert": -0.70346653
    },
    {
      " 2": -0.011895766
    },
    {
      ":": -0.0012381112
    },
    {
      " look": -1.4777105
    },
    {
      " phone": -0.268091
    },
    {
      " in": -1.0910709
    },
    {
      " ear": -0.20294276
    },
    {
      "\n": -0.033838447
    },
    {
      " tur": -1.1049166
    },
    {
      "nt": -5.5149267e-05
    },
    {
      "o": -0.00022826564
    },
    {
      "('": -0.0007785713
    },
    {
      "phone": -0.0033427516
    },
    {
      "')": -0.0015164923
    },
    {
      "\n": -0.0043686293
    },
    {
      " point": -0.9567717
    },
    {
      "on": -0.2209469
    },
    {
      "('": -0.007510944
    },
    {
      "phone": -0.19508372
    },
    {
      "',": -0.4466872
    },
    {
      " '": -0.0067250286
    },
    {
      "ear": -0.023741372
    },
    {
      "')": -0.0019271622
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 6.042765855789185
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: turn to toilet\n turnto('toilet')\n lookat('toilet')\n # 3: sit on toilet\n assert('close' to 'toilet')\n else: find('toilet')\n else: turnto('toilet')\n sit('toilet')\n # 4: use the toilet\n def go_to_kitchen():\n # 0: walk to kitchen\n walk('kitchen')\n # 1: find kitchen counter\n find('kitchen_counter')\n # 2: turn to kitchen counter\n turnto('kitchen_counter')\n lookat('kitchen_counter')\n # 3: open a cupboard\n assert('close' to 'cupboard')\n else: find('cupboard')\n open('cupboard')\n # 4: grab something from inside the cupboard\n grab('<obj>')", <OpenAIObject at 0x7f9fb246df40> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3398,
    3399,
    3404,
    3406,
    3410,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3434,
    3435,
    3440,
    3442,
    3444,
    3448,
    3450,
    3451,
    3453,
    3455,
    3456,
    3461,
    3464,
    3471,
    3472,
    3476,
    3478,
    3479,
    3481,
    3483,
    3487,
    3489,
    3490,
    3495,
    3497,
    3499,
    3501,
    3505,
    3507,
    3508,
    3510,
    3512,
    3513,
    3517,
    3520,
    3527,
    3528,
    3535,
    3537,
    3542,
    3543,
    3546,
    3548,
    3550,
    3554,
    3556,
    3557,
    3562,
    3563,
    3568,
    3570,
    3572,
    3576,
    3578,
    3579,
    3584,
    3585,
    3589,
    3591,
    3592,
    3594,
    3596,
    3600,
    3602,
    3603,
    3607,
    3609,
    3611,
    3615,
    3617,
    3618,
    3620,
    3622,
    3623,
    3627,
    3631,
    3638,
    3639,
    3643,
    3646,
    3647,
    3649,
    3650,
    3653,
    3657,
    3660,
    3661,
    3663,
    3665,
    3666,
    3671,
    3674,
    3682,
    3683,
    3688,
    3690,
    3693,
    3697,
    3699,
    3700,
    3702,
    3704,
    3705,
    3710,
    3718,
    3726,
    3727,
    3732,
    3734,
    3737,
    3741,
    3742,
    3749,
    3751,
    3752,
    3754,
    3756,
    3757,
    3762,
    3765,
    3773,
    3781,
    3782,
    3786,
    3788,
    3789,
    3791,
    3794,
    3798,
    3799,
    3806,
    3808,
    3809,
    3814,
    3816,
    3818,
    3821,
    3825,
    3826,
    3833,
    3835,
    3836,
    3838,
    3840,
    3841,
    3846,
    3848,
    3852,
    3857,
    3858,
    3865,
    3867,
    3872,
    3873,
    3876,
    3878,
    3881,
    3886,
    3888,
    3889,
    3894,
    3895,
    3900,
    3902,
    3905,
    3910,
    3912,
    3913,
    3918,
    3920,
    3923,
    3928,
    3930,
    3931,
    3933,
    3935,
    3936,
    3941,
    3951,
    3956,
    3963,
    3967,
    3971,
    3976,
    3977,
    3982,
    3984,
    3985,
    3988,
    3989
  ],
  "token_logprobs": [
    -0.015420552,
    -0.00731771,
    -0.0025900328,
    -0.13506323,
    -0.25823364,
    -0.3785824,
    -0.019525763,
    -0.0045927917,
    -0.0034371873,
    -0.0022983898,
    -0.00015672446,
    -0.001658099,
    -0.006865693,
    -0.0020110107,
    -0.0030925004,
    -0.0004737435,
    -0.11400691,
    -0.045693792,
    -0.021231849,
    -0.24608669,
    -0.0008162131,
    -0.0006669723,
    -0.00024287197,
    -0.0018391965,
    -0.0049291924,
    -0.015660463,
    -0.0048794765,
    -0.0005773893,
    -3.017047,
    -1.1713809,
    -0.25623223,
    -0.06506142,
    -0.09051674,
    -2.7490969e-05,
    -0.00026123386,
    -0.0006139479,
    -0.00035704856,
    -0.00021586417,
    -0.0011892958,
    -0.0066453414,
    -0.9022882,
    -0.00077129586,
    -0.0004453587,
    -0.0003278922,
    -0.00027494476,
    -0.0005859189,
    -0.004032655,
    -0.044319317,
    -0.008155692,
    -0.00077666395,
    -0.36613283,
    -0.057043035,
    -0.34907815,
    -0.022273377,
    -0.6237274,
    -0.0011471653,
    -0.0018906139,
    -0.0029639006,
    -0.00057059067,
    -0.0016403678,
    -0.0014038534,
    -0.00024608686,
    -0.0046522534,
    -0.0038080204,
    -0.0015731436,
    -0.0014342356,
    -0.013486471,
    -0.001145135,
    -0.00078859425,
    -0.00016161484,
    -0.0012683686,
    -0.0052972226,
    -0.35859057,
    -0.0042483653,
    -0.019004468,
    -6.9690854e-05,
    -8.00667e-05,
    -0.00061609555,
    -0.0010167877,
    -7.541475e-05,
    -0.0020940315,
    -0.0034416723,
    -0.005827848,
    -0.0010488285,
    -0.0009144692,
    -0.0007950352,
    -0.0012318448,
    -0.08600521,
    -0.036370236,
    -0.007999466,
    -0.001814357,
    -2.1704836,
    -1.7092142,
    -0.00741408,
    -0.03230244,
    -3.6863573,
    -1.574951,
    -0.0022219217,
    -0.97168905,
    -0.0015170283,
    -0.9384459,
    -0.0013547902,
    -0.061884243,
    -0.011753785,
    -0.02370091,
    -0.005524949,
    -0.0020343624,
    -0.024641631,
    -0.0227368,
    -0.017265908,
    -0.017688313,
    -0.0033503475,
    -0.0023431361,
    -0.0018780144,
    -0.00062552054,
    -0.002034602,
    -0.005336112,
    -0.001564907,
    -0.0024796636,
    -0.00070830766,
    -0.017116131,
    -0.87111104,
    -0.047429264,
    -0.0133636575,
    -0.10681806,
    -0.0011009781,
    -0.0029141044,
    -0.0003625331,
    -0.017869363,
    -0.0005899748,
    -0.001393407,
    -0.004943028,
    -0.0074538346,
    -0.004707769,
    -0.0007363996,
    -2.0105493,
    -0.013922211,
    -0.09369942,
    -0.019844666,
    -0.012364969,
    -0.015581818,
    -2.1649737e-05,
    -0.00031835173,
    -0.0005318864,
    -0.0016839514,
    -0.00018474413,
    -0.0017816329,
    -0.000440229,
    -0.0008992545,
    -0.005095487,
    -0.0428063,
    -0.0003901998,
    -0.00046789853,
    -0.0009617781,
    -0.00027148862,
    -0.0012900336,
    -0.00022963606,
    -0.0012701586,
    -0.03334077,
    -0.0051308344,
    -0.0066698845,
    -0.0008487251,
    -1.5230662,
    -4.069379,
    -0.7675664,
    -0.0026071258,
    -0.066437535,
    -0.44275984,
    -0.0007894305,
    -0.002096302,
    -0.00197213,
    -0.00034285896,
    -0.0017999666,
    -0.057172462,
    -0.0007539364,
    -0.0039932784,
    -0.0044174204,
    -0.0008561208,
    -0.0009253256,
    -0.0021419965,
    -0.00080404343,
    -0.0006650631,
    -0.0016392922,
    -0.0018128045,
    -0.005853749,
    -0.20167832,
    -0.0015770249,
    -0.0003940164,
    -0.0006991211,
    -0.0016019199,
    -1.1168252,
    -0.054492038,
    -0.0073822555,
    -0.0009935767,
    -0.78636205,
    -2.1426344,
    -0.6107115,
    -3.08266,
    -1.2905848,
    -0.0039793933,
    -0.0014342356,
    -0.019500054,
    -0.25194538,
    -0.008690479,
    -2.762002,
    -0.40229154,
    -0.00792713,
    -0.008720842
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " to",
    " toilet",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " sit",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " use",
    " the",
    " toilet",
    "\n",
    " def",
    " go",
    "_",
    "to",
    "_",
    "kit",
    "chen",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " kitchen",
    "\n",
    " walk",
    "('",
    "kit",
    "chen",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " kitchen",
    " counter",
    "\n",
    " find",
    "('",
    "kit",
    "chen",
    "_",
    "counter",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " to",
    " kitchen",
    " counter",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "kit",
    "chen",
    "_",
    "counter",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "kit",
    "chen",
    "_",
    "counter",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " open",
    " a",
    " cup",
    "board",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cup",
    "board",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cup",
    "board",
    "')",
    "\n",
    " open",
    "('",
    "cup",
    "board",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " something",
    " from",
    " inside",
    " the",
    " cup",
    "board",
    "\n",
    " grab",
    "('",
    "<",
    "obj",
    ">",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.015420552
    },
    {
      " 0": -0.00731771
    },
    {
      ":": -0.0025900328
    },
    {
      " walk": -0.13506323
    },
    {
      " to": -0.25823364
    },
    {
      " bathroom": -0.3785824
    },
    {
      "\n": -0.019525763
    },
    {
      " walk": -0.0045927917
    },
    {
      "('": -0.0034371873
    },
    {
      "bath": -0.0022983898
    },
    {
      "room": -0.00015672446
    },
    {
      "')": -0.001658099
    },
    {
      "\n": -0.006865693
    },
    {
      " #": -0.0020110107
    },
    {
      " 1": -0.0030925004
    },
    {
      ":": -0.0004737435
    },
    {
      " find": -0.11400691
    },
    {
      " toilet": -0.045693792
    },
    {
      "\n": -0.021231849
    },
    {
      " find": -0.24608669
    },
    {
      "('": -0.0008162131
    },
    {
      "to": -0.0006669723
    },
    {
      "ilet": -0.00024287197
    },
    {
      "')": -0.0018391965
    },
    {
      "\n": -0.0049291924
    },
    {
      " #": -0.015660463
    },
    {
      " 2": -0.0048794765
    },
    {
      ":": -0.0005773893
    },
    {
      " sit": -0.7384104
    },
    {
      " on": -0.58084005
    },
    {
      " toilet": -0.25623223
    },
    {
      "\n": -0.06506142
    },
    {
      " tur": -0.09051674
    },
    {
      "nt": -2.7490969e-05
    },
    {
      "o": -0.00026123386
    },
    {
      "('": -0.0006139479
    },
    {
      "to": -0.00035704856
    },
    {
      "ilet": -0.00021586417
    },
    {
      "')": -0.0011892958
    },
    {
      "\n": -0.0066453414
    },
    {
      " #": -0.56305003
    },
    {
      "at": -0.00077129586
    },
    {
      "('": -0.0004453587
    },
    {
      "to": -0.0003278922
    },
    {
      "ilet": -0.00027494476
    },
    {
      "')": -0.0005859189
    },
    {
      "\n": -0.004032655
    },
    {
      " #": -0.044319317
    },
    {
      " 3": -0.008155692
    },
    {
      ":": -0.00077666395
    },
    {
      " sit": -0.36613283
    },
    {
      " on": -0.057043035
    },
    {
      " toilet": -0.34907815
    },
    {
      "\n": -0.022273377
    },
    {
      " assert": -0.6237274
    },
    {
      "('": -0.0011471653
    },
    {
      "close": -0.0018906139
    },
    {
      "'": -0.0029639006
    },
    {
      " to": -0.00057059067
    },
    {
      " '": -0.0016403678
    },
    {
      "to": -0.0014038534
    },
    {
      "ilet": -0.00024608686
    },
    {
      "')": -0.0046522534
    },
    {
      "\n": -0.0038080204
    },
    {
      " else": -0.0015731436
    },
    {
      ":": -0.0014342356
    },
    {
      " find": -0.013486471
    },
    {
      "('": -0.001145135
    },
    {
      "to": -0.00078859425
    },
    {
      "ilet": -0.00016161484
    },
    {
      "')": -0.0012683686
    },
    {
      "\n": -0.0052972226
    },
    {
      " else": -0.35859057
    },
    {
      ":": -0.0042483653
    },
    {
      " tur": -0.019004468
    },
    {
      "nt": -6.9690854e-05
    },
    {
      "o": -8.00667e-05
    },
    {
      "('": -0.00061609555
    },
    {
      "to": -0.0010167877
    },
    {
      "ilet": -7.541475e-05
    },
    {
      "')": -0.0020940315
    },
    {
      "\n": -0.0034416723
    },
    {
      " sit": -0.005827848
    },
    {
      "('": -0.0010488285
    },
    {
      "to": -0.0009144692
    },
    {
      "ilet": -0.0007950352
    },
    {
      "')": -0.0012318448
    },
    {
      "\n": -0.08600521
    },
    {
      " #": -0.036370236
    },
    {
      " 4": -0.007999466
    },
    {
      ":": -0.001814357
    },
    {
      " flush": -1.3678665
    },
    {
      " toilet": -0.225955
    },
    {
      " toilet": -0.00741408
    },
    {
      "\n": -0.03230244
    },
    {
      " use": -0.8167027
    },
    {
      " go": -1.574951
    },
    {
      "_": -0.0022219217
    },
    {
      "sh": -0.7134836
    },
    {
      "_": -0.0015170283
    },
    {
      "kit": -0.9384459
    },
    {
      "chen": -0.0013547902
    },
    {
      "():": -0.061884243
    },
    {
      "\n": -0.011753785
    },
    {
      " #": -0.02370091
    },
    {
      " 0": -0.005524949
    },
    {
      ":": -0.0020343624
    },
    {
      " walk": -0.024641631
    },
    {
      " to": -0.0227368
    },
    {
      " kitchen": -0.017265908
    },
    {
      "\n": -0.017688313
    },
    {
      " walk": -0.0033503475
    },
    {
      "('": -0.0023431361
    },
    {
      "kit": -0.0018780144
    },
    {
      "chen": -0.00062552054
    },
    {
      "')": -0.002034602
    },
    {
      "\n": -0.005336112
    },
    {
      " #": -0.001564907
    },
    {
      " 1": -0.0024796636
    },
    {
      ":": -0.00070830766
    },
    {
      " find": -0.017116131
    },
    {
      " kitchen": -0.87111104
    },
    {
      " counter": -0.047429264
    },
    {
      "\n": -0.0133636575
    },
    {
      " find": -0.10681806
    },
    {
      "('": -0.0011009781
    },
    {
      "kit": -0.0029141044
    },
    {
      "chen": -0.0003625331
    },
    {
      "_": -0.017869363
    },
    {
      "counter": -0.0005899748
    },
    {
      "')": -0.001393407
    },
    {
      "\n": -0.004943028
    },
    {
      " #": -0.0074538346
    },
    {
      " 2": -0.004707769
    },
    {
      ":": -0.0007363996
    },
    {
      " find": -1.1811856
    },
    {
      " to": -0.013922211
    },
    {
      " kitchen": -0.09369942
    },
    {
      " counter": -0.019844666
    },
    {
      "\n": -0.012364969
    },
    {
      " tur": -0.015581818
    },
    {
      "nt": -2.1649737e-05
    },
    {
      "o": -0.00031835173
    },
    {
      "('": -0.0005318864
    },
    {
      "kit": -0.0016839514
    },
    {
      "chen": -0.00018474413
    },
    {
      "_": -0.0017816329
    },
    {
      "counter": -0.000440229
    },
    {
      "')": -0.0008992545
    },
    {
      "\n": -0.005095487
    },
    {
      " look": -0.0428063
    },
    {
      "at": -0.0003901998
    },
    {
      "('": -0.00046789853
    },
    {
      "kit": -0.0009617781
    },
    {
      "chen": -0.00027148862
    },
    {
      "_": -0.0012900336
    },
    {
      "counter": -0.00022963606
    },
    {
      "')": -0.0012701586
    },
    {
      "\n": -0.03334077
    },
    {
      " #": -0.0051308344
    },
    {
      " 3": -0.0066698845
    },
    {
      ":": -0.0008487251
    },
    {
      " grab": -1.2227123
    },
    {
      " the": -1.3061411
    },
    {
      " cup": -0.7675664
    },
    {
      "board": -0.0026071258
    },
    {
      "\n": -0.066437535
    },
    {
      " assert": -0.44275984
    },
    {
      "('": -0.0007894305
    },
    {
      "close": -0.002096302
    },
    {
      "'": -0.00197213
    },
    {
      " to": -0.00034285896
    },
    {
      " '": -0.0017999666
    },
    {
      "cup": -0.057172462
    },
    {
      "board": -0.0007539364
    },
    {
      "')": -0.0039932784
    },
    {
      "\n": -0.0044174204
    },
    {
      " else": -0.0008561208
    },
    {
      ":": -0.0009253256
    },
    {
      " find": -0.0021419965
    },
    {
      "('": -0.00080404343
    },
    {
      "cup": -0.0006650631
    },
    {
      "board": -0.0016392922
    },
    {
      "')": -0.0018128045
    },
    {
      "\n": -0.005853749
    },
    {
      " open": -0.20167832
    },
    {
      "('": -0.0015770249
    },
    {
      "cup": -0.0003940164
    },
    {
      "board": -0.0006991211
    },
    {
      "')": -0.0016019199
    },
    {
      "<|endoftext|>": -0.41891304
    },
    {
      " #": -0.054492038
    },
    {
      " 4": -0.0073822555
    },
    {
      ":": -0.0009935767
    },
    {
      " grab": -0.78636205
    },
    {
      " a": -0.51687986
    },
    {
      " from": -0.6107115
    },
    {
      " the": -0.6486676
    },
    {
      "\n": -0.50616956
    },
    {
      " cup": -0.0039793933
    },
    {
      "board": -0.0014342356
    },
    {
      "\n": -0.019500054
    },
    {
      " grab": -0.25194538
    },
    {
      "('": -0.008690479
    },
    {
      "something": -0.47043237
    },
    {
      "obj": -0.40229154
    },
    {
      ">": -0.00792713
    },
    {
      "')": -0.008720842
    }
  ]
})]
experiment time1 on environment scene4
Turn on computer {'script': ['[Find] <laptop> (1)', '[Find] <powersocket> (1)', '[Plug] <laptop> (1) <powersocket> (1)', '[Open] <laptop> (1)', '[Press] <power_button> (1)'], 'assert_script': ['[Find] <laptop> (1)', '[Find] <powersocket> (1)', '[Plug] <laptop> (1) <powersocket> (1)', "assert('close' to 'laptop')", 'else: [Find] <laptop> (1)', '[Open] <laptop> (1)', '[Press] <power_button> (1)']}
Clean toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Flush] <toilet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <toilet_brush> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', "assert('toilet_brush' in 'hands')", 'else: [Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Flush] <toilet> (1)']}
Pick up spare change on dresser {'script': ['[Walk] <bedroom> (1)', '[Find] <dresser> (1)', '[Open] <dresser> (1)', '[Turnto] <dresser> (1)', '[Lookat] <dresser> (1)', '[Grab] <spare_change> (1)', '[Close] <dresser> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <dresser> (1)', "assert('close' to 'dresser')", 'else: [Find] <dresser> (1)', '[Open] <dresser> (1)', '[Turnto] <dresser> (1)', '[Lookat] <dresser> (1)', "assert('close' to 'spare_change')", 'else: [Find] <spare_change> (1)', '[Grab] <spare_change> (1)', "assert('close' to 'dresser')", 'else: [Find] <dresser> (1)', '[Close] <dresser> (1)']}
Turn on TV {'script': ['[Walk] <living_room> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)'], 'assert_script': ['[Walk] <living_room> (1)', '[Find] <television> (1)', "assert('close' to 'television')", 'else: [Find] <television> (1)', '[Switchon] <television> (1)']}
Hang up jacket {'script': ['[Walk] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Grab] <clothes_jacket> (1)', '[Puton] <clothes_jacket> (1) <hanger> (1)', '[Putback] <hanger> (1) <closet> (1)'], 'assert_script': ['[Walk] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Grab] <clothes_jacket> (1)', "assert('clothes_jacket' in 'hands')", 'else: [Grab] <clothes_jacket> (1)', '[Puton] <clothes_jacket> (1) <hanger> (1)', '[Putback] <hanger> (1) <closet> (1)']}
Sit {'script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)']}
Wash sink {'script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <faucet> (1)', '[Pour] <detergent> (1)', '[Wash] <sink> (1)', '[Turnoff] <faucet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <faucet> (1)', "assert('detergent' in 'hands')", 'else: [Find] <detergent> (1)', '[Pour] <detergent> (1)', '[Wash] <sink> (1)', '[Turnoff] <faucet> (1)']}
Sleep {'script': ['[Close] <eyes> (1)'], 'assert_script': ['[Close] <eyes> (1)']}
Put on glasses {'script': ['[Find] <glasses> (1)', '[Grab] <glasses> (1)', '[Puton] <glasses> (1)', '[Turnto] <glasses> (1)', '[Lookat] <glasses> (1)'], 'assert_script': ['[Find] <glasses> (1)', '[Grab] <glasses> (1)', '[Puton] <glasses> (1)', '[Turnto] <glasses> (1)', '[Lookat] <glasses> (1)']}
Start computer {'script': ['[Find] <laptop> (1)', '[Open] <laptop> (1)', '[Find] <powersocket> (1)', '[Plugin] <laptop> (1)', '[Turnto] <laptop> (1)', '[Switchon] <laptop> (1)'], 'assert_script': ['[Find] <laptop> (1)', "assert('close' to 'laptop')", 'else: [Find] <laptop> (1)', '[Open] <laptop> (1)', '[Find] <powersocket> (1)', "assert('close' to 'powersocket')", 'else: [Find] <powersocket> (1)', '[Plugin] <laptop> (1)', '[Turnto] <laptop> (1)', '[Switchon] <laptop> (1)']}
Put alarm clock in bedroom {'script': ['[Find] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Putin] <alarm_clock> (1) <bedroom> (1)'], 'assert_script': ['[Find] <alarm_clock> (1)', '[Walk] <bedroom> (1)', "assert('close' to 'alarm_clock')", 'else: [Find] <alarm_clock> (1)', '[Putin] <alarm_clock> (1) <bedroom> (1)']}
Sit in chair {'script': ['[Find] <chair> (1)', '[Grab] <chair> (1)', '[Turnto] <chair> (1)', '[Pointat] <chair> (1)', '[Sit] <chair> (1)', '[Lookat] <chair> (1)', '[Turnto] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Grab] <chair> (1)', "assert('chair' in 'hands')", 'else: [Grab] <chair> (1)', '[Turnto] <chair> (1)', "assert('chair' in 'hands')", 'else: [Grab] <chair> (1)', '[Pointat] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Lookat] <chair> (1)', '[Turnto] <chair> (1)']}
Shut off alarm {'script': ['[Find] <alarm_clock> (1)', '[Switchoff] <alarm_clock> (1)'], 'assert_script': ['[Find] <alarm_clock> (1)', '[Switchoff] <alarm_clock> (1)']}
Take nap {'script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Lie] <bed> (1)', '[Switchoff] <light> (1)'], 'assert_script': ['[Find] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Lie] <bed> (1)', '[Switchoff] <light> (1)']}
Use computer {'script': ['[Find] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Switchon] <computer> (1)', '[Lookat] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Pointat] <mousepad> (1)', '[Move] <mouse> (1)', '[Find] <keyboard> (1)', '[Grab] <keyboard> (1)', '[Pointat] <keyboard> (1)', '[Type] <keyboard> (1)'], 'assert_script': ['[Find] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Lookat] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Pointat] <mousepad> (1)', '[Move] <mouse> (1)', '[Find] <keyboard> (1)', '[Grab] <keyboard> (1)', '[Pointat] <keyboard> (1)', '[Type] <keyboard> (1)']}
Wash face {'script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <tap> (1)', '[Wash] <face> (1)', '[Turnoff] <tap> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <tap> (1)', "assert('close' to 'sink')", 'else: [Find] <sink> (1)', '[Wash] <face> (1)', '[Turnoff] <tap> (1)']}
Read newspaper {'script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Read] <newspaper> (1)'], 'assert_script': ['[Find] <newspaper> (1)', "assert('close' to 'newspaper')", 'else: [Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Read] <newspaper> (1)']}
Drink {'script': ['[Find] <cup> (1)', '[Grab] <cup> (1)', '[Pour] <cup> (1)', '[Drink] <cup> (1)', '[Putback] <cup> (1)'], 'assert_script': ['[Find] <cup> (1)', '[Grab] <cup> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Pour] <cup> (1)', "assert('close' to 'cup')", 'else: [Find] <cup> (1)', '[Drink] <cup> (1)', "assert('close' to 'cup')", 'else: [Find] <cup> (1)', '[Putback] <cup> (1)']}
Clean bathroom {'script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <faucet> (1)', '[Find] <towel> (1)', '[Grab] <towel> (1)', '[Wipe] <sink> (1)', '[Turnoff] <faucet> (1)', '[Find] <soap> (1)', '[Grab] <soap> (1)', '[Wash] <sink> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <faucet> (1)', '[Find] <towel> (1)', "assert('towel' in 'hands')", 'else: [Find] <towel> (1)', '[Grab] <towel> (1)', '[Wipe] <sink> (1)', '[Turnoff] <faucet> (1)', '[Find] <soap> (1)', "assert('soap' in 'hands')", 'else: [Find] <soap> (1)', '[Grab] <soap> (1)', '[Wash] <sink> (1)']}
Pick up phone {'script': ['[Find] <phone> (1)', '[Grab] <phone> (1)', '[Turnto] <phone> (1)', '[Putin] <phone> (1) <ear> (1)'], 'assert_script': ['[Find] <phone> (1)', "assert('close' to 'phone')", 'else: [Find] <phone> (1)', '[Grab] <phone> (1)', '[Turnto] <phone> (1)', '[Putin] <phone> (1) <ear> (1)']}
Go to toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', '[Sit] <toilet> (1)', '[Walk] <kitchen> (1)', '[Find] <kitchen_counter> (1)', '[Turnto] <kitchen_counter> (1)', '[Lookat] <kitchen_counter> (1)', '[Open] <cupboard> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', 'else: [Turnto] <toilet> (1)', '[Sit] <toilet> (1)', '[Walk] <kitchen> (1)', '[Find] <kitchen_counter> (1)', '[Turnto] <kitchen_counter> (1)', '[Lookat] <kitchen_counter> (1)', "assert('close' to 'cupboard')", 'else: [Find] <cupboard> (1)', '[Open] <cupboard> (1)']}
experiment time1 on environment scene4
Turn on computer
script before ['[Find] <laptop> (1)', '[Find] <powersocket> (1)', '[Plug] <laptop> (1) <powersocket> (1)', '[Open] <laptop> (1)', '[Press] <power_button> (1)']
illegal action Unknown action "PLUG"  be deleted
illegal action Unknown action "PRESS"  be deleted
illegal action Unknown action "END"  be deleted
Clean toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Flush] <toilet> (1)']
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action Unknown action "FLUSH"  be deleted
illegal action Unknown action "END"  be deleted
Pick up spare change on dresser
script before ['[Walk] <bedroom> (1)', '[Find] <dresser> (1)', '[Open] <dresser> (1)', '[Turnto] <dresser> (1)', '[Lookat] <dresser> (1)', '[Grab] <spare_change> (1)', '[Close] <dresser> (1)']
illegal action ('spare_change', 1) does not exist in the environment  be deleted
illegal action ('spare_change', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Turn on TV
script before ['[Walk] <living_room> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)']
illegal action 'living_room'  be deleted
illegal action Unknown action "END"  be deleted
Hang up jacket
script before ['[Walk] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Grab] <clothes_jacket> (1)', '[Puton] <clothes_jacket> (1) <hanger> (1)', '[Putback] <hanger> (1) <closet> (1)']
illegal action ('closet', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "PUTON". Got 2, expected 1  be deleted
illegal action ('closet', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Sit
script before ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)']
illegal action Unknown action "END"  be deleted
Wash sink
script before ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <faucet> (1)', '[Pour] <detergent> (1)', '[Wash] <sink> (1)', '[Turnoff] <faucet> (1)']
illegal action Unknown action "TURNON"  be deleted
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action Unknown action "TURNOFF"  be deleted
illegal action Unknown action "END"  be deleted
Sleep
script before ['[Close] <eyes> (1)']
illegal action ('eyes', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Put on glasses
script before ['[Find] <glasses> (1)', '[Grab] <glasses> (1)', '[Puton] <glasses> (1)', '[Turnto] <glasses> (1)', '[Lookat] <glasses> (1)']
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Start computer
script before ['[Find] <laptop> (1)', '[Open] <laptop> (1)', '[Find] <powersocket> (1)', '[Plugin] <laptop> (1)', '[Turnto] <laptop> (1)', '[Switchon] <laptop> (1)']
illegal action Unknown action "END"  be deleted
Put alarm clock in bedroom
script before ['[Find] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Putin] <alarm_clock> (1) <bedroom> (1)']
illegal action Unknown action "END"  be deleted
Sit in chair
script before ['[Find] <chair> (1)', '[Grab] <chair> (1)', '[Turnto] <chair> (1)', '[Pointat] <chair> (1)', '[Sit] <chair> (1)', '[Lookat] <chair> (1)', '[Turnto] <chair> (1)']
illegal action Unknown action "END"  be deleted
Shut off alarm
script before ['[Find] <alarm_clock> (1)', '[Switchoff] <alarm_clock> (1)']
illegal action Unknown action "END"  be deleted
Take nap
script before ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Lie] <bed> (1)', '[Switchoff] <light> (1)']
illegal action Unknown action "END"  be deleted
Use computer
script before ['[Find] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Switchon] <computer> (1)', '[Lookat] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Pointat] <mousepad> (1)', '[Move] <mouse> (1)', '[Find] <keyboard> (1)', '[Grab] <keyboard> (1)', '[Pointat] <keyboard> (1)', '[Type] <keyboard> (1)']
illegal action Unknown action "END"  be deleted
Wash face
script before ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <tap> (1)', '[Wash] <face> (1)', '[Turnoff] <tap> (1)']
illegal action Unknown action "TURNON"  be deleted
illegal action Unknown action "TURNOFF"  be deleted
illegal action Unknown action "END"  be deleted
Read newspaper
script before ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Read] <newspaper> (1)']
illegal action Unknown action "END"  be deleted
Drink
script before ['[Find] <cup> (1)', '[Grab] <cup> (1)', '[Pour] <cup> (1)', '[Drink] <cup> (1)', '[Putback] <cup> (1)']
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action Wrong number of parameters for "PUTBACK". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Clean bathroom
script before ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Turnon] <faucet> (1)', '[Find] <towel> (1)', '[Grab] <towel> (1)', '[Wipe] <sink> (1)', '[Turnoff] <faucet> (1)', '[Find] <soap> (1)', '[Grab] <soap> (1)', '[Wash] <sink> (1)']
illegal action Unknown action "TURNON"  be deleted
illegal action ('towel', 1) does not exist in the environment  be deleted
illegal action ('towel', 1) does not exist in the environment  be deleted
illegal action ('towel', 1) does not exist in the environment  be deleted
illegal action Unknown action "TURNOFF"  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Pick up phone
script before ['[Find] <phone> (1)', '[Grab] <phone> (1)', '[Turnto] <phone> (1)', '[Putin] <phone> (1) <ear> (1)']
illegal action ('ear', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Go to toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Lookat] <toilet> (1)', '[Sit] <toilet> (1)', '[Walk] <kitchen> (1)', '[Find] <kitchen_counter> (1)', '[Turnto] <kitchen_counter> (1)', '[Lookat] <kitchen_counter> (1)', '[Open] <cupboard> (1)']
illegal action 'kitchen'  be deleted
illegal action Unknown action "END"  be deleted
Args info:
language_planner_result_file: language_planner.json
retry_times: 0
n_shots: 1
instruction: False
step_by_step_generation_prompt_path: None
step_by_step_generation_result_file: None
object_topk: 5
grounded_deciding_prompt_path: None
grounded_deciding_result_file: default_gd.json
prompt_choices_sequence: False
dataset_split: validation
dataset: ./data/val.json
retrieval_dataset: ./data/train.json
example_idx_file: None
api_keys_file: key.txt
save_dir: results/
plan_generation_result_file: default_pg.json
processed_plan_generation_result_file: None
graph_dict_path: None
plan_generation_prompt_path: None
graph_num: 4
exp_times: 1
n_processes: 1
seed: 42
engine: text-davinci-003
n_parallel_prompts: 1
max_generation_tokens: 512
max_api_total_tokens: 4096
temperature: 0.4
sampling_n: 20
top_p: 1.0
stop_tokens: ['\n\n']
verbose: False
experiment time1 on environment scene4
['[FIND] <laptop> (2063)', '[FIND] <powersocket> (197)', '[OPEN] <laptop> (2063)']
next step------- assert('close' to 'laptop')else: [Find] <laptop> (1)
prompt You see laptop is clean, on, plugged_in
desk is close to laptop
laptop is inside bedroom
laptop is close to desk
laptop is on desk
laptop is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'laptop'), 
prediction False
execute failed at [OPEN] <laptop> (2063)
['[WALK] <bathroom> (149)', '[FIND] <toilet> (166)', '[WASH] <toilet> (166)']
next step------- assert('close' to 'toilet')else: [Find] <toilet> (1)
prompt You see toilet is closed, off, clean
toilet is on floor
toilet is facing drawing
toilet is close to floor
shower is close to toilet
curtain is close to toilet
character is close to toilet
toilet is inside bathroom
toilet is close to character
wall is close to toilet
toilet is close to wall
toilet is close to shower
toilet is close to curtain
floor is close to toilet
toilet is inside shower
toilet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'toilet'), 
prediction True
end of script
gcr, sr 0.0 0
['[WALK] <bedroom> (189)', '[FIND] <dresser> (1000)', '[OPEN] <dresser> (1000)', '[TURNTO] <dresser> (1000)', '[LOOKAT] <dresser> (1000)', '[CLOSE] <dresser> (1000)']
next step------- assert('close' to 'dresser')else: [Find] <dresser> (1)
prompt You see dresser is closed, clean
dresser is close to coin
dresser is close to character
coin is on dresser
coin is close to dresser
character is close to dresser
dresser is inside bedroom
napkin is close to dresser
napkin is inside dresser
dresser is close to napkin
dresser is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'dresser'), 
prediction False
execute failed at [OPEN] <dresser> (1000)
['[FIND] <television> (278)', '[SWITCHON] <television> (278)']
next step------- assert('close' to 'television')else: [Find] <television> (1)
prompt You see television is clean, off, plugged_in
television is on tvstand
tablelamp is facing television
window is facing television
couch is facing television
wall is facing television
tvstand is facing television
television is facing computer
floor is close to television
television is close to chair
television is close to tvstand
curtain is close to television
television is close to ceiling
character is close to television
television is close to wall
ceiling is facing television
table is close to television
television is close to table
television is inside home_office
floor is facing television
television is close to curtain
window is close to television
orchid is facing television
walllamp is close to television
television is close to character
table is facing television
dresser is close to television
television is close to floor
television is close to window
tvstand is close to television
wall is close to television
television is close to walllamp
walllamp is facing television
ceiling is close to television
pillow is facing television
television is close to dresser
curtain is facing television
nightstand is facing television
chair is close to television
television is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'television'), 
prediction True
end of script
gcr, sr 0.4 0
['[FIND] <hanger> (265)', '[GRAB] <hanger> (265)', '[GRAB] <clothes_jacket> (2054)']
execute failed at [GRAB] <hanger> (265)
['[FIND] <chair> (61)', '[WALK] <chair> (61)', '[SIT] <chair> (61)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
floor is close to chair
wall is close to chair
chair is close to ceilinglamp
chair is inside dining_room
table is close to chair
chair is close to chair
chair is close to floor
chair is close to character
character is close to chair
chair is close to wall
chair is close to table
ceilinglamp is close to chair
chair,chair,chair,chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction True
end of script
gcr, sr 1.0 1
['[WALK] <bathroom> (149)', '[FIND] <sink> (173)', '[WASH] <sink> (173)']
next step------- assert('detergent' in 'hands')else: [Find] <detergent> (1)
prompt You see 
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('detergent' in 'hands'), 
prediction False
execute failed at [WASH] <sink> (173)
script 7 has illegal [action]()
script 8 has illegal [action]()
['[FIND] <laptop> (2046)', '[OPEN] <laptop> (2046)', '[FIND] <powersocket> (147)', '[PLUGIN] <laptop> (2046)', '[TURNTO] <laptop> (2046)', '[SWITCHON] <laptop> (2046)']
next step------- assert('close' to 'laptop')else: [Find] <laptop> (1)
prompt You see laptop is clean, off, plugged_in
laptop is on table
laptop is inside dining_room
character is close to laptop
laptop is close to character
table is close to laptop
laptop is close to table
laptop is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'laptop'), 
prediction True
execute failed at [OPEN] <laptop> (2046)
['[FIND] <alarm_clock> (1000)', '[WALK] <bedroom> (189)', '[PUTIN] <alarm_clock> (1000) <bedroom> (189)']
next step------- assert('close' to 'alarm_clock')else: [Find] <alarm_clock> (1)
prompt You see alarm_clock is clean, off, plugged_in
alarm_clock is inside bedroom
dresser is close to alarm_clock
alarm_clock is close to dresser
alarm_clock is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'alarm_clock'), 
prediction False
execute failed at [PUTIN] <alarm_clock> (1000) <bedroom> (189)
['[FIND] <chair> (60)', '[GRAB] <chair> (60)', '[TURNTO] <chair> (60)', '[POINTAT] <chair> (60)', '[SIT] <chair> (60)', '[LOOKAT] <chair> (60)', '[TURNTO] <chair> (60)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
floor is close to chair
wall is close to chair
chair is close to ceilinglamp
chair is inside dining_room
table is close to chair
chair is close to chair
chair is close to floor
chair is close to character
character is close to chair
chair is close to wall
chair is close to table
ceilinglamp is close to chair
chair,chair,chair,chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
next step------- assert('chair' in 'hands')else: [Grab] <chair> (1)
prompt You see chair is clean
floor is close to chair
wall is close to chair
chair is close to ceilinglamp
chair is inside dining_room
table is close to chair
chair is close to chair
chair is close to floor
chair is close to character
character is close to chair
character is holds_rh chair
chair is close to wall
chair is close to table
ceilinglamp is close to chair
chair,chair,chair,chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding chair in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('chair' in 'hands'), 
prediction False
execute failed at assert else at ['[GRAB] <chair> (62)']
['[FIND] <alarm_clock> (1000)', '[SWITCHOFF] <alarm_clock> (1000)']
end of script
gcr, sr 1.0 1
['[FIND] <bed> (194)', '[TURNTO] <bed> (194)', '[LOOKAT] <bed> (194)', '[LIE] <bed> (194)', '[SWITCHOFF] <light> (146)']
next step------- assert('close' to 'bed')else: [Find] <bed> (1)
prompt You see bed is clean
bed is close to mat
wall is close to bed
nightstand is close to bed
bed is close to floor
bed is close to character
bed is inside bedroom
bed is close to nightstand
character is close to bed
floor is close to bed
mat is close to bed
bed is close to wall
bed is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction False
execute failed at [SWITCHOFF] <light> (146)
['[FIND] <computer> (273)', '[FIND] <chair> (191)', '[SIT] <chair> (191)', '[SWITCHON] <computer> (273)', '[LOOKAT] <computer> (273)', '[FIND] <mouse> (277)', '[GRAB] <mouse> (277)', '[POINTAT] <mousepad> (276)', '[MOVE] <mouse> (277)', '[FIND] <keyboard> (275)', '[GRAB] <keyboard> (275)', '[POINTAT] <keyboard> (275)', '[TYPE] <keyboard> (275)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see 
You have Currently, you are sitting on chair in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction False
execute failed at assert else at ['[FIND] <computer> (273)']
['[WALK] <bathroom> (149)', '[FIND] <sink> (173)', '[WASH] <face> (1000)']
next step------- assert('close' to 'sink')else: [Find] <sink> (1)
prompt You see sink is clean
sink is close to rag
sink is close to towel
sink is close to bathroom_cabinet
mat is close to sink
sink is close to wall
bathroom_cabinet is close to sink
bathroom_counter is close to sink
sink is inside bathroom_counter
sink is close to bathroom_counter
rag is close to sink
floor is close to sink
sink is facing drawing
sink is close to faucet
sink is close to floor
facial_cleanser is close to sink
towel is close to sink
face is close to sink
faucet is on sink
sink is close to mat
faucet is close to sink
sink is close to facial_cleanser
wall is close to sink
sink is inside bathroom
character is close to sink
sink is close to face
sink is close to character
sink is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'sink'), 
prediction True
execute failed at [WASH] <face> (1000)
['[FIND] <newspaper> (1000)', '[GRAB] <newspaper> (1000)', '[FIND] <chair> (62)', '[SIT] <chair> (62)', '[READ] <newspaper> (1000)']
next step------- assert('close' to 'newspaper')else: [Find] <newspaper> (1)
prompt You see newspaper is closed, clean
newspaper is close to chair
newspaper is close to character
character is close to newspaper
chair is close to newspaper
newspaper is inside home_office
newspaper is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'newspaper'), 
prediction False
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
floor is close to chair
wall is close to chair
chair is close to ceilinglamp
chair is inside dining_room
table is close to chair
chair is close to chair
chair is close to floor
chair is close to character
character is close to chair
chair is close to wall
chair is close to table
ceilinglamp is close to chair
chair,chair,chair,chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding newspaper in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction True
next step------- assert('newspaper' in 'hands')else: [Grab] <newspaper> (1)
prompt You see newspaper is closed, clean
character is holds_rh newspaper
character is close to newspaper
newspaper is inside home_office
newspaper is close to character
newspaper is inside home_office
You have Currently, you are sitting on chair in the dining_room, and holding newspaper in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('newspaper' in 'hands'), 
prediction False
end of script
gcr, sr 0.4 0
['[FIND] <cup> (2036)', '[GRAB] <cup> (2036)', '[DRINK] <cup> (2036)']
next step------- assert('close' to 'faucet')else: [Find] <faucet> (1)
prompt You see faucet is clean, off
faucet is close to ceiling
toaster is close to faucet
faucet is close to microwave
faucet is inside dining_room
floor is close to faucet
faucet is close to wall
ceiling is close to faucet
cupboard is close to faucet
faucet is close to floor
faucet is close to knifeblock
faucet is close to cupboard
faucet is close to kitchen_counter
faucet is on kitchen_counter
faucet is close to toaster
wall is close to faucet
knifeblock is close to faucet
kitchen_counter is close to faucet
microwave is close to faucet
faucet is inside dining_room
You have Currently, you are standing in the dining_room, and holding cup in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'faucet'), 
prediction False
next step------- assert('close' to 'cup')else: [Find] <cup> (1)
prompt You see cup is dirty
cup is close to character
cup is inside dining_room
character is close to cup
character is holds_rh cup
cup is inside dining_room
You have Currently, you are standing in the dining_room, and holding cup in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'cup'), 
prediction False
next step------- assert('close' to 'cup')else: [Find] <cup> (1)
prompt You see cup is dirty
cup is close to character
cup is inside dining_room
character is close to cup
character is holds_rh cup
cup is inside dining_room
You have Currently, you are standing in the dining_room, and holding cup in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'cup'), 
prediction False
end of script
gcr, sr 0.0 0
['[WALK] <bathroom> (149)', '[FIND] <sink> (173)', '[WIPE] <sink> (173)', '[WASH] <sink> (173)']
execute failed at [WIPE] <sink> (173)
['[FIND] <phone> (148)', '[GRAB] <phone> (148)', '[TURNTO] <phone> (148)']
next step------- assert('close' to 'phone')else: [Find] <phone> (1)
prompt You see phone is clean, plugged_out
phone is clean, off, plugged_in
phone is on table
phone is close to table
phone is close to wall
ceiling is close to phone
cupboard is close to phone
phone is close to floor
phone is close to microwave
wall is close to phone
kitchen_counter is close to phone
phone is close to doorjamb
phone is close to kitchen_counter
table is close to phone
microwave is close to phone
doorjamb is close to phone
floor is close to phone
phone is inside dining_room
phone is close to cupboard
phone is close to character
character is close to phone
phone is close to ceiling
phone,phone is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'phone'), 
prediction False
execute failed at [GRAB] <phone> (148)
['[WALK] <bathroom> (149)', '[FIND] <toilet> (166)', '[TURNTO] <toilet> (166)', '[LOOKAT] <toilet> (166)', '[SIT] <toilet> (166)', '[FIND] <kitchen_counter> (69)', '[TURNTO] <kitchen_counter> (69)', '[LOOKAT] <kitchen_counter> (69)', '[OPEN] <cupboard> (65)']
next step------- assert('close' to 'toilet')else: [Find] <toilet> (1)else: [Turnto] <toilet> (1)
prompt You see toilet is closed, off, clean
toilet is on floor
character is facing toilet
toilet is facing drawing
toilet is close to floor
shower is close to toilet
curtain is close to toilet
character is close to toilet
toilet is inside bathroom
toilet is close to character
wall is close to toilet
toilet is close to wall
toilet is close to shower
toilet is close to curtain
floor is close to toilet
toilet is inside shower
toilet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'toilet'), 
prediction True
execute failed at [FIND] <kitchen_counter> (69)
experiment time2 on environment scene4
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 17.796047925949097
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find desk\n walk('desk')\n find('desk')\n # 2: find computer\n find('computer')\n # 3: turn on the computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')", <OpenAIObject at 0x7fd34a3c4e50> JSON: {
  "text_offset": [
    3380,
    3382,
    3384,
    3385,
    3390,
    3393,
    3401,
    3402,
    3407,
    3409,
    3416,
    3418,
    3419,
    3421,
    3423,
    3424,
    3429,
    3434,
    3435,
    3440,
    3442,
    3445,
    3446,
    3448,
    3449,
    3454,
    3456,
    3459,
    3460,
    3462,
    3463,
    3465,
    3467,
    3468,
    3473,
    3482,
    3483,
    3488,
    3490,
    3498,
    3500,
    3501,
    3503,
    3505,
    3506,
    3511,
    3514,
    3518,
    3527,
    3528,
    3535,
    3537,
    3542,
    3543,
    3546,
    3548,
    3556,
    3558,
    3559,
    3564,
    3565,
    3570,
    3572,
    3580,
    3582,
    3583,
    3590,
    3592,
    3594,
    3602
  ],
  "token_logprobs": [
    -0.016999176,
    -0.008891555,
    -0.0019197562,
    -0.29520723,
    -0.14452845,
    -1.6992303,
    -0.015402636,
    -0.004378268,
    -0.0044257427,
    -0.023750344,
    -0.0009304562,
    -0.004728308,
    -0.004780052,
    -0.003676636,
    -0.00061382964,
    -0.022640651,
    -0.43960214,
    -0.005568465,
    -0.13594009,
    -0.00036193893,
    -0.0012139418,
    -0.00019177745,
    -0.00073926337,
    -0.0020915836,
    -0.007337645,
    -0.00046873486,
    -0.00084586226,
    -0.0001625685,
    -0.0009017598,
    -0.0039329585,
    -0.0019166511,
    -0.003978437,
    -0.000682063,
    -0.04793988,
    -0.22190213,
    -0.01654919,
    -0.016489746,
    -0.0006593373,
    -0.0023141035,
    -0.0012677707,
    -0.004902237,
    -0.0050312052,
    -0.0061103287,
    -0.0008861294,
    -0.13249056,
    -0.005206804,
    -0.18955617,
    -0.00937716,
    -0.008653142,
    -0.10245654,
    -0.00078656676,
    -0.00598308,
    -0.0016741593,
    -0.00045907334,
    -0.0014091042,
    -0.0020256434,
    -0.0035122521,
    -0.0036247706,
    -0.0011824332,
    -0.0008926924,
    -0.0026584023,
    -0.0011064683,
    -0.00073031615,
    -0.0009527098,
    -0.0050478005,
    -0.29150674,
    -0.00237773,
    -0.0010149986,
    -0.0012132276,
    -0.0018559778
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " desk",
    "\n",
    " walk",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " turn",
    " on",
    " the",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.016999176
    },
    {
      " 0": -0.008891555
    },
    {
      ":": -0.0019197562
    },
    {
      " walk": -0.29520723
    },
    {
      " to": -0.14452845
    },
    {
      " home": -0.66904175
    },
    {
      "\n": -0.015402636
    },
    {
      " walk": -0.004378268
    },
    {
      "('": -0.0044257427
    },
    {
      "bedroom": -0.023750344
    },
    {
      "')": -0.0009304562
    },
    {
      "\n": -0.004728308
    },
    {
      " #": -0.004780052
    },
    {
      " 1": -0.003676636
    },
    {
      ":": -0.00061382964
    },
    {
      " find": -0.022640651
    },
    {
      " desk": -0.43960214
    },
    {
      "\n": -0.005568465
    },
    {
      " walk": -0.13594009
    },
    {
      "('": -0.00036193893
    },
    {
      "des": -0.0012139418
    },
    {
      "k": -0.00019177745
    },
    {
      "')": -0.00073926337
    },
    {
      "\n": -0.0020915836
    },
    {
      " find": -0.007337645
    },
    {
      "('": -0.00046873486
    },
    {
      "des": -0.00084586226
    },
    {
      "k": -0.0001625685
    },
    {
      "')": -0.0009017598
    },
    {
      "\n": -0.0039329585
    },
    {
      " #": -0.0019166511
    },
    {
      " 2": -0.003978437
    },
    {
      ":": -0.000682063
    },
    {
      " find": -0.04793988
    },
    {
      " computer": -0.22190213
    },
    {
      "\n": -0.01654919
    },
    {
      " find": -0.016489746
    },
    {
      "('": -0.0006593373
    },
    {
      "computer": -0.0023141035
    },
    {
      "')": -0.0012677707
    },
    {
      "\n": -0.004902237
    },
    {
      " #": -0.0050312052
    },
    {
      " 3": -0.0061103287
    },
    {
      ":": -0.0008861294
    },
    {
      " turn": -0.13249056
    },
    {
      " on": -0.005206804
    },
    {
      " the": -0.18955617
    },
    {
      " computer": -0.00937716
    },
    {
      "\n": -0.008653142
    },
    {
      " assert": -0.10245654
    },
    {
      "('": -0.00078656676
    },
    {
      "close": -0.00598308
    },
    {
      "'": -0.0016741593
    },
    {
      " to": -0.00045907334
    },
    {
      " '": -0.0014091042
    },
    {
      "computer": -0.0020256434
    },
    {
      "')": -0.0035122521
    },
    {
      "\n": -0.0036247706
    },
    {
      " else": -0.0011824332
    },
    {
      ":": -0.0008926924
    },
    {
      " find": -0.0026584023
    },
    {
      "('": -0.0011064683
    },
    {
      "computer": -0.00073031615
    },
    {
      "')": -0.0009527098
    },
    {
      "\n": -0.0050478005
    },
    {
      " switch": -0.29150674
    },
    {
      "on": -0.00237773
    },
    {
      "('": -0.0010149986
    },
    {
      "computer": -0.0012132276
    },
    {
      "')": -0.0018559778
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.2293949127197266
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet \n find('toilet')\n # 2: open the toilet lid \n turnto('toilet')\n open('toilet')\n # 3: grab toilet brush\n grab('toilet_brush')\n # 4: wash the toilet\n assert('close' to 'toilet')\n else: find('toilet')\n wash('toilet')\n # 5: put brush back \n putobjback('toilet_brush')\n # 6: close the lid \n close('toilet')\n # 7: Done", <OpenAIObject at 0x7fd34a3f3e00> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3398,
    3399,
    3404,
    3406,
    3410,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3434,
    3435,
    3436,
    3441,
    3443,
    3445,
    3449,
    3451,
    3452,
    3454,
    3456,
    3457,
    3462,
    3466,
    3473,
    3477,
    3478,
    3479,
    3483,
    3485,
    3486,
    3488,
    3490,
    3494,
    3496,
    3497,
    3502,
    3504,
    3506,
    3510,
    3512,
    3513,
    3515,
    3517,
    3518,
    3523,
    3530,
    3536,
    3537,
    3542,
    3544,
    3546,
    3550,
    3551,
    3556,
    3558,
    3559,
    3561,
    3563,
    3564,
    3569,
    3573,
    3580,
    3581,
    3588,
    3590,
    3595,
    3596,
    3599,
    3601,
    3603,
    3607,
    3609,
    3610,
    3615,
    3616,
    3621,
    3623,
    3625,
    3629,
    3631,
    3632,
    3637,
    3639,
    3641,
    3645,
    3647,
    3648,
    3650,
    3652,
    3653,
    3657,
    3663,
    3668,
    3669,
    3670,
    3674,
    3677,
    3681,
    3683,
    3685,
    3689,
    3690,
    3695,
    3697,
    3698,
    3700,
    3702,
    3703,
    3709,
    3713,
    3717,
    3718,
    3719,
    3725,
    3727,
    3729,
    3733,
    3735,
    3736,
    3738,
    3740,
    3741
  ],
  "token_logprobs": [
    -0.018893365,
    -0.008505733,
    -0.0021124883,
    -0.32006696,
    -0.22882158,
    -0.28807428,
    -0.021019328,
    -0.0054860525,
    -0.0044707046,
    -0.0021154769,
    -0.00014551697,
    -0.0017341643,
    -0.0068217646,
    -0.003986994,
    -0.0037084045,
    -0.0009913117,
    -0.08358351,
    -0.08560501,
    -3.9916596,
    -0.00013597934,
    -0.24779235,
    -0.0020282706,
    -0.0009126782,
    -0.00041661627,
    -0.006155845,
    -0.030334093,
    -0.010830269,
    -0.0079017775,
    -0.0019293117,
    -2.1178951,
    -0.92699516,
    -0.6734154,
    -0.9845455,
    -2.22961,
    -0.000107247215,
    -3.0508912,
    -5.061746e-05,
    -0.00043975122,
    -0.0011323065,
    -0.0039002877,
    -0.0004051084,
    -0.015719375,
    -0.038239658,
    -1.1981231,
    -0.0037082853,
    -0.04168898,
    -0.0012193137,
    -0.27430382,
    -0.027672008,
    -0.036719292,
    -0.012827933,
    -0.0020365731,
    -1.3682846,
    -0.6464145,
    -0.28895795,
    -0.49246347,
    -0.9921661,
    -0.0013681601,
    -0.02843262,
    -0.00067543896,
    -0.12233285,
    -0.00043283522,
    -0.002970416,
    -0.01697117,
    -0.0904817,
    -0.008124145,
    -0.0010284232,
    -0.79449487,
    -0.2630439,
    -0.06949979,
    -0.54053974,
    -1.4954616,
    -0.0023908159,
    -1.0501604,
    -0.0051789437,
    -0.0008714536,
    -0.0025284246,
    -0.0068065217,
    -0.00035430674,
    -0.18452899,
    -0.008529838,
    -0.0025421083,
    -0.0018432572,
    -0.04575213,
    -0.0019571378,
    -0.0009197181,
    -0.000111657944,
    -0.0036679637,
    -0.011204878,
    -0.30468604,
    -0.0017907696,
    -0.0004941948,
    -3.7983213e-05,
    -0.09829061,
    -0.020943182,
    -0.283574,
    -0.007749566,
    -0.0017003721,
    -0.83732647,
    -2.3527198,
    -0.03771359,
    -1.9124308,
    -9.2821094e-05,
    -0.47892606,
    -0.8220644,
    -0.0037440015,
    -0.001700968,
    -0.058305133,
    -0.00090187904,
    -0.009614664,
    -0.00023059067,
    -0.006656504,
    -0.08643109,
    -0.0127041135,
    -0.004439153,
    -0.0029448892,
    -0.35329926,
    -0.28712094,
    -1.0902226,
    -0.8233068,
    -6.933416e-05,
    -0.18374057,
    -0.00104668,
    -0.00889396,
    -0.0001866524,
    -0.01763705,
    -0.16246422,
    -0.029167602,
    -0.012028052,
    -0.004766758,
    -0.5463518
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    " ",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " the",
    " toilet",
    " lid",
    " ",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " open",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " toilet",
    " brush",
    "\n",
    " grab",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " the",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " wash",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " brush",
    " back",
    " ",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " close",
    " the",
    " lid",
    " ",
    "\n",
    " close",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.018893365
    },
    {
      " 0": -0.008505733
    },
    {
      ":": -0.0021124883
    },
    {
      " walk": -0.32006696
    },
    {
      " to": -0.22882158
    },
    {
      " bathroom": -0.28807428
    },
    {
      "\n": -0.021019328
    },
    {
      " walk": -0.0054860525
    },
    {
      "('": -0.0044707046
    },
    {
      "bath": -0.0021154769
    },
    {
      "room": -0.00014551697
    },
    {
      "')": -0.0017341643
    },
    {
      "\n": -0.0068217646
    },
    {
      " #": -0.003986994
    },
    {
      " 1": -0.0037084045
    },
    {
      ":": -0.0009913117
    },
    {
      " find": -0.08358351
    },
    {
      " toilet": -0.08560501
    },
    {
      "\n": -0.051565874
    },
    {
      "\n": -0.00013597934
    },
    {
      " find": -0.24779235
    },
    {
      "('": -0.0020282706
    },
    {
      "to": -0.0009126782
    },
    {
      "ilet": -0.00041661627
    },
    {
      "')": -0.006155845
    },
    {
      "\n": -0.030334093
    },
    {
      " #": -0.010830269
    },
    {
      " 2": -0.0079017775
    },
    {
      ":": -0.0019293117
    },
    {
      " grab": -1.503874
    },
    {
      " toilet": -0.92530525
    },
    {
      " toilet": -0.6734154
    },
    {
      " lid": -0.9845455
    },
    {
      "\n": -0.12713784
    },
    {
      "\n": -0.000107247215
    },
    {
      " open": -0.4168076
    },
    {
      "nt": -5.061746e-05
    },
    {
      "o": -0.00043975122
    },
    {
      "('": -0.0011323065
    },
    {
      "to": -0.0039002877
    },
    {
      "ilet": -0.0004051084
    },
    {
      "')": -0.015719375
    },
    {
      "\n": -0.038239658
    },
    {
      " look": -0.61520594
    },
    {
      "('": -0.0037082853
    },
    {
      "to": -0.04168898
    },
    {
      "ilet": -0.0012193137
    },
    {
      "')": -0.27430382
    },
    {
      "\n": -0.027672008
    },
    {
      " #": -0.036719292
    },
    {
      " 3": -0.012827933
    },
    {
      ":": -0.0020365731
    },
    {
      " grab": -1.3682846
    },
    {
      " toilet": -0.6464145
    },
    {
      " brush": -0.28895795
    },
    {
      "\n": -0.49246347
    },
    {
      " find": -0.7342419
    },
    {
      "('": -0.0013681601
    },
    {
      "to": -0.02843262
    },
    {
      "ilet": -0.00067543896
    },
    {
      "_": -0.12233285
    },
    {
      "brush": -0.00043283522
    },
    {
      "')": -0.002970416
    },
    {
      "\n": -0.01697117
    },
    {
      " #": -0.0904817
    },
    {
      " 4": -0.008124145
    },
    {
      ":": -0.0010284232
    },
    {
      " wash": -0.79449487
    },
    {
      " the": -0.2630439
    },
    {
      " toilet": -0.06949979
    },
    {
      "\n": -0.54053974
    },
    {
      " wash": -0.5400899
    },
    {
      "('": -0.0023908159
    },
    {
      "to": -0.5447816
    },
    {
      "'": -0.0051789437
    },
    {
      " to": -0.0008714536
    },
    {
      " '": -0.0025284246
    },
    {
      "to": -0.0068065217
    },
    {
      "ilet": -0.00035430674
    },
    {
      "')": -0.18452899
    },
    {
      "\n": -0.008529838
    },
    {
      " else": -0.0025421083
    },
    {
      ":": -0.0018432572
    },
    {
      " find": -0.04575213
    },
    {
      "('": -0.0019571378
    },
    {
      "to": -0.0009197181
    },
    {
      "ilet": -0.000111657944
    },
    {
      "')": -0.0036679637
    },
    {
      "\n": -0.011204878
    },
    {
      " wash": -0.30468604
    },
    {
      "('": -0.0017907696
    },
    {
      "to": -0.0004941948
    },
    {
      "ilet": -3.7983213e-05
    },
    {
      "')": -0.09829061
    },
    {
      "\n": -0.020943182
    },
    {
      " #": -0.283574
    },
    {
      " 5": -0.007749566
    },
    {
      ":": -0.0017003721
    },
    {
      " put": -0.83732647
    },
    {
      " the": -1.0270381
    },
    {
      " back": -0.03771359
    },
    {
      "\n": -0.23193267
    },
    {
      "\n": -9.2821094e-05
    },
    {
      " put": -0.47892606
    },
    {
      "back": -0.6198167
    },
    {
      "back": -0.0037440015
    },
    {
      "('": -0.001700968
    },
    {
      "to": -0.058305133
    },
    {
      "ilet": -0.00090187904
    },
    {
      "_": -0.009614664
    },
    {
      "brush": -0.00023059067
    },
    {
      "')": -0.006656504
    },
    {
      "\n": -0.08643109
    },
    {
      " #": -0.0127041135
    },
    {
      " 6": -0.004439153
    },
    {
      ":": -0.0029448892
    },
    {
      " close": -0.35329926
    },
    {
      " the": -0.28712094
    },
    {
      " toilet": -0.41682738
    },
    {
      "\n": -0.6452291
    },
    {
      "\n": -6.933416e-05
    },
    {
      " close": -0.18374057
    },
    {
      "('": -0.00104668
    },
    {
      "to": -0.00889396
    },
    {
      "ilet": -0.0001866524
    },
    {
      "')": -0.01763705
    },
    {
      "\n": -0.16246422
    },
    {
      " #": -0.029167602
    },
    {
      " 7": -0.012028052
    },
    {
      ":": -0.004766758
    },
    {
      " Done": -0.5463518
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.4985480308532715
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find dresser\n find('dresser')\n # 2: open dresser\n open('dresser')\n # 3: find spare change\n find('spare_change')\n # 4: grab spare change\n grab('spare_change')\n # 5: close dresser\n close('dresser')", <OpenAIObject at 0x7fd34a3de5e0> JSON: {
  "text_offset": [
    3395,
    3397,
    3399,
    3400,
    3405,
    3408,
    3416,
    3417,
    3422,
    3424,
    3431,
    3433,
    3434,
    3436,
    3438,
    3439,
    3444,
    3450,
    3452,
    3453,
    3458,
    3460,
    3465,
    3467,
    3469,
    3470,
    3472,
    3474,
    3475,
    3480,
    3486,
    3488,
    3489,
    3494,
    3496,
    3501,
    3503,
    3505,
    3506,
    3508,
    3510,
    3511,
    3516,
    3522,
    3529,
    3530,
    3535,
    3537,
    3539,
    3542,
    3543,
    3549,
    3551,
    3552,
    3554,
    3556,
    3557,
    3562,
    3568,
    3575,
    3576,
    3581,
    3583,
    3585,
    3588,
    3589,
    3595,
    3597,
    3598,
    3600,
    3602,
    3603,
    3609,
    3615,
    3617,
    3618,
    3624,
    3626,
    3631,
    3633
  ],
  "token_logprobs": [
    -0.022690952,
    -0.012818878,
    -0.0027135639,
    -0.24229555,
    -0.18395768,
    -0.22837472,
    -0.02129103,
    -0.0052308915,
    -0.004633992,
    -0.0021525696,
    -0.0011915636,
    -0.0078171445,
    -0.0022275376,
    -0.0031986916,
    -0.0008495615,
    -0.04804221,
    -0.03294214,
    -0.0007006726,
    -0.016133206,
    -0.9568024,
    -0.0010536597,
    -0.0012199107,
    -0.00017687635,
    -0.0014123294,
    -0.005043787,
    -0.035988305,
    -0.0044899243,
    -0.00082253676,
    -0.80263436,
    -0.63940966,
    -0.0013106248,
    -0.2990454,
    -0.71374035,
    -0.0032960456,
    -0.0036899776,
    -0.00015505555,
    -0.0018380017,
    -0.006252466,
    -0.030910315,
    -0.0052428753,
    -0.0011790916,
    -0.81247306,
    -0.4333001,
    -0.041042283,
    -0.053966727,
    -0.3472065,
    -0.00224964,
    -0.0365892,
    -0.00019142075,
    -0.05894247,
    -0.0010169069,
    -0.0030786882,
    -0.004821558,
    -0.0077880085,
    -0.005132811,
    -0.0012451529,
    -0.4196669,
    -0.17694743,
    -0.004634112,
    -0.014084808,
    -0.14876197,
    -0.0010627309,
    -0.0008456238,
    -0.00038435764,
    -0.0025756303,
    -7.505805e-05,
    -0.0013010148,
    -0.06324196,
    -0.040548135,
    -0.005740021,
    -0.0014106566,
    -0.34301415,
    -0.10835321,
    -0.00023595692,
    -0.017543811,
    -0.017508266,
    -0.0010774095,
    -0.0024216457,
    -0.00027101085,
    -0.0017686784
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " dress",
    "er",
    "\n",
    " find",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " dress",
    "er",
    "\n",
    " open",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " spare",
    " change",
    "\n",
    " find",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " spare",
    " change",
    "\n",
    " grab",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " close",
    " dress",
    "er",
    "\n",
    " close",
    "('",
    "dress",
    "er",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.022690952
    },
    {
      " 0": -0.012818878
    },
    {
      ":": -0.0027135639
    },
    {
      " walk": -0.24229555
    },
    {
      " to": -0.18395768
    },
    {
      " bedroom": -0.22837472
    },
    {
      "\n": -0.02129103
    },
    {
      " walk": -0.0052308915
    },
    {
      "('": -0.004633992
    },
    {
      "bedroom": -0.0021525696
    },
    {
      "')": -0.0011915636
    },
    {
      "\n": -0.0078171445
    },
    {
      " #": -0.0022275376
    },
    {
      " 1": -0.0031986916
    },
    {
      ":": -0.0008495615
    },
    {
      " find": -0.04804221
    },
    {
      " dress": -0.03294214
    },
    {
      "er": -0.0007006726
    },
    {
      "\n": -0.016133206
    },
    {
      " walk": -0.49588686
    },
    {
      "('": -0.0010536597
    },
    {
      "dress": -0.0012199107
    },
    {
      "er": -0.00017687635
    },
    {
      "')": -0.0014123294
    },
    {
      "\n": -0.005043787
    },
    {
      " #": -0.035988305
    },
    {
      " 2": -0.0044899243
    },
    {
      ":": -0.00082253676
    },
    {
      " open": -0.80263436
    },
    {
      " dress": -0.63940966
    },
    {
      "er": -0.0013106248
    },
    {
      "\n": -0.2990454
    },
    {
      " open": -0.71374035
    },
    {
      "('": -0.0032960456
    },
    {
      "dress": -0.0036899776
    },
    {
      "er": -0.00015505555
    },
    {
      "')": -0.0018380017
    },
    {
      "\n": -0.006252466
    },
    {
      " #": -0.030910315
    },
    {
      " 3": -0.0052428753
    },
    {
      ":": -0.0011790916
    },
    {
      " find": -0.81247306
    },
    {
      " spare": -0.4333001
    },
    {
      " change": -0.041042283
    },
    {
      "\n": -0.053966727
    },
    {
      " find": -0.3472065
    },
    {
      "('": -0.00224964
    },
    {
      "sp": -0.0365892
    },
    {
      "are": -0.00019142075
    },
    {
      "_": -0.05894247
    },
    {
      "change": -0.0010169069
    },
    {
      "')": -0.0030786882
    },
    {
      "\n": -0.004821558
    },
    {
      " #": -0.0077880085
    },
    {
      " 4": -0.005132811
    },
    {
      ":": -0.0012451529
    },
    {
      " grab": -0.4196669
    },
    {
      " spare": -0.17694743
    },
    {
      " change": -0.004634112
    },
    {
      "\n": -0.014084808
    },
    {
      " grab": -0.14876197
    },
    {
      "('": -0.0010627309
    },
    {
      "sp": -0.0008456238
    },
    {
      "are": -0.00038435764
    },
    {
      "_": -0.0025756303
    },
    {
      "change": -7.505805e-05
    },
    {
      "')": -0.0013010148
    },
    {
      "\n": -0.06324196
    },
    {
      " #": -0.040548135
    },
    {
      " 5": -0.005740021
    },
    {
      ":": -0.0014106566
    },
    {
      " close": -0.34301415
    },
    {
      " dress": -0.10835321
    },
    {
      "er": -0.00023595692
    },
    {
      "\n": -0.017543811
    },
    {
      " close": -0.017508266
    },
    {
      "('": -0.0010774095
    },
    {
      "dress": -0.0024216457
    },
    {
      "er": -0.00027101085
    },
    {
      "')": -0.0017686784
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.681210994720459
[(" # 0: find remote\n find('remote')\n # 1: find tv\n find('tv')\n # 2: turn on tv\n assert('close' to 'tv')\n else: find('tv')\n assert('remote' in 'hands'):\n else: find('remote')\n assert('tv' is 'switchoff')\n else: switchoff('tv')\n switchon('tv')", <OpenAIObject at 0x7fd30801d310> JSON: {
  "text_offset": [
    3374,
    3376,
    3378,
    3379,
    3384,
    3391,
    3392,
    3397,
    3399,
    3405,
    3407,
    3408,
    3410,
    3412,
    3413,
    3418,
    3421,
    3422,
    3427,
    3429,
    3431,
    3433,
    3434,
    3436,
    3438,
    3439,
    3444,
    3447,
    3450,
    3451,
    3458,
    3460,
    3465,
    3466,
    3469,
    3471,
    3473,
    3475,
    3476,
    3481,
    3482,
    3487,
    3489,
    3491,
    3493,
    3494,
    3501,
    3503,
    3509,
    3510,
    3513,
    3515,
    3520,
    3521,
    3523,
    3524,
    3529,
    3530,
    3535,
    3537,
    3543,
    3545,
    3546,
    3553,
    3555,
    3557,
    3558,
    3561,
    3563,
    3569,
    3572,
    3574,
    3575,
    3580,
    3581,
    3588,
    3591,
    3593,
    3595,
    3597,
    3598,
    3605,
    3607,
    3609,
    3611
  ],
  "token_logprobs": [
    -0.015769707,
    -0.007827898,
    -0.0014945832,
    -1.0358578,
    -1.155866,
    -1.9660789,
    -0.0135652535,
    -0.0035833155,
    -0.003589716,
    -0.9819441,
    -0.008044167,
    -0.0049723797,
    -0.0033286973,
    -0.00058925856,
    -0.13633633,
    -0.8178243,
    -0.018958725,
    -0.031127835,
    -0.0012424093,
    -0.26552823,
    -0.002546948,
    -0.00413446,
    -0.0072014146,
    -0.0048169475,
    -0.00073031615,
    -0.26115716,
    -0.046978623,
    -0.19360729,
    -0.6053193,
    -0.186206,
    -0.0020018711,
    -0.09196375,
    -0.0044615464,
    -0.0009936969,
    -0.0017041331,
    -0.0028971862,
    -0.0050770952,
    -0.0055308836,
    -0.001409702,
    -0.0016736815,
    -0.0032501766,
    -0.0011240707,
    -0.00040272233,
    -0.0035171567,
    -0.0048547997,
    -0.16854832,
    -0.001137975,
    -0.0070297886,
    -0.015015867,
    -0.016499558,
    -0.0032236879,
    -0.01108156,
    -0.80307966,
    -0.003602279,
    -0.002815531,
    -0.00040439412,
    -0.00056164444,
    -0.012546144,
    -0.00042472623,
    -0.0009106507,
    -0.007538869,
    -0.0025549566,
    -0.3029606,
    -0.00037851362,
    -0.0008222993,
    -0.0015326691,
    -0.0018304202,
    -0.003457403,
    -0.014365578,
    -0.0026191378,
    -0.004007642,
    -0.0009589143,
    -0.001168467,
    -0.00067007454,
    -0.0005998747,
    -0.0019787587,
    -0.000397832,
    -0.00014933258,
    -0.0028130203,
    -0.0026759729,
    -0.002922175,
    -0.00022951684,
    -0.0002773308,
    -0.24678835,
    -0.0030617071
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " remote",
    "\n",
    " find",
    "('",
    "remote",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " tv",
    "\n",
    " find",
    "('",
    "tv",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " tv",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "tv",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "tv",
    "')",
    "\n",
    " assert",
    "('",
    "remote",
    "'",
    " in",
    " '",
    "hands",
    "'",
    "):",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "remote",
    "')",
    "\n",
    " assert",
    "('",
    "tv",
    "'",
    " is",
    " '",
    "switch",
    "off",
    "')",
    "\n",
    " else",
    ":",
    " switch",
    "off",
    "('",
    "tv",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "tv",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.015769707
    },
    {
      " 0": -0.007827898
    },
    {
      ":": -0.0014945832
    },
    {
      " walk": -0.5196587
    },
    {
      " the": -1.0978798
    },
    {
      " control": -0.20343816
    },
    {
      " find": -0.0135652535
    },
    {
      "('": -0.0035833155
    },
    {
      "remote": -0.003589716
    },
    {
      "_": -0.47344297
    },
    {
      "\n": -0.008044167
    },
    {
      " #": -0.0049723797
    },
    {
      " 1": -0.0033286973
    },
    {
      ":": -0.00058925856
    },
    {
      " find": -0.13633633
    },
    {
      " television": -0.7041702
    },
    {
      "\n": -0.018958725
    },
    {
      " find": -0.031127835
    },
    {
      "('": -0.0012424093
    },
    {
      "tv": -0.26552823
    },
    {
      "')": -0.002546948
    },
    {
      "\n": -0.00413446
    },
    {
      " #": -0.0072014146
    },
    {
      " 2": -0.0048169475
    },
    {
      ":": -0.00073031615
    },
    {
      " turn": -0.26115716
    },
    {
      " on": -0.046978623
    },
    {
      " tv": -0.19360729
    },
    {
      "\n": -0.6053193
    },
    {
      " assert": -0.186206
    },
    {
      "('": -0.0020018711
    },
    {
      "close": -0.09196375
    },
    {
      "'": -0.0044615464
    },
    {
      " to": -0.0009936969
    },
    {
      " '": -0.0017041331
    },
    {
      "tv": -0.0028971862
    },
    {
      "')": -0.0050770952
    },
    {
      "\n": -0.0055308836
    },
    {
      " else": -0.001409702
    },
    {
      ":": -0.0016736815
    },
    {
      " find": -0.0032501766
    },
    {
      "('": -0.0011240707
    },
    {
      "tv": -0.00040272233
    },
    {
      "')": -0.0035171567
    },
    {
      "\n": -0.0048547997
    },
    {
      " assert": -0.16854832
    },
    {
      "('": -0.001137975
    },
    {
      "remote": -0.0070297886
    },
    {
      "'": -0.015015867
    },
    {
      " in": -0.016499558
    },
    {
      " '": -0.0032236879
    },
    {
      "hands": -0.01108156
    },
    {
      "')": -0.6192532
    },
    {
      "):": -0.003602279
    },
    {
      "\n": -0.002815531
    },
    {
      " else": -0.00040439412
    },
    {
      ":": -0.00056164444
    },
    {
      " find": -0.012546144
    },
    {
      "('": -0.00042472623
    },
    {
      "remote": -0.0009106507
    },
    {
      "')": -0.007538869
    },
    {
      "\n": -0.0025549566
    },
    {
      " assert": -0.3029606
    },
    {
      "('": -0.00037851362
    },
    {
      "tv": -0.0008222993
    },
    {
      "'": -0.0015326691
    },
    {
      " is": -0.0018304202
    },
    {
      " '": -0.003457403
    },
    {
      "switch": -0.014365578
    },
    {
      "off": -0.0026191378
    },
    {
      "')": -0.004007642
    },
    {
      "\n": -0.0009589143
    },
    {
      " else": -0.001168467
    },
    {
      ":": -0.00067007454
    },
    {
      " switch": -0.0005998747
    },
    {
      "off": -0.0019787587
    },
    {
      "('": -0.000397832
    },
    {
      "tv": -0.00014933258
    },
    {
      "')": -0.0028130203
    },
    {
      "\n": -0.0026759729
    },
    {
      " switch": -0.002922175
    },
    {
      "on": -0.00022951684
    },
    {
      "('": -0.0002773308
    },
    {
      "tv": -0.24678835
    },
    {
      "')": -0.0030617071
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.362821817398071
[(" # 0: walk to closet\n walk('closet')\n # 1: find hanger\n find('hanger')\n # 2: grab hanger\n grab('hanger')\n # 3: walk to jacket\n walk('jacket')\n # 4: grab jacket\n grab('jacket')\n # 5: hang up jacket\n assert('hanger' in 'hands')\n else: grab('hanger')\n assert('jacket' in 'hands')\n else: grab('jacket')\n hang('jacket', 'hanger')\n # 6: Done", <OpenAIObject at 0x7fd308033c20> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3398,
    3399,
    3404,
    3406,
    3408,
    3410,
    3412,
    3414,
    3415,
    3417,
    3419,
    3420,
    3425,
    3427,
    3432,
    3433,
    3438,
    3440,
    3441,
    3446,
    3448,
    3449,
    3451,
    3453,
    3454,
    3459,
    3461,
    3466,
    3467,
    3472,
    3474,
    3475,
    3480,
    3482,
    3483,
    3485,
    3487,
    3488,
    3493,
    3496,
    3503,
    3504,
    3509,
    3511,
    3512,
    3517,
    3519,
    3520,
    3522,
    3524,
    3525,
    3530,
    3537,
    3538,
    3543,
    3545,
    3546,
    3551,
    3553,
    3554,
    3556,
    3558,
    3559,
    3564,
    3567,
    3574,
    3575,
    3582,
    3584,
    3585,
    3590,
    3591,
    3594,
    3596,
    3601,
    3603,
    3604,
    3609,
    3610,
    3615,
    3617,
    3618,
    3623,
    3625,
    3626,
    3633,
    3635,
    3636,
    3641,
    3642,
    3645,
    3647,
    3652,
    3654,
    3655,
    3660,
    3661,
    3666,
    3668,
    3669,
    3674,
    3676,
    3677,
    3682,
    3684,
    3685,
    3690,
    3692,
    3694,
    3695,
    3700,
    3702,
    3703,
    3705,
    3707,
    3708
  ],
  "token_logprobs": [
    -0.01491174,
    -0.007016524,
    -0.0018624272,
    -0.7068197,
    -0.2839239,
    -0.70722514,
    -0.054356344,
    -0.010105798,
    -0.0036881831,
    -0.0035236762,
    -0.006021815,
    -0.0004509634,
    -0.009735997,
    -0.0070249266,
    -0.006155365,
    -0.0030651153,
    -0.00088553247,
    -0.09731553,
    -0.16069913,
    -0.019402873,
    -0.028126294,
    -0.17454964,
    -0.0011448994,
    -0.00046515674,
    -0.00070365384,
    -0.0017464053,
    -0.004827009,
    -0.014487909,
    -0.0041651633,
    -0.0005526991,
    -0.23401988,
    -0.299951,
    -0.0014344739,
    -0.03663656,
    -0.39495826,
    -0.0013370637,
    -0.00036766095,
    -0.00023488217,
    -0.0020664372,
    -0.004457295,
    -0.28365108,
    -0.007166116,
    -0.0005623597,
    -2.6899903,
    -0.019367503,
    -0.7175176,
    -0.038982082,
    -0.09244665,
    -0.0045479424,
    -0.12424035,
    -7.255186e-05,
    -0.0015555937,
    -0.006550005,
    -0.08470209,
    -0.0054310374,
    -0.0006270693,
    -0.55788165,
    -0.07432848,
    -0.022648208,
    -0.049158163,
    -0.0010898814,
    -0.0004403491,
    -6.6294406e-06,
    -0.0008635183,
    -0.004504294,
    -0.0044432837,
    -0.004456576,
    -0.0006392971,
    -0.31835228,
    -0.41963905,
    -0.24592188,
    -0.32210398,
    -0.8947135,
    -0.0028479896,
    -0.75434554,
    -0.0008103671,
    -0.0033149424,
    -0.06650002,
    -0.008705569,
    -0.019473433,
    -0.12104708,
    -0.009583249,
    -0.01267073,
    -0.004578482,
    -0.060163245,
    -0.0022023264,
    -0.0014775102,
    -0.0002516953,
    -0.003909922,
    -0.009530717,
    -1.5757974,
    -0.0016514121,
    -0.065197244,
    -0.00028555995,
    -0.0008551662,
    -0.0032520907,
    -0.0020636306,
    -0.0021012002,
    -0.0044352002,
    -0.007548718,
    -0.0008548122,
    -0.0026698173,
    -0.0053243656,
    -0.0023366846,
    -0.0019248935,
    -8.459475e-05,
    -0.0030275702,
    -0.0085127065,
    -0.61660755,
    -0.4758559,
    -0.17955628,
    -1.7475562e-05,
    -1.4571955,
    -0.004672316,
    -0.0019492598,
    -0.00023285468,
    -0.002385855,
    -0.5610761,
    -0.19200498,
    -0.004056175,
    -0.0016341578,
    -1.0542549
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " closet",
    "\n",
    " walk",
    "('",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " h",
    "anger",
    "\n",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " h",
    "anger",
    "\n",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " walk",
    " to",
    " jacket",
    "\n",
    " walk",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " jacket",
    "\n",
    " grab",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " hang",
    " up",
    " jacket",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "j",
    "acket",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " hang",
    "('",
    "j",
    "acket",
    "',",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01491174
    },
    {
      " 0": -0.007016524
    },
    {
      ":": -0.0018624272
    },
    {
      " walk": -0.7068197
    },
    {
      " to": -0.2839239
    },
    {
      " closet": -0.70722514
    },
    {
      "\n": -0.054356344
    },
    {
      " walk": -0.010105798
    },
    {
      "('": -0.0036881831
    },
    {
      "cl": -0.0035236762
    },
    {
      "os": -0.006021815
    },
    {
      "et": -0.0004509634
    },
    {
      "')": -0.009735997
    },
    {
      "\n": -0.0070249266
    },
    {
      " #": -0.006155365
    },
    {
      " 1": -0.0030651153
    },
    {
      ":": -0.00088553247
    },
    {
      " find": -0.09731553
    },
    {
      " h": -0.16069913
    },
    {
      "anger": -0.019402873
    },
    {
      "\n": -0.028126294
    },
    {
      " find": -0.17454964
    },
    {
      "('": -0.0011448994
    },
    {
      "h": -0.00046515674
    },
    {
      "anger": -0.00070365384
    },
    {
      "')": -0.0017464053
    },
    {
      "\n": -0.004827009
    },
    {
      " #": -0.014487909
    },
    {
      " 2": -0.0041651633
    },
    {
      ":": -0.0005526991
    },
    {
      " grab": -0.23401988
    },
    {
      " h": -0.299951
    },
    {
      "anger": -0.0014344739
    },
    {
      "\n": -0.03663656
    },
    {
      " grab": -0.39495826
    },
    {
      "('": -0.0013370637
    },
    {
      "h": -0.00036766095
    },
    {
      "anger": -0.00023488217
    },
    {
      "')": -0.0020664372
    },
    {
      "\n": -0.004457295
    },
    {
      " #": -0.28365108
    },
    {
      " 3": -0.007166116
    },
    {
      ":": -0.0005623597
    },
    {
      " find": -0.37847742
    },
    {
      " to": -0.019367503
    },
    {
      " jacket": -0.7175176
    },
    {
      "\n": -0.038982082
    },
    {
      " walk": -0.09244665
    },
    {
      "('": -0.0045479424
    },
    {
      "j": -0.12424035
    },
    {
      "acket": -7.255186e-05
    },
    {
      "')": -0.0015555937
    },
    {
      "\n": -0.006550005
    },
    {
      " #": -0.08470209
    },
    {
      " 4": -0.0054310374
    },
    {
      ":": -0.0006270693
    },
    {
      " grab": -0.55788165
    },
    {
      " jacket": -0.07432848
    },
    {
      "\n": -0.022648208
    },
    {
      " grab": -0.049158163
    },
    {
      "('": -0.0010898814
    },
    {
      "j": -0.0004403491
    },
    {
      "acket": -6.6294406e-06
    },
    {
      "')": -0.0008635183
    },
    {
      "\n": -0.004504294
    },
    {
      " #": -0.0044432837
    },
    {
      " 5": -0.004456576
    },
    {
      ":": -0.0006392971
    },
    {
      " hang": -0.31835228
    },
    {
      " up": -0.41963905
    },
    {
      " jacket": -0.24592188
    },
    {
      "\n": -0.32210398
    },
    {
      " assert": -0.8947135
    },
    {
      "('": -0.0028479896
    },
    {
      "close": -0.67355615
    },
    {
      "anger": -0.0008103671
    },
    {
      "'": -0.0033149424
    },
    {
      " in": -0.06650002
    },
    {
      " '": -0.008705569
    },
    {
      "hands": -0.019473433
    },
    {
      "')": -0.12104708
    },
    {
      "\n": -0.009583249
    },
    {
      " else": -0.01267073
    },
    {
      ":": -0.004578482
    },
    {
      " grab": -0.060163245
    },
    {
      "('": -0.0022023264
    },
    {
      "h": -0.0014775102
    },
    {
      "anger": -0.0002516953
    },
    {
      "')": -0.003909922
    },
    {
      "\n": -0.009530717
    },
    {
      " hang": -1.065105
    },
    {
      "('": -0.0016514121
    },
    {
      "j": -0.065197244
    },
    {
      "acket": -0.00028555995
    },
    {
      "'": -0.0008551662
    },
    {
      " in": -0.0032520907
    },
    {
      " '": -0.0020636306
    },
    {
      "hands": -0.0021012002
    },
    {
      "')": -0.0044352002
    },
    {
      "\n": -0.007548718
    },
    {
      " else": -0.0008548122
    },
    {
      ":": -0.0026698173
    },
    {
      " grab": -0.0053243656
    },
    {
      "('": -0.0023366846
    },
    {
      "j": -0.0019248935
    },
    {
      "acket": -8.459475e-05
    },
    {
      "')": -0.0030275702
    },
    {
      "\n": -0.0085127065
    },
    {
      " hang": -0.61660755
    },
    {
      "('": -0.4758559
    },
    {
      "j": -0.17955628
    },
    {
      "acket": -1.7475562e-05
    },
    {
      "')": -0.5002443
    },
    {
      " '": -0.004672316
    },
    {
      "h": -0.0019492598
    },
    {
      "anger": -0.00023285468
    },
    {
      "')": -0.002385855
    },
    {
      "\n": -0.5610761
    },
    {
      " #": -0.19200498
    },
    {
      " 6": -0.004056175
    },
    {
      ":": -0.0016341578
    },
    {
      " put": -0.70491636
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.562096118927002
[(" # 0: find chair\n find('chair')\n # 1: walk to chair\n walk('chair')\n # 2: sit on chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')", <OpenAIObject at 0x7fd308049ea0> JSON: {
  "text_offset": [
    3367,
    3369,
    3371,
    3372,
    3377,
    3383,
    3384,
    3389,
    3391,
    3396,
    3398,
    3399,
    3401,
    3403,
    3404,
    3409,
    3412,
    3418,
    3419,
    3424,
    3426,
    3431,
    3433,
    3434,
    3436,
    3438,
    3439,
    3443,
    3446,
    3452,
    3453,
    3460,
    3462,
    3467,
    3468,
    3471,
    3473,
    3478,
    3480,
    3481,
    3486,
    3487,
    3492,
    3494,
    3499,
    3501,
    3502,
    3506,
    3508,
    3513
  ],
  "token_logprobs": [
    -0.16259108,
    -0.039362986,
    -0.003979153,
    -0.40455994,
    -0.7321371,
    -0.05638868,
    -0.028817188,
    -0.005649562,
    -0.0018525141,
    -0.0024568366,
    -0.00994234,
    -0.0039109997,
    -0.003978556,
    -0.00077272824,
    -0.89489704,
    -0.07735446,
    -0.19389576,
    -0.022560662,
    -0.4028226,
    -0.006350117,
    -0.0013494163,
    -0.0017068788,
    -0.008249082,
    -0.056752548,
    -0.00548,
    -0.0011342157,
    -0.074759886,
    -0.18722777,
    -0.21652126,
    -0.011078847,
    -0.56942344,
    -0.0021436682,
    -0.014711568,
    -0.0035739231,
    -0.000881118,
    -0.0026752558,
    -0.0007110504,
    -0.005113399,
    -0.0050739804,
    -0.0018012797,
    -0.0014961967,
    -0.03386009,
    -0.0014907621,
    -0.00077630725,
    -0.0024675326,
    -0.006083101,
    -0.22695638,
    -0.0022827378,
    -0.000918404,
    -0.0021650544
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " walk",
    " to",
    " chair",
    "\n",
    " walk",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.16259108
    },
    {
      " 0": -0.039362986
    },
    {
      ":": -0.003979153
    },
    {
      " find": -0.40455994
    },
    {
      " chair": -0.7321371
    },
    {
      "\n": -0.05638868
    },
    {
      " find": -0.028817188
    },
    {
      "('": -0.005649562
    },
    {
      "chair": -0.0018525141
    },
    {
      "')": -0.0024568366
    },
    {
      "\n": -0.00994234
    },
    {
      " #": -0.0039109997
    },
    {
      " 1": -0.003978556
    },
    {
      ":": -0.00077272824
    },
    {
      " walk": -0.89489704
    },
    {
      " to": -0.07735446
    },
    {
      " chair": -0.19389576
    },
    {
      "\n": -0.022560662
    },
    {
      " walk": -0.4028226
    },
    {
      "('": -0.006350117
    },
    {
      "chair": -0.0013494163
    },
    {
      "')": -0.0017068788
    },
    {
      "\n": -0.008249082
    },
    {
      " #": -0.056752548
    },
    {
      " 2": -0.00548
    },
    {
      ":": -0.0011342157
    },
    {
      " sit": -0.074759886
    },
    {
      " on": -0.18722777
    },
    {
      " chair": -0.21652126
    },
    {
      "\n": -0.011078847
    },
    {
      " assert": -0.56942344
    },
    {
      "('": -0.0021436682
    },
    {
      "close": -0.014711568
    },
    {
      "'": -0.0035739231
    },
    {
      " to": -0.000881118
    },
    {
      " '": -0.0026752558
    },
    {
      "chair": -0.0007110504
    },
    {
      "')": -0.005113399
    },
    {
      "\n": -0.0050739804
    },
    {
      " else": -0.0018012797
    },
    {
      ":": -0.0014961967
    },
    {
      " find": -0.03386009
    },
    {
      "('": -0.0014907621
    },
    {
      "chair": -0.00077630725
    },
    {
      "')": -0.0024675326
    },
    {
      "\n": -0.006083101
    },
    {
      " sit": -0.22695638
    },
    {
      "('": -0.0022827378
    },
    {
      "chair": -0.000918404
    },
    {
      "')": -0.0021650544
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 8.666569948196411
[(" # 0: walk to the sink\n walk('sink')\n # 1: find sink\n find('sink')\n # 2: pull the sink\n assert('close' to 'sink')\n else: find('sink')\n pull('sink')\n # 3: turn on the faucet\n assert('close' to 'faucet')\n else: find('faucet')\n switchon('faucet')\n # 4: pour some soap\n grab('soap')\n pour('soap')\n # 5: wash the sink\n wash('sink')\n # 6: turn off the faucet\n switchoff('faucet')\n # 7: put the soap back\n putback('soap')\n # 8: push the sink\n push('sink')\n # 9: Done", <OpenAIObject at 0x7fd308033540> JSON: {
  "text_offset": [
    3373,
    3375,
    3377,
    3378,
    3383,
    3386,
    3390,
    3395,
    3396,
    3401,
    3403,
    3404,
    3407,
    3409,
    3410,
    3412,
    3414,
    3415,
    3420,
    3425,
    3426,
    3431,
    3433,
    3434,
    3437,
    3439,
    3440,
    3442,
    3444,
    3445,
    3450,
    3454,
    3459,
    3460,
    3467,
    3469,
    3474,
    3475,
    3478,
    3480,
    3481,
    3484,
    3486,
    3487,
    3492,
    3493,
    3498,
    3500,
    3501,
    3504,
    3506,
    3507,
    3512,
    3514,
    3515,
    3518,
    3520,
    3521,
    3523,
    3525,
    3526,
    3531,
    3534,
    3538,
    3540,
    3543,
    3545,
    3546,
    3553,
    3555,
    3560,
    3561,
    3564,
    3566,
    3567,
    3570,
    3572,
    3574,
    3575,
    3580,
    3581,
    3586,
    3588,
    3589,
    3592,
    3594,
    3596,
    3597,
    3604,
    3606,
    3608,
    3609,
    3612,
    3614,
    3616,
    3617,
    3619,
    3621,
    3622,
    3627,
    3632,
    3637,
    3638,
    3643,
    3645,
    3647,
    3649,
    3651,
    3652,
    3657,
    3659,
    3661,
    3663,
    3665,
    3666,
    3668,
    3670,
    3671,
    3676,
    3680,
    3685,
    3686,
    3691,
    3693,
    3694,
    3697,
    3699,
    3700,
    3702,
    3704,
    3705,
    3710,
    3714,
    3718,
    3720,
    3723,
    3725,
    3726,
    3733,
    3736,
    3738,
    3739,
    3742,
    3744,
    3746,
    3747,
    3749,
    3751,
    3752,
    3756,
    3760,
    3765,
    3770,
    3771,
    3775,
    3779,
    3781,
    3783,
    3785,
    3787,
    3788,
    3790,
    3792,
    3793,
    3798,
    3802,
    3807,
    3808,
    3813,
    3815,
    3816,
    3819,
    3821,
    3822,
    3824,
    3826,
    3827
  ],
  "token_logprobs": [
    -0.022905838,
    -0.00812553,
    -0.0020624348,
    -0.56560993,
    -0.21020679,
    -1.7495596,
    -1.60451,
    -0.034983996,
    -0.015252354,
    -0.0055554565,
    -0.014539618,
    -0.000116426294,
    -0.001645384,
    -0.009129727,
    -0.09646939,
    -0.0028922246,
    -0.0008667416,
    -0.34385842,
    -0.81300205,
    -0.027291795,
    -0.041886237,
    -0.0009936969,
    -0.00038173224,
    -0.00011678579,
    -0.0020518035,
    -0.004916972,
    -0.010365638,
    -0.0049916687,
    -0.0009394654,
    -4.297865,
    -0.9308351,
    -0.82751477,
    -0.425601,
    -0.7201448,
    -0.0017939958,
    -0.0038612136,
    -0.0028184005,
    -0.00038244936,
    -0.0023583714,
    -0.0012468238,
    -5.7177684e-05,
    -0.006117104,
    -0.00541791,
    -0.002184111,
    -0.0016961914,
    -0.006870315,
    -0.0014729146,
    -0.00035084877,
    -0.00024692412,
    -0.002299823,
    -0.010641812,
    -0.048384737,
    -0.0019637677,
    -0.0004967001,
    -0.00010987075,
    -0.0017493903,
    -0.006678764,
    -0.03278488,
    -0.009165518,
    -0.0010420242,
    -2.2220736,
    -0.11572636,
    -0.21048369,
    -0.66987944,
    -0.0018781327,
    -0.0017160728,
    -0.036752682,
    -0.9785796,
    -0.0014797788,
    -0.024858281,
    -0.0022476087,
    -0.0004200752,
    -0.0010436969,
    -0.040207732,
    -0.00051351794,
    -0.00033379628,
    -0.0040602456,
    -0.00473364,
    -0.0017908899,
    -0.00093260483,
    -0.007454436,
    -0.0009324847,
    -0.00137407,
    -0.0031036807,
    -0.00016185326,
    -0.0022729393,
    -0.0065576234,
    -0.573271,
    -0.0016443083,
    -0.0008889932,
    -0.00073914323,
    -0.0005110145,
    -0.00012989782,
    -0.001846961,
    -0.0054960623,
    -0.024803655,
    -0.0064076423,
    -0.0010892844,
    -0.93662953,
    -3.0173008,
    -1.6755574,
    -0.33574837,
    -1.5109341,
    -0.0019155162,
    -0.026734177,
    -0.00035979127,
    -0.007939267,
    -0.004541537,
    -0.3434169,
    -0.002922772,
    -0.0018457661,
    -9.771052e-05,
    -0.028420044,
    -0.0075944825,
    -0.026779847,
    -0.004803769,
    -0.00092580245,
    -0.86248744,
    -0.20299381,
    -0.031727217,
    -0.04178468,
    -0.17989685,
    -0.0010141633,
    -0.0016679501,
    -0.00021014028,
    -0.0014298182,
    -0.009931745,
    -0.02691736,
    -0.0030467028,
    -0.0015342206,
    -0.22981985,
    -0.020314572,
    -0.06647359,
    -0.011730145,
    -0.0008325587,
    -0.000696139,
    -0.021231728,
    -0.08275415,
    -0.0039868737,
    -0.00087216886,
    -0.0007411717,
    -0.0013868432,
    -0.00021956058,
    -0.003000846,
    -0.05268745,
    -0.009970694,
    -0.007231131,
    -0.0020519237,
    -0.71035755,
    -0.54330343,
    -0.039566487,
    -0.07262569,
    -0.020220295,
    -0.10272739,
    -0.42570266,
    -0.0031335757,
    -0.0005453053,
    -0.00030976496,
    -0.008203109,
    -0.32100993,
    -0.02753384,
    -0.0024249328,
    -0.0024135208,
    -1.553065,
    -0.11262404,
    -0.0011425115,
    -0.88450766,
    -0.022769544,
    -0.0014434869,
    -0.00036134195,
    -7.219704e-05,
    -0.002500099,
    -0.14217165,
    -0.0070395144,
    -0.008854092,
    -0.003206944,
    -0.33158496
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " the",
    " sink",
    "\n",
    " walk",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pull",
    " the",
    " sink",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " pull",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " turn",
    " on",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " pour",
    " some",
    " soap",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " pour",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " wash",
    " the",
    " sink",
    "\n",
    " wash",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " turn",
    " off",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " switch",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " put",
    " the",
    " soap",
    " back",
    "\n",
    " put",
    "back",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " push",
    " the",
    " sink",
    "\n",
    " push",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 9",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.022905838
    },
    {
      " 0": -0.00812553
    },
    {
      ":": -0.0020624348
    },
    {
      " walk": -0.56560993
    },
    {
      " to": -0.21020679
    },
    {
      " bathroom": -0.74335396
    },
    {
      " bathroom": -0.800924
    },
    {
      "\n": -0.034983996
    },
    {
      " walk": -0.015252354
    },
    {
      "('": -0.0055554565
    },
    {
      "s": -0.014539618
    },
    {
      "ink": -0.000116426294
    },
    {
      "')": -0.001645384
    },
    {
      "\n": -0.009129727
    },
    {
      " #": -0.09646939
    },
    {
      " 1": -0.0028922246
    },
    {
      ":": -0.0008667416
    },
    {
      " find": -0.34385842
    },
    {
      " sink": -0.81300205
    },
    {
      "\n": -0.027291795
    },
    {
      " find": -0.041886237
    },
    {
      "('": -0.0009936969
    },
    {
      "s": -0.00038173224
    },
    {
      "ink": -0.00011678579
    },
    {
      "')": -0.0020518035
    },
    {
      "\n": -0.004916972
    },
    {
      " #": -0.010365638
    },
    {
      " 2": -0.0049916687
    },
    {
      ":": -0.0009394654
    },
    {
      " turn": -0.65200496
    },
    {
      " the": -0.9308351
    },
    {
      " sink": -0.82751477
    },
    {
      "\n": -0.425601
    },
    {
      " assert": -0.7201448
    },
    {
      "('": -0.0017939958
    },
    {
      "close": -0.0038612136
    },
    {
      "'": -0.0028184005
    },
    {
      " to": -0.00038244936
    },
    {
      " '": -0.0023583714
    },
    {
      "s": -0.0012468238
    },
    {
      "ink": -5.7177684e-05
    },
    {
      "')": -0.006117104
    },
    {
      "\n": -0.00541791
    },
    {
      " else": -0.002184111
    },
    {
      ":": -0.0016961914
    },
    {
      " find": -0.006870315
    },
    {
      "('": -0.0014729146
    },
    {
      "s": -0.00035084877
    },
    {
      "ink": -0.00024692412
    },
    {
      "')": -0.002299823
    },
    {
      "\n": -0.010641812
    },
    {
      " pull": -0.048384737
    },
    {
      "('": -0.0019637677
    },
    {
      "s": -0.0004967001
    },
    {
      "ink": -0.00010987075
    },
    {
      "')": -0.0017493903
    },
    {
      "\n": -0.006678764
    },
    {
      " #": -0.03278488
    },
    {
      " 3": -0.009165518
    },
    {
      ":": -0.0010420242
    },
    {
      " pour": -0.79316527
    },
    {
      " on": -0.11572636
    },
    {
      " the": -0.21048369
    },
    {
      " f": -0.66987944
    },
    {
      "auc": -0.0018781327
    },
    {
      "et": -0.0017160728
    },
    {
      "\n": -0.036752682
    },
    {
      " assert": -0.9785796
    },
    {
      "('": -0.0014797788
    },
    {
      "close": -0.024858281
    },
    {
      "'": -0.0022476087
    },
    {
      " to": -0.0004200752
    },
    {
      " '": -0.0010436969
    },
    {
      "f": -0.040207732
    },
    {
      "auc": -0.00051351794
    },
    {
      "et": -0.00033379628
    },
    {
      "')": -0.0040602456
    },
    {
      "\n": -0.00473364
    },
    {
      " else": -0.0017908899
    },
    {
      ":": -0.00093260483
    },
    {
      " find": -0.007454436
    },
    {
      "('": -0.0009324847
    },
    {
      "f": -0.00137407
    },
    {
      "auc": -0.0031036807
    },
    {
      "et": -0.00016185326
    },
    {
      "')": -0.0022729393
    },
    {
      "\n": -0.0065576234
    },
    {
      " switch": -0.573271
    },
    {
      "on": -0.0016443083
    },
    {
      "('": -0.0008889932
    },
    {
      "f": -0.00073914323
    },
    {
      "auc": -0.0005110145
    },
    {
      "et": -0.00012989782
    },
    {
      "')": -0.001846961
    },
    {
      "\n": -0.0054960623
    },
    {
      " #": -0.024803655
    },
    {
      " 4": -0.0064076423
    },
    {
      ":": -0.0010892844
    },
    {
      " pour": -0.93662953
    },
    {
      " deter": -0.90195596
    },
    {
      " deter": -0.64232856
    },
    {
      "\n": -0.33574837
    },
    {
      " assert": -0.96880275
    },
    {
      "('": -0.0019155162
    },
    {
      "so": -0.026734177
    },
    {
      "ap": -0.00035979127
    },
    {
      "')": -0.007939267
    },
    {
      "\n": -0.004541537
    },
    {
      " pour": -0.3434169
    },
    {
      "('": -0.002922772
    },
    {
      "so": -0.0018457661
    },
    {
      "ap": -9.771052e-05
    },
    {
      "')": -0.028420044
    },
    {
      "\n": -0.0075944825
    },
    {
      " #": -0.026779847
    },
    {
      " 5": -0.004803769
    },
    {
      ":": -0.00092580245
    },
    {
      " wash": -0.86248744
    },
    {
      " the": -0.20299381
    },
    {
      " sink": -0.031727217
    },
    {
      "\n": -0.04178468
    },
    {
      " wash": -0.17989685
    },
    {
      "('": -0.0010141633
    },
    {
      "s": -0.0016679501
    },
    {
      "ink": -0.00021014028
    },
    {
      "')": -0.0014298182
    },
    {
      "\n": -0.009931745
    },
    {
      " #": -0.02691736
    },
    {
      " 6": -0.0030467028
    },
    {
      ":": -0.0015342206
    },
    {
      " turn": -0.22981985
    },
    {
      " off": -0.020314572
    },
    {
      " the": -0.06647359
    },
    {
      " f": -0.011730145
    },
    {
      "auc": -0.0008325587
    },
    {
      "et": -0.000696139
    },
    {
      "\n": -0.021231728
    },
    {
      " switch": -0.08275415
    },
    {
      "off": -0.0039868737
    },
    {
      "('": -0.00087216886
    },
    {
      "f": -0.0007411717
    },
    {
      "auc": -0.0013868432
    },
    {
      "et": -0.00021956058
    },
    {
      "')": -0.003000846
    },
    {
      "\n": -0.05268745
    },
    {
      " #": -0.009970694
    },
    {
      " 7": -0.007231131
    },
    {
      ":": -0.0020519237
    },
    {
      " put": -0.71035755
    },
    {
      " the": -0.54330343
    },
    {
      " soap": -0.039566487
    },
    {
      " back": -0.07262569
    },
    {
      "\n": -0.020220295
    },
    {
      " put": -0.10272739
    },
    {
      "back": -0.42570266
    },
    {
      "('": -0.0031335757
    },
    {
      "so": -0.0005453053
    },
    {
      "ap": -0.00030976496
    },
    {
      "')": -0.008203109
    },
    {
      "\n": -0.32100993
    },
    {
      " #": -0.02753384
    },
    {
      " 8": -0.0024249328
    },
    {
      ":": -0.0024135208
    },
    {
      " Done": -0.5782838
    },
    {
      " the": -0.11262404
    },
    {
      " sink": -0.0011425115
    },
    {
      " back": -0.56392044
    },
    {
      " push": -0.022769544
    },
    {
      "('": -0.0014434869
    },
    {
      "s": -0.00036134195
    },
    {
      "ink": -7.219704e-05
    },
    {
      "')": -0.002500099
    },
    {
      "\n": -0.14217165
    },
    {
      " #": -0.0070395144
    },
    {
      " 9": -0.008854092
    },
    {
      ":": -0.003206944
    },
    {
      " Done": -0.33158496
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.9301507472991943
[(" # 0: find bed\n find('bed')\n # 1: lay down on bed\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n else: turnto('bed')\n sit('bed')\n sleep()", <OpenAIObject at 0x7fd308083040> JSON: {
  "text_offset": [
    3369,
    3371,
    3373,
    3374,
    3379,
    3383,
    3384,
    3389,
    3391,
    3394,
    3396,
    3397,
    3399,
    3401,
    3402,
    3406,
    3411,
    3414,
    3418,
    3419,
    3423,
    3425,
    3426,
    3428,
    3431,
    3433,
    3434,
    3439,
    3441,
    3443,
    3446,
    3448,
    3449,
    3456,
    3458,
    3463,
    3464,
    3467,
    3469,
    3472,
    3474,
    3475,
    3480,
    3481,
    3486,
    3488,
    3491,
    3493,
    3494,
    3499,
    3500,
    3504,
    3506,
    3507,
    3509,
    3512,
    3514,
    3515,
    3519,
    3521,
    3524,
    3526,
    3527,
    3533
  ],
  "token_logprobs": [
    -0.25172493,
    -0.065768845,
    -0.0027549237,
    -0.81710327,
    -0.21849057,
    -0.018924221,
    -0.027347967,
    -0.003062305,
    -0.00048263065,
    -0.002216485,
    -0.008645325,
    -0.0035824773,
    -0.0021370987,
    -0.00046014716,
    -0.63073075,
    -0.0885085,
    -0.21852624,
    -0.04983263,
    -0.009205099,
    -0.2806633,
    -2.272356e-05,
    -0.00032407563,
    -0.0004795284,
    -8.650302e-05,
    -0.0008802835,
    -0.0035053738,
    -0.07479695,
    -0.00023309403,
    -0.0003566928,
    -0.00013216372,
    -0.0002760195,
    -0.0027437469,
    -0.02514723,
    -0.00050779217,
    -0.0012552998,
    -0.0013743065,
    -0.00023440628,
    -0.0007943191,
    -0.0001941635,
    -0.0023047237,
    -0.0031256224,
    -0.0006592172,
    -0.00077272824,
    -0.0028555815,
    -0.0007009111,
    -0.00013872207,
    -0.0011719288,
    -0.0030877162,
    -0.4153444,
    -0.0008243249,
    -0.0055645686,
    -2.5941252e-05,
    -0.00010927377,
    -0.00051447254,
    -0.00018248011,
    -0.0008942431,
    -0.0014384736,
    -0.10209988,
    -0.0003274144,
    -9.7471166e-05,
    -0.00080774265,
    -0.0050300066,
    -0.03528126,
    -0.0025451551
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " lay",
    " down",
    " on",
    " bed",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " sleep",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.25172493
    },
    {
      " 0": -0.065768845
    },
    {
      ":": -0.0027549237
    },
    {
      " find": -0.81710327
    },
    {
      " bed": -0.21849057
    },
    {
      "\n": -0.018924221
    },
    {
      " find": -0.027347967
    },
    {
      "('": -0.003062305
    },
    {
      "bed": -0.00048263065
    },
    {
      "')": -0.002216485
    },
    {
      "\n": -0.008645325
    },
    {
      " #": -0.0035824773
    },
    {
      " 1": -0.0021370987
    },
    {
      ":": -0.00046014716
    },
    {
      " lay": -0.63073075
    },
    {
      " down": -0.0885085
    },
    {
      " on": -0.21852624
    },
    {
      " bed": -0.04983263
    },
    {
      "\n": -0.009205099
    },
    {
      " tur": -0.2806633
    },
    {
      "nt": -2.272356e-05
    },
    {
      "o": -0.00032407563
    },
    {
      "('": -0.0004795284
    },
    {
      "bed": -8.650302e-05
    },
    {
      "')": -0.0008802835
    },
    {
      "\n": -0.0035053738
    },
    {
      " look": -0.07479695
    },
    {
      "at": -0.00023309403
    },
    {
      "('": -0.0003566928
    },
    {
      "bed": -0.00013216372
    },
    {
      "')": -0.0002760195
    },
    {
      "\n": -0.0027437469
    },
    {
      " assert": -0.02514723
    },
    {
      "('": -0.00050779217
    },
    {
      "close": -0.0012552998
    },
    {
      "'": -0.0013743065
    },
    {
      " to": -0.00023440628
    },
    {
      " '": -0.0007943191
    },
    {
      "bed": -0.0001941635
    },
    {
      "')": -0.0023047237
    },
    {
      "\n": -0.0031256224
    },
    {
      " else": -0.0006592172
    },
    {
      ":": -0.00077272824
    },
    {
      " find": -0.0028555815
    },
    {
      "('": -0.0007009111
    },
    {
      "bed": -0.00013872207
    },
    {
      "')": -0.0011719288
    },
    {
      "\n": -0.0030877162
    },
    {
      " else": -0.4153444
    },
    {
      ":": -0.0008243249
    },
    {
      " tur": -0.0055645686
    },
    {
      "nt": -2.5941252e-05
    },
    {
      "o": -0.00010927377
    },
    {
      "('": -0.00051447254
    },
    {
      "bed": -0.00018248011
    },
    {
      "')": -0.0008942431
    },
    {
      "\n": -0.0014384736
    },
    {
      " sit": -0.10209988
    },
    {
      "('": -0.0003274144
    },
    {
      "bed": -9.7471166e-05
    },
    {
      "')": -0.00080774265
    },
    {
      "\n": -0.0050300066
    },
    {
      " sleep": -0.03528126
    },
    {
      "()": -0.0025451551
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.500075101852417
[(" # 0: find glasses\n find('glasses')\n # 1: grab glasses\n grab('glasses')\n assert('close' to 'glasses')\n else: find('glasses')\n # 2: put on glasses\n puton('glasses')\n assert('glasses' in 'hands')\n else: grab('glasses')", <OpenAIObject at 0x7fd3080bf090> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3396,
    3397,
    3402,
    3404,
    3406,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3424,
    3432,
    3433,
    3438,
    3440,
    3442,
    3447,
    3449,
    3450,
    3457,
    3459,
    3464,
    3465,
    3468,
    3470,
    3472,
    3477,
    3479,
    3480,
    3485,
    3486,
    3491,
    3493,
    3495,
    3500,
    3502,
    3503,
    3505,
    3507,
    3508,
    3512,
    3515,
    3523,
    3524,
    3528,
    3530,
    3532,
    3534,
    3539,
    3541,
    3542,
    3549,
    3551,
    3553,
    3558,
    3559,
    3562,
    3564,
    3569,
    3571,
    3572,
    3577,
    3578,
    3583,
    3585,
    3587,
    3592
  ],
  "token_logprobs": [
    -0.017339591,
    -0.009362902,
    -0.0020875211,
    -0.19771701,
    -0.15560843,
    -0.03157108,
    -0.01651986,
    -0.002358254,
    -0.13674423,
    -0.0018101772,
    -0.00420802,
    -0.0083111655,
    -0.004264169,
    -0.0023982245,
    -0.000591883,
    -0.113946915,
    -0.07510261,
    -0.018022528,
    -0.82778317,
    -0.0014070758,
    -0.00046193527,
    -0.0013909019,
    -0.0016122478,
    -0.0050479206,
    -1.0331286,
    -0.0019278782,
    -1.4903406,
    -0.0029771724,
    -0.0011345734,
    -0.0031193448,
    -0.0011634555,
    -0.0014353112,
    -0.0068099415,
    -0.006205924,
    -0.0027583297,
    -0.0025733605,
    -0.019290874,
    -0.0018116105,
    -0.0009596314,
    -0.0010657149,
    -0.00327356,
    -0.006341719,
    -0.32459947,
    -0.006449215,
    -0.0009336777,
    -0.08511717,
    -0.23163807,
    -0.076165214,
    -0.018060217,
    -0.42818737,
    -0.0063564745,
    -0.0008936471,
    -0.00046992695,
    -0.0005383865,
    -0.002414834,
    -0.03696295,
    -0.8608064,
    -0.001788501,
    -0.08647393,
    -0.0012058873,
    -0.001913485,
    -0.056518156,
    -0.004060604,
    -0.5678449,
    -0.013743506,
    -0.004474476,
    -0.0019641262,
    -0.0034104527,
    -0.0058005694,
    -0.001934507,
    -0.000493718,
    -0.00035931446,
    -0.0022166052
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " glasses",
    "\n",
    " find",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " glasses",
    "\n",
    " grab",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "gl",
    "asses",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " on",
    " glasses",
    "\n",
    " put",
    "on",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " assert",
    "('",
    "gl",
    "asses",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "gl",
    "asses",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.017339591
    },
    {
      " 0": -0.009362902
    },
    {
      ":": -0.0020875211
    },
    {
      " find": -0.19771701
    },
    {
      " glasses": -0.15560843
    },
    {
      "\n": -0.03157108
    },
    {
      " find": -0.01651986
    },
    {
      "('": -0.002358254
    },
    {
      "gl": -0.13674423
    },
    {
      "asses": -0.0018101772
    },
    {
      "')": -0.00420802
    },
    {
      "\n": -0.0083111655
    },
    {
      " #": -0.004264169
    },
    {
      " 1": -0.0023982245
    },
    {
      ":": -0.000591883
    },
    {
      " grab": -0.113946915
    },
    {
      " glasses": -0.07510261
    },
    {
      "\n": -0.018022528
    },
    {
      " assert": -0.59259653
    },
    {
      "('": -0.0014070758
    },
    {
      "gl": -0.00046193527
    },
    {
      "asses": -0.0013909019
    },
    {
      "')": -0.0016122478
    },
    {
      "\n": -0.0050479206
    },
    {
      " #": -0.51746273
    },
    {
      "('": -0.0019278782
    },
    {
      "gl": -0.26159987
    },
    {
      "'": -0.0029771724
    },
    {
      " to": -0.0011345734
    },
    {
      " '": -0.0031193448
    },
    {
      "gl": -0.0011634555
    },
    {
      "asses": -0.0014353112
    },
    {
      "')": -0.0068099415
    },
    {
      "\n": -0.006205924
    },
    {
      " else": -0.0027583297
    },
    {
      ":": -0.0025733605
    },
    {
      " find": -0.019290874
    },
    {
      "('": -0.0018116105
    },
    {
      "gl": -0.0009596314
    },
    {
      "asses": -0.0010657149
    },
    {
      "')": -0.00327356
    },
    {
      "\n": -0.006341719
    },
    {
      " #": -0.32459947
    },
    {
      " 2": -0.006449215
    },
    {
      ":": -0.0009336777
    },
    {
      " put": -0.08511717
    },
    {
      " on": -0.23163807
    },
    {
      " glasses": -0.076165214
    },
    {
      "\n": -0.018060217
    },
    {
      " put": -0.42818737
    },
    {
      "on": -0.0063564745
    },
    {
      "('": -0.0008936471
    },
    {
      "gl": -0.00046992695
    },
    {
      "asses": -0.0005383865
    },
    {
      "')": -0.002414834
    },
    {
      "\n": -0.03696295
    },
    {
      " #": -0.8255558
    },
    {
      "('": -0.001788501
    },
    {
      "gl": -0.08647393
    },
    {
      "asses": -0.0012058873
    },
    {
      "'": -0.001913485
    },
    {
      " in": -0.056518156
    },
    {
      " '": -0.004060604
    },
    {
      "hands": -0.5678449
    },
    {
      "')": -0.013743506
    },
    {
      "\n": -0.004474476
    },
    {
      " else": -0.0019641262
    },
    {
      ":": -0.0034104527
    },
    {
      " grab": -0.0058005694
    },
    {
      "('": -0.001934507
    },
    {
      "gl": -0.000493718
    },
    {
      "asses": -0.00035931446
    },
    {
      "')": -0.0022166052
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.181870698928833
[(" # 0: find computer\n find('computer')\n # 1: turn on the computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')\n # 2: find mouse\n find('mouse')\n # 3: grab mouse\n assert('close' to 'mouse')\n else: find('mouse')\n grab('mouse')\n # 4: use mouse to interact with the computer\n touch('mouse')\n move('mouse')\n click('mouse')\n # 5: find keyboard\n find('keyboard')\n # 6: use keyboard to interact with the computer\n touch('keyboard')\n type('keyboard')\n press('keyboard')\n # 7: done", <OpenAIObject at 0x7fd308033f90> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3397,
    3398,
    3403,
    3405,
    3413,
    3415,
    3416,
    3418,
    3420,
    3421,
    3426,
    3429,
    3433,
    3442,
    3443,
    3450,
    3452,
    3457,
    3458,
    3461,
    3463,
    3471,
    3473,
    3474,
    3479,
    3480,
    3485,
    3487,
    3495,
    3497,
    3498,
    3505,
    3507,
    3509,
    3517,
    3519,
    3520,
    3522,
    3524,
    3525,
    3530,
    3536,
    3537,
    3542,
    3544,
    3549,
    3551,
    3552,
    3554,
    3556,
    3557,
    3562,
    3568,
    3569,
    3576,
    3578,
    3583,
    3584,
    3587,
    3589,
    3594,
    3596,
    3597,
    3602,
    3603,
    3608,
    3610,
    3615,
    3617,
    3618,
    3623,
    3625,
    3630,
    3632,
    3633,
    3635,
    3637,
    3638,
    3642,
    3648,
    3651,
    3660,
    3665,
    3669,
    3678,
    3679,
    3685,
    3687,
    3692,
    3694,
    3695,
    3700,
    3702,
    3707,
    3709,
    3710,
    3716,
    3718,
    3723,
    3725,
    3726,
    3728,
    3730,
    3731,
    3736,
    3745,
    3746,
    3751,
    3753,
    3756,
    3761,
    3763,
    3764,
    3766,
    3768,
    3769,
    3773,
    3782,
    3785,
    3794,
    3799,
    3803,
    3812,
    3813,
    3819,
    3821,
    3824,
    3829,
    3831,
    3832,
    3837,
    3839,
    3842,
    3847,
    3849,
    3850,
    3856,
    3858,
    3861,
    3866,
    3868,
    3869,
    3871,
    3873,
    3874
  ],
  "token_logprobs": [
    -0.022894435,
    -0.011024849,
    -0.0020743217,
    -0.97441137,
    -0.90719646,
    -0.035686016,
    -0.06529898,
    -0.0028124235,
    -0.0032574127,
    -0.0022537026,
    -0.00884537,
    -0.006015757,
    -0.0036715504,
    -0.0007300778,
    -1.284015,
    -0.06080653,
    -1.3279604,
    -0.02610755,
    -0.016105765,
    -0.6196327,
    -0.0018676817,
    -0.05454957,
    -0.0037749952,
    -0.0013576549,
    -0.0033174532,
    -0.0028698698,
    -0.0068634707,
    -0.005983199,
    -0.00203281,
    -0.0016283673,
    -0.003702661,
    -0.0019078719,
    -0.00087551045,
    -0.0029068112,
    -0.0071195303,
    -0.26520345,
    -0.0027042413,
    -0.001032957,
    -0.0013290665,
    -0.0016340376,
    -0.00604622,
    -0.04415484,
    -0.008696131,
    -0.00063858187,
    -0.5513858,
    -0.80523676,
    -0.14479007,
    -0.044718277,
    -0.0010558084,
    -0.00061848067,
    -0.0020509672,
    -0.0043046325,
    -0.029053587,
    -0.005505172,
    -0.00062170305,
    -0.7135521,
    -0.28045326,
    -0.08189228,
    -0.62196773,
    -0.0010290202,
    -0.008484573,
    -0.001805041,
    -0.0011790916,
    -0.0029043595,
    -0.0015852643,
    -0.0044960934,
    -0.0040844237,
    -0.0011521796,
    -0.0011073037,
    -0.00413799,
    -0.0012731435,
    -0.0010765732,
    -0.0014129244,
    -0.0050531314,
    -0.0059372084,
    -0.0011339772,
    -0.00023464282,
    -0.0013749044,
    -0.0052656434,
    -0.5733057,
    -0.008018513,
    -0.0010372541,
    -2.124433,
    -0.1402511,
    -0.24533194,
    -3.0432875,
    -0.05372362,
    -1.5191935,
    -0.04290062,
    -0.02066415,
    -4.1369104,
    -0.005321012,
    -0.0650209,
    -0.078692265,
    -0.220104,
    -1.1528704,
    -0.032848015,
    -0.004252675,
    -0.012724999,
    -0.1444843,
    -0.80035454,
    -0.0050391126,
    -0.0016497403,
    -0.0029069313,
    -0.40038487,
    -0.37803456,
    -0.0070547597,
    -0.0020498333,
    -2.2534688,
    -0.12253036,
    -0.019481696,
    -0.014989124,
    -0.0013153987,
    -0.00021538827,
    -0.0006487193,
    -0.0023693065,
    -0.0061727576,
    -0.008054385,
    -0.004543093,
    -0.0011499099,
    -1.2889724,
    -0.16407476,
    -0.11920128,
    -0.38172442,
    -0.021499166,
    -0.10681388,
    -0.002372653,
    -0.008007519,
    -0.5728524,
    -0.0007724888,
    -0.00070353557,
    -0.00060381147,
    -0.0030960278,
    -0.007352292,
    -0.19415337,
    -0.012598896,
    -0.0017801995,
    -0.0016139206,
    -0.0051520425,
    -0.7206512,
    -1.3760227,
    -0.017189259,
    -0.0036299757,
    -0.0006277846,
    -0.0041293134,
    -1.4065535,
    -0.10643147,
    -0.014515969,
    -0.0024795434,
    -2.2931092
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " turn",
    " on",
    " the",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " mouse",
    "\n",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " mouse",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "mouse",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " grab",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " use",
    " mouse",
    " to",
    " interact",
    " with",
    " the",
    " computer",
    "\n",
    " touch",
    "('",
    "mouse",
    "')",
    "\n",
    " move",
    "('",
    "mouse",
    "')",
    "\n",
    " click",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " find",
    " keyboard",
    "\n",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " use",
    " keyboard",
    " to",
    " interact",
    " with",
    " the",
    " computer",
    "\n",
    " touch",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " type",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " press",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.022894435
    },
    {
      " 0": -0.011024849
    },
    {
      ":": -0.0020743217
    },
    {
      " walk": -0.63053644
    },
    {
      " computer": -0.90719646
    },
    {
      "\n": -0.035686016
    },
    {
      " find": -0.06529898
    },
    {
      "('": -0.0028124235
    },
    {
      "computer": -0.0032574127
    },
    {
      "')": -0.0022537026
    },
    {
      "\n": -0.00884537
    },
    {
      " #": -0.006015757
    },
    {
      " 1": -0.0036715504
    },
    {
      ":": -0.0007300778
    },
    {
      " turn": -1.284015
    },
    {
      " on": -0.06080653
    },
    {
      " computer": -0.33914322
    },
    {
      " computer": -0.02610755
    },
    {
      "\n": -0.016105765
    },
    {
      " assert": -0.6196327
    },
    {
      "('": -0.0018676817
    },
    {
      "close": -0.05454957
    },
    {
      "'": -0.0037749952
    },
    {
      " to": -0.0013576549
    },
    {
      " '": -0.0033174532
    },
    {
      "computer": -0.0028698698
    },
    {
      "')": -0.0068634707
    },
    {
      "\n": -0.005983199
    },
    {
      " else": -0.00203281
    },
    {
      ":": -0.0016283673
    },
    {
      " find": -0.003702661
    },
    {
      "('": -0.0019078719
    },
    {
      "computer": -0.00087551045
    },
    {
      "')": -0.0029068112
    },
    {
      "\n": -0.0071195303
    },
    {
      " switch": -0.26520345
    },
    {
      "on": -0.0027042413
    },
    {
      "('": -0.001032957
    },
    {
      "computer": -0.0013290665
    },
    {
      "')": -0.0016340376
    },
    {
      "\n": -0.00604622
    },
    {
      " #": -0.04415484
    },
    {
      " 2": -0.008696131
    },
    {
      ":": -0.00063858187
    },
    {
      " find": -0.5513858
    },
    {
      " mouse": -0.80523676
    },
    {
      "\n": -0.14479007
    },
    {
      " find": -0.044718277
    },
    {
      "('": -0.0010558084
    },
    {
      "mouse": -0.00061848067
    },
    {
      "')": -0.0020509672
    },
    {
      "\n": -0.0043046325
    },
    {
      " #": -0.029053587
    },
    {
      " 3": -0.005505172
    },
    {
      ":": -0.00062170305
    },
    {
      " grab": -0.7135521
    },
    {
      " mouse": -0.28045326
    },
    {
      "\n": -0.08189228
    },
    {
      " assert": -0.62196773
    },
    {
      "('": -0.0010290202
    },
    {
      "close": -0.008484573
    },
    {
      "'": -0.001805041
    },
    {
      " to": -0.0011790916
    },
    {
      " '": -0.0029043595
    },
    {
      "mouse": -0.0015852643
    },
    {
      "')": -0.0044960934
    },
    {
      "\n": -0.0040844237
    },
    {
      " else": -0.0011521796
    },
    {
      ":": -0.0011073037
    },
    {
      " find": -0.00413799
    },
    {
      "('": -0.0012731435
    },
    {
      "mouse": -0.0010765732
    },
    {
      "')": -0.0014129244
    },
    {
      "\n": -0.0050531314
    },
    {
      " grab": -0.0059372084
    },
    {
      "('": -0.0011339772
    },
    {
      "mouse": -0.00023464282
    },
    {
      "')": -0.0013749044
    },
    {
      "\n": -0.0052656434
    },
    {
      " #": -0.5733057
    },
    {
      " 4": -0.008018513
    },
    {
      ":": -0.0010372541
    },
    {
      " move": -0.9223323
    },
    {
      " mouse": -0.1402511
    },
    {
      " to": -0.24533194
    },
    {
      " click": -1.6098026
    },
    {
      " with": -0.05372362
    },
    {
      " computer": -0.2811878
    },
    {
      " computer": -0.04290062
    },
    {
      "\n": -0.02066415
    },
    {
      " assert": -0.9259757
    },
    {
      "('": -0.005321012
    },
    {
      "mouse": -0.0650209
    },
    {
      "')": -0.078692265
    },
    {
      "\n": -0.220104
    },
    {
      " move": -1.1528704
    },
    {
      "('": -0.032848015
    },
    {
      "mouse": -0.004252675
    },
    {
      "')": -0.012724999
    },
    {
      "\n": -0.1444843
    },
    {
      " click": -0.80035454
    },
    {
      "('": -0.0050391126
    },
    {
      "mouse": -0.0016497403
    },
    {
      "')": -0.0029069313
    },
    {
      "\n": -0.40038487
    },
    {
      " #": -0.37803456
    },
    {
      " 5": -0.0070547597
    },
    {
      ":": -0.0020498333
    },
    {
      " Done": -0.3596129
    },
    {
      " keyboard": -0.12253036
    },
    {
      "\n": -0.019481696
    },
    {
      " find": -0.014989124
    },
    {
      "('": -0.0013153987
    },
    {
      "key": -0.00021538827
    },
    {
      "board": -0.0006487193
    },
    {
      "')": -0.0023693065
    },
    {
      "\n": -0.0061727576
    },
    {
      " #": -0.008054385
    },
    {
      " 6": -0.004543093
    },
    {
      ":": -0.0011499099
    },
    {
      " grab": -0.6522737
    },
    {
      " keyboard": -0.16407476
    },
    {
      " to": -0.11920128
    },
    {
      " interact": -0.38172442
    },
    {
      " with": -0.021499166
    },
    {
      " the": -0.10681388
    },
    {
      " computer": -0.002372653
    },
    {
      "\n": -0.008007519
    },
    {
      " touch": -0.5728524
    },
    {
      "('": -0.0007724888
    },
    {
      "key": -0.00070353557
    },
    {
      "board": -0.00060381147
    },
    {
      "')": -0.0030960278
    },
    {
      "\n": -0.007352292
    },
    {
      " type": -0.19415337
    },
    {
      "('": -0.012598896
    },
    {
      "key": -0.0017801995
    },
    {
      "board": -0.0016139206
    },
    {
      "')": -0.0051520425
    },
    {
      "<|endoftext|>": -0.69912285
    },
    {
      " #": -0.7800821
    },
    {
      "('": -0.017189259
    },
    {
      "key": -0.0036299757
    },
    {
      "board": -0.0006277846
    },
    {
      "')": -0.0041293134
    },
    {
      "<|endoftext|>": -0.2994321
    },
    {
      " #": -0.10643147
    },
    {
      " 7": -0.014515969
    },
    {
      ":": -0.0024795434
    },
    {
      " Done": -0.15625685
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.073857069015503
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find desk\n walk('desk')\n find('desk')\n # 2: find alarm clock\n find('alarm_clock')\n # 3: grab alarm clock\n grab('alarm_clock')\n # 4: put alarm clock on desk\n puton('alarm_clock', 'desk')\n # 5: Done", <OpenAIObject at 0x7fd3080d6090> JSON: {
  "text_offset": [
    3390,
    3392,
    3394,
    3395,
    3400,
    3403,
    3411,
    3412,
    3417,
    3419,
    3426,
    3428,
    3429,
    3431,
    3433,
    3434,
    3439,
    3444,
    3445,
    3450,
    3452,
    3455,
    3456,
    3458,
    3459,
    3464,
    3466,
    3469,
    3470,
    3472,
    3473,
    3475,
    3477,
    3478,
    3483,
    3489,
    3495,
    3496,
    3501,
    3503,
    3505,
    3508,
    3509,
    3514,
    3516,
    3517,
    3519,
    3521,
    3522,
    3527,
    3533,
    3539,
    3540,
    3545,
    3547,
    3549,
    3552,
    3553,
    3558,
    3560,
    3561,
    3563,
    3565,
    3566,
    3570,
    3576,
    3582,
    3585,
    3590,
    3591,
    3595,
    3597,
    3599,
    3601,
    3604,
    3605,
    3610,
    3612,
    3614,
    3617,
    3618,
    3620,
    3621,
    3623,
    3625,
    3626
  ],
  "token_logprobs": [
    -0.02056923,
    -0.0090949,
    -0.0021405614,
    -0.8132224,
    -0.26943657,
    -0.07564242,
    -0.02123374,
    -0.0057621403,
    -0.0052603125,
    -0.0016865203,
    -0.0012157318,
    -0.009604734,
    -0.0033785151,
    -0.0031111552,
    -0.0005467358,
    -0.039257657,
    -2.5222337,
    -0.010785923,
    -0.28000176,
    -0.0006543287,
    -0.0032063464,
    -9.091469e-05,
    -0.0005711877,
    -0.002631508,
    -0.008010702,
    -0.00040355683,
    -0.0044381954,
    -0.00013323847,
    -0.00070639845,
    -0.005057385,
    -0.0021767605,
    -0.004452444,
    -0.00047290904,
    -0.100442104,
    -0.057805732,
    -0.08011315,
    -0.014566711,
    -0.015467768,
    -0.00067162147,
    -0.0034130847,
    -0.00014337122,
    -0.0236732,
    -0.0004225786,
    -0.0022042985,
    -0.004504892,
    -0.007200575,
    -0.005449074,
    -0.00073926337,
    -0.7917749,
    -0.43668875,
    -0.008844528,
    -0.034283705,
    -0.38075706,
    -0.0010752628,
    -0.00044106436,
    -7.255186e-05,
    -0.0033770802,
    -0.00032622044,
    -0.0020487567,
    -0.0052123168,
    -0.19867876,
    -0.008643762,
    -0.0009154238,
    -0.21313064,
    -0.19172147,
    -0.0045121377,
    -0.25109047,
    -0.45584765,
    -0.012641877,
    -0.99894834,
    -0.10231306,
    -0.0015311155,
    -0.09875333,
    -0.00031847187,
    -0.002836692,
    -0.0004367719,
    -1.1922154,
    -0.002834182,
    -0.0026156711,
    -3.869565e-05,
    -0.0016428749,
    -0.532283,
    -0.05561417,
    -0.006309087,
    -0.001725804,
    -0.71922845
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " desk",
    "\n",
    " walk",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " find",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " alarm",
    " clock",
    "\n",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " alarm",
    " clock",
    " on",
    " desk",
    "\n",
    " put",
    "on",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "',",
    " '",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.02056923
    },
    {
      " 0": -0.0090949
    },
    {
      ":": -0.0021405614
    },
    {
      " find": -0.74486214
    },
    {
      " to": -0.26943657
    },
    {
      " bedroom": -0.07564242
    },
    {
      "\n": -0.02123374
    },
    {
      " walk": -0.0057621403
    },
    {
      "('": -0.0052603125
    },
    {
      "bedroom": -0.0016865203
    },
    {
      "')": -0.0012157318
    },
    {
      "\n": -0.009604734
    },
    {
      " #": -0.0033785151
    },
    {
      " 1": -0.0031111552
    },
    {
      ":": -0.0005467358
    },
    {
      " find": -0.039257657
    },
    {
      " alarm": -0.30439174
    },
    {
      "\n": -0.010785923
    },
    {
      " walk": -0.28000176
    },
    {
      "('": -0.0006543287
    },
    {
      "des": -0.0032063464
    },
    {
      "k": -9.091469e-05
    },
    {
      "')": -0.0005711877
    },
    {
      "\n": -0.002631508
    },
    {
      " find": -0.008010702
    },
    {
      "('": -0.00040355683
    },
    {
      "des": -0.0044381954
    },
    {
      "k": -0.00013323847
    },
    {
      "')": -0.00070639845
    },
    {
      "\n": -0.005057385
    },
    {
      " #": -0.0021767605
    },
    {
      " 2": -0.004452444
    },
    {
      ":": -0.00047290904
    },
    {
      " find": -0.100442104
    },
    {
      " alarm": -0.057805732
    },
    {
      " clock": -0.08011315
    },
    {
      "\n": -0.014566711
    },
    {
      " find": -0.015467768
    },
    {
      "('": -0.00067162147
    },
    {
      "al": -0.0034130847
    },
    {
      "arm": -0.00014337122
    },
    {
      "_": -0.0236732
    },
    {
      "clock": -0.0004225786
    },
    {
      "')": -0.0022042985
    },
    {
      "\n": -0.004504892
    },
    {
      " #": -0.007200575
    },
    {
      " 3": -0.005449074
    },
    {
      ":": -0.00073926337
    },
    {
      " grab": -0.7917749
    },
    {
      " alarm": -0.43668875
    },
    {
      " clock": -0.008844528
    },
    {
      "\n": -0.034283705
    },
    {
      " grab": -0.38075706
    },
    {
      "('": -0.0010752628
    },
    {
      "al": -0.00044106436
    },
    {
      "arm": -7.255186e-05
    },
    {
      "_": -0.0033770802
    },
    {
      "clock": -0.00032622044
    },
    {
      "')": -0.0020487567
    },
    {
      "\n": -0.0052123168
    },
    {
      " #": -0.19867876
    },
    {
      " 4": -0.008643762
    },
    {
      ":": -0.0009154238
    },
    {
      " put": -0.21313064
    },
    {
      " alarm": -0.19172147
    },
    {
      " clock": -0.0045121377
    },
    {
      " on": -0.25109047
    },
    {
      " desk": -0.45584765
    },
    {
      "\n": -0.012641877
    },
    {
      " assert": -0.78134567
    },
    {
      "on": -0.10231306
    },
    {
      "('": -0.0015311155
    },
    {
      "al": -0.09875333
    },
    {
      "arm": -0.00031847187
    },
    {
      "_": -0.002836692
    },
    {
      "clock": -0.0004367719
    },
    {
      "')": -0.48928592
    },
    {
      " '": -0.002834182
    },
    {
      "des": -0.0026156711
    },
    {
      "k": -3.869565e-05
    },
    {
      "')": -0.0016428749
    },
    {
      "\n": -0.532283
    },
    {
      " #": -0.05561417
    },
    {
      " 5": -0.006309087
    },
    {
      ":": -0.001725804
    },
    {
      " Done": -0.71922845
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.80375599861145
[(" # 0: find chair\n find('chair')\n # 1: walk to chair\n walk('chair')\n # 2: sit in chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')", <OpenAIObject at 0x7fd33a26cd60> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3392,
    3393,
    3398,
    3400,
    3405,
    3407,
    3408,
    3410,
    3412,
    3413,
    3418,
    3421,
    3427,
    3428,
    3433,
    3435,
    3440,
    3442,
    3443,
    3445,
    3447,
    3448,
    3452,
    3455,
    3461,
    3462,
    3469,
    3471,
    3476,
    3477,
    3480,
    3482,
    3487,
    3489,
    3490,
    3495,
    3496,
    3501,
    3503,
    3508,
    3510,
    3511,
    3515,
    3517,
    3522
  ],
  "token_logprobs": [
    -0.02281857,
    -0.00860288,
    -0.0018331658,
    -0.6038982,
    -0.16345571,
    -0.027733406,
    -0.039576035,
    -0.0020071885,
    -0.0012114957,
    -0.0015272944,
    -0.007737251,
    -0.0037796611,
    -0.002695814,
    -0.00070019584,
    -0.6356085,
    -0.05858513,
    -0.12728453,
    -0.020716239,
    -0.40869266,
    -0.004668063,
    -0.0010249014,
    -0.001625263,
    -0.005842058,
    -0.073446855,
    -0.0044174204,
    -0.00080404343,
    -0.10251115,
    -0.58222926,
    -0.15864901,
    -0.009260142,
    -0.49680215,
    -0.0014182372,
    -0.013729427,
    -0.003099974,
    -0.0009240134,
    -0.0022340498,
    -0.000650988,
    -0.0040294845,
    -0.0038714458,
    -0.0015355338,
    -0.0011489544,
    -0.033551674,
    -0.0013658915,
    -0.0006570705,
    -0.0019903465,
    -0.0048894207,
    -0.34051222,
    -0.0017067596,
    -0.0005074364,
    -0.001107482
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " walk",
    " to",
    " chair",
    "\n",
    " walk",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " in",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.02281857
    },
    {
      " 0": -0.00860288
    },
    {
      ":": -0.0018331658
    },
    {
      " find": -0.6038982
    },
    {
      " chair": -0.16345571
    },
    {
      "\n": -0.027733406
    },
    {
      " find": -0.039576035
    },
    {
      "('": -0.0020071885
    },
    {
      "chair": -0.0012114957
    },
    {
      "')": -0.0015272944
    },
    {
      "\n": -0.007737251
    },
    {
      " #": -0.0037796611
    },
    {
      " 1": -0.002695814
    },
    {
      ":": -0.00070019584
    },
    {
      " walk": -0.6356085
    },
    {
      " to": -0.05858513
    },
    {
      " chair": -0.12728453
    },
    {
      "\n": -0.020716239
    },
    {
      " walk": -0.40869266
    },
    {
      "('": -0.004668063
    },
    {
      "chair": -0.0010249014
    },
    {
      "')": -0.001625263
    },
    {
      "\n": -0.005842058
    },
    {
      " #": -0.073446855
    },
    {
      " 2": -0.0044174204
    },
    {
      ":": -0.00080404343
    },
    {
      " sit": -0.10251115
    },
    {
      " in": -0.58222926
    },
    {
      " chair": -0.15864901
    },
    {
      "\n": -0.009260142
    },
    {
      " assert": -0.49680215
    },
    {
      "('": -0.0014182372
    },
    {
      "close": -0.013729427
    },
    {
      "'": -0.003099974
    },
    {
      " to": -0.0009240134
    },
    {
      " '": -0.0022340498
    },
    {
      "chair": -0.000650988
    },
    {
      "')": -0.0040294845
    },
    {
      "\n": -0.0038714458
    },
    {
      " else": -0.0015355338
    },
    {
      ":": -0.0011489544
    },
    {
      " find": -0.033551674
    },
    {
      "('": -0.0013658915
    },
    {
      "chair": -0.0006570705
    },
    {
      "')": -0.0019903465
    },
    {
      "\n": -0.0048894207
    },
    {
      " sit": -0.34051222
    },
    {
      "('": -0.0017067596
    },
    {
      "chair": -0.0005074364
    },
    {
      "')": -0.001107482
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.1932449340820312
[(" # 0: find alarm\n find('alarm')\n # 1: switch off alarm\n assert('close' to 'alarm')\n else: find('alarm')\n switchoff('alarm')", <OpenAIObject at 0x7fd2f8027bd0> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3394,
    3395,
    3400,
    3402,
    3404,
    3407,
    3409,
    3410,
    3412,
    3414,
    3415,
    3422,
    3426,
    3432,
    3433,
    3440,
    3442,
    3447,
    3448,
    3451,
    3453,
    3455,
    3458,
    3460,
    3461,
    3466,
    3467,
    3472,
    3474,
    3476,
    3479,
    3481,
    3482,
    3489,
    3492,
    3494,
    3496,
    3499
  ],
  "token_logprobs": [
    -0.024352469,
    -0.013606641,
    -0.002631985,
    -0.30965254,
    -0.22456335,
    -0.58758587,
    -0.0322969,
    -0.002765385,
    -0.0050606197,
    -0.00025646458,
    -0.010836294,
    -0.01019407,
    -0.005021798,
    -0.004326245,
    -0.0009750853,
    -0.87598974,
    -0.09512517,
    -0.4640121,
    -0.019637786,
    -0.6405174,
    -0.0022107507,
    -0.022254484,
    -0.0038563665,
    -0.0010396382,
    -0.002155914,
    -0.0016438306,
    -0.00055544183,
    -0.006117405,
    -0.007141262,
    -0.002311235,
    -0.0019673523,
    -0.0038202277,
    -0.0013565801,
    -0.00052938296,
    -6.468596e-05,
    -0.0045301593,
    -0.007713946,
    -0.04103862,
    -0.007695626,
    -0.0010948947,
    -0.00044690748,
    -0.00016614476,
    -0.0021106973
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " alarm",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " switch",
    " off",
    " alarm",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "al",
    "arm",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "al",
    "arm",
    "')",
    "\n",
    " switch",
    "off",
    "('",
    "al",
    "arm",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.024352469
    },
    {
      " 0": -0.013606641
    },
    {
      ":": -0.002631985
    },
    {
      " find": -0.30965254
    },
    {
      " alarm": -0.22456335
    },
    {
      "\n": -0.58758587
    },
    {
      " find": -0.0322969
    },
    {
      "('": -0.002765385
    },
    {
      "al": -0.0050606197
    },
    {
      "arm": -0.00025646458
    },
    {
      "')": -0.010836294
    },
    {
      "\n": -0.01019407
    },
    {
      " #": -0.005021798
    },
    {
      " 1": -0.004326245
    },
    {
      ":": -0.0009750853
    },
    {
      " switch": -0.87598974
    },
    {
      " off": -0.09512517
    },
    {
      " alarm": -0.4640121
    },
    {
      "\n": -0.019637786
    },
    {
      " assert": -0.6405174
    },
    {
      "('": -0.0022107507
    },
    {
      "close": -0.022254484
    },
    {
      "'": -0.0038563665
    },
    {
      " to": -0.0010396382
    },
    {
      " '": -0.002155914
    },
    {
      "al": -0.0016438306
    },
    {
      "arm": -0.00055544183
    },
    {
      "')": -0.006117405
    },
    {
      "\n": -0.007141262
    },
    {
      " else": -0.002311235
    },
    {
      ":": -0.0019673523
    },
    {
      " find": -0.0038202277
    },
    {
      "('": -0.0013565801
    },
    {
      "al": -0.00052938296
    },
    {
      "arm": -6.468596e-05
    },
    {
      "')": -0.0045301593
    },
    {
      "\n": -0.007713946
    },
    {
      " switch": -0.04103862
    },
    {
      "off": -0.007695626
    },
    {
      "('": -0.0010948947
    },
    {
      "al": -0.00044690748
    },
    {
      "arm": -0.00016614476
    },
    {
      "')": -0.0021106973
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.6002089977264404
[(" # 0: find bed\n find('bed')\n # 1: sit on the bed\n assert('close' to 'bed')\n else: find('bed')\n sit('bed')\n # 2: lie down on the bed\n lie('bed')\n # 3: sleep\n sleep()", <OpenAIObject at 0x7fd2f8027cc0> JSON: {
  "text_offset": [
    3372,
    3374,
    3376,
    3377,
    3382,
    3386,
    3387,
    3392,
    3394,
    3397,
    3399,
    3400,
    3402,
    3404,
    3405,
    3409,
    3412,
    3416,
    3420,
    3421,
    3428,
    3430,
    3435,
    3436,
    3439,
    3441,
    3444,
    3446,
    3447,
    3452,
    3453,
    3458,
    3460,
    3463,
    3465,
    3466,
    3470,
    3472,
    3475,
    3477,
    3478,
    3480,
    3482,
    3483,
    3487,
    3492,
    3495,
    3499,
    3503,
    3504,
    3508,
    3510,
    3513,
    3515,
    3516,
    3518,
    3520,
    3521,
    3527,
    3528,
    3534
  ],
  "token_logprobs": [
    -0.018925497,
    -0.010594645,
    -0.0020805919,
    -1.1271313,
    -0.51315826,
    -0.029728178,
    -0.19732939,
    -0.0021467744,
    -0.00035490093,
    -0.0016718914,
    -0.007143782,
    -0.0049202656,
    -0.003234869,
    -0.0006353595,
    -1.9595295,
    -0.09909326,
    -1.9074299,
    -0.0068721147,
    -0.015682986,
    -0.4718613,
    -0.0015264626,
    -0.0051823007,
    -0.0027346038,
    -0.0009791375,
    -0.0022194127,
    -0.00033355693,
    -0.0048203003,
    -0.005524709,
    -0.0014713621,
    -0.0015195354,
    -0.0042307065,
    -0.0017672452,
    -0.00032681835,
    -0.0009049231,
    -0.0056076045,
    -0.26034734,
    -0.0011594589,
    -0.00013776746,
    -0.0005441123,
    -0.005365236,
    -0.032009825,
    -0.0070884954,
    -0.00067209924,
    -0.72603047,
    -0.22590344,
    -0.54480714,
    -0.3670259,
    -0.00079169736,
    -0.010710311,
    -0.18346074,
    -0.023543028,
    -0.003503579,
    -0.0013156371,
    -0.004713516,
    -0.028094294,
    -0.0060566566,
    -0.00073234556,
    -1.6270216,
    -0.10287932,
    -0.026781749,
    -0.005038873
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " sit",
    " on",
    " the",
    " bed",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " lie",
    " down",
    " on",
    " the",
    " bed",
    "\n",
    " lie",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sleep",
    "\n",
    " sleep",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.018925497
    },
    {
      " 0": -0.010594645
    },
    {
      ":": -0.0020805919
    },
    {
      " walk": -0.6895265
    },
    {
      " bed": -0.51315826
    },
    {
      "\n": -0.029728178
    },
    {
      " find": -0.19732939
    },
    {
      "('": -0.0021467744
    },
    {
      "bed": -0.00035490093
    },
    {
      "')": -0.0016718914
    },
    {
      "\n": -0.007143782
    },
    {
      " #": -0.0049202656
    },
    {
      " 1": -0.003234869
    },
    {
      ":": -0.0006353595
    },
    {
      " lay": -0.5306908
    },
    {
      " on": -0.09909326
    },
    {
      " bed": -0.17175016
    },
    {
      " bed": -0.0068721147
    },
    {
      "\n": -0.015682986
    },
    {
      " assert": -0.4718613
    },
    {
      "('": -0.0015264626
    },
    {
      "close": -0.0051823007
    },
    {
      "'": -0.0027346038
    },
    {
      " to": -0.0009791375
    },
    {
      " '": -0.0022194127
    },
    {
      "bed": -0.00033355693
    },
    {
      "')": -0.0048203003
    },
    {
      "\n": -0.005524709
    },
    {
      " else": -0.0014713621
    },
    {
      ":": -0.0015195354
    },
    {
      " find": -0.0042307065
    },
    {
      "('": -0.0017672452
    },
    {
      "bed": -0.00032681835
    },
    {
      "')": -0.0009049231
    },
    {
      "\n": -0.0056076045
    },
    {
      " sit": -0.26034734
    },
    {
      "('": -0.0011594589
    },
    {
      "bed": -0.00013776746
    },
    {
      "')": -0.0005441123
    },
    {
      "\n": -0.005365236
    },
    {
      " #": -0.032009825
    },
    {
      " 2": -0.0070884954
    },
    {
      ":": -0.00067209924
    },
    {
      " lie": -0.72603047
    },
    {
      " down": -0.22590344
    },
    {
      " on": -0.54480714
    },
    {
      " the": -0.3670259
    },
    {
      " bed": -0.00079169736
    },
    {
      "\n": -0.010710311
    },
    {
      " lie": -0.18346074
    },
    {
      "('": -0.023543028
    },
    {
      "bed": -0.003503579
    },
    {
      "')": -0.0013156371
    },
    {
      "\n": -0.004713516
    },
    {
      " #": -0.028094294
    },
    {
      " 3": -0.0060566566
    },
    {
      ":": -0.00073234556
    },
    {
      " close": -0.55490667
    },
    {
      "\n": -0.10287932
    },
    {
      " sleep": -0.026781749
    },
    {
      "()": -0.005038873
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 7.71973991394043
[(" # 0: walk to home office\n walk('home_office')\n # 1: find computer\n find('computer')\n # 2: turn on the computer\n switchon('computer')\n # 3: sit on chair\n find('chair')\n sit('chair')\n # 4: touch the mousepad\n touch('mousepad')\n # 5: use the mouse\n find('mouse')\n grab('mouse')\n # 6: use the keyboard\n find('keyboard')\n grab('keyboard')\n # 7: look at the computer screen\n lookat('computer_screen')\ndef wash_dishes():\n # 0: find sink\n find('sink')\n # 1: get water\n turnto('sink')\n lookat('sink')\n # 2: find dishwasher\n find('dishwasher')\n # 3: fill dishwasher with water\n turnon('dishwasher')\n # 4: add soap\n add('soap')\n # 5: put dishes in dishwasher\n putin('dishes','dishwasher')\n # 6: turn on the dishwasher\n turnon('dishwasher')\n # 7: wait for dishwasher to finish\n wait()\n # 8: remove dishes\n pull('dishes','dishwasher')\n # 9: turn off dishwasher\n turnoff('dishwasher')\n # 10: put dishes away\n putback('dishes','cupboard')", <OpenAIObject at 0x7fd2f8036d10> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3394,
    3401,
    3402,
    3407,
    3409,
    3413,
    3414,
    3420,
    3422,
    3423,
    3425,
    3427,
    3428,
    3433,
    3442,
    3443,
    3448,
    3450,
    3458,
    3460,
    3461,
    3463,
    3465,
    3466,
    3471,
    3474,
    3478,
    3487,
    3488,
    3495,
    3497,
    3499,
    3507,
    3509,
    3510,
    3512,
    3514,
    3515,
    3519,
    3522,
    3528,
    3529,
    3534,
    3536,
    3541,
    3543,
    3544,
    3548,
    3550,
    3555,
    3557,
    3558,
    3560,
    3562,
    3563,
    3569,
    3573,
    3579,
    3582,
    3583,
    3589,
    3591,
    3596,
    3599,
    3601,
    3602,
    3604,
    3606,
    3607,
    3611,
    3615,
    3621,
    3622,
    3627,
    3629,
    3634,
    3636,
    3637,
    3642,
    3644,
    3649,
    3651,
    3652,
    3654,
    3656,
    3657,
    3661,
    3665,
    3674,
    3675,
    3680,
    3682,
    3685,
    3690,
    3692,
    3693,
    3698,
    3700,
    3703,
    3708,
    3710,
    3711,
    3713,
    3715,
    3716,
    3721,
    3724,
    3728,
    3737,
    3744,
    3745,
    3750,
    3752,
    3754,
    3762,
    3763,
    3769,
    3771,
    3772,
    3775,
    3780,
    3781,
    3782,
    3787,
    3790,
    3791,
    3793,
    3795,
    3796,
    3801,
    3806,
    3807,
    3812,
    3814,
    3815,
    3818,
    3820,
    3821,
    3823,
    3825,
    3826,
    3830,
    3836,
    3837,
    3841,
    3843,
    3844,
    3846,
    3847,
    3850,
    3852,
    3853,
    3858,
    3860,
    3862,
    3863,
    3866,
    3868,
    3869,
    3871,
    3873,
    3874,
    3879,
    3884,
    3890,
    3891,
    3896,
    3898,
    3899,
    3902,
    3908,
    3910,
    3911,
    3913,
    3915,
    3916,
    3921,
    3926,
    3932,
    3937,
    3943,
    3944,
    3949,
    3951,
    3953,
    3954,
    3957,
    3963,
    3965,
    3966,
    3968,
    3970,
    3971,
    3975,
    3980,
    3981,
    3985,
    3987,
    3989,
    3991,
    3993,
    3994,
    3996,
    3998,
    3999,
    4003,
    4010,
    4013,
    4018,
    4024,
    4025,
    4029,
    4031,
    4033,
    4034,
    4039,
    4042,
    4043,
    4046,
    4052,
    4054,
    4055,
    4057,
    4059,
    4060,
    4065,
    4068,
    4072,
    4077,
    4083,
    4084,
    4089,
    4091,
    4093,
    4094,
    4097,
    4103,
    4105,
    4106,
    4108,
    4110,
    4111,
    4116,
    4120,
    4125,
    4131,
    4134,
    4141,
    4142,
    4147,
    4149,
    4150,
    4152,
    4154,
    4155,
    4162,
    4169,
    4170,
    4175,
    4177,
    4178,
    4183,
    4186,
    4187,
    4190,
    4196,
    4198,
    4199,
    4201,
    4203,
    4204,
    4209,
    4213,
    4218,
    4224,
    4225,
    4230,
    4233,
    4235,
    4236,
    4239,
    4245,
    4247,
    4248,
    4250,
    4253,
    4254,
    4258,
    4265,
    4270,
    4271,
    4275,
    4279,
    4281,
    4282,
    4287,
    4290,
    4293,
    4298
  ],
  "token_logprobs": [
    -0.019156653,
    -0.007353613,
    -0.0017770954,
    -0.32672292,
    -0.2658616,
    -0.5502787,
    -0.051760383,
    -0.024377264,
    -0.0065464643,
    -0.0049224226,
    -0.011745886,
    -0.035694048,
    -0.00084359536,
    -0.0027038828,
    -0.008393569,
    -0.0038240564,
    -0.0031996493,
    -0.0006695977,
    -0.04140217,
    -0.46253377,
    -0.033348776,
    -0.25197604,
    -0.0013518042,
    -0.0018452883,
    -0.0019748765,
    -0.0057606413,
    -0.010223576,
    -0.005035938,
    -0.00081692834,
    -0.54653543,
    -0.0307642,
    -0.78045756,
    -0.007965101,
    -0.013786591,
    -1.2731886,
    -0.0041572032,
    -0.0013508496,
    -0.0017238945,
    -0.001890734,
    -0.0046700398,
    -0.018768426,
    -0.0038855677,
    -0.0006057206,
    -1.4819591,
    -0.80704993,
    -0.7769377,
    -0.07939339,
    -0.19586873,
    -0.0015088517,
    -0.0020733671,
    -0.0017839035,
    -0.004129672,
    -0.6402921,
    -0.002121211,
    -0.0011395275,
    -0.00055186276,
    -0.0046159653,
    -0.006811502,
    -0.0067261094,
    -0.0006182413,
    -2.4771097,
    -0.31607133,
    -0.9247191,
    -2.6142416,
    -0.068931416,
    -1.2180904,
    -0.001680728,
    -0.0013874401,
    -0.0059351693,
    -0.0017637815,
    -0.010275726,
    -0.0104777245,
    -0.0053398875,
    -0.00087312347,
    -0.8842835,
    -0.17899807,
    -2.1009152,
    -0.28890195,
    -1.031494,
    -0.0010605833,
    -0.0006401316,
    -0.0031056546,
    -0.009637532,
    -0.35479024,
    -0.0009500853,
    -0.00024036579,
    -0.0016514121,
    -0.014360197,
    -0.7901061,
    -0.007268297,
    -0.0014606201,
    -0.48348552,
    -0.095120184,
    -0.049721867,
    -0.012147807,
    -0.111207314,
    -0.0010536597,
    -0.00050290365,
    -0.0012106603,
    -0.0017243724,
    -0.007755032,
    -0.4910251,
    -0.00052973966,
    -0.0004894227,
    -0.0014116121,
    -0.0017750652,
    -0.05834222,
    -0.068247095,
    -0.013187708,
    -0.0018287484,
    -2.057559,
    -0.010231345,
    -0.14694741,
    -0.5950229,
    -0.17654455,
    -0.008955241,
    -1.7738136,
    -0.0056179143,
    -0.0008973453,
    -0.47105604,
    -0.41657135,
    -0.0023915318,
    -0.0027984374,
    -0.39669302,
    -1.701814,
    -1.908556,
    -0.0005350468,
    -0.62121975,
    -0.0038962788,
    -0.049144454,
    -0.015002617,
    -0.011483514,
    -0.0036332058,
    -0.0015121934,
    -2.1240036,
    -0.99085593,
    -0.027245367,
    -0.13531418,
    -0.00154849,
    -0.0007526251,
    -0.00011726356,
    -0.0013840967,
    -0.0067951195,
    -0.009520788,
    -0.0020883575,
    -0.00049037737,
    -4.5448146,
    -1.8284266,
    -0.5140953,
    -2.4288201,
    -0.00010402765,
    -0.0017303432,
    -0.00076604687,
    -0.45206735,
    -0.00014074863,
    -0.004373597,
    -0.0049882536,
    -1.0499097,
    -0.0005200772,
    -0.0005064818,
    -0.019506011,
    -0.00017902305,
    -0.0023685894,
    -0.005478021,
    -2.430698,
    -0.0069554215,
    -0.0009624952,
    -2.3478978,
    -1.0091428,
    -1.2819026,
    -0.042590883,
    -0.0453391,
    -0.0010485902,
    -0.00060357206,
    -9.305951e-05,
    -0.00310129,
    -0.0020897898,
    -0.0068367086,
    -0.04337166,
    -0.004894986,
    -0.0008977048,
    -1.6015382,
    -0.7903365,
    -0.033062324,
    -0.39777333,
    -0.32963738,
    -0.022696927,
    -4.631912,
    -0.052930135,
    -0.0022708478,
    -0.7439547,
    -0.015399669,
    -0.0030335477,
    -0.0059736036,
    -0.00788856,
    -1.7030523,
    -0.0042618336,
    -0.0009300986,
    -2.0613759,
    -2.720708,
    -0.13257644,
    -1.3621637,
    -0.36461952,
    -0.11108782,
    -0.0004225786,
    -0.110578194,
    -0.010652174,
    -0.031641208,
    -0.0021100985,
    -0.00052568375,
    -1.3115721,
    -0.1685309,
    -0.14194657,
    -0.32932872,
    -0.013044035,
    -0.013582653,
    -0.8835711,
    -0.26521054,
    -0.0036565976,
    -0.030841773,
    -0.2891721,
    -1.7271421,
    -0.0014390715,
    -0.00010057153,
    -0.0017117729,
    -0.0024885677,
    -0.012085421,
    -0.007426211,
    -0.0027019095,
    -0.0008066679,
    -0.85249263,
    -0.048021764,
    -1.5278808,
    -0.007538749,
    -0.010510733,
    -0.01768455,
    -0.38614282,
    -0.0004869231,
    -0.0007863274,
    -0.00020477588,
    -0.0005581845,
    -0.0007666419,
    -0.001380635,
    -0.008564948,
    -0.004095855,
    -0.0051870323,
    -0.0011721682,
    -0.3686603,
    -0.3112354,
    -0.9222373,
    -0.033107053,
    -0.12080217,
    -0.030397007,
    -0.0383507,
    -0.106326655,
    -2.189717,
    -0.02128135,
    -0.008761128,
    -0.0012877658,
    -0.0013510891,
    -2.3647468,
    -0.0704192,
    -1.1697919,
    -1.5764413,
    -0.5182674,
    -0.0013757398,
    -0.009755135,
    -1.047875,
    -0.0027848694,
    -0.00012357882,
    -0.0015158944,
    -0.0029071704,
    -0.031102996,
    -0.00967605,
    -0.003578409,
    -0.0017804388,
    -1.5359765,
    -0.010483267,
    -0.6645838,
    -0.0037278496,
    -0.01769244,
    -0.07978096,
    -0.0024412447,
    -0.00085993914,
    -0.00016066022,
    -7.8634315e-05,
    -0.0012758881,
    -0.0067300093,
    -0.11074598,
    -0.0093040615,
    -0.007064364,
    -0.0024827695,
    -1.4468551,
    -0.07986669,
    -0.3825119,
    -0.023938235,
    -0.06170544,
    -0.4896134,
    -0.0018196115,
    -0.0006722194,
    -0.0018551423,
    -1.1367638,
    -1.1455908,
    -0.0038362634,
    -0.0043753954
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " computer",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " touch",
    " the",
    " mouse",
    "pad",
    "\n",
    " touch",
    "('",
    "mouse",
    "pad",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " use",
    " the",
    " mouse",
    "\n",
    " find",
    "('",
    "mouse",
    "')",
    "\n",
    " grab",
    "('",
    "mouse",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " use",
    " the",
    " keyboard",
    "\n",
    " find",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " grab",
    "('",
    "key",
    "board",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " look",
    " at",
    " the",
    " computer",
    " screen",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "_",
    "screen",
    "')",
    "\n",
    "def",
    " wash",
    "_",
    "d",
    "ishes",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " get",
    " water",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " dish",
    "washer",
    "\n",
    " find",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " fill",
    " dish",
    "washer",
    " with",
    " water",
    "\n",
    " turn",
    "on",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " add",
    " soap",
    "\n",
    " add",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " dishes",
    " in",
    " dish",
    "washer",
    "\n",
    " put",
    "in",
    "('",
    "d",
    "ishes",
    "','",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " turn",
    " on",
    " the",
    " dish",
    "washer",
    "\n",
    " turn",
    "on",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " wait",
    " for",
    " dish",
    "washer",
    " to",
    " finish",
    "\n",
    " wait",
    "()",
    "\n",
    " #",
    " 8",
    ":",
    " remove",
    " dishes",
    "\n",
    " pull",
    "('",
    "d",
    "ishes",
    "','",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 9",
    ":",
    " turn",
    " off",
    " dish",
    "washer",
    "\n",
    " turn",
    "off",
    "('",
    "d",
    "ish",
    "washer",
    "')",
    "\n",
    " #",
    " 10",
    ":",
    " put",
    " dishes",
    " away",
    "\n",
    " put",
    "back",
    "('",
    "d",
    "ishes",
    "','",
    "cup",
    "board",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.019156653
    },
    {
      " 0": -0.007353613
    },
    {
      ":": -0.0017770954
    },
    {
      " walk": -0.32672292
    },
    {
      " to": -0.2658616
    },
    {
      " home": -0.5502787
    },
    {
      " office": -0.051760383
    },
    {
      "\n": -0.024377264
    },
    {
      " walk": -0.0065464643
    },
    {
      "('": -0.0049224226
    },
    {
      "home": -0.011745886
    },
    {
      "_": -0.035694048
    },
    {
      "office": -0.00084359536
    },
    {
      "')": -0.0027038828
    },
    {
      "\n": -0.008393569
    },
    {
      " #": -0.0038240564
    },
    {
      " 1": -0.0031996493
    },
    {
      ":": -0.0006695977
    },
    {
      " find": -0.04140217
    },
    {
      " computer": -0.46253377
    },
    {
      "\n": -0.033348776
    },
    {
      " find": -0.25197604
    },
    {
      "('": -0.0013518042
    },
    {
      "computer": -0.0018452883
    },
    {
      "')": -0.0019748765
    },
    {
      "\n": -0.0057606413
    },
    {
      " #": -0.010223576
    },
    {
      " 2": -0.005035938
    },
    {
      ":": -0.00081692834
    },
    {
      " turn": -0.54653543
    },
    {
      " on": -0.0307642
    },
    {
      " computer": -0.629016
    },
    {
      " computer": -0.007965101
    },
    {
      "\n": -0.013786591
    },
    {
      " assert": -0.56756395
    },
    {
      "on": -0.0041572032
    },
    {
      "('": -0.0013508496
    },
    {
      "computer": -0.0017238945
    },
    {
      "')": -0.001890734
    },
    {
      "\n": -0.0046700398
    },
    {
      " #": -0.018768426
    },
    {
      " 3": -0.0038855677
    },
    {
      ":": -0.0006057206
    },
    {
      " find": -0.75336134
    },
    {
      " on": -0.80704993
    },
    {
      " chair": -0.7769377
    },
    {
      "\n": -0.07939339
    },
    {
      " find": -0.19586873
    },
    {
      "('": -0.0015088517
    },
    {
      "chair": -0.0020733671
    },
    {
      "')": -0.0017839035
    },
    {
      "\n": -0.004129672
    },
    {
      " sit": -0.6402921
    },
    {
      "('": -0.002121211
    },
    {
      "chair": -0.0011395275
    },
    {
      "')": -0.00055186276
    },
    {
      "\n": -0.0046159653
    },
    {
      " #": -0.006811502
    },
    {
      " 4": -0.0067261094
    },
    {
      ":": -0.0006182413
    },
    {
      " use": -1.1652181
    },
    {
      " the": -0.31607133
    },
    {
      " keyboard": -0.84972966
    },
    {
      "\n": -0.21448343
    },
    {
      "\n": -0.068931416
    },
    {
      " assert": -0.81980455
    },
    {
      "('": -0.001680728
    },
    {
      "mouse": -0.0013874401
    },
    {
      "pad": -0.0059351693
    },
    {
      "')": -0.0017637815
    },
    {
      "\n": -0.010275726
    },
    {
      " #": -0.0104777245
    },
    {
      " 5": -0.0053398875
    },
    {
      ":": -0.00087312347
    },
    {
      " use": -0.8842835
    },
    {
      " the": -0.17899807
    },
    {
      " keyboard": -0.7336371
    },
    {
      "\n": -0.28890195
    },
    {
      " grab": -0.8826778
    },
    {
      "('": -0.0010605833
    },
    {
      "mouse": -0.0006401316
    },
    {
      "')": -0.0031056546
    },
    {
      "\n": -0.009637532
    },
    {
      " grab": -0.35479024
    },
    {
      "('": -0.0009500853
    },
    {
      "mouse": -0.00024036579
    },
    {
      "')": -0.0016514121
    },
    {
      "\n": -0.014360197
    },
    {
      " #": -0.7901061
    },
    {
      " 6": -0.007268297
    },
    {
      ":": -0.0014606201
    },
    {
      " use": -0.48348552
    },
    {
      " the": -0.095120184
    },
    {
      " keyboard": -0.049721867
    },
    {
      "\n": -0.012147807
    },
    {
      " find": -0.111207314
    },
    {
      "('": -0.0010536597
    },
    {
      "key": -0.00050290365
    },
    {
      "board": -0.0012106603
    },
    {
      "')": -0.0017243724
    },
    {
      "\n": -0.007755032
    },
    {
      " grab": -0.4910251
    },
    {
      "('": -0.00052973966
    },
    {
      "key": -0.0004894227
    },
    {
      "board": -0.0014116121
    },
    {
      "')": -0.0017750652
    },
    {
      "\n": -0.05834222
    },
    {
      " #": -0.068247095
    },
    {
      " 7": -0.013187708
    },
    {
      ":": -0.0018287484
    },
    {
      " use": -1.2117367
    },
    {
      " at": -0.010231345
    },
    {
      " the": -0.14694741
    },
    {
      " computer": -0.5950229
    },
    {
      " screen": -0.17654455
    },
    {
      "\n": -0.008955241
    },
    {
      " tur": -0.23294292
    },
    {
      "at": -0.0056179143
    },
    {
      "('": -0.0008973453
    },
    {
      "computer": -0.47105604
    },
    {
      "_": -0.41657135
    },
    {
      "screen": -0.0023915318
    },
    {
      "')": -0.0027984374
    },
    {
      "\n": -0.39669302
    },
    {
      " #": -0.25877312
    },
    {
      " make": -1.2550486
    },
    {
      "_": -0.0005350468
    },
    {
      "d": -0.62121975
    },
    {
      "ishes": -0.0038962788
    },
    {
      "():": -0.049144454
    },
    {
      "\n": -0.015002617
    },
    {
      " #": -0.011483514
    },
    {
      " 0": -0.0036332058
    },
    {
      ":": -0.0015121934
    },
    {
      " walk": -0.18211494
    },
    {
      " sink": -0.99085593
    },
    {
      "\n": -0.027245367
    },
    {
      " find": -0.13531418
    },
    {
      "('": -0.00154849
    },
    {
      "s": -0.0007526251
    },
    {
      "ink": -0.00011726356
    },
    {
      "')": -0.0013840967
    },
    {
      "\n": -0.0067951195
    },
    {
      " #": -0.009520788
    },
    {
      " 1": -0.0020883575
    },
    {
      ":": -0.00049037737
    },
    {
      " find": -1.3179432
    },
    {
      " dish": -1.3954995
    },
    {
      "\n": -0.5140953
    },
    {
      " turn": -1.6698277
    },
    {
      "nt": -0.00010402765
    },
    {
      "o": -0.0017303432
    },
    {
      "('": -0.00076604687
    },
    {
      "s": -0.45206735
    },
    {
      "ink": -0.00014074863
    },
    {
      "')": -0.004373597
    },
    {
      "\n": -0.0049882536
    },
    {
      " look": -1.0499097
    },
    {
      "at": -0.0005200772
    },
    {
      "('": -0.0005064818
    },
    {
      "s": -0.019506011
    },
    {
      "ink": -0.00017902305
    },
    {
      "')": -0.0023685894
    },
    {
      "\n": -0.005478021
    },
    {
      " assert": -1.6554865
    },
    {
      " 2": -0.0069554215
    },
    {
      ":": -0.0009624952
    },
    {
      " get": -1.4219992
    },
    {
      " dish": -1.0091428
    },
    {
      " soap": -1.2278453
    },
    {
      "\n": -0.042590883
    },
    {
      " find": -0.0453391
    },
    {
      "('": -0.0010485902
    },
    {
      "d": -0.00060357206
    },
    {
      "ish": -9.305951e-05
    },
    {
      "washer": -0.00310129
    },
    {
      "')": -0.0020897898
    },
    {
      "\n": -0.0068367086
    },
    {
      " #": -0.04337166
    },
    {
      " 3": -0.004894986
    },
    {
      ":": -0.0008977048
    },
    {
      " open": -1.4955993
    },
    {
      " dish": -0.7903365
    },
    {
      "washer": -0.033062324
    },
    {
      " with": -0.39777333
    },
    {
      " water": -0.32963738
    },
    {
      "\n": -0.022696927
    },
    {
      " pour": -0.8411665
    },
    {
      "on": -0.052930135
    },
    {
      "('": -0.0022708478
    },
    {
      "d": -0.7439547
    },
    {
      "ish": -0.015399669
    },
    {
      "washer": -0.0030335477
    },
    {
      "')": -0.0059736036
    },
    {
      "\n": -0.00788856
    },
    {
      " pour": -0.9124294
    },
    {
      " 4": -0.0042618336
    },
    {
      ":": -0.0009300986
    },
    {
      " put": -1.1879387
    },
    {
      " deter": -0.31003207
    },
    {
      "\n": -0.13257644
    },
    {
      " add": -1.3621637
    },
    {
      "('": -0.36461952
    },
    {
      "so": -0.11108782
    },
    {
      "ap": -0.0004225786
    },
    {
      "')": -0.110578194
    },
    {
      "\n": -0.010652174
    },
    {
      " #": -0.031641208
    },
    {
      " 5": -0.0021100985
    },
    {
      ":": -0.00052568375
    },
    {
      " put": -1.3115721
    },
    {
      " dishes": -0.1685309
    },
    {
      " in": -0.14194657
    },
    {
      " dish": -0.32932872
    },
    {
      "washer": -0.013044035
    },
    {
      "\n": -0.013582653
    },
    {
      " put": -0.8835711
    },
    {
      "in": -0.26521054
    },
    {
      "('": -0.0036565976
    },
    {
      "d": -0.030841773
    },
    {
      "ishes": -0.2891721
    },
    {
      "',": -0.58552337
    },
    {
      "d": -0.0014390715
    },
    {
      "ish": -0.00010057153
    },
    {
      "washer": -0.0017117729
    },
    {
      "')": -0.0024885677
    },
    {
      "\n": -0.012085421
    },
    {
      " #": -0.007426211
    },
    {
      " 6": -0.0027019095
    },
    {
      ":": -0.0008066679
    },
    {
      " turn": -0.85249263
    },
    {
      " on": -0.048021764
    },
    {
      " dish": -0.26175898
    },
    {
      " dish": -0.007538749
    },
    {
      "washer": -0.010510733
    },
    {
      "\n": -0.01768455
    },
    {
      " turn": -0.38614282
    },
    {
      "on": -0.0004869231
    },
    {
      "('": -0.0007863274
    },
    {
      "d": -0.00020477588
    },
    {
      "ish": -0.0005581845
    },
    {
      "washer": -0.0007666419
    },
    {
      "')": -0.001380635
    },
    {
      "\n": -0.008564948
    },
    {
      " #": -0.004095855
    },
    {
      " 7": -0.0051870323
    },
    {
      ":": -0.0011721682
    },
    {
      " wait": -0.3686603
    },
    {
      " for": -0.3112354
    },
    {
      " dish": -0.9222373
    },
    {
      "washer": -0.033107053
    },
    {
      " to": -0.12080217
    },
    {
      " finish": -0.030397007
    },
    {
      "\n": -0.0383507
    },
    {
      " wait": -0.106326655
    },
    {
      "('": -0.28142232
    },
    {
      "\n": -0.02128135
    },
    {
      " #": -0.008761128
    },
    {
      " 8": -0.0012877658
    },
    {
      ":": -0.0013510891
    },
    {
      " take": -0.5507267
    },
    {
      " dishes": -0.0704192
    },
    {
      " from": -0.42181185
    },
    {
      " remove": -0.7758946
    },
    {
      "('": -0.5182674
    },
    {
      "d": -0.0013757398
    },
    {
      "ishes": -0.009755135
    },
    {
      "')": -0.49324667
    },
    {
      "d": -0.0027848694
    },
    {
      "ish": -0.00012357882
    },
    {
      "washer": -0.0015158944
    },
    {
      "')": -0.0029071704
    },
    {
      "\n": -0.031102996
    },
    {
      " #": -0.00967605
    },
    {
      " 9": -0.003578409
    },
    {
      ":": -0.0017804388
    },
    {
      " put": -1.3719885
    },
    {
      " off": -0.010483267
    },
    {
      " dish": -0.6645838
    },
    {
      "washer": -0.0037278496
    },
    {
      "\n": -0.01769244
    },
    {
      " turn": -0.07978096
    },
    {
      "off": -0.0024412447
    },
    {
      "('": -0.00085993914
    },
    {
      "d": -0.00016066022
    },
    {
      "ish": -7.8634315e-05
    },
    {
      "washer": -0.0012758881
    },
    {
      "')": -0.0067300093
    },
    {
      "\n": -0.11074598
    },
    {
      " #": -0.0093040615
    },
    {
      " 10": -0.007064364
    },
    {
      ":": -0.0024827695
    },
    {
      " put": -1.4468551
    },
    {
      " dishes": -0.07986669
    },
    {
      " away": -0.3825119
    },
    {
      "\n": -0.023938235
    },
    {
      " put": -0.06170544
    },
    {
      "back": -0.4896134
    },
    {
      "('": -0.0018196115
    },
    {
      "d": -0.0006722194
    },
    {
      "ishes": -0.0018551423
    },
    {
      "')": -0.47091228
    },
    {
      "c": -1.0747099
    },
    {
      "board": -0.0038362634
    },
    {
      "')": -0.0043753954
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 7.088450193405151
[(" # 0: walk in to bathroom\n walk('bathroom')\n # 1: find sink\n find('sink')\n # 2: turn on the faucet\n assert('close' to 'faucet')\n else: find('faucet')\n switchon('faucet')\n # 3: pour water on face\n assert('close' to 'faucet')\n else: find('faucet')\n pour('faucet')\n turnto('face')\n lookat('face')\n # 4: turn off the faucet\n switchoff('faucet')\n # 5: Done\ndef cook_food():\n # 0: walk to kitchen\n walk('kitchen')\n # 1: find stove\n find('stove')\n # 2: turn on stove\n switchon('stove')\n # 3: find pan\n find('pan')\n # 4: grab pan\n grab('pan')\n # 5: pour oil in pan\n pour('oil')\n # 6: turn off the stove\n switchoff('stove')\n # 7: Done", <OpenAIObject at 0x7fd2f8036d60> JSON: {
  "text_offset": [
    3373,
    3375,
    3377,
    3378,
    3383,
    3386,
    3389,
    3398,
    3399,
    3404,
    3406,
    3410,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3432,
    3433,
    3438,
    3440,
    3441,
    3444,
    3446,
    3447,
    3449,
    3451,
    3452,
    3457,
    3460,
    3464,
    3466,
    3469,
    3471,
    3472,
    3479,
    3481,
    3486,
    3487,
    3490,
    3492,
    3493,
    3496,
    3498,
    3500,
    3501,
    3506,
    3507,
    3512,
    3514,
    3515,
    3518,
    3520,
    3522,
    3523,
    3530,
    3532,
    3534,
    3535,
    3538,
    3540,
    3542,
    3543,
    3545,
    3547,
    3548,
    3553,
    3559,
    3562,
    3567,
    3568,
    3575,
    3577,
    3582,
    3583,
    3586,
    3588,
    3589,
    3592,
    3594,
    3596,
    3597,
    3602,
    3603,
    3608,
    3610,
    3611,
    3614,
    3616,
    3618,
    3619,
    3624,
    3626,
    3627,
    3630,
    3632,
    3634,
    3635,
    3639,
    3641,
    3642,
    3644,
    3648,
    3650,
    3651,
    3656,
    3658,
    3660,
    3664,
    3666,
    3667,
    3669,
    3671,
    3672,
    3677,
    3681,
    3685,
    3687,
    3690,
    3692,
    3693,
    3700,
    3703,
    3705,
    3706,
    3709,
    3711,
    3713,
    3714,
    3716,
    3718,
    3719,
    3724,
    3725,
    3728,
    3733,
    3734,
    3738,
    3741,
    3742,
    3744,
    3746,
    3747,
    3752,
    3755,
    3763,
    3764,
    3769,
    3771,
    3774,
    3778,
    3780,
    3781,
    3783,
    3785,
    3786,
    3791,
    3797,
    3798,
    3803,
    3805,
    3807,
    3810,
    3812,
    3813,
    3815,
    3817,
    3818,
    3823,
    3826,
    3832,
    3833,
    3840,
    3842,
    3844,
    3846,
    3849,
    3851,
    3852,
    3854,
    3856,
    3857,
    3862,
    3866,
    3867,
    3872,
    3874,
    3877,
    3879,
    3880,
    3882,
    3884,
    3885,
    3890,
    3894,
    3895,
    3900,
    3902,
    3905,
    3907,
    3908,
    3910,
    3912,
    3913,
    3918,
    3922,
    3925,
    3929,
    3930,
    3935,
    3937,
    3940,
    3942,
    3943,
    3945,
    3947,
    3948,
    3953,
    3957,
    3961,
    3967,
    3968,
    3975,
    3978,
    3980,
    3982,
    3985,
    3987,
    3988,
    3990,
    3992,
    3993
  ],
  "token_logprobs": [
    -0.016689304,
    -0.006667844,
    -0.0016724875,
    -0.88601077,
    -1.754373,
    -0.09268367,
    -0.10253031,
    -0.014262726,
    -0.0049794475,
    -0.0053175963,
    -0.0027174498,
    -0.00018378951,
    -0.0017224613,
    -0.004493876,
    -0.0024972914,
    -0.003243899,
    -0.0007390241,
    -0.11421562,
    -0.42386258,
    -0.026152274,
    -0.4454648,
    -0.00086990296,
    -0.00075477175,
    -0.00014623316,
    -0.0017872469,
    -0.004586027,
    -0.028517984,
    -0.004886845,
    -0.0010828405,
    -0.39011863,
    -0.0720658,
    -0.8386109,
    -0.45559853,
    -0.0022399025,
    -0.0029171533,
    -0.034434535,
    -0.5537932,
    -0.0016852054,
    -0.011272511,
    -0.0029665888,
    -0.00060023234,
    -0.001352282,
    -0.18962449,
    -0.00047147667,
    -0.00039556794,
    -0.009026994,
    -0.005596216,
    -0.0013013734,
    -0.0013334837,
    -0.0052866763,
    -0.001499896,
    -0.0018464833,
    -0.002436405,
    -0.00018820119,
    -0.002478588,
    -0.005689126,
    -0.7848062,
    -0.0019023779,
    -0.0010903592,
    -0.0012618037,
    -0.0002934296,
    -7.326899e-05,
    -0.0018778943,
    -0.004325168,
    -0.040299695,
    -0.0061714384,
    -0.00053516414,
    -1.5995502,
    -0.18422854,
    -0.5523316,
    -0.21784575,
    -0.018204914,
    -0.8717397,
    -0.0014603807,
    -0.087301694,
    -0.0024080814,
    -0.00074522756,
    -0.0014282657,
    -0.15462741,
    -0.0003686146,
    -7.839496e-05,
    -0.006911067,
    -0.003561302,
    -0.001546102,
    -0.0014684964,
    -0.012913969,
    -0.001389707,
    -0.00059212145,
    -0.004355937,
    -0.000111420464,
    -0.0024134007,
    -0.005839899,
    -0.165511,
    -0.006189609,
    -0.5746425,
    -0.0008517091,
    -7.291136e-05,
    -0.04868445,
    -0.011892086,
    -1.2370563,
    -0.00012512946,
    -0.0008823119,
    -0.00068289746,
    -0.88767856,
    -0.0021477307,
    -0.008410698,
    -1.7974851,
    -0.0010419079,
    -0.0005617646,
    -0.003067508,
    -0.002035856,
    -0.024770847,
    -0.02606876,
    -0.009159501,
    -0.0018719216,
    -1.3251859,
    -0.04020494,
    -0.45306018,
    -0.013907522,
    -0.00070699357,
    -0.0011371415,
    -0.018451994,
    -0.6482407,
    -0.0040312796,
    -0.0010345085,
    -0.0012012316,
    -0.0005373127,
    -0.0002669587,
    -0.0027597651,
    -0.14130221,
    -0.037384354,
    -0.0053527122,
    -0.0024030632,
    -0.89765805,
    -0.5697371,
    -0.42287114,
    -2.745851,
    -0.023763165,
    -1.1959333,
    -0.028115503,
    -0.012320133,
    -0.004797601,
    -0.004125661,
    -0.0019040498,
    -0.10495992,
    -0.8282987,
    -0.047089387,
    -0.03239257,
    -0.0029481773,
    -0.0029169137,
    -0.0016847276,
    -0.0002698197,
    -0.006653503,
    -0.006599863,
    -0.0021392473,
    -0.0030354613,
    -0.0007262603,
    -0.052009497,
    -0.5448252,
    -0.04436175,
    -0.0474807,
    -0.0010169069,
    -0.0018700106,
    -0.00010581859,
    -0.0016822795,
    -0.005502535,
    -0.010357146,
    -0.004125423,
    -0.0011543272,
    -0.32272726,
    -0.027401509,
    -0.9074497,
    -0.030292377,
    -0.32870784,
    -0.00060774625,
    -0.0008550469,
    -0.0006259955,
    -9.305951e-05,
    -0.0014324456,
    -0.0034988539,
    -0.015704721,
    -0.0042029344,
    -0.0007204754,
    -0.19878668,
    -1.3056295,
    -0.040981553,
    -0.027447024,
    -0.0010226364,
    -0.0005088669,
    -0.0014289829,
    -0.004324029,
    -0.017484732,
    -0.0036125062,
    -0.0009701922,
    -1.1927568,
    -0.10953721,
    -0.054697692,
    -0.16774032,
    -0.0011981284,
    -0.00010939391,
    -0.00065265695,
    -0.0039983634,
    -0.31506488,
    -0.0032827093,
    -0.0012606097,
    -0.8592706,
    -0.15581216,
    -0.6236895,
    -0.19387433,
    -0.014395084,
    -0.51189965,
    -0.004913857,
    -0.0729957,
    -0.17275743,
    -0.010280001,
    -0.48344126,
    -0.00250512,
    -0.000923774,
    -3.030713,
    -0.8776027,
    -2.4161758,
    -0.036889225,
    -0.020567589,
    -0.01047881,
    -0.006682665,
    -0.00082039007,
    -0.0012317246,
    -0.00033355693,
    -0.0029647353,
    -0.0060465797,
    -0.003963478,
    -0.0066188206,
    -0.0019600056,
    -0.9936333
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " water",
    " on",
    " face",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " pour",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "face",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " off",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " switch",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done",
    "\n",
    "def",
    " cook",
    "_",
    "food",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " kitchen",
    "\n",
    " walk",
    "('",
    "kit",
    "chen",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " stove",
    "\n",
    " find",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " stove",
    "\n",
    " switch",
    "on",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " pan",
    "\n",
    " find",
    "('",
    "pan",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " pan",
    "\n",
    " grab",
    "('",
    "pan",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " pour",
    " oil",
    " in",
    " pan",
    "\n",
    " pour",
    "('",
    "oil",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " turn",
    " off",
    " the",
    " stove",
    "\n",
    " switch",
    "off",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.016689304
    },
    {
      " 0": -0.006667844
    },
    {
      ":": -0.0016724875
    },
    {
      " find": -0.76330036
    },
    {
      " to": -0.2867789
    },
    {
      " to": -0.09268367
    },
    {
      " bathroom": -0.10253031
    },
    {
      "\n": -0.014262726
    },
    {
      " walk": -0.0049794475
    },
    {
      "('": -0.0053175963
    },
    {
      "bath": -0.0027174498
    },
    {
      "room": -0.00018378951
    },
    {
      "')": -0.0017224613
    },
    {
      "\n": -0.004493876
    },
    {
      " #": -0.0024972914
    },
    {
      " 1": -0.003243899
    },
    {
      ":": -0.0007390241
    },
    {
      " find": -0.11421562
    },
    {
      " sink": -0.42386258
    },
    {
      "\n": -0.026152274
    },
    {
      " find": -0.4454648
    },
    {
      "('": -0.00086990296
    },
    {
      "s": -0.00075477175
    },
    {
      "ink": -0.00014623316
    },
    {
      "')": -0.0017872469
    },
    {
      "\n": -0.004586027
    },
    {
      " #": -0.028517984
    },
    {
      " 2": -0.004886845
    },
    {
      ":": -0.0010828405
    },
    {
      " turn": -0.39011863
    },
    {
      " on": -0.0720658
    },
    {
      " the": -0.8386109
    },
    {
      " f": -0.45559853
    },
    {
      "auc": -0.0022399025
    },
    {
      "et": -0.0029171533
    },
    {
      "\n": -0.034434535
    },
    {
      " assert": -0.5537932
    },
    {
      "('": -0.0016852054
    },
    {
      "close": -0.011272511
    },
    {
      "'": -0.0029665888
    },
    {
      " to": -0.00060023234
    },
    {
      " '": -0.001352282
    },
    {
      "f": -0.18962449
    },
    {
      "auc": -0.00047147667
    },
    {
      "et": -0.00039556794
    },
    {
      "')": -0.009026994
    },
    {
      "\n": -0.005596216
    },
    {
      " else": -0.0013013734
    },
    {
      ":": -0.0013334837
    },
    {
      " find": -0.0052866763
    },
    {
      "('": -0.001499896
    },
    {
      "f": -0.0018464833
    },
    {
      "auc": -0.002436405
    },
    {
      "et": -0.00018820119
    },
    {
      "')": -0.002478588
    },
    {
      "\n": -0.005689126
    },
    {
      " switch": -0.7848062
    },
    {
      "on": -0.0019023779
    },
    {
      "('": -0.0010903592
    },
    {
      "f": -0.0012618037
    },
    {
      "auc": -0.0002934296
    },
    {
      "et": -7.326899e-05
    },
    {
      "')": -0.0018778943
    },
    {
      "\n": -0.004325168
    },
    {
      " #": -0.040299695
    },
    {
      " 3": -0.0061714384
    },
    {
      ":": -0.00053516414
    },
    {
      " wash": -1.4665346
    },
    {
      " water": -0.18422854
    },
    {
      " on": -0.5523316
    },
    {
      " face": -0.21784575
    },
    {
      "\n": -0.018204914
    },
    {
      " pour": -0.71904594
    },
    {
      "('": -0.0014603807
    },
    {
      "close": -0.087301694
    },
    {
      "'": -0.0024080814
    },
    {
      " to": -0.00074522756
    },
    {
      " '": -0.0014282657
    },
    {
      "f": -0.15462741
    },
    {
      "auc": -0.0003686146
    },
    {
      "et": -7.839496e-05
    },
    {
      "')": -0.006911067
    },
    {
      "\n": -0.003561302
    },
    {
      " else": -0.001546102
    },
    {
      ":": -0.0014684964
    },
    {
      " find": -0.012913969
    },
    {
      "('": -0.001389707
    },
    {
      "f": -0.00059212145
    },
    {
      "auc": -0.004355937
    },
    {
      "et": -0.000111420464
    },
    {
      "')": -0.0024134007
    },
    {
      "\n": -0.005839899
    },
    {
      " pour": -0.165511
    },
    {
      "('": -0.006189609
    },
    {
      "f": -0.5746425
    },
    {
      "auc": -0.0008517091
    },
    {
      "et": -7.291136e-05
    },
    {
      "')": -0.04868445
    },
    {
      "\n": -0.011892086
    },
    {
      " #": -0.49868813
    },
    {
      "nt": -0.00012512946
    },
    {
      "o": -0.0008823119
    },
    {
      "('": -0.00068289746
    },
    {
      "f": -0.83902574
    },
    {
      "')": -0.0021477307
    },
    {
      "\n": -0.008410698
    },
    {
      " #": -0.6595992
    },
    {
      "at": -0.0010419079
    },
    {
      "('": -0.0005617646
    },
    {
      "face": -0.003067508
    },
    {
      "')": -0.002035856
    },
    {
      "\n": -0.024770847
    },
    {
      " #": -0.02606876
    },
    {
      " 4": -0.009159501
    },
    {
      ":": -0.0018719216
    },
    {
      " wipe": -1.1274549
    },
    {
      " off": -0.04020494
    },
    {
      " the": -0.45306018
    },
    {
      " f": -0.013907522
    },
    {
      "auc": -0.00070699357
    },
    {
      "et": -0.0011371415
    },
    {
      "\n": -0.018451994
    },
    {
      " switch": -0.6482407
    },
    {
      "off": -0.0040312796
    },
    {
      "('": -0.0010345085
    },
    {
      "f": -0.0012012316
    },
    {
      "auc": -0.0005373127
    },
    {
      "et": -0.0002669587
    },
    {
      "')": -0.0027597651
    },
    {
      "\n": -0.14130221
    },
    {
      " #": -0.037384354
    },
    {
      " 5": -0.0053527122
    },
    {
      ":": -0.0024030632
    },
    {
      " Done": -0.89765805
    },
    {
      "\n": -0.5697371
    },
    {
      "def": -0.42287114
    },
    {
      " make": -1.170366
    },
    {
      "_": -0.023763165
    },
    {
      "food": -1.1959333
    },
    {
      "():": -0.028115503
    },
    {
      "\n": -0.012320133
    },
    {
      " #": -0.004797601
    },
    {
      " 0": -0.004125661
    },
    {
      ":": -0.0019040498
    },
    {
      " walk": -0.10495992
    },
    {
      " in": -0.7087595
    },
    {
      " kitchen": -0.047089387
    },
    {
      "\n": -0.03239257
    },
    {
      " walk": -0.0029481773
    },
    {
      "('": -0.0029169137
    },
    {
      "kit": -0.0016847276
    },
    {
      "chen": -0.0002698197
    },
    {
      "')": -0.006653503
    },
    {
      "\n": -0.006599863
    },
    {
      " #": -0.0021392473
    },
    {
      " 1": -0.0030354613
    },
    {
      ":": -0.0007262603
    },
    {
      " find": -0.052009497
    },
    {
      " stove": -0.5448252
    },
    {
      "\n": -0.04436175
    },
    {
      " find": -0.0474807
    },
    {
      "('": -0.0010169069
    },
    {
      "st": -0.0018700106
    },
    {
      "ove": -0.00010581859
    },
    {
      "')": -0.0016822795
    },
    {
      "\n": -0.005502535
    },
    {
      " #": -0.010357146
    },
    {
      " 2": -0.004125423
    },
    {
      ":": -0.0011543272
    },
    {
      " turn": -0.32272726
    },
    {
      " on": -0.027401509
    },
    {
      " the": -0.5414934
    },
    {
      "\n": -0.030292377
    },
    {
      " switch": -0.32870784
    },
    {
      "on": -0.00060774625
    },
    {
      "('": -0.0008550469
    },
    {
      "st": -0.0006259955
    },
    {
      "ove": -9.305951e-05
    },
    {
      "')": -0.0014324456
    },
    {
      "\n": -0.0034988539
    },
    {
      " #": -0.015704721
    },
    {
      " 3": -0.0042029344
    },
    {
      ":": -0.0007204754
    },
    {
      " find": -0.19878668
    },
    {
      " pot": -1.0072163
    },
    {
      "\n": -0.040981553
    },
    {
      " find": -0.027447024
    },
    {
      "('": -0.0010226364
    },
    {
      "pan": -0.0005088669
    },
    {
      "')": -0.0014289829
    },
    {
      "\n": -0.004324029
    },
    {
      " #": -0.017484732
    },
    {
      " 4": -0.0036125062
    },
    {
      ":": -0.0009701922
    },
    {
      " put": -1.0386813
    },
    {
      " pan": -0.10953721
    },
    {
      "\n": -0.054697692
    },
    {
      " grab": -0.16774032
    },
    {
      "('": -0.0011981284
    },
    {
      "pan": -0.00010939391
    },
    {
      "')": -0.00065265695
    },
    {
      "\n": -0.0039983634
    },
    {
      " #": -0.31506488
    },
    {
      " 5": -0.0032827093
    },
    {
      ":": -0.0012606097
    },
    {
      " pour": -0.8592706
    },
    {
      " oil": -0.15581216
    },
    {
      " in": -0.6236895
    },
    {
      " pan": -0.19387433
    },
    {
      "\n": -0.014395084
    },
    {
      " pour": -0.51189965
    },
    {
      "('": -0.004913857
    },
    {
      "oil": -0.0729957
    },
    {
      "')": -0.17275743
    },
    {
      "\n": -0.010280001
    },
    {
      " #": -0.48344126
    },
    {
      " 6": -0.00250512
    },
    {
      ":": -0.000923774
    },
    {
      " find": -1.0328227
    },
    {
      " off": -0.8776027
    },
    {
      " stove": -0.12441078
    },
    {
      " stove": -0.036889225
    },
    {
      "\n": -0.020567589
    },
    {
      " switch": -0.01047881
    },
    {
      "off": -0.006682665
    },
    {
      "('": -0.00082039007
    },
    {
      "st": -0.0012317246
    },
    {
      "ove": -0.00033355693
    },
    {
      "')": -0.0029647353
    },
    {
      "\n": -0.0060465797
    },
    {
      " #": -0.003963478
    },
    {
      " 7": -0.0066188206
    },
    {
      ":": -0.0019600056
    },
    {
      " Done": -0.9936333
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.4328010082244873
[(" # 0: walk to living room\n walk('livingroom')\n # 1: find newspaper\n find('newspaper')\n # 2: sit on couch\n find('couch')\n sit('couch')\n # 3: read the newspaper\n assert('close' to 'newspaper')\n else: find('newspaper')\n read('newspaper')\n # 4: Done", <OpenAIObject at 0x7fd33a275040> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3398,
    3403,
    3404,
    3409,
    3411,
    3417,
    3421,
    3423,
    3424,
    3426,
    3428,
    3429,
    3434,
    3444,
    3445,
    3450,
    3452,
    3455,
    3457,
    3461,
    3463,
    3464,
    3466,
    3468,
    3469,
    3473,
    3476,
    3482,
    3483,
    3488,
    3490,
    3491,
    3495,
    3497,
    3498,
    3502,
    3504,
    3505,
    3509,
    3511,
    3512,
    3514,
    3516,
    3517,
    3522,
    3526,
    3536,
    3537,
    3544,
    3546,
    3551,
    3552,
    3555,
    3557,
    3560,
    3562,
    3566,
    3568,
    3569,
    3574,
    3575,
    3580,
    3582,
    3585,
    3587,
    3591,
    3593,
    3594,
    3599,
    3601,
    3604,
    3606,
    3610,
    3612,
    3613,
    3615,
    3617,
    3618
  ],
  "token_logprobs": [
    -0.017846791,
    -0.00921232,
    -0.001946213,
    -1.1728919,
    -0.18958536,
    -0.91629666,
    -0.09779332,
    -0.022659183,
    -0.005282841,
    -0.0041259015,
    -0.013220987,
    -1.3112433,
    -0.0018426611,
    -0.008818313,
    -0.002132261,
    -0.003682021,
    -0.00050719705,
    -0.033134162,
    -0.25249735,
    -0.023220142,
    -0.11876088,
    -0.0011751521,
    -0.0018159105,
    -0.001084271,
    -0.00074892404,
    -0.0019502153,
    -0.0057074092,
    -0.013989604,
    -0.005405206,
    -0.00048155588,
    -2.5148442,
    -0.2451966,
    -0.4047511,
    -0.074227236,
    -0.3223608,
    -0.0015929041,
    -0.0006149016,
    -0.00022671591,
    -0.0010718011,
    -0.004160074,
    -0.6297592,
    -0.0017080727,
    -0.00018689176,
    -0.00054995355,
    -0.001002707,
    -0.004664711,
    -0.014304265,
    -0.008334427,
    -0.0008094125,
    -0.52885026,
    -1.1904824,
    -0.02454847,
    -0.010610065,
    -0.86997896,
    -0.0017161911,
    -0.21327797,
    -0.0038140644,
    -0.0009049231,
    -0.0020021105,
    -0.019285832,
    -0.0018718033,
    -0.00094507297,
    -0.0069123274,
    -0.005049596,
    -0.0018437349,
    -0.0016353527,
    -0.0075099827,
    -0.0015659799,
    -0.0014228948,
    -0.002275448,
    -0.0023066357,
    -0.0035469437,
    -0.0060179164,
    -0.7490984,
    -0.0011857749,
    -0.0010688162,
    -0.00048882765,
    -0.0005552024,
    -0.0019034519,
    -1.1408457,
    -0.7809071,
    -0.011263468,
    -0.0016778623,
    -0.57147735
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " couch",
    "\n",
    " find",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " sit",
    "('",
    "c",
    "ouch",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " read",
    " the",
    " newspaper",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.017846791
    },
    {
      " 0": -0.00921232
    },
    {
      ":": -0.001946213
    },
    {
      " find": -0.47673824
    },
    {
      " to": -0.18958536
    },
    {
      " living": -0.91629666
    },
    {
      " room": -0.09779332
    },
    {
      "\n": -0.022659183
    },
    {
      " walk": -0.005282841
    },
    {
      "('": -0.0041259015
    },
    {
      "living": -0.013220987
    },
    {
      "_": -0.36991328
    },
    {
      "')": -0.0018426611
    },
    {
      "\n": -0.008818313
    },
    {
      " #": -0.002132261
    },
    {
      " 1": -0.003682021
    },
    {
      ":": -0.00050719705
    },
    {
      " find": -0.033134162
    },
    {
      " newspaper": -0.25249735
    },
    {
      "\n": -0.023220142
    },
    {
      " find": -0.11876088
    },
    {
      "('": -0.0011751521
    },
    {
      "new": -0.0018159105
    },
    {
      "sp": -0.001084271
    },
    {
      "aper": -0.00074892404
    },
    {
      "')": -0.0019502153
    },
    {
      "\n": -0.0057074092
    },
    {
      " #": -0.013989604
    },
    {
      " 2": -0.005405206
    },
    {
      ":": -0.00048155588
    },
    {
      " grab": -0.3854507
    },
    {
      " on": -0.2451966
    },
    {
      " couch": -0.4047511
    },
    {
      "\n": -0.074227236
    },
    {
      " find": -0.3223608
    },
    {
      "('": -0.0015929041
    },
    {
      "c": -0.0006149016
    },
    {
      "ouch": -0.00022671591
    },
    {
      "')": -0.0010718011
    },
    {
      "\n": -0.004160074
    },
    {
      " sit": -0.6297592
    },
    {
      "('": -0.0017080727
    },
    {
      "c": -0.00018689176
    },
    {
      "ouch": -0.00054995355
    },
    {
      "')": -0.001002707
    },
    {
      "\n": -0.004664711
    },
    {
      " #": -0.014304265
    },
    {
      " 3": -0.008334427
    },
    {
      ":": -0.0008094125
    },
    {
      " read": -0.52885026
    },
    {
      " newspaper": -0.39898038
    },
    {
      " newspaper": -0.02454847
    },
    {
      "\n": -0.010610065
    },
    {
      " assert": -0.86997896
    },
    {
      "('": -0.0017161911
    },
    {
      "close": -0.21327797
    },
    {
      "'": -0.0038140644
    },
    {
      " to": -0.0009049231
    },
    {
      " '": -0.0020021105
    },
    {
      "new": -0.019285832
    },
    {
      "sp": -0.0018718033
    },
    {
      "aper": -0.00094507297
    },
    {
      "')": -0.0069123274
    },
    {
      "\n": -0.005049596
    },
    {
      " else": -0.0018437349
    },
    {
      ":": -0.0016353527
    },
    {
      " find": -0.0075099827
    },
    {
      "('": -0.0015659799
    },
    {
      "new": -0.0014228948
    },
    {
      "sp": -0.002275448
    },
    {
      "aper": -0.0023066357
    },
    {
      "')": -0.0035469437
    },
    {
      "\n": -0.0060179164
    },
    {
      " read": -0.7490984
    },
    {
      "('": -0.0011857749
    },
    {
      "new": -0.0010688162
    },
    {
      "sp": -0.00048882765
    },
    {
      "aper": -0.0005552024
    },
    {
      "')": -0.0019034519
    },
    {
      "<|endoftext|>": -0.40157345
    },
    {
      " #": -0.7809071
    },
    {
      " 4": -0.011263468
    },
    {
      ":": -0.0016778623
    },
    {
      " Done": -0.57147735
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.8760807514190674
[(" # 0: find drink\n find('drink')\n # 1: grab drink\n grab('drink')\n # 2: turnto drink\n turnto('drink')\n # 3: pointat drink\n pointat('drink')\n # 4: drink drink\n drink('drink')", <OpenAIObject at 0x7fd3080ee720> JSON: {
  "text_offset": [
    3369,
    3371,
    3373,
    3374,
    3379,
    3385,
    3386,
    3391,
    3393,
    3395,
    3398,
    3400,
    3401,
    3403,
    3405,
    3406,
    3411,
    3417,
    3418,
    3423,
    3425,
    3427,
    3430,
    3432,
    3433,
    3435,
    3437,
    3438,
    3442,
    3444,
    3445,
    3451,
    3452,
    3456,
    3458,
    3459,
    3461,
    3463,
    3466,
    3468,
    3469,
    3471,
    3473,
    3474,
    3480,
    3482,
    3488,
    3489,
    3495,
    3497,
    3499,
    3501,
    3504,
    3506,
    3507,
    3509,
    3511,
    3512,
    3518,
    3524,
    3525,
    3531,
    3533,
    3535,
    3538
  ],
  "token_logprobs": [
    -0.10593117,
    -0.040400106,
    -0.004987535,
    -0.18844602,
    -1.4253602,
    -0.055528987,
    -0.019783989,
    -0.0058463146,
    -0.017796911,
    -0.00071033416,
    -0.0028362144,
    -0.012616102,
    -0.0057216175,
    -0.0037290463,
    -0.00104143,
    -0.04915942,
    -0.07707069,
    -0.014357475,
    -0.9508874,
    -0.0017429409,
    -0.00026802876,
    -5.693833e-05,
    -0.0021608127,
    -0.004790473,
    -0.5804958,
    -0.0066641835,
    -0.000869306,
    -2.5911856,
    -0.0006852826,
    -0.0029145833,
    -0.052066635,
    -0.030875457,
    -0.05463065,
    -4.2870764e-05,
    -0.00035072953,
    -0.0012302923,
    -0.00031906605,
    -0.00022963606,
    -0.0014560234,
    -0.0056050876,
    -0.11427369,
    -0.0072867293,
    -0.0012215778,
    -2.3599334,
    -0.17224592,
    -0.010035234,
    -0.016611185,
    -0.016798768,
    -0.0008271887,
    -0.0012234879,
    -0.00031715777,
    -0.00020942597,
    -0.0017649747,
    -0.005484196,
    -0.002527946,
    -0.006637542,
    -0.000980093,
    -0.11297739,
    -1.1534646,
    -0.011716334,
    -0.1859151,
    -0.018751116,
    -0.00042889945,
    -7.529741e-05,
    -0.0022241923
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " drink",
    "\n",
    " find",
    "('",
    "dr",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " drink",
    "\n",
    " grab",
    "('",
    "dr",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " tur",
    "nt",
    "o",
    " drink",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "dr",
    "ink",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " point",
    "at",
    " drink",
    "\n",
    " point",
    "at",
    "('",
    "dr",
    "ink",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " drink",
    " drink",
    "\n",
    " drink",
    "('",
    "dr",
    "ink",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.10593117
    },
    {
      " 0": -0.040400106
    },
    {
      ":": -0.004987535
    },
    {
      " find": -0.18844602
    },
    {
      " cup": -0.8329442
    },
    {
      "\n": -0.055528987
    },
    {
      " find": -0.019783989
    },
    {
      "('": -0.0058463146
    },
    {
      "dr": -0.017796911
    },
    {
      "ink": -0.00071033416
    },
    {
      "')": -0.0028362144
    },
    {
      "\n": -0.012616102
    },
    {
      " #": -0.0057216175
    },
    {
      " 1": -0.0037290463
    },
    {
      ":": -0.00104143
    },
    {
      " grab": -0.04915942
    },
    {
      " drink": -0.07707069
    },
    {
      "\n": -0.014357475
    },
    {
      " assert": -0.5029247
    },
    {
      "('": -0.0017429409
    },
    {
      "dr": -0.00026802876
    },
    {
      "ink": -5.693833e-05
    },
    {
      "')": -0.0021608127
    },
    {
      "\n": -0.004790473
    },
    {
      " #": -0.5804958
    },
    {
      " 2": -0.0066641835
    },
    {
      ":": -0.000869306
    },
    {
      " drink": -0.5011683
    },
    {
      "nt": -0.0006852826
    },
    {
      "o": -0.0029145833
    },
    {
      " drink": -0.052066635
    },
    {
      "\n": -0.030875457
    },
    {
      " tur": -0.05463065
    },
    {
      "nt": -4.2870764e-05
    },
    {
      "o": -0.00035072953
    },
    {
      "('": -0.0012302923
    },
    {
      "dr": -0.00031906605
    },
    {
      "ink": -0.00022963606
    },
    {
      "')": -0.0014560234
    },
    {
      "\n": -0.0056050876
    },
    {
      " #": -0.11427369
    },
    {
      " 3": -0.0072867293
    },
    {
      ":": -0.0012215778
    },
    {
      " drink": -0.25316668
    },
    {
      "at": -0.17224592
    },
    {
      " drink": -0.010035234
    },
    {
      "\n": -0.016611185
    },
    {
      " point": -0.016798768
    },
    {
      "at": -0.0008271887
    },
    {
      "('": -0.0012234879
    },
    {
      "dr": -0.00031715777
    },
    {
      "ink": -0.00020942597
    },
    {
      "')": -0.0017649747
    },
    {
      "\n": -0.005484196
    },
    {
      " #": -0.002527946
    },
    {
      " 4": -0.006637542
    },
    {
      ":": -0.000980093
    },
    {
      " drink": -0.11297739
    },
    {
      "\n": -0.7537596
    },
    {
      "\n": -0.011716334
    },
    {
      " drink": -0.1859151
    },
    {
      "('": -0.018751116
    },
    {
      "dr": -0.00042889945
    },
    {
      "ink": -7.529741e-05
    },
    {
      "')": -0.0022241923
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.549332857131958
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find bathroom sink\n find('bathroom_sink')\n # 2: run water\n assert('close' to 'bathroom_sink')\n else: find('bathroom_sink')\n turnon('faucet')\n # 3: grab soap\n grab('soap')\n # 4: wash\n wash('soap')\n # 5: pour out water\n turnoff('faucet')\n # 6: wipe the sink\n wipe('bathroom_sink')\n # 7: Done", <OpenAIObject at 0x7fd3080eec70> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3400,
    3401,
    3406,
    3408,
    3412,
    3416,
    3418,
    3419,
    3421,
    3423,
    3424,
    3429,
    3438,
    3443,
    3444,
    3449,
    3451,
    3455,
    3459,
    3460,
    3461,
    3464,
    3466,
    3467,
    3469,
    3471,
    3472,
    3476,
    3482,
    3483,
    3490,
    3492,
    3497,
    3498,
    3501,
    3503,
    3507,
    3511,
    3512,
    3513,
    3516,
    3518,
    3519,
    3524,
    3525,
    3530,
    3532,
    3536,
    3540,
    3541,
    3542,
    3545,
    3547,
    3548,
    3553,
    3555,
    3557,
    3558,
    3561,
    3563,
    3565,
    3566,
    3568,
    3570,
    3571,
    3576,
    3581,
    3582,
    3587,
    3589,
    3591,
    3593,
    3595,
    3596,
    3598,
    3600,
    3601,
    3606,
    3607,
    3612,
    3614,
    3616,
    3618,
    3620,
    3621,
    3623,
    3625,
    3626,
    3631,
    3635,
    3641,
    3642,
    3647,
    3650,
    3652,
    3653,
    3656,
    3658,
    3660,
    3661,
    3663,
    3665,
    3666,
    3671,
    3675,
    3680,
    3681,
    3686,
    3688,
    3692,
    3696,
    3697,
    3698,
    3701,
    3703,
    3704,
    3706,
    3708,
    3709
  ],
  "token_logprobs": [
    -0.01710255,
    -0.007321193,
    -0.0023911726,
    -0.14082493,
    -0.3158641,
    -0.16434653,
    -0.021144304,
    -0.005278466,
    -0.0044906423,
    -0.001627651,
    -0.0001319253,
    -0.0015677718,
    -0.007464344,
    -0.003660964,
    -0.0037791824,
    -0.0010352256,
    -0.156251,
    -2.3625784,
    -2.7288437,
    -0.029749356,
    -0.15326044,
    -0.0015018062,
    -0.2674857,
    -0.002116072,
    -0.020883657,
    -0.0015021657,
    -9.091469e-05,
    -0.0029710147,
    -0.006183791,
    -0.01405531,
    -0.003865402,
    -0.001155999,
    -5.1413107,
    -0.4081929,
    -0.6847094,
    -0.8734577,
    -0.002311832,
    -0.010056486,
    -0.004216102,
    -0.0011688266,
    -0.0018662483,
    -0.12712517,
    -0.00056450826,
    -0.003191217,
    -0.0007449901,
    -0.00022814641,
    -0.010383828,
    -0.005771313,
    -0.0013885148,
    -0.0020293463,
    -0.007493948,
    -0.002406529,
    -0.0019305066,
    -0.00034786668,
    -0.00076425495,
    -0.0007748749,
    -0.000101643476,
    -0.005334554,
    -0.008281956,
    -2.0904646,
    -0.024854677,
    -0.0053042937,
    -1.1651777,
    -0.00092365383,
    -0.0012244435,
    -0.006510106,
    -0.0076917214,
    -0.33657116,
    -0.006001785,
    -0.0010173838,
    -1.0180887,
    -1.7383096,
    -0.16310553,
    -1.2560225,
    -0.0018735944,
    -0.0013974067,
    -0.0002640958,
    -0.0019535597,
    -0.0048303637,
    -0.15792225,
    -0.0050619985,
    -0.000723756,
    -0.354323,
    -4.0792236,
    -0.5423209,
    -0.0034583595,
    -0.34934548,
    -0.00023655016,
    -0.004531715,
    -0.008486378,
    -0.13955054,
    -0.004349052,
    -0.0016821612,
    -3.2010984,
    -1.609317,
    -0.40662184,
    -0.030556774,
    -1.1010803,
    -0.012605236,
    -0.0011359475,
    -0.0023539513,
    -0.0003290824,
    -0.00013991416,
    -0.0020827423,
    -0.03502394,
    -0.034965236,
    -0.0039241607,
    -0.0019378514,
    -1.6615192,
    -2.7781706,
    -0.11233229,
    -0.033626013,
    -0.3580634,
    -0.0011562373,
    -0.50059056,
    -0.0004210298,
    -0.0010503792,
    -0.00047940828,
    -0.00018533925,
    -0.0030302005,
    -0.028428202,
    -0.015119217,
    -0.008821259,
    -0.0020426668,
    -0.820112
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " bathroom",
    " sink",
    "\n",
    " find",
    "('",
    "bath",
    "room",
    "_",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " run",
    " water",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bath",
    "room",
    "_",
    "s",
    "ink",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bath",
    "room",
    "_",
    "s",
    "ink",
    "')",
    "\n",
    " turn",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " soap",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    "\n",
    " wash",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " pour",
    " out",
    " water",
    "\n",
    " turn",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " wipe",
    " the",
    " sink",
    "\n",
    " wipe",
    "('",
    "bath",
    "room",
    "_",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01710255
    },
    {
      " 0": -0.007321193
    },
    {
      ":": -0.0023911726
    },
    {
      " walk": -0.14082493
    },
    {
      " to": -0.3158641
    },
    {
      " bathroom": -0.16434653
    },
    {
      "\n": -0.021144304
    },
    {
      " walk": -0.005278466
    },
    {
      "('": -0.0044906423
    },
    {
      "bath": -0.001627651
    },
    {
      "room": -0.0001319253
    },
    {
      "')": -0.0015677718
    },
    {
      "\n": -0.007464344
    },
    {
      " #": -0.003660964
    },
    {
      " 1": -0.0037791824
    },
    {
      ":": -0.0010352256
    },
    {
      " find": -0.156251
    },
    {
      " cleaning": -1.4481449
    },
    {
      " cleaner": -1.1440697
    },
    {
      "\n": -0.029749356
    },
    {
      " find": -0.15326044
    },
    {
      "('": -0.0015018062
    },
    {
      "bath": -0.2674857
    },
    {
      "room": -0.002116072
    },
    {
      "_": -0.020883657
    },
    {
      "s": -0.0015021657
    },
    {
      "ink": -9.091469e-05
    },
    {
      "')": -0.0029710147
    },
    {
      "\n": -0.006183791
    },
    {
      " #": -0.01405531
    },
    {
      " 2": -0.003865402
    },
    {
      ":": -0.001155999
    },
    {
      " turn": -1.1091814
    },
    {
      " water": -0.4081929
    },
    {
      "\n": -0.6847094
    },
    {
      " assert": -0.8734577
    },
    {
      "('": -0.002311832
    },
    {
      "close": -0.010056486
    },
    {
      "'": -0.004216102
    },
    {
      " to": -0.0011688266
    },
    {
      " '": -0.0018662483
    },
    {
      "bath": -0.12712517
    },
    {
      "room": -0.00056450826
    },
    {
      "_": -0.003191217
    },
    {
      "s": -0.0007449901
    },
    {
      "ink": -0.00022814641
    },
    {
      "')": -0.010383828
    },
    {
      "\n": -0.005771313
    },
    {
      " else": -0.0013885148
    },
    {
      ":": -0.0020293463
    },
    {
      " find": -0.007493948
    },
    {
      "('": -0.002406529
    },
    {
      "bath": -0.0019305066
    },
    {
      "room": -0.00034786668
    },
    {
      "_": -0.00076425495
    },
    {
      "s": -0.0007748749
    },
    {
      "ink": -0.000101643476
    },
    {
      "')": -0.005334554
    },
    {
      "\n": -0.008281956
    },
    {
      " run": -0.5056326
    },
    {
      "on": -0.024854677
    },
    {
      "('": -0.0053042937
    },
    {
      "bath": -0.85340816
    },
    {
      "auc": -0.00092365383
    },
    {
      "et": -0.0012244435
    },
    {
      "')": -0.006510106
    },
    {
      "\n": -0.0076917214
    },
    {
      " #": -0.33657116
    },
    {
      " 3": -0.006001785
    },
    {
      ":": -0.0010173838
    },
    {
      " grab": -1.0180887
    },
    {
      " sponge": -1.4213493
    },
    {
      "\n": -0.16310553
    },
    {
      " find": -0.58143425
    },
    {
      "('": -0.0018735944
    },
    {
      "so": -0.0013974067
    },
    {
      "ap": -0.0002640958
    },
    {
      "')": -0.0019535597
    },
    {
      "\n": -0.0048303637
    },
    {
      " #": -0.15792225
    },
    {
      " 4": -0.0050619985
    },
    {
      ":": -0.000723756
    },
    {
      " wash": -0.354323
    },
    {
      " sink": -0.60621816
    },
    {
      " wash": -0.5423209
    },
    {
      "('": -0.0034583595
    },
    {
      "so": -0.34934548
    },
    {
      "ap": -0.00023655016
    },
    {
      "')": -0.004531715
    },
    {
      "\n": -0.008486378
    },
    {
      " #": -0.13955054
    },
    {
      " 5": -0.004349052
    },
    {
      ":": -0.0016821612
    },
    {
      " turn": -1.3717129
    },
    {
      " water": -0.589242
    },
    {
      " water": -0.40662184
    },
    {
      "\n": -0.030556774
    },
    {
      " pour": -0.71182764
    },
    {
      "off": -0.012605236
    },
    {
      "('": -0.0011359475
    },
    {
      "f": -0.0023539513
    },
    {
      "auc": -0.0003290824
    },
    {
      "et": -0.00013991416
    },
    {
      "')": -0.0020827423
    },
    {
      "\n": -0.03502394
    },
    {
      " #": -0.034965236
    },
    {
      " 6": -0.0039241607
    },
    {
      ":": -0.0019378514
    },
    {
      " grab": -1.0204736
    },
    {
      " sink": -0.91885644
    },
    {
      " sink": -0.11233229
    },
    {
      "\n": -0.033626013
    },
    {
      " wipe": -0.3580634
    },
    {
      "('": -0.0011562373
    },
    {
      "bath": -0.50059056
    },
    {
      "room": -0.0004210298
    },
    {
      "_": -0.0010503792
    },
    {
      "s": -0.00047940828
    },
    {
      "ink": -0.00018533925
    },
    {
      "')": -0.0030302005
    },
    {
      "\n": -0.028428202
    },
    {
      " #": -0.015119217
    },
    {
      " 7": -0.008821259
    },
    {
      ":": -0.0020426668
    },
    {
      " Done": -0.820112
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.1171648502349854
[(" # 0: find the phone\n find('phone')\n # 1: grab the phone\n grab('phone')\n # 2: turn to phone\n turnto('phone')\n # 3: point at phone\n pointat('phone')\n # 4: watch the phone\n watch('phone')\n # 5: done", <OpenAIObject at 0x7fd2f80ef5e0> JSON: {
  "text_offset": [
    3377,
    3379,
    3381,
    3382,
    3387,
    3391,
    3397,
    3398,
    3403,
    3405,
    3410,
    3412,
    3413,
    3415,
    3417,
    3418,
    3423,
    3427,
    3433,
    3434,
    3439,
    3441,
    3446,
    3448,
    3449,
    3451,
    3453,
    3454,
    3459,
    3462,
    3468,
    3469,
    3473,
    3475,
    3476,
    3478,
    3483,
    3485,
    3486,
    3488,
    3490,
    3491,
    3497,
    3500,
    3506,
    3507,
    3513,
    3515,
    3517,
    3522,
    3524,
    3525,
    3527,
    3529,
    3530,
    3536,
    3540,
    3546,
    3547,
    3553,
    3555,
    3560,
    3562,
    3563,
    3565,
    3567,
    3568
  ],
  "token_logprobs": [
    -0.018725915,
    -0.008917356,
    -0.0020015135,
    -0.7267987,
    -1.799538,
    -0.030912528,
    -0.04074784,
    -0.04130861,
    -0.0026688606,
    -0.0012243233,
    -0.0023891414,
    -0.010217072,
    -0.005368472,
    -0.002677885,
    -0.00096356997,
    -0.21284558,
    -0.11094969,
    -0.0012504057,
    -0.020415064,
    -0.68839175,
    -0.0012480187,
    -0.00019869342,
    -0.00080189493,
    -0.008633484,
    -0.5468443,
    -0.005709627,
    -0.001084271,
    -1.5347368,
    -0.3030217,
    -1.5600531,
    -0.053081725,
    -0.088365376,
    -4.072407e-05,
    -0.00017592176,
    -0.00073437026,
    -0.00027995434,
    -0.0018946736,
    -0.009700123,
    -0.30930343,
    -0.0065644626,
    -0.0013778893,
    -1.8414674,
    -0.39081144,
    -0.2523209,
    -0.019360574,
    -0.026515892,
    -0.0022902056,
    -0.0007636599,
    -0.00018116974,
    -0.00228913,
    -0.01684926,
    -0.01750159,
    -0.0071484055,
    -0.001941913,
    -3.743367,
    -0.3601334,
    -0.008670519,
    -0.014742843,
    -0.030270934,
    -0.00096380746,
    -0.00018593716,
    -0.0019533203,
    -0.08188232,
    -0.046521813,
    -0.0046183616,
    -0.0017581686,
    -2.117105
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " the",
    " phone",
    "\n",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " the",
    " phone",
    "\n",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " to",
    " phone",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " point",
    " at",
    " phone",
    "\n",
    " point",
    "at",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " watch",
    " the",
    " phone",
    "\n",
    " watch",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.018725915
    },
    {
      " 0": -0.008917356
    },
    {
      ":": -0.0020015135
    },
    {
      " find": -0.7267987
    },
    {
      " phone": -0.24503939
    },
    {
      " phone": -0.030912528
    },
    {
      "\n": -0.04074784
    },
    {
      " find": -0.04130861
    },
    {
      "('": -0.0026688606
    },
    {
      "phone": -0.0012243233
    },
    {
      "')": -0.0023891414
    },
    {
      "\n": -0.010217072
    },
    {
      " #": -0.005368472
    },
    {
      " 1": -0.002677885
    },
    {
      ":": -0.00096356997
    },
    {
      " grab": -0.21284558
    },
    {
      " the": -0.11094969
    },
    {
      " phone": -0.0012504057
    },
    {
      "\n": -0.020415064
    },
    {
      " grab": -0.68839175
    },
    {
      "('": -0.0012480187
    },
    {
      "phone": -0.00019869342
    },
    {
      "')": -0.00080189493
    },
    {
      "\n": -0.008633484
    },
    {
      " #": -0.5468443
    },
    {
      " 2": -0.005709627
    },
    {
      ":": -0.001084271
    },
    {
      " turn": -1.5347368
    },
    {
      " to": -0.3030217
    },
    {
      " the": -0.31226382
    },
    {
      "\n": -0.053081725
    },
    {
      " tur": -0.088365376
    },
    {
      "nt": -4.072407e-05
    },
    {
      "o": -0.00017592176
    },
    {
      "('": -0.00073437026
    },
    {
      "phone": -0.00027995434
    },
    {
      "')": -0.0018946736
    },
    {
      "\n": -0.009700123
    },
    {
      " #": -0.30930343
    },
    {
      " 3": -0.0065644626
    },
    {
      ":": -0.0013778893
    },
    {
      " look": -0.67613745
    },
    {
      " at": -0.39081144
    },
    {
      " phone": -0.2523209
    },
    {
      "\n": -0.019360574
    },
    {
      " point": -0.026515892
    },
    {
      "at": -0.0022902056
    },
    {
      "('": -0.0007636599
    },
    {
      "phone": -0.00018116974
    },
    {
      "')": -0.00228913
    },
    {
      "\n": -0.01684926
    },
    {
      " #": -0.01750159
    },
    {
      " 4": -0.0071484055
    },
    {
      ":": -0.001941913
    },
    {
      " Done": -0.9506881
    },
    {
      " the": -0.3601334
    },
    {
      " phone": -0.008670519
    },
    {
      "\n": -0.014742843
    },
    {
      " watch": -0.030270934
    },
    {
      "('": -0.00096380746
    },
    {
      "phone": -0.00018593716
    },
    {
      "')": -0.0019533203
    },
    {
      "\n": -0.08188232
    },
    {
      " #": -0.046521813
    },
    {
      " 5": -0.0046183616
    },
    {
      ":": -0.0017581686
    },
    {
      " Done": -0.763597
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.6859748363494873
[(" # 0: walk in to bathroom\n walk('bathroom')\n # 1: find toilet\n walk('toilet')\n find('toilet')\n # 2: sit on the toilet\n assert('close' to 'toilet')\n else: find('toilet')\n sit('toilet')\n # 3: flush the toilet\n flush('toilet')\n # 4: stand up\n standup()", <OpenAIObject at 0x7fd3080ee630> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3392,
    3401,
    3402,
    3407,
    3409,
    3413,
    3417,
    3419,
    3420,
    3422,
    3424,
    3425,
    3430,
    3437,
    3438,
    3443,
    3445,
    3447,
    3451,
    3453,
    3454,
    3459,
    3461,
    3463,
    3467,
    3469,
    3470,
    3472,
    3474,
    3475,
    3479,
    3482,
    3486,
    3493,
    3494,
    3501,
    3503,
    3508,
    3509,
    3512,
    3514,
    3516,
    3520,
    3522,
    3523,
    3528,
    3529,
    3534,
    3536,
    3538,
    3542,
    3544,
    3545,
    3549,
    3551,
    3553,
    3557,
    3559,
    3560,
    3562,
    3564,
    3565,
    3571,
    3575,
    3582,
    3583,
    3589,
    3591,
    3593,
    3597,
    3599,
    3600,
    3602,
    3604,
    3605,
    3611,
    3614,
    3615,
    3621,
    3623
  ],
  "token_logprobs": [
    -0.01638419,
    -0.008640817,
    -0.00279001,
    -0.14101297,
    -1.6661125,
    -0.05194947,
    -0.16782174,
    -0.016809434,
    -0.003795096,
    -0.0045162705,
    -0.0026300729,
    -0.00018402888,
    -0.0014403837,
    -0.004836172,
    -0.0022294496,
    -0.002905316,
    -0.0007429607,
    -0.09317915,
    -0.060566876,
    -0.021995984,
    -0.99558395,
    -0.0018417056,
    -0.0018104156,
    -0.00029199722,
    -0.0027464982,
    -0.004340613,
    -0.017001541,
    -0.0006642277,
    -0.00046968853,
    -0.0007789308,
    -0.00083989615,
    -0.0034187674,
    -0.005631758,
    -0.0050703255,
    -0.00063583726,
    -0.5573854,
    -0.07700053,
    -1.0162563,
    -0.0036333257,
    -0.021660075,
    -1.4695156,
    -0.001012133,
    -0.001479899,
    -0.0025130664,
    -0.00034726874,
    -0.0010303333,
    -0.0014396667,
    -4.394177e-05,
    -0.0040048882,
    -0.004335763,
    -0.0015145822,
    -0.0010391604,
    -0.005970006,
    -0.0012414537,
    -0.00047678567,
    -0.00012799047,
    -0.0010821836,
    -0.0051534814,
    -0.27666894,
    -0.00094137463,
    -0.0003272952,
    -3.5357807e-05,
    -0.001748078,
    -0.027660612,
    -0.041905504,
    -0.008015569,
    -0.0014108961,
    -1.7672486,
    -0.34375656,
    -0.0035488587,
    -0.04953445,
    -0.46054155,
    -0.009185129,
    -0.00081466336,
    -0.00012882493,
    -0.0024700435,
    -0.05103952,
    -0.026862742,
    -0.0051864325,
    -0.0015621595,
    -1.033857,
    -0.09704542,
    -0.5894934,
    -0.047163304,
    -0.005005807,
    -0.10897281
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " walk",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " the",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " sit",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " flush",
    " the",
    " toilet",
    "\n",
    " flush",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " stand",
    " up",
    "\n",
    " stand",
    "up",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.01638419
    },
    {
      " 0": -0.008640817
    },
    {
      ":": -0.00279001
    },
    {
      " walk": -0.14101297
    },
    {
      " to": -0.2602765
    },
    {
      " to": -0.05194947
    },
    {
      " bathroom": -0.16782174
    },
    {
      "\n": -0.016809434
    },
    {
      " walk": -0.003795096
    },
    {
      "('": -0.0045162705
    },
    {
      "bath": -0.0026300729
    },
    {
      "room": -0.00018402888
    },
    {
      "')": -0.0014403837
    },
    {
      "\n": -0.004836172
    },
    {
      " #": -0.0022294496
    },
    {
      " 1": -0.002905316
    },
    {
      ":": -0.0007429607
    },
    {
      " find": -0.09317915
    },
    {
      " toilet": -0.060566876
    },
    {
      "\n": -0.021995984
    },
    {
      " find": -0.4953427
    },
    {
      "('": -0.0018417056
    },
    {
      "to": -0.0018104156
    },
    {
      "ilet": -0.00029199722
    },
    {
      "')": -0.0027464982
    },
    {
      "\n": -0.004340613
    },
    {
      " find": -0.017001541
    },
    {
      "('": -0.0006642277
    },
    {
      "to": -0.00046968853
    },
    {
      "ilet": -0.0007789308
    },
    {
      "')": -0.00083989615
    },
    {
      "\n": -0.0034187674
    },
    {
      " #": -0.005631758
    },
    {
      " 2": -0.0050703255
    },
    {
      ":": -0.00063583726
    },
    {
      " sit": -0.5573854
    },
    {
      " on": -0.07700053
    },
    {
      " toilet": -0.47525987
    },
    {
      " toilet": -0.0036333257
    },
    {
      "\n": -0.021660075
    },
    {
      " tur": -0.51875746
    },
    {
      "('": -0.001012133
    },
    {
      "close": -0.001479899
    },
    {
      "'": -0.0025130664
    },
    {
      " to": -0.00034726874
    },
    {
      " '": -0.0010303333
    },
    {
      "to": -0.0014396667
    },
    {
      "ilet": -4.394177e-05
    },
    {
      "')": -0.0040048882
    },
    {
      "\n": -0.004335763
    },
    {
      " else": -0.0015145822
    },
    {
      ":": -0.0010391604
    },
    {
      " find": -0.005970006
    },
    {
      "('": -0.0012414537
    },
    {
      "to": -0.00047678567
    },
    {
      "ilet": -0.00012799047
    },
    {
      "')": -0.0010821836
    },
    {
      "\n": -0.0051534814
    },
    {
      " sit": -0.27666894
    },
    {
      "('": -0.00094137463
    },
    {
      "to": -0.0003272952
    },
    {
      "ilet": -3.5357807e-05
    },
    {
      "')": -0.001748078
    },
    {
      "\n": -0.027660612
    },
    {
      " #": -0.041905504
    },
    {
      " 3": -0.008015569
    },
    {
      ":": -0.0014108961
    },
    {
      " do": -0.9234232
    },
    {
      " the": -0.34375656
    },
    {
      " toilet": -0.0035488587
    },
    {
      "\n": -0.04953445
    },
    {
      " flush": -0.46054155
    },
    {
      "('": -0.009185129
    },
    {
      "to": -0.00081466336
    },
    {
      "ilet": -0.00012882493
    },
    {
      "')": -0.0024700435
    },
    {
      "\n": -0.05103952
    },
    {
      " #": -0.026862742
    },
    {
      " 4": -0.0051864325
    },
    {
      ":": -0.0015621595
    },
    {
      " stand": -1.033857
    },
    {
      " up": -0.09704542
    },
    {
      "\n": -0.5894934
    },
    {
      " stand": -0.047163304
    },
    {
      "up": -0.005005807
    },
    {
      "()": -0.10897281
    }
  ]
})]
experiment time2 on environment scene4
Turn on computer {'script': ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)']}
Clean toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Open] <toilet> (1)', '[Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Close] <toilet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Open] <toilet> (1)', '[Grab] <toilet_brush> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Close] <toilet> (1)']}
Pick up spare change on dresser {'script': ['[Walk] <bedroom> (1)', '[Find] <dresser> (1)', '[Open] <dresser> (1)', '[Find] <spare_change> (1)', '[Grab] <spare_change> (1)', '[Close] <dresser> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <dresser> (1)', '[Open] <dresser> (1)', '[Find] <spare_change> (1)', '[Grab] <spare_change> (1)', '[Close] <dresser> (1)']}
Turn on TV {'script': ['[Find] <remote> (1)', '[Find] <tv> (1)', '[Switchon] <tv> (1)'], 'assert_script': ['[Find] <remote> (1)', '[Find] <tv> (1)', "assert('close' to 'tv')", 'else: [Find] <tv> (1)', "assert('remote' in 'hands'):", 'else: [Find] <remote> (1)', "assert('tv' is 'switchoff')", 'else: [Switchoff] <tv> (1)', '[Switchon] <tv> (1)']}
Hang up jacket {'script': ['[Walk] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Walk] <jacket> (1)', '[Grab] <jacket> (1)', '[Hang] <jacket> (1) <hanger> (1)'], 'assert_script': ['[Walk] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Walk] <jacket> (1)', '[Grab] <jacket> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', "assert('jacket' in 'hands')", 'else: [Grab] <jacket> (1)', '[Hang] <jacket> (1) <hanger> (1)']}
Sit {'script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)']}
Wash sink {'script': ['[Walk] <sink> (1)', '[Find] <sink> (1)', '[Pull] <sink> (1)', '[Switchon] <faucet> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1)', '[Wash] <sink> (1)', '[Switchoff] <faucet> (1)', '[Putback] <soap> (1)', '[Push] <sink> (1)'], 'assert_script': ['[Walk] <sink> (1)', '[Find] <sink> (1)', "assert('close' to 'sink')", 'else: [Find] <sink> (1)', '[Pull] <sink> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Switchon] <faucet> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1)', '[Wash] <sink> (1)', '[Switchoff] <faucet> (1)', '[Putback] <soap> (1)', '[Push] <sink> (1)']}
Sleep {'script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)'], 'assert_script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', 'else: [Turnto] <bed> (1)', '[Sit] <bed> (1)']}
Put on glasses {'script': ['[Find] <glasses> (1)', '[Grab] <glasses> (1)', '[Puton] <glasses> (1)'], 'assert_script': ['[Find] <glasses> (1)', '[Grab] <glasses> (1)', "assert('close' to 'glasses')", 'else: [Find] <glasses> (1)', '[Puton] <glasses> (1)', "assert('glasses' in 'hands')", 'else: [Grab] <glasses> (1)']}
Start computer {'script': ['[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Touch] <mouse> (1)', '[Move] <mouse> (1)', '[Click] <mouse> (1)', '[Find] <keyboard> (1)', '[Touch] <keyboard> (1)', '[Type] <keyboard> (1)', '[Press] <keyboard> (1)'], 'assert_script': ['[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <mouse> (1)', "assert('close' to 'mouse')", 'else: [Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Touch] <mouse> (1)', '[Move] <mouse> (1)', '[Click] <mouse> (1)', '[Find] <keyboard> (1)', '[Touch] <keyboard> (1)', '[Type] <keyboard> (1)', '[Press] <keyboard> (1)']}
Put alarm clock in bedroom {'script': ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Puton] <alarm_clock> (1) <desk> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Puton] <alarm_clock> (1) <desk> (1)']}
Sit in chair {'script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Find] <chair> (1)', '[Walk] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)']}
Shut off alarm {'script': ['[Find] <alarm> (1)', '[Switchoff] <alarm> (1)'], 'assert_script': ['[Find] <alarm> (1)', "assert('close' to 'alarm')", 'else: [Find] <alarm> (1)', '[Switchoff] <alarm> (1)']}
Take nap {'script': ['[Find] <bed> (1)', '[Sit] <bed> (1)', '[Lie] <bed> (1)'], 'assert_script': ['[Find] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', '[Sit] <bed> (1)', '[Lie] <bed> (1)']}
Use computer {'script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <mousepad> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Find] <keyboard> (1)', '[Grab] <keyboard> (1)', '[Lookat] <computer_screen> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Find] <dishwasher> (1)', '[Turnon] <dishwasher> (1)', '[Add] <soap> (1)', '[Turnon] <dishwasher> (1)', '[Turnoff] <dishwasher> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <mousepad> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Find] <keyboard> (1)', '[Grab] <keyboard> (1)', '[Lookat] <computer_screen> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Find] <dishwasher> (1)', '[Turnon] <dishwasher> (1)', '[Add] <soap> (1)', '[Turnon] <dishwasher> (1)', '[Turnoff] <dishwasher> (1)']}
Wash face {'script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Switchon] <faucet> (1)', '[Pour] <faucet> (1)', '[Turnto] <face> (1)', '[Lookat] <face> (1)', '[Switchoff] <faucet> (1)', '[Walk] <kitchen> (1)', '[Find] <stove> (1)', '[Switchon] <stove> (1)', '[Find] <pan> (1)', '[Grab] <pan> (1)', '[Pour] <oil> (1)', '[Switchoff] <stove> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Switchon] <faucet> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Pour] <faucet> (1)', '[Turnto] <face> (1)', '[Lookat] <face> (1)', '[Switchoff] <faucet> (1)', '[Walk] <kitchen> (1)', '[Find] <stove> (1)', '[Switchon] <stove> (1)', '[Find] <pan> (1)', '[Grab] <pan> (1)', '[Pour] <oil> (1)', '[Switchoff] <stove> (1)']}
Read newspaper {'script': ['[Walk] <livingroom> (1)', '[Find] <newspaper> (1)', '[Find] <couch> (1)', '[Sit] <couch> (1)', '[Read] <newspaper> (1)'], 'assert_script': ['[Walk] <livingroom> (1)', '[Find] <newspaper> (1)', '[Find] <couch> (1)', '[Sit] <couch> (1)', "assert('close' to 'newspaper')", 'else: [Find] <newspaper> (1)', '[Read] <newspaper> (1)']}
Drink {'script': ['[Find] <drink> (1)', '[Grab] <drink> (1)', '[Turnto] <drink> (1)', '[Pointat] <drink> (1)', '[Drink] <drink> (1)'], 'assert_script': ['[Find] <drink> (1)', '[Grab] <drink> (1)', '[Turnto] <drink> (1)', '[Pointat] <drink> (1)', '[Drink] <drink> (1)']}
Clean bathroom {'script': ['[Walk] <bathroom> (1)', '[Find] <bathroom_sink> (1)', '[Turnon] <faucet> (1)', '[Grab] <soap> (1)', '[Wash] <soap> (1)', '[Turnoff] <faucet> (1)', '[Wipe] <bathroom_sink> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <bathroom_sink> (1)', "assert('close' to 'bathroom_sink')", 'else: [Find] <bathroom_sink> (1)', '[Turnon] <faucet> (1)', '[Grab] <soap> (1)', '[Wash] <soap> (1)', '[Turnoff] <faucet> (1)', '[Wipe] <bathroom_sink> (1)']}
Pick up phone {'script': ['[Find] <phone> (1)', '[Grab] <phone> (1)', '[Turnto] <phone> (1)', '[Pointat] <phone> (1)', '[Watch] <phone> (1)'], 'assert_script': ['[Find] <phone> (1)', '[Grab] <phone> (1)', '[Turnto] <phone> (1)', '[Pointat] <phone> (1)', '[Watch] <phone> (1)']}
Go to toilet {'script': ['[Walk] <bathroom> (1)', '[Walk] <toilet> (1)', '[Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Flush] <toilet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Walk] <toilet> (1)', '[Find] <toilet> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Flush] <toilet> (1)']}
experiment time2 on environment scene4
Turn on computer
script before ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)']
illegal action Unknown action "END"  be deleted
Clean toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Open] <toilet> (1)', '[Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Close] <toilet> (1)']
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Pick up spare change on dresser
script before ['[Walk] <bedroom> (1)', '[Find] <dresser> (1)', '[Open] <dresser> (1)', '[Find] <spare_change> (1)', '[Grab] <spare_change> (1)', '[Close] <dresser> (1)']
illegal action ('spare_change', 1) does not exist in the environment  be deleted
illegal action ('spare_change', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Turn on TV
script before ['[Find] <remote> (1)', '[Find] <tv> (1)', '[Switchon] <tv> (1)']
illegal action ('remote', 1) does not exist in the environment  be deleted
illegal action ('tv', 1) does not exist in the environment  be deleted
illegal action ('tv', 1) does not exist in the environment  be deleted
illegal action ('remote', 1) does not exist in the environment  be deleted
illegal action ('tv', 1) does not exist in the environment  be deleted
illegal action ('tv', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Hang up jacket
script before ['[Walk] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Walk] <jacket> (1)', '[Grab] <jacket> (1)', '[Hang] <jacket> (1) <hanger> (1)']
illegal action ('closet', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action ('jacket', 1) does not exist in the environment  be deleted
illegal action Unknown action "HANG"  be deleted
illegal action Unknown action "END"  be deleted
Sit
script before ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)']
illegal action Unknown action "END"  be deleted
Wash sink
script before ['[Walk] <sink> (1)', '[Find] <sink> (1)', '[Pull] <sink> (1)', '[Switchon] <faucet> (1)', '[Grab] <soap> (1)', '[Pour] <soap> (1)', '[Wash] <sink> (1)', '[Switchoff] <faucet> (1)', '[Putback] <soap> (1)', '[Push] <sink> (1)']
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action Wrong number of parameters for "PUTBACK". Got 1, expected 2  be deleted
illegal action Unknown action "END"  be deleted
Sleep
script before ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)']
illegal action Unknown action "END"  be deleted
Put on glasses
script before ['[Find] <glasses> (1)', '[Grab] <glasses> (1)', '[Puton] <glasses> (1)']
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action ('glasses', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Start computer
script before ['[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Touch] <mouse> (1)', '[Move] <mouse> (1)', '[Click] <mouse> (1)', '[Find] <keyboard> (1)', '[Touch] <keyboard> (1)', '[Type] <keyboard> (1)', '[Press] <keyboard> (1)']
illegal action Unknown action "CLICK"  be deleted
illegal action Unknown action "PRESS"  be deleted
illegal action Unknown action "END"  be deleted
Put alarm clock in bedroom
script before ['[Walk] <bedroom> (1)', '[Walk] <desk> (1)', '[Find] <desk> (1)', '[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Puton] <alarm_clock> (1) <desk> (1)']
illegal action Wrong number of parameters for "PUTON". Got 2, expected 1  be deleted
illegal action Unknown action "END"  be deleted
Sit in chair
script before ['[Find] <chair> (1)', '[Walk] <chair> (1)', '[Sit] <chair> (1)']
illegal action Unknown action "END"  be deleted
Shut off alarm
script before ['[Find] <alarm> (1)', '[Switchoff] <alarm> (1)']
illegal action ('alarm', 1) does not exist in the environment  be deleted
illegal action ('alarm', 1) does not exist in the environment  be deleted
illegal action ('alarm', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Take nap
script before ['[Find] <bed> (1)', '[Sit] <bed> (1)', '[Lie] <bed> (1)']
illegal action Unknown action "END"  be deleted
Use computer
script before ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Touch] <mousepad> (1)', '[Find] <mouse> (1)', '[Grab] <mouse> (1)', '[Find] <keyboard> (1)', '[Grab] <keyboard> (1)', '[Lookat] <computer_screen> (1)', '[Find] <sink> (1)', '[Turnto] <sink> (1)', '[Lookat] <sink> (1)', '[Find] <dishwasher> (1)', '[Turnon] <dishwasher> (1)', '[Add] <soap> (1)', '[Turnon] <dishwasher> (1)', '[Turnoff] <dishwasher> (1)']
illegal action ('computer_screen', 1) does not exist in the environment  be deleted
illegal action Unknown action "TURNON"  be deleted
illegal action Unknown action "ADD"  be deleted
illegal action Unknown action "TURNON"  be deleted
illegal action Unknown action "TURNOFF"  be deleted
illegal action Unknown action "END"  be deleted
Wash face
script before ['[Walk] <bathroom> (1)', '[Find] <sink> (1)', '[Switchon] <faucet> (1)', '[Pour] <faucet> (1)', '[Turnto] <face> (1)', '[Lookat] <face> (1)', '[Switchoff] <faucet> (1)', '[Walk] <kitchen> (1)', '[Find] <stove> (1)', '[Switchon] <stove> (1)', '[Find] <pan> (1)', '[Grab] <pan> (1)', '[Pour] <oil> (1)', '[Switchoff] <stove> (1)']
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action 'kitchen'  be deleted
illegal action ('stove', 1) does not exist in the environment  be deleted
illegal action ('stove', 1) does not exist in the environment  be deleted
illegal action ('pan', 1) does not exist in the environment  be deleted
illegal action ('pan', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
illegal action ('stove', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Read newspaper
script before ['[Walk] <livingroom> (1)', '[Find] <newspaper> (1)', '[Find] <couch> (1)', '[Sit] <couch> (1)', '[Read] <newspaper> (1)']
illegal action ('livingroom', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Drink
script before ['[Find] <drink> (1)', '[Grab] <drink> (1)', '[Turnto] <drink> (1)', '[Pointat] <drink> (1)', '[Drink] <drink> (1)']
illegal action ('drink', 1) does not exist in the environment  be deleted
illegal action ('drink', 1) does not exist in the environment  be deleted
illegal action ('drink', 1) does not exist in the environment  be deleted
illegal action ('drink', 1) does not exist in the environment  be deleted
illegal action ('drink', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Clean bathroom
script before ['[Walk] <bathroom> (1)', '[Find] <bathroom_sink> (1)', '[Turnon] <faucet> (1)', '[Grab] <soap> (1)', '[Wash] <soap> (1)', '[Turnoff] <faucet> (1)', '[Wipe] <bathroom_sink> (1)']
illegal action ('bathroom_sink', 1) does not exist in the environment  be deleted
illegal action ('bathroom_sink', 1) does not exist in the environment  be deleted
illegal action Unknown action "TURNON"  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action ('soap', 1) does not exist in the environment  be deleted
illegal action Unknown action "TURNOFF"  be deleted
illegal action ('bathroom_sink', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Pick up phone
script before ['[Find] <phone> (1)', '[Grab] <phone> (1)', '[Turnto] <phone> (1)', '[Pointat] <phone> (1)', '[Watch] <phone> (1)']
illegal action Unknown action "END"  be deleted
Go to toilet
script before ['[Walk] <bathroom> (1)', '[Walk] <toilet> (1)', '[Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Flush] <toilet> (1)']
illegal action Unknown action "FLUSH"  be deleted
illegal action Unknown action "END"  be deleted
Args info:
language_planner_result_file: language_planner.json
retry_times: 0
n_shots: 1
instruction: False
step_by_step_generation_prompt_path: None
step_by_step_generation_result_file: None
object_topk: 5
grounded_deciding_prompt_path: None
grounded_deciding_result_file: default_gd.json
prompt_choices_sequence: False
dataset_split: validation
dataset: ./data/val.json
retrieval_dataset: ./data/train.json
example_idx_file: None
api_keys_file: key.txt
save_dir: results/
plan_generation_result_file: default_pg.json
processed_plan_generation_result_file: None
graph_dict_path: None
plan_generation_prompt_path: None
graph_num: 4
exp_times: 2
n_processes: 1
seed: 42
engine: text-davinci-003
n_parallel_prompts: 1
max_generation_tokens: 512
max_api_total_tokens: 4096
temperature: 0.4
sampling_n: 20
top_p: 1.0
stop_tokens: ['\n\n']
verbose: False
experiment time2 on environment scene4
['[WALK] <bedroom> (189)', '[WALK] <desk> (192)', '[FIND] <desk> (192)', '[FIND] <computer> (273)', '[SWITCHON] <computer> (273)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off
computer is close to floor
keyboard is close to computer
computer is close to wall
mousepad is close to computer
table is facing computer
computer is inside home_office
desk is close to computer
cpuscreen is close to computer
mat is facing computer
pillow is facing computer
computer is close to keyboard
tvstand is facing computer
mouse is close to computer
orchid is facing computer
walllamp is close to computer
mousepad is facing computer
computer is close to walllamp
walllamp is facing computer
wall is close to computer
chair is close to computer
television is facing computer
wall is facing computer
door is facing computer
ceiling is facing computer
floor is close to computer
computer is close to cpuscreen
character is close to computer
floor is facing computer
computer is close to character
closetdrawer is facing computer
computer is close to desk
computer is close to chair
ceilinglamp is facing computer
chair is facing computer
light is facing computer
computer is close to mousepad
computer is close to mouse
doorjamb is facing computer
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction False
end of script
gcr, sr 1.0 1
['[WALK] <bathroom> (149)', '[FIND] <toilet> (166)', '[TURNTO] <toilet> (166)', '[OPEN] <toilet> (166)', '[WASH] <toilet> (166)', '[CLOSE] <toilet> (166)']
next step------- assert('close' to 'toilet')else: [Find] <toilet> (1)
prompt You see toilet is clean, open, off
curtain is close to toilet
toilet is inside shower
toilet is close to wall
toilet is facing drawing
toilet is inside bathroom
toilet is on floor
toilet is close to shower
toilet is close to character
character is close to toilet
shower is close to toilet
character is facing toilet
wall is close to toilet
toilet is close to floor
floor is close to toilet
toilet is close to curtain
toilet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'toilet'), 
prediction False
end of script
gcr, sr 0.0 0
['[WALK] <bedroom> (189)', '[FIND] <dresser> (1000)', '[OPEN] <dresser> (1000)', '[CLOSE] <dresser> (1000)']
end of script
gcr, sr 0.25 0
script 3 has illegal [action]()
['[FIND] <hanger> (262)', '[GRAB] <hanger> (262)']
execute failed at [GRAB] <hanger> (262)
['[FIND] <chair> (59)', '[WALK] <chair> (59)', '[SIT] <chair> (59)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
ceilinglamp is close to chair
table is close to chair
wall is close to chair
chair is close to chair
chair is close to table
chair is close to ceilinglamp
chair is inside dining_room
chair is close to wall
chair is close to character
floor is close to chair
character is close to chair
chair is close to floor
chair,chair,chair,chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction True
end of script
gcr, sr 0.6666666666666666 0
['[WALK] <sink> (67)', '[FIND] <sink> (67)', '[PULL] <sink> (67)', '[SWITCHON] <faucet> (68)', '[GRAB] <soap> (2047)', '[WASH] <sink> (67)', '[SWITCHOFF] <faucet> (68)', '[PUSH] <sink> (67)']
next step------- assert('close' to 'sink')else: [Find] <sink> (1)
prompt You see 
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'sink'), 
prediction False
execute failed at [PULL] <sink> (67)
['[FIND] <bed> (194)', '[TURNTO] <bed> (194)', '[LOOKAT] <bed> (194)', '[SIT] <bed> (194)']
next step------- assert('close' to 'bed')else: [Find] <bed> (1)else: [Turnto] <bed> (1)
prompt You see bed is clean
bed is close to mat
wall is close to bed
floor is close to bed
bed is close to nightstand
mat is close to bed
character is facing bed
bed is close to wall
bed is close to character
nightstand is close to bed
character is close to bed
bed is inside bedroom
bed is close to floor
bed is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction True
end of script
gcr, sr 0.6666666666666666 0
script 8 has illegal [action]()
['[FIND] <computer> (273)', '[SWITCHON] <computer> (273)', '[FIND] <mouse> (277)', '[GRAB] <mouse> (277)', '[TOUCH] <mouse> (277)', '[MOVE] <mouse> (277)', '[FIND] <keyboard> (275)', '[TOUCH] <keyboard> (275)', '[TYPE] <keyboard> (275)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, off
computer is close to floor
keyboard is close to computer
computer is close to wall
mousepad is close to computer
table is facing computer
computer is inside home_office
desk is close to computer
cpuscreen is close to computer
mat is facing computer
pillow is facing computer
computer is close to keyboard
tvstand is facing computer
mouse is close to computer
orchid is facing computer
walllamp is close to computer
mousepad is facing computer
computer is close to walllamp
walllamp is facing computer
wall is close to computer
chair is close to computer
television is facing computer
wall is facing computer
door is facing computer
ceiling is facing computer
floor is close to computer
computer is close to cpuscreen
character is close to computer
floor is facing computer
computer is close to character
closetdrawer is facing computer
computer is close to desk
computer is close to chair
ceilinglamp is facing computer
chair is facing computer
light is facing computer
computer is close to mousepad
computer is close to mouse
doorjamb is facing computer
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction False
next step------- assert('close' to 'mouse')else: [Find] <mouse> (1)
prompt You see mouse is plugged_in, clean
desk is close to mouse
mousepad is close to mouse
floor is close to mouse
wall is close to mouse
mouse is close to mousepad
mouse is on mousepad
mouse is close to character
mouse is close to chair
keyboard is close to mouse
chair is close to mouse
walllamp is close to mouse
mouse is close to computer
mouse is close to keyboard
mouse is close to floor
character is close to mouse
mouse is inside home_office
mouse is close to walllamp
mouse is on desk
mouse is close to wall
cpuscreen is close to mouse
mouse is close to desk
mouse is close to cpuscreen
computer is close to mouse
mouse is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'mouse'), 
prediction False
end of script
gcr, sr 0.4 0
['[WALK] <bedroom> (189)', '[WALK] <desk> (192)', '[FIND] <desk> (192)', '[FIND] <alarm_clock> (1000)', '[GRAB] <alarm_clock> (1000)']
end of script
gcr, sr 0.25 0
['[FIND] <chair> (59)', '[WALK] <chair> (59)', '[SIT] <chair> (59)']
next step------- assert('close' to 'chair')else: [Find] <chair> (1)
prompt You see chair is clean
ceilinglamp is close to chair
table is close to chair
wall is close to chair
chair is close to chair
chair is close to table
chair is close to ceilinglamp
chair is inside dining_room
chair is close to wall
chair is close to character
floor is close to chair
character is close to chair
chair is close to floor
chair,chair,chair,chair is inside dining_room
You have Currently, you are standing in the dining_room, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'chair'), 
prediction False
execute failed at [SIT] <chair> (59)
script 12 has illegal [action]()
['[FIND] <bed> (194)', '[SIT] <bed> (194)', '[LIE] <bed> (194)']
next step------- assert('close' to 'bed')else: [Find] <bed> (1)
prompt You see bed is clean
bed is close to mat
wall is close to bed
floor is close to bed
bed is close to nightstand
mat is close to bed
bed is close to wall
bed is close to character
nightstand is close to bed
character is close to bed
bed is inside bedroom
bed is close to floor
bed is inside bedroom
You have Currently, you are standing in the bedroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'bed'), 
prediction True
end of script
gcr, sr 1.0 1
['[WALK] <home_office> (248)', '[FIND] <computer> (273)', '[SWITCHON] <computer> (273)', '[FIND] <chair> (254)', '[SIT] <chair> (254)', '[TOUCH] <mousepad> (276)', '[FIND] <mouse> (277)', '[GRAB] <mouse> (277)', '[FIND] <keyboard> (275)', '[GRAB] <keyboard> (275)', '[FIND] <sink> (67)', '[TURNTO] <sink> (67)', '[LOOKAT] <sink> (67)', '[FIND] <dishwasher> (81)']
execute failed at [TOUCH] <mousepad> (276)
['[WALK] <bathroom> (149)', '[FIND] <sink> (173)', '[SWITCHON] <faucet> (172)', '[TURNTO] <face> (1000)', '[LOOKAT] <face> (1000)', '[SWITCHOFF] <faucet> (172)']
next step------- assert('close' to 'faucet')else: [Find] <faucet> (1)
prompt You see faucet is clean, off
sink is close to faucet
floor is close to faucet
faucet is close to sink
faucet is close to ceiling
faucet is close to bathroom_cabinet
bathroom_cabinet is close to faucet
faucet is close to bathroom_counter
faucet is inside bathroom
wall is close to faucet
mat is close to faucet
faucet is on bathroom_counter
faucet is close to floor
faucet is close to mat
bathroom_counter is close to faucet
faucet is close to wall
faucet is facing drawing
ceiling is close to faucet
faucet is on sink
faucet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'faucet'), 
prediction False
next step------- assert('close' to 'faucet')else: [Find] <faucet> (1)
prompt You see faucet is on, clean
floor is close to faucet
faucet is inside bathroom
faucet is facing drawing
faucet is close to wall
ceiling is close to faucet
faucet is close to character
faucet is close to sink
faucet is close to ceiling
mat is close to faucet
faucet is close to bathroom_counter
faucet is close to mat
character is close to faucet
sink is close to faucet
faucet is close to bathroom_cabinet
bathroom_cabinet is close to faucet
wall is close to faucet
faucet is on bathroom_counter
faucet is close to floor
bathroom_counter is close to faucet
faucet is on sink
faucet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'faucet'), 
prediction False
execute failed at [TURNTO] <face> (1000)
['[FIND] <newspaper> (1000)', '[FIND] <couch> (256)', '[SIT] <couch> (256)', '[READ] <newspaper> (1000)']
execute failed at [SIT] <couch> (256)
script 17 has illegal [action]()
['[WALK] <bathroom> (149)']
end of script
gcr, sr 0.3333333333333333 0
['[FIND] <phone> (2065)', '[GRAB] <phone> (2065)', '[TURNTO] <phone> (2065)', '[POINTAT] <phone> (2065)', '[WATCH] <phone> (2065)']
execute failed at [WATCH] <phone> (2065)
['[WALK] <bathroom> (149)', '[WALK] <toilet> (166)', '[FIND] <toilet> (166)', '[SIT] <toilet> (166)']
next step------- assert('close' to 'toilet')else: [Find] <toilet> (1)
prompt You see toilet is clean, closed, off
curtain is close to toilet
toilet is inside shower
toilet is close to wall
toilet is facing drawing
toilet is inside bathroom
toilet is on floor
toilet is close to shower
toilet is close to character
character is close to toilet
shower is close to toilet
wall is close to toilet
toilet is close to floor
floor is close to toilet
toilet is close to curtain
toilet is inside bathroom
You have Currently, you are standing in the bathroom, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'toilet'), 
prediction False
end of script
gcr, sr 0.5 0
experiment time3 on environment scene4
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 19.213626861572266
[(" # 0: walk to home office\n walk('home_office')\n # 1: find computer\n find('computer')\n # 2: turn on computer\n assert('close' to 'computer')\n else: find('computer')\n switchon('computer')\n # 3: sit at the computer\n assert('close' to 'computer')\n else: find('computer')\n sit('computer')\n # 4: look at computer\n turnto('computer')\n lookat('computer')", <OpenAIObject at 0x7fdfe87b24f0> JSON: {
  "text_offset": [
    3380,
    3382,
    3384,
    3385,
    3390,
    3393,
    3398,
    3405,
    3406,
    3411,
    3413,
    3417,
    3418,
    3424,
    3426,
    3427,
    3429,
    3431,
    3432,
    3437,
    3446,
    3447,
    3452,
    3454,
    3462,
    3464,
    3465,
    3467,
    3469,
    3470,
    3475,
    3478,
    3487,
    3488,
    3495,
    3497,
    3502,
    3503,
    3506,
    3508,
    3516,
    3518,
    3519,
    3524,
    3525,
    3530,
    3532,
    3540,
    3542,
    3543,
    3550,
    3552,
    3554,
    3562,
    3564,
    3565,
    3567,
    3569,
    3570,
    3574,
    3577,
    3581,
    3590,
    3591,
    3598,
    3600,
    3605,
    3606,
    3609,
    3611,
    3619,
    3621,
    3622,
    3627,
    3628,
    3633,
    3635,
    3643,
    3645,
    3646,
    3650,
    3652,
    3660,
    3662,
    3663,
    3665,
    3667,
    3668,
    3673,
    3676,
    3685,
    3686,
    3690,
    3692,
    3693,
    3695,
    3703,
    3705,
    3706,
    3711,
    3713,
    3715,
    3723
  ],
  "token_logprobs": [
    -0.014288968,
    -0.0066467826,
    -0.0015980985,
    -0.33822292,
    -0.16495341,
    -0.9639167,
    -0.053329717,
    -0.021968322,
    -0.0046217744,
    -0.004463222,
    -0.009086961,
    -0.03021417,
    -0.00080893666,
    -0.002614954,
    -0.007413119,
    -0.0027717797,
    -0.0028389646,
    -0.00065564,
    -0.030340666,
    -0.42649862,
    -0.02775026,
    -0.3067694,
    -0.0011736015,
    -0.0014414586,
    -0.002021701,
    -0.0057268324,
    -0.006367153,
    -0.0041802465,
    -0.00079688436,
    -0.37926438,
    -0.015821362,
    -0.72140735,
    -0.015710354,
    -0.4018788,
    -0.0018125661,
    -0.034427006,
    -0.004137393,
    -0.0021976708,
    -0.0030899884,
    -0.0016329656,
    -0.005285598,
    -0.0045676436,
    -0.0012159712,
    -0.0014313709,
    -0.0037349672,
    -0.0017499882,
    -0.0007167771,
    -0.002177717,
    -0.006073146,
    -0.20975707,
    -0.0022982706,
    -0.0009707892,
    -0.0009111285,
    -0.0018000858,
    -0.3470134,
    -0.06991743,
    -0.0067694345,
    -0.0008670992,
    -2.499103,
    -2.0868351,
    -0.944232,
    -0.7330833,
    -0.061025403,
    -1.3718572,
    -0.0010701293,
    -0.025688427,
    -0.0027048374,
    -0.004982204,
    -0.0018790873,
    -0.019018864,
    -0.0070358524,
    -0.0028445234,
    -0.0015492062,
    -0.0011234756,
    -0.0031524706,
    -0.0011807624,
    -0.0004920491,
    -0.002087999,
    -0.004751366,
    -0.061476152,
    -0.002302333,
    -0.0071381987,
    -0.0029114743,
    -0.62918013,
    -0.11044546,
    -0.008038281,
    -0.0015558321,
    -1.9166932,
    -0.005417671,
    -1.4853958,
    -0.24483852,
    -0.3027848,
    -7.6726035e-05,
    -0.00053302024,
    -0.00068385113,
    -0.00065134565,
    -0.0014718397,
    -0.007825975,
    -0.0067609134,
    -0.00071916316,
    -0.0007716535,
    -0.00046921265,
    -0.0018181783
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " home",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " at",
    " the",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " sit",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " look",
    " at",
    " computer",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.014288968
    },
    {
      " 0": -0.0066467826
    },
    {
      ":": -0.0015980985
    },
    {
      " walk": -0.33822292
    },
    {
      " to": -0.16495341
    },
    {
      " home": -0.9639167
    },
    {
      " office": -0.053329717
    },
    {
      "\n": -0.021968322
    },
    {
      " walk": -0.0046217744
    },
    {
      "('": -0.004463222
    },
    {
      "home": -0.009086961
    },
    {
      "_": -0.03021417
    },
    {
      "office": -0.00080893666
    },
    {
      "')": -0.002614954
    },
    {
      "\n": -0.007413119
    },
    {
      " #": -0.0027717797
    },
    {
      " 1": -0.0028389646
    },
    {
      ":": -0.00065564
    },
    {
      " find": -0.030340666
    },
    {
      " computer": -0.42649862
    },
    {
      "\n": -0.02775026
    },
    {
      " find": -0.3067694
    },
    {
      "('": -0.0011736015
    },
    {
      "computer": -0.0014414586
    },
    {
      "')": -0.002021701
    },
    {
      "\n": -0.0057268324
    },
    {
      " #": -0.006367153
    },
    {
      " 2": -0.0041802465
    },
    {
      ":": -0.00079688436
    },
    {
      " turn": -0.37926438
    },
    {
      " on": -0.015821362
    },
    {
      " the": -0.6758847
    },
    {
      "\n": -0.015710354
    },
    {
      " assert": -0.4018788
    },
    {
      "('": -0.0018125661
    },
    {
      "close": -0.034427006
    },
    {
      "'": -0.004137393
    },
    {
      " to": -0.0021976708
    },
    {
      " '": -0.0030899884
    },
    {
      "computer": -0.0016329656
    },
    {
      "')": -0.005285598
    },
    {
      "\n": -0.0045676436
    },
    {
      " else": -0.0012159712
    },
    {
      ":": -0.0014313709
    },
    {
      " find": -0.0037349672
    },
    {
      "('": -0.0017499882
    },
    {
      "computer": -0.0007167771
    },
    {
      "')": -0.002177717
    },
    {
      "\n": -0.006073146
    },
    {
      " switch": -0.20975707
    },
    {
      "on": -0.0022982706
    },
    {
      "('": -0.0009707892
    },
    {
      "computer": -0.0009111285
    },
    {
      "')": -0.0018000858
    },
    {
      "\n": -0.3470134
    },
    {
      " #": -0.06991743
    },
    {
      " 3": -0.0067694345
    },
    {
      ":": -0.0008670992
    },
    {
      " find": -0.8974423
    },
    {
      " on": -0.8382657
    },
    {
      " the": -0.944232
    },
    {
      " computer": -0.7330833
    },
    {
      "\n": -0.061025403
    },
    {
      " sit": -0.64489883
    },
    {
      "('": -0.0010701293
    },
    {
      "close": -0.025688427
    },
    {
      "'": -0.0027048374
    },
    {
      " to": -0.004982204
    },
    {
      " '": -0.0018790873
    },
    {
      "computer": -0.019018864
    },
    {
      "')": -0.0070358524
    },
    {
      "\n": -0.0028445234
    },
    {
      " else": -0.0015492062
    },
    {
      ":": -0.0011234756
    },
    {
      " find": -0.0031524706
    },
    {
      "('": -0.0011807624
    },
    {
      "computer": -0.0004920491
    },
    {
      "')": -0.002087999
    },
    {
      "\n": -0.004751366
    },
    {
      " sit": -0.061476152
    },
    {
      "('": -0.002302333
    },
    {
      "computer": -0.0071381987
    },
    {
      "')": -0.0029114743
    },
    {
      "\n": -0.62918013
    },
    {
      " #": -0.11044546
    },
    {
      " 4": -0.008038281
    },
    {
      ":": -0.0015558321
    },
    {
      " open": -1.6115221
    },
    {
      " at": -0.005417671
    },
    {
      " the": -0.28756195
    },
    {
      "\n": -0.24483852
    },
    {
      " tur": -0.3027848
    },
    {
      "nt": -7.6726035e-05
    },
    {
      "o": -0.00053302024
    },
    {
      "('": -0.00068385113
    },
    {
      "computer": -0.00065134565
    },
    {
      "')": -0.0014718397
    },
    {
      "\n": -0.007825975
    },
    {
      " look": -0.0067609134
    },
    {
      "at": -0.00071916316
    },
    {
      "('": -0.0007716535
    },
    {
      "computer": -0.00046921265
    },
    {
      "')": -0.0018181783
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 7.313897132873535
[(" # 0: walk to the bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: grab toilet brush\n grab('toilet_brush')\n assert('toilet_brush' in 'hands')\n else: grab('toilet_brush')\n # 3: clean the toilet\n wash('toilet')\n # 4: put the brush back\n assert('toilet_brush' in 'hands')\n else: grab('toilet_brush')\n putobjback('toilet_brush')\n # 5: Done\ndef make_coffee():\n # 0: find coffee machine\n find('coffee_maker')\n # 1: grab coffee\n grab('coffee')\n # 2: fill water tank\n assert('close' to 'coffee_maker')\n else: find('coffee_maker')\n assert('coffee' in 'hands')\n else: grab('coffee')\n fill('coffee_maker')\n # 3: fill coffee grounds\n fill('coffee_grounds')\n # 4: switch on the machine\n switchon('coffee_maker')\n # 5: pour coffee into cup\n grab('cup')\n pour('coffee')\n # 6: Done\n assert('coffee' in 'cup')", <OpenAIObject at 0x7fdfe87e5900> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3393,
    3402,
    3403,
    3408,
    3410,
    3414,
    3418,
    3420,
    3421,
    3423,
    3425,
    3426,
    3431,
    3438,
    3439,
    3444,
    3446,
    3448,
    3452,
    3454,
    3455,
    3457,
    3459,
    3460,
    3465,
    3472,
    3478,
    3479,
    3484,
    3486,
    3488,
    3492,
    3493,
    3498,
    3500,
    3501,
    3508,
    3510,
    3512,
    3516,
    3517,
    3522,
    3523,
    3526,
    3528,
    3533,
    3535,
    3536,
    3541,
    3542,
    3547,
    3549,
    3551,
    3555,
    3556,
    3561,
    3563,
    3564,
    3566,
    3568,
    3569,
    3575,
    3579,
    3586,
    3587,
    3592,
    3594,
    3596,
    3600,
    3602,
    3603,
    3605,
    3607,
    3608,
    3612,
    3616,
    3622,
    3627,
    3628,
    3635,
    3637,
    3639,
    3643,
    3644,
    3649,
    3650,
    3653,
    3655,
    3660,
    3662,
    3663,
    3668,
    3669,
    3674,
    3676,
    3678,
    3682,
    3683,
    3688,
    3690,
    3691,
    3695,
    3698,
    3702,
    3704,
    3706,
    3710,
    3711,
    3716,
    3718,
    3719,
    3721,
    3723,
    3724,
    3729,
    3730,
    3733,
    3738,
    3739,
    3741,
    3745,
    3748,
    3749,
    3751,
    3753,
    3754,
    3759,
    3766,
    3774,
    3775,
    3780,
    3782,
    3784,
    3788,
    3789,
    3794,
    3796,
    3797,
    3799,
    3801,
    3802,
    3807,
    3814,
    3815,
    3820,
    3822,
    3824,
    3828,
    3830,
    3831,
    3833,
    3835,
    3836,
    3841,
    3847,
    3852,
    3853,
    3860,
    3862,
    3867,
    3868,
    3871,
    3873,
    3875,
    3879,
    3880,
    3885,
    3887,
    3888,
    3893,
    3894,
    3899,
    3901,
    3903,
    3907,
    3908,
    3913,
    3915,
    3916,
    3923,
    3925,
    3927,
    3931,
    3932,
    3935,
    3937,
    3942,
    3944,
    3945,
    3950,
    3951,
    3956,
    3958,
    3960,
    3964,
    3966,
    3967,
    3972,
    3974,
    3976,
    3980,
    3981,
    3986,
    3988,
    3989,
    3991,
    3993,
    3994,
    3999,
    4006,
    4014,
    4015,
    4020,
    4022,
    4024,
    4028,
    4029,
    4036,
    4038,
    4039,
    4041,
    4043,
    4044,
    4051,
    4054,
    4058,
    4066,
    4067,
    4074,
    4076,
    4078,
    4080,
    4084,
    4085,
    4090,
    4092,
    4093,
    4095,
    4097,
    4098,
    4103,
    4110,
    4115,
    4119,
    4120,
    4125,
    4127,
    4130,
    4132,
    4133,
    4138,
    4140,
    4142,
    4146,
    4148,
    4149,
    4151,
    4153,
    4154,
    4159,
    4160,
    4167,
    4169,
    4171,
    4175,
    4176,
    4179,
    4181,
    4184
  ],
  "token_logprobs": [
    -0.016048951,
    -0.0067091873,
    -0.0017292683,
    -0.37246624,
    -0.25357375,
    -1.731055,
    -0.1845482,
    -0.021687485,
    -0.005293029,
    -0.0041123745,
    -0.0023642876,
    -0.00015911051,
    -0.0020006802,
    -0.0073800953,
    -0.002198984,
    -0.0030393484,
    -0.00076115556,
    -0.07120383,
    -0.43329132,
    -0.03451616,
    -0.11864865,
    -0.0009467437,
    -0.00057691254,
    -0.00019177745,
    -0.0020088595,
    -0.0057063308,
    -0.013218873,
    -0.0050341403,
    -0.0013429143,
    -1.0231565,
    -0.8105107,
    -0.6065087,
    -0.036939632,
    -0.48054284,
    -0.0010390421,
    -0.008870327,
    -0.0003591943,
    -0.058076687,
    -0.0003274144,
    -0.0022857827,
    -0.00483204,
    -2.5767324,
    -0.0017937564,
    -1.5702237,
    -0.00045442232,
    -0.020532178,
    -0.00034750812,
    -0.0030489732,
    -0.019226706,
    -0.005912685,
    -0.012155226,
    -0.033375405,
    -0.0059255753,
    -0.017897336,
    -0.0042508803,
    -0.018647453,
    -0.0015680111,
    -0.00060810574,
    -0.00013228387,
    -0.004218378,
    -0.00014146294,
    -0.0032473071,
    -0.0059438623,
    -0.3964604,
    -0.007488484,
    -0.00083100714,
    -1.4687597,
    -0.32899445,
    -0.012652442,
    -0.16378932,
    -1.1559043,
    -0.0013309766,
    -0.00038614578,
    -0.00012632155,
    -0.21280886,
    -0.005432593,
    -0.86791915,
    -0.004807124,
    -0.0009894016,
    -0.20916767,
    -1.0659233,
    -0.55599296,
    -0.022648208,
    -0.037146658,
    -1.9867953,
    -0.0013304988,
    -0.09456523,
    -0.00062802393,
    -0.0034636836,
    -0.00024013019,
    -0.0012886003,
    -0.0032822303,
    -0.0023057975,
    -0.00089113996,
    -0.0051642642,
    -0.002734724,
    -0.0018190145,
    -0.0012366807,
    -0.0037383172,
    -0.0010454879,
    -0.0005463782,
    -1.0323977e-05,
    -0.0036269834,
    -0.0002620674,
    -0.0024790647,
    -0.0052881744,
    -0.023289567,
    -0.5912468,
    -0.002907409,
    -0.00091697165,
    -0.004999996,
    -0.00015636964,
    -0.003291262,
    -0.00018271852,
    -0.0073129064,
    -0.12251116,
    -0.009642167,
    -0.006394386,
    -0.0016238298,
    -0.3995213,
    -1.2846814,
    -0.15071946,
    -0.9574204,
    -0.0003751739,
    -0.61180276,
    -0.00463896,
    -0.03002215,
    -0.0153477965,
    -0.007972669,
    -0.0034741506,
    -0.0015664576,
    -1.6851654,
    -0.41148296,
    -2.5152476,
    -0.042572103,
    -0.041372098,
    -0.0013280527,
    -0.00032276337,
    -0.06116422,
    -0.0033049542,
    -1.6425083,
    -0.0018288685,
    -0.0072221276,
    -0.0058321045,
    -0.0020989294,
    -0.000581326,
    -1.6138222,
    -0.5281669,
    -0.8652507,
    -0.18753558,
    -0.0011250263,
    -0.0023378786,
    -0.0046286616,
    -0.039771575,
    -0.0048338957,
    -1.525182,
    -0.0038508032,
    -0.0011534909,
    -2.715805,
    -1.8513561,
    -2.4297814,
    -0.2744928,
    -1.4160333,
    -0.002513303,
    -0.1650663,
    -0.0049223024,
    -0.0009703123,
    -0.0026569671,
    -0.035982065,
    -0.033181544,
    -0.020806486,
    -0.11229308,
    -0.010982724,
    -0.00452603,
    -0.002280347,
    -0.0019852112,
    -0.005776049,
    -0.0021244946,
    -0.0002164621,
    -0.0041517573,
    -0.0027736917,
    -0.017649425,
    -0.004784185,
    -0.008637151,
    -3.469985,
    -0.0016873558,
    -0.23807262,
    -0.013744353,
    -0.021446124,
    -0.040997073,
    -0.0033461608,
    -0.01890691,
    -0.028762836,
    -0.0051544397,
    -0.0046933363,
    -0.0018006837,
    -0.024332682,
    -0.0015802501,
    -0.00012739444,
    -0.0010788419,
    -0.005748894,
    -0.00869072,
    -0.69317585,
    -0.048570685,
    -0.82750857,
    -0.021591678,
    -0.013054001,
    -0.040490534,
    -0.1602042,
    -0.0071879067,
    -0.053040493,
    -0.005230532,
    -0.0013206523,
    -3.5838282,
    -0.61321217,
    -2.49292,
    -0.08104335,
    -2.4299805,
    -0.054725647,
    -0.004992627,
    -0.0038295013,
    -0.44199988,
    -0.67294794,
    -0.010599464,
    -0.0055223727,
    -0.07164235,
    -0.0035523877,
    -0.0009885643,
    -0.87566835,
    -0.039816044,
    -0.5468699,
    -0.56112117,
    -0.02027546,
    -0.21984956,
    -0.0017800812,
    -0.00076998264,
    -0.0014462343,
    -0.0038873625,
    -0.0015433538,
    -0.037553664,
    -0.0019246541,
    -0.0038780877,
    -0.009897492,
    -0.0032419849,
    -0.00112598,
    -2.1685529,
    -0.4031772,
    -1.8303493,
    -0.26122442,
    -0.014177785,
    -1.3934087,
    -0.0012255172,
    -0.008889333,
    -0.0018221807,
    -0.0039028015,
    -0.67717624,
    -0.004867018,
    -0.0672485,
    -0.0022529874,
    -0.6480765,
    -0.011405919,
    -0.07451481,
    -0.0050226385,
    -0.0016735633,
    -0.40168574,
    -0.55802387,
    -1.4197074,
    -0.002124854,
    -0.5962666,
    -0.005835043,
    -0.059649564,
    -0.050344057,
    -0.008793058,
    -0.05211617,
    -0.0065037473
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " the",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " toilet",
    " brush",
    "\n",
    " grab",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " assert",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " clean",
    " the",
    " toilet",
    "\n",
    " wash",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " the",
    " brush",
    " back",
    "\n",
    " assert",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "to",
    "ilet",
    "_",
    "brush",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done",
    "\n",
    "def",
    " make",
    "_",
    "co",
    "ffee",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " find",
    " coffee",
    " machine",
    "\n",
    " find",
    "('",
    "co",
    "ffee",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " coffee",
    "\n",
    " grab",
    "('",
    "co",
    "ffee",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " fill",
    " water",
    " tank",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "co",
    "ffee",
    "_",
    "maker",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "co",
    "ffee",
    "_",
    "maker",
    "')",
    "\n",
    " assert",
    "('",
    "co",
    "ffee",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "co",
    "ffee",
    "')",
    "\n",
    " fill",
    "('",
    "co",
    "ffee",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " fill",
    " coffee",
    " grounds",
    "\n",
    " fill",
    "('",
    "co",
    "ffee",
    "_",
    "grounds",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " switch",
    " on",
    " the",
    " machine",
    "\n",
    " switch",
    "on",
    "('",
    "co",
    "ffee",
    "_",
    "maker",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " pour",
    " coffee",
    " into",
    " cup",
    "\n",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " pour",
    "('",
    "co",
    "ffee",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done",
    "\n",
    " assert",
    "('",
    "co",
    "ffee",
    "'",
    " in",
    " '",
    "cup",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.016048951
    },
    {
      " 0": -0.0067091873
    },
    {
      ":": -0.0017292683
    },
    {
      " walk": -0.37246624
    },
    {
      " to": -0.25357375
    },
    {
      " bathroom": -0.28977838
    },
    {
      " bathroom": -0.1845482
    },
    {
      "\n": -0.021687485
    },
    {
      " walk": -0.005293029
    },
    {
      "('": -0.0041123745
    },
    {
      "bath": -0.0023642876
    },
    {
      "room": -0.00015911051
    },
    {
      "')": -0.0020006802
    },
    {
      "\n": -0.0073800953
    },
    {
      " #": -0.002198984
    },
    {
      " 1": -0.0030393484
    },
    {
      ":": -0.00076115556
    },
    {
      " find": -0.07120383
    },
    {
      " toilet": -0.43329132
    },
    {
      "\n": -0.03451616
    },
    {
      " find": -0.11864865
    },
    {
      "('": -0.0009467437
    },
    {
      "to": -0.00057691254
    },
    {
      "ilet": -0.00019177745
    },
    {
      "')": -0.0020088595
    },
    {
      "\n": -0.0057063308
    },
    {
      " #": -0.013218873
    },
    {
      " 2": -0.0050341403
    },
    {
      ":": -0.0013429143
    },
    {
      " grab": -1.0231565
    },
    {
      " toilet": -0.8105107
    },
    {
      " brush": -0.6065087
    },
    {
      "\n": -0.036939632
    },
    {
      " grab": -0.48054284
    },
    {
      "('": -0.0010390421
    },
    {
      "to": -0.008870327
    },
    {
      "ilet": -0.0003591943
    },
    {
      "_": -0.058076687
    },
    {
      "brush": -0.0003274144
    },
    {
      "')": -0.0022857827
    },
    {
      "\n": -0.00483204
    },
    {
      " #": -0.10732631
    },
    {
      "('": -0.0017937564
    },
    {
      "close": -0.2588071
    },
    {
      "ilet": -0.00045442232
    },
    {
      "_": -0.020532178
    },
    {
      "brush": -0.00034750812
    },
    {
      "'": -0.0030489732
    },
    {
      " in": -0.019226706
    },
    {
      " '": -0.005912685
    },
    {
      "hands": -0.012155226
    },
    {
      "')": -0.033375405
    },
    {
      "\n": -0.0059255753
    },
    {
      " else": -0.017897336
    },
    {
      ":": -0.0042508803
    },
    {
      " grab": -0.018647453
    },
    {
      "('": -0.0015680111
    },
    {
      "to": -0.00060810574
    },
    {
      "ilet": -0.00013228387
    },
    {
      "_": -0.004218378
    },
    {
      "brush": -0.00014146294
    },
    {
      "')": -0.0032473071
    },
    {
      "\n": -0.0059438623
    },
    {
      " #": -0.3964604
    },
    {
      " 3": -0.007488484
    },
    {
      ":": -0.00083100714
    },
    {
      " wash": -0.9140073
    },
    {
      " the": -0.32899445
    },
    {
      " toilet": -0.012652442
    },
    {
      "\n": -0.16378932
    },
    {
      " tur": -0.8541235
    },
    {
      "('": -0.0013309766
    },
    {
      "to": -0.00038614578
    },
    {
      "ilet": -0.00012632155
    },
    {
      "')": -0.21280886
    },
    {
      "\n": -0.005432593
    },
    {
      " #": -0.86791915
    },
    {
      " 4": -0.004807124
    },
    {
      ":": -0.0009894016
    },
    {
      " put": -0.20916767
    },
    {
      " the": -1.0659233
    },
    {
      " brush": -0.55599296
    },
    {
      " back": -0.022648208
    },
    {
      "\n": -0.037146658
    },
    {
      " put": -0.20025432
    },
    {
      "('": -0.0013304988
    },
    {
      "to": -0.09456523
    },
    {
      "ilet": -0.00062802393
    },
    {
      "_": -0.0034636836
    },
    {
      "brush": -0.00024013019
    },
    {
      "'": -0.0012886003
    },
    {
      " in": -0.0032822303
    },
    {
      " '": -0.0023057975
    },
    {
      "hands": -0.00089113996
    },
    {
      "')": -0.0051642642
    },
    {
      "\n": -0.002734724
    },
    {
      " else": -0.0018190145
    },
    {
      ":": -0.0012366807
    },
    {
      " grab": -0.0037383172
    },
    {
      "('": -0.0010454879
    },
    {
      "to": -0.0005463782
    },
    {
      "ilet": -1.0323977e-05
    },
    {
      "_": -0.0036269834
    },
    {
      "brush": -0.0002620674
    },
    {
      "')": -0.0024790647
    },
    {
      "\n": -0.0052881744
    },
    {
      " put": -0.023289567
    },
    {
      "obj": -0.5912468
    },
    {
      "back": -0.002907409
    },
    {
      "('": -0.00091697165
    },
    {
      "to": -0.004999996
    },
    {
      "ilet": -0.00015636964
    },
    {
      "_": -0.003291262
    },
    {
      "brush": -0.00018271852
    },
    {
      "')": -0.0073129064
    },
    {
      "\n": -0.12251116
    },
    {
      " #": -0.009642167
    },
    {
      " 5": -0.006394386
    },
    {
      ":": -0.0016238298
    },
    {
      " Done": -0.3995213
    },
    {
      "<|endoftext|>": -0.36924478
    },
    {
      "def": -0.15071946
    },
    {
      " make": -0.9574204
    },
    {
      "_": -0.0003751739
    },
    {
      "co": -0.61180276
    },
    {
      "ffee": -0.00463896
    },
    {
      "():": -0.03002215
    },
    {
      "\n": -0.0153477965
    },
    {
      " #": -0.007972669
    },
    {
      " 0": -0.0034741506
    },
    {
      ":": -0.0015664576
    },
    {
      " walk": -0.26255792
    },
    {
      " coffee": -0.41148296
    },
    {
      " pot": -0.7522594
    },
    {
      "\n": -0.042572103
    },
    {
      " find": -0.041372098
    },
    {
      "('": -0.0013280527
    },
    {
      "co": -0.00032276337
    },
    {
      "ffee": -0.06116422
    },
    {
      "_": -0.0033049542
    },
    {
      "machine": -0.22084312
    },
    {
      "')": -0.0018288685
    },
    {
      "\n": -0.0072221276
    },
    {
      " #": -0.0058321045
    },
    {
      " 1": -0.0020989294
    },
    {
      ":": -0.000581326
    },
    {
      " find": -1.462124
    },
    {
      " coffee": -0.5281669
    },
    {
      "\n": -0.8652507
    },
    {
      " grab": -0.18753558
    },
    {
      "('": -0.0011250263
    },
    {
      "co": -0.0023378786
    },
    {
      "ffee": -0.0046286616
    },
    {
      "')": -0.039771575
    },
    {
      "\n": -0.0048338957
    },
    {
      " assert": -0.26142815
    },
    {
      " 2": -0.0038508032
    },
    {
      ":": -0.0011534909
    },
    {
      " put": -0.8832196
    },
    {
      " the": -0.99515575
    },
    {
      "\n": -0.9160045
    },
    {
      "\n": -0.2744928
    },
    {
      " fill": -1.1288857
    },
    {
      "('": -0.002513303
    },
    {
      "close": -0.1650663
    },
    {
      "'": -0.0049223024
    },
    {
      " to": -0.0009703123
    },
    {
      " '": -0.0026569671
    },
    {
      "co": -0.035982065
    },
    {
      "ffee": -0.033181544
    },
    {
      "_": -0.020806486
    },
    {
      "maker": -0.11229308
    },
    {
      "')": -0.010982724
    },
    {
      "\n": -0.00452603
    },
    {
      " else": -0.002280347
    },
    {
      ":": -0.0019852112
    },
    {
      " find": -0.005776049
    },
    {
      "('": -0.0021244946
    },
    {
      "co": -0.0002164621
    },
    {
      "ffee": -0.0041517573
    },
    {
      "_": -0.0027736917
    },
    {
      "maker": -0.017649425
    },
    {
      "')": -0.004784185
    },
    {
      "\n": -0.008637151
    },
    {
      " fill": -0.7517521
    },
    {
      "('": -0.0016873558
    },
    {
      "co": -0.23807262
    },
    {
      "ffee": -0.013744353
    },
    {
      "'": -0.021446124
    },
    {
      " in": -0.040997073
    },
    {
      " '": -0.0033461608
    },
    {
      "hands": -0.01890691
    },
    {
      "')": -0.028762836
    },
    {
      "\n": -0.0051544397
    },
    {
      " else": -0.0046933363
    },
    {
      ":": -0.0018006837
    },
    {
      " grab": -0.024332682
    },
    {
      "('": -0.0015802501
    },
    {
      "co": -0.00012739444
    },
    {
      "ffee": -0.0010788419
    },
    {
      "')": -0.005748894
    },
    {
      "\n": -0.00869072
    },
    {
      " fill": -0.69317585
    },
    {
      "('": -0.048570685
    },
    {
      "water": -0.58729523
    },
    {
      "ffee": -0.021591678
    },
    {
      "_": -0.013054001
    },
    {
      "maker": -0.040490534
    },
    {
      "')": -0.1602042
    },
    {
      "\n": -0.0071879067
    },
    {
      " #": -0.053040493
    },
    {
      " 3": -0.005230532
    },
    {
      ":": -0.0013206523
    },
    {
      " put": -0.62856984
    },
    {
      " coffee": -0.61321217
    },
    {
      "\n": -1.1283264
    },
    {
      "\n": -0.08104335
    },
    {
      " assert": -0.880091
    },
    {
      "('": -0.054725647
    },
    {
      "co": -0.004992627
    },
    {
      "ffee": -0.0038295013
    },
    {
      "_": -0.44199988
    },
    {
      "grounds": -0.67294794
    },
    {
      "')": -0.010599464
    },
    {
      "\n": -0.0055223727
    },
    {
      " #": -0.07164235
    },
    {
      " 4": -0.0035523877
    },
    {
      ":": -0.0009885643
    },
    {
      " switch": -0.87566835
    },
    {
      " on": -0.039816044
    },
    {
      " the": -0.5468699
    },
    {
      " machine": -0.56112117
    },
    {
      "\n": -0.02027546
    },
    {
      " switch": -0.21984956
    },
    {
      "on": -0.0017800812
    },
    {
      "('": -0.00076998264
    },
    {
      "co": -0.0014462343
    },
    {
      "ffee": -0.0038873625
    },
    {
      "_": -0.0015433538
    },
    {
      "maker": -0.037553664
    },
    {
      "')": -0.0019246541
    },
    {
      "\n": -0.0038780877
    },
    {
      " #": -0.009897492
    },
    {
      " 5": -0.0032419849
    },
    {
      ":": -0.00112598
    },
    {
      " wait": -1.1941923
    },
    {
      " coffee": -0.4031772
    },
    {
      "\n": -0.67236847
    },
    {
      " cup": -0.26122442
    },
    {
      "\n": -0.014177785
    },
    {
      " pour": -0.7392777
    },
    {
      "('": -0.0012255172
    },
    {
      "cup": -0.008889333
    },
    {
      "')": -0.0018221807
    },
    {
      "\n": -0.0039028015
    },
    {
      " pour": -0.67717624
    },
    {
      "('": -0.004867018
    },
    {
      "co": -0.0672485
    },
    {
      "ffee": -0.0022529874
    },
    {
      "')": -0.6480765
    },
    {
      "\n": -0.011405919
    },
    {
      " #": -0.07451481
    },
    {
      " 6": -0.0050226385
    },
    {
      ":": -0.0016735633
    },
    {
      " Done": -0.40168574
    },
    {
      "\n": -0.55802387
    },
    {
      "def": -1.272773
    },
    {
      "('": -0.002124854
    },
    {
      "co": -0.5962666
    },
    {
      "ffee": -0.005835043
    },
    {
      "'": -0.059649564
    },
    {
      " in": -0.050344057
    },
    {
      " '": -0.008793058
    },
    {
      "cup": -0.05211617
    },
    {
      "')": -0.0065037473
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.783416748046875
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find dresser\n walk('dresser')\n find('dresser')\n # 2: find spare change\n find('spare_change')\n # 3: grab spare change\n assert('close' to 'spare_change')\n else: find('spare_change')\n grab('spare_change')\n assert('spare_change' in 'hands')\n else: grab('spare_change')", <OpenAIObject at 0x7fdfe87f39a0> JSON: {
  "text_offset": [
    3395,
    3397,
    3399,
    3400,
    3405,
    3408,
    3416,
    3417,
    3422,
    3424,
    3431,
    3433,
    3434,
    3436,
    3438,
    3439,
    3444,
    3450,
    3452,
    3453,
    3458,
    3460,
    3465,
    3467,
    3469,
    3470,
    3475,
    3477,
    3482,
    3484,
    3486,
    3487,
    3489,
    3491,
    3492,
    3497,
    3503,
    3510,
    3511,
    3516,
    3518,
    3520,
    3523,
    3524,
    3530,
    3532,
    3533,
    3535,
    3537,
    3538,
    3543,
    3549,
    3556,
    3557,
    3564,
    3566,
    3571,
    3572,
    3575,
    3577,
    3579,
    3582,
    3583,
    3589,
    3591,
    3592,
    3597,
    3598,
    3603,
    3605,
    3607,
    3610,
    3611,
    3617,
    3619,
    3620,
    3625,
    3627,
    3629,
    3632,
    3633,
    3639,
    3641,
    3642,
    3649,
    3651,
    3653,
    3656,
    3657,
    3663,
    3664,
    3667,
    3669,
    3674,
    3676,
    3677,
    3682,
    3683,
    3688,
    3690,
    3692,
    3695,
    3696,
    3702
  ],
  "token_logprobs": [
    -0.018709335,
    -0.009578074,
    -0.0022322552,
    -0.2449937,
    -0.21243936,
    -0.22442092,
    -0.020695793,
    -0.004848751,
    -0.004305112,
    -0.0022267003,
    -0.0012683686,
    -0.0073610595,
    -0.0017719601,
    -0.0026833243,
    -0.0006425167,
    -0.039547015,
    -0.027484579,
    -0.00079807744,
    -0.016369892,
    -0.5022355,
    -0.0012371556,
    -0.0023924885,
    -0.00022659577,
    -0.00104847,
    -0.004099507,
    -0.009583008,
    -0.00068468647,
    -0.00072578347,
    -6.647409e-05,
    -0.0010009152,
    -0.0049163722,
    -0.0043179845,
    -0.0042588394,
    -0.0006579059,
    -0.7378239,
    -0.25491333,
    -0.08686965,
    -0.07669903,
    -0.2364262,
    -0.001172048,
    -0.021578034,
    -0.00015672446,
    -0.029474124,
    -0.0009825992,
    -0.0026661125,
    -0.0050156303,
    -0.014746713,
    -0.0038382965,
    -0.0011506272,
    -0.60775983,
    -0.43817985,
    -0.0057740104,
    -0.01716161,
    -0.6163731,
    -0.0013675623,
    -0.0074527534,
    -0.002207763,
    -0.0006864756,
    -0.0008685307,
    -0.0043812026,
    -0.00021121504,
    -0.0038765324,
    -0.00020298682,
    -0.005549525,
    -0.0070961798,
    -0.0015845473,
    -0.0011814777,
    -0.0047362735,
    -0.0014280274,
    -0.00066112546,
    -0.0003477465,
    -0.00092580245,
    -0.00012727616,
    -0.0019576168,
    -0.0056300233,
    -0.007156329,
    -0.00085838855,
    -0.0004352194,
    -0.00046658723,
    -0.0013054331,
    -0.00066255784,
    -0.001285496,
    -0.13290921,
    -0.8901984,
    -0.001668547,
    -0.013713653,
    -0.00023989083,
    -0.0015434738,
    -0.00075178785,
    -0.0021811223,
    -0.017126683,
    -0.0036857896,
    -0.00986384,
    -0.015055439,
    -0.014835271,
    -0.003926674,
    -0.002538163,
    -0.0037727805,
    -0.0017283128,
    -0.0003936597,
    -0.0015957108,
    -0.0008349447,
    -0.00031417754,
    -0.0022410983
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " dress",
    "er",
    "\n",
    " walk",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " find",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " spare",
    " change",
    "\n",
    " find",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " spare",
    " change",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " grab",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018709335
    },
    {
      " 0": -0.009578074
    },
    {
      ":": -0.0022322552
    },
    {
      " walk": -0.2449937
    },
    {
      " to": -0.21243936
    },
    {
      " bedroom": -0.22442092
    },
    {
      "\n": -0.020695793
    },
    {
      " walk": -0.004848751
    },
    {
      "('": -0.004305112
    },
    {
      "bedroom": -0.0022267003
    },
    {
      "')": -0.0012683686
    },
    {
      "\n": -0.0073610595
    },
    {
      " #": -0.0017719601
    },
    {
      " 1": -0.0026833243
    },
    {
      ":": -0.0006425167
    },
    {
      " find": -0.039547015
    },
    {
      " dress": -0.027484579
    },
    {
      "er": -0.00079807744
    },
    {
      "\n": -0.016369892
    },
    {
      " walk": -0.5022355
    },
    {
      "('": -0.0012371556
    },
    {
      "dress": -0.0023924885
    },
    {
      "er": -0.00022659577
    },
    {
      "')": -0.00104847
    },
    {
      "\n": -0.004099507
    },
    {
      " find": -0.009583008
    },
    {
      "('": -0.00068468647
    },
    {
      "dress": -0.00072578347
    },
    {
      "er": -6.647409e-05
    },
    {
      "')": -0.0010009152
    },
    {
      "\n": -0.0049163722
    },
    {
      " #": -0.0043179845
    },
    {
      " 2": -0.0042588394
    },
    {
      ":": -0.0006579059
    },
    {
      " find": -0.7378239
    },
    {
      " spare": -0.25491333
    },
    {
      " change": -0.08686965
    },
    {
      "\n": -0.07669903
    },
    {
      " find": -0.2364262
    },
    {
      "('": -0.001172048
    },
    {
      "sp": -0.021578034
    },
    {
      "are": -0.00015672446
    },
    {
      "_": -0.029474124
    },
    {
      "change": -0.0009825992
    },
    {
      "')": -0.0026661125
    },
    {
      "\n": -0.0050156303
    },
    {
      " #": -0.014746713
    },
    {
      " 3": -0.0038382965
    },
    {
      ":": -0.0011506272
    },
    {
      " grab": -0.60775983
    },
    {
      " spare": -0.43817985
    },
    {
      " change": -0.0057740104
    },
    {
      "\n": -0.01716161
    },
    {
      " assert": -0.6163731
    },
    {
      "('": -0.0013675623
    },
    {
      "close": -0.0074527534
    },
    {
      "'": -0.002207763
    },
    {
      " to": -0.0006864756
    },
    {
      " '": -0.0008685307
    },
    {
      "sp": -0.0043812026
    },
    {
      "are": -0.00021121504
    },
    {
      "_": -0.0038765324
    },
    {
      "change": -0.00020298682
    },
    {
      "')": -0.005549525
    },
    {
      "\n": -0.0070961798
    },
    {
      " else": -0.0015845473
    },
    {
      ":": -0.0011814777
    },
    {
      " find": -0.0047362735
    },
    {
      "('": -0.0014280274
    },
    {
      "sp": -0.00066112546
    },
    {
      "are": -0.0003477465
    },
    {
      "_": -0.00092580245
    },
    {
      "change": -0.00012727616
    },
    {
      "')": -0.0019576168
    },
    {
      "\n": -0.0056300233
    },
    {
      " grab": -0.007156329
    },
    {
      "('": -0.00085838855
    },
    {
      "sp": -0.0004352194
    },
    {
      "are": -0.00046658723
    },
    {
      "_": -0.0013054331
    },
    {
      "change": -0.00066255784
    },
    {
      "')": -0.001285496
    },
    {
      "\n": -0.13290921
    },
    {
      " #": -0.6151206
    },
    {
      "('": -0.001668547
    },
    {
      "sp": -0.013713653
    },
    {
      "are": -0.00023989083
    },
    {
      "_": -0.0015434738
    },
    {
      "change": -0.00075178785
    },
    {
      "'": -0.0021811223
    },
    {
      " in": -0.017126683
    },
    {
      " '": -0.0036857896
    },
    {
      "hands": -0.00986384
    },
    {
      "')": -0.015055439
    },
    {
      "\n": -0.014835271
    },
    {
      " else": -0.003926674
    },
    {
      ":": -0.002538163
    },
    {
      " grab": -0.0037727805
    },
    {
      "('": -0.0017283128
    },
    {
      "sp": -0.0003936597
    },
    {
      "are": -0.0015957108
    },
    {
      "_": -0.0008349447
    },
    {
      "change": -0.00031417754
    },
    {
      "')": -0.0022410983
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.8069469928741455
[(" # 0: walk in to living room\n walk('living_room')\n # 1: find tv\n find('television')\n # 2: turn on tv\n turnto('television')\n assert('television' is 'switchoff')\n else: switchoff('television')\n switchon('television')\n # 3: Done\ndef cook_dinner():\n # 0: walk to kitchen\n walk('kitchen')\n # 1: find stove\n walk('stove')\n find('stove')\n # 2: turn on the stove\n turnto('stove')\n switchon('stove')\n # 3: find pot\n find('pot')\n # 4: pour oil in pot\n assert('close' to 'pot')\n else: find('pot')\n pour('oil', 'pot')\n # 5: cook food\n turnto('stove')\n puton('pot')\n # 6: Done", <OpenAIObject at 0x7fdfe8810cc0> JSON: {
  "text_offset": [
    3374,
    3376,
    3378,
    3379,
    3384,
    3387,
    3390,
    3397,
    3402,
    3403,
    3408,
    3410,
    3416,
    3417,
    3421,
    3423,
    3424,
    3426,
    3428,
    3429,
    3434,
    3437,
    3438,
    3443,
    3445,
    3447,
    3455,
    3457,
    3458,
    3460,
    3462,
    3463,
    3468,
    3471,
    3474,
    3475,
    3479,
    3481,
    3482,
    3484,
    3486,
    3494,
    3496,
    3497,
    3504,
    3506,
    3508,
    3516,
    3517,
    3520,
    3522,
    3528,
    3531,
    3533,
    3534,
    3539,
    3540,
    3547,
    3550,
    3552,
    3554,
    3562,
    3564,
    3565,
    3572,
    3574,
    3576,
    3578,
    3586,
    3588,
    3589,
    3591,
    3593,
    3594,
    3599,
    3600,
    3603,
    3608,
    3609,
    3610,
    3615,
    3618,
    3619,
    3621,
    3623,
    3624,
    3629,
    3632,
    3640,
    3641,
    3646,
    3648,
    3651,
    3655,
    3657,
    3658,
    3660,
    3662,
    3663,
    3668,
    3674,
    3675,
    3680,
    3682,
    3684,
    3687,
    3689,
    3690,
    3695,
    3697,
    3699,
    3702,
    3704,
    3705,
    3707,
    3709,
    3710,
    3715,
    3718,
    3722,
    3728,
    3729,
    3733,
    3735,
    3736,
    3738,
    3740,
    3743,
    3745,
    3746,
    3753,
    3755,
    3757,
    3759,
    3762,
    3764,
    3765,
    3767,
    3769,
    3770,
    3775,
    3779,
    3780,
    3785,
    3787,
    3790,
    3792,
    3793,
    3795,
    3797,
    3798,
    3803,
    3807,
    3810,
    3814,
    3815,
    3822,
    3824,
    3829,
    3830,
    3833,
    3835,
    3838,
    3840,
    3841,
    3846,
    3847,
    3852,
    3854,
    3857,
    3859,
    3860,
    3865,
    3867,
    3870,
    3872,
    3874,
    3877,
    3879,
    3880,
    3882,
    3884,
    3885,
    3890,
    3895,
    3896,
    3900,
    3902,
    3903,
    3905,
    3907,
    3910,
    3912,
    3913,
    3917,
    3919,
    3921,
    3924,
    3926,
    3927,
    3929,
    3931,
    3932
  ],
  "token_logprobs": [
    -0.01354435,
    -0.006314425,
    -0.0013624298,
    -0.4588733,
    -1.5305676,
    -0.016272897,
    -0.3673528,
    -0.037946217,
    -0.015164905,
    -0.003141588,
    -0.0054958225,
    -0.015686981,
    -0.20683579,
    -0.00015708302,
    -0.0020639873,
    -0.0048149107,
    -0.0012024237,
    -0.0023826307,
    -0.0004529918,
    -0.019152643,
    -0.96349573,
    -0.05379041,
    -0.5829489,
    -0.00056987547,
    -0.6743128,
    -0.0005591391,
    -0.0018286292,
    -0.0047738836,
    -0.0068797967,
    -0.0044749556,
    -0.00044046834,
    -0.24344885,
    -0.016421821,
    -0.15453865,
    -0.74441683,
    -3.369725,
    -2.6773841e-05,
    -0.00060249923,
    -0.0005850234,
    -0.078106076,
    -0.0006931559,
    -0.0016149934,
    -0.0055914805,
    -1.1053271,
    -0.00080535567,
    -0.8736068,
    -0.0023360879,
    -0.0072773625,
    -0.041444167,
    -0.0107486285,
    -0.028817434,
    -0.010982965,
    -0.021546425,
    -0.0076057115,
    -0.0056316378,
    -0.005297103,
    -0.004305591,
    -0.041438885,
    -0.0012713525,
    -0.01922659,
    -0.0010358217,
    -0.0048391675,
    -0.010577054,
    -0.0111869145,
    -0.00027649727,
    -0.00044070487,
    -0.009704157,
    -0.0005453053,
    -0.0016178599,
    -0.083990805,
    -0.06585867,
    -0.006591823,
    -0.0005789419,
    -2.5339396,
    -0.22471675,
    -0.9304974,
    -3.1305907,
    -0.035124622,
    -1.3922212,
    -0.0030057477,
    -0.0243521,
    -0.011266724,
    -0.0068602297,
    -0.0043609063,
    -0.0014622909,
    -0.22822666,
    -0.5285581,
    -0.0699951,
    -0.028241368,
    -0.002875187,
    -0.0026952152,
    -0.0011338572,
    -0.00022015757,
    -0.004319361,
    -0.006264102,
    -0.0025594367,
    -0.0033426327,
    -0.00054709346,
    -0.05792844,
    -0.88145614,
    -0.057867933,
    -3.1558602,
    -0.0020003214,
    -0.002987516,
    -0.00013300005,
    -0.003623095,
    -0.004834015,
    -0.020940382,
    -0.00097233884,
    -0.00043545783,
    -7.8514175e-05,
    -0.0007640175,
    -0.0050702053,
    -0.004994783,
    -0.0051228674,
    -0.0010954889,
    -0.3863293,
    -0.03294189,
    -1.5781752,
    -0.026896177,
    -0.020642305,
    -1.7848223,
    -3.5240468e-05,
    -0.00071653776,
    -0.0005653418,
    -0.00060023234,
    -0.00015815685,
    -0.0022379905,
    -0.0047599906,
    -1.2659587,
    -0.0021479703,
    -0.0007825099,
    -0.00038674276,
    -0.00023595692,
    -0.0014269535,
    -0.003296285,
    -0.013674498,
    -0.0070404136,
    -0.0009080253,
    -0.17127638,
    -0.5482668,
    -0.07649511,
    -0.1444292,
    -0.0008654275,
    -0.0010296162,
    -0.0018776549,
    -0.004086818,
    -0.041463364,
    -0.003342393,
    -0.0008052355,
    -0.97656614,
    -0.84945613,
    -0.5493827,
    -0.6983775,
    -0.015197038,
    -0.7358025,
    -0.0020147148,
    -0.0653936,
    -0.0038530156,
    -0.00049610215,
    -0.0029912218,
    -0.17954928,
    -0.0097780675,
    -0.0050727217,
    -0.0014507698,
    -0.0017182213,
    -0.011038529,
    -0.001682639,
    -0.0007006726,
    -0.002517966,
    -0.004561715,
    -0.37664953,
    -0.004576446,
    -0.034943137,
    -0.5663034,
    -0.011244841,
    -0.005484196,
    -0.002485699,
    -0.006071707,
    -0.047543705,
    -0.0036204632,
    -0.0013290665,
    -2.9814644,
    -0.4882918,
    -0.18985376,
    -1.5566587,
    -4.29881e-05,
    -0.0005711877,
    -0.0005869927,
    -1.0001107,
    -6.051553e-05,
    -0.0052581546,
    -0.003257772,
    -2.6980605,
    -0.58926934,
    -0.0016722481,
    -0.16186817,
    -0.26213712,
    -0.010689104,
    -1.0954922,
    -0.005369311,
    -0.0019324777,
    -0.41744387
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "_",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " tv",
    "\n",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " tv",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " assert",
    "('",
    "te",
    "levision",
    "'",
    " is",
    " '",
    "switch",
    "off",
    "')",
    "\n",
    " else",
    ":",
    " switch",
    "off",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " Done",
    "\n",
    "def",
    " cook",
    "_",
    "d",
    "inner",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " kitchen",
    "\n",
    " walk",
    "('",
    "kit",
    "chen",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " stove",
    "\n",
    " walk",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " find",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " stove",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " pot",
    "\n",
    " find",
    "('",
    "pot",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " pour",
    " oil",
    " in",
    " pot",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "pot",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "pot",
    "')",
    "\n",
    " pour",
    "('",
    "oil",
    "',",
    " '",
    "pot",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " cook",
    " food",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "st",
    "ove",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "pot",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01354435
    },
    {
      " 0": -0.006314425
    },
    {
      ":": -0.0013624298
    },
    {
      " walk": -0.4588733
    },
    {
      " to": -0.2943482
    },
    {
      " to": -0.016272897
    },
    {
      " living": -0.3673528
    },
    {
      " room": -0.037946217
    },
    {
      "\n": -0.015164905
    },
    {
      " walk": -0.003141588
    },
    {
      "('": -0.0054958225
    },
    {
      "living": -0.015686981
    },
    {
      "_": -0.20683579
    },
    {
      "room": -0.00015708302
    },
    {
      "')": -0.0020639873
    },
    {
      "\n": -0.0048149107
    },
    {
      " #": -0.0012024237
    },
    {
      " 1": -0.0023826307
    },
    {
      ":": -0.0004529918
    },
    {
      " find": -0.019152643
    },
    {
      " television": -0.82946545
    },
    {
      "\n": -0.05379041
    },
    {
      " find": -0.5829489
    },
    {
      "('": -0.00056987547
    },
    {
      "te": -0.6743128
    },
    {
      "levision": -0.0005591391
    },
    {
      "')": -0.0018286292
    },
    {
      "\n": -0.0047738836
    },
    {
      " #": -0.0068797967
    },
    {
      " 2": -0.0044749556
    },
    {
      ":": -0.00044046834
    },
    {
      " turn": -0.24344885
    },
    {
      " on": -0.016421821
    },
    {
      " tv": -0.15453865
    },
    {
      " with": -0.69298893
    },
    {
      " assert": -0.22573455
    },
    {
      "nt": -2.6773841e-05
    },
    {
      "o": -0.00060249923
    },
    {
      "('": -0.0005850234
    },
    {
      "te": -0.078106076
    },
    {
      "levision": -0.0006931559
    },
    {
      "')": -0.0016149934
    },
    {
      "\n": -0.0055914805
    },
    {
      " look": -0.81203717
    },
    {
      "('": -0.00080535567
    },
    {
      "te": -0.8736068
    },
    {
      "levision": -0.0023360879
    },
    {
      "'": -0.0072773625
    },
    {
      " is": -0.041444167
    },
    {
      " '": -0.0107486285
    },
    {
      "switch": -0.028817434
    },
    {
      "off": -0.010982965
    },
    {
      "')": -0.021546425
    },
    {
      "\n": -0.0076057115
    },
    {
      " else": -0.0056316378
    },
    {
      ":": -0.005297103
    },
    {
      " switch": -0.004305591
    },
    {
      "off": -0.041438885
    },
    {
      "('": -0.0012713525
    },
    {
      "te": -0.01922659
    },
    {
      "levision": -0.0010358217
    },
    {
      "')": -0.0048391675
    },
    {
      "\n": -0.010577054
    },
    {
      " switch": -0.0111869145
    },
    {
      "on": -0.00027649727
    },
    {
      "('": -0.00044070487
    },
    {
      "te": -0.009704157
    },
    {
      "levision": -0.0005453053
    },
    {
      "')": -0.0016178599
    },
    {
      "\n": -0.083990805
    },
    {
      " #": -0.06585867
    },
    {
      " 3": -0.006591823
    },
    {
      ":": -0.0005789419
    },
    {
      " look": -1.1290333
    },
    {
      "\n": -0.22471675
    },
    {
      "def": -0.9304974
    },
    {
      " make": -1.1948351
    },
    {
      "_": -0.035124622
    },
    {
      "food": -0.7134797
    },
    {
      "inner": -0.0030057477
    },
    {
      "():": -0.0243521
    },
    {
      "\n": -0.011266724
    },
    {
      " #": -0.0068602297
    },
    {
      " 0": -0.0043609063
    },
    {
      ":": -0.0014622909
    },
    {
      " walk": -0.22822666
    },
    {
      " to": -0.5285581
    },
    {
      " kitchen": -0.0699951
    },
    {
      "\n": -0.028241368
    },
    {
      " walk": -0.002875187
    },
    {
      "('": -0.0026952152
    },
    {
      "kit": -0.0011338572
    },
    {
      "chen": -0.00022015757
    },
    {
      "')": -0.004319361
    },
    {
      "\n": -0.006264102
    },
    {
      " #": -0.0025594367
    },
    {
      " 1": -0.0033426327
    },
    {
      ":": -0.00054709346
    },
    {
      " find": -0.05792844
    },
    {
      " stove": -0.88145614
    },
    {
      "\n": -0.057867933
    },
    {
      " find": -0.05505402
    },
    {
      "('": -0.0020003214
    },
    {
      "st": -0.002987516
    },
    {
      "ove": -0.00013300005
    },
    {
      "')": -0.003623095
    },
    {
      "\n": -0.004834015
    },
    {
      " find": -0.020940382
    },
    {
      "('": -0.00097233884
    },
    {
      "st": -0.00043545783
    },
    {
      "ove": -7.8514175e-05
    },
    {
      "')": -0.0007640175
    },
    {
      "\n": -0.0050702053
    },
    {
      " #": -0.004994783
    },
    {
      " 2": -0.0051228674
    },
    {
      ":": -0.0010954889
    },
    {
      " turn": -0.3863293
    },
    {
      " on": -0.03294189
    },
    {
      " stove": -0.25003296
    },
    {
      " stove": -0.026896177
    },
    {
      "\n": -0.020642305
    },
    {
      " switch": -0.897559
    },
    {
      "nt": -3.5240468e-05
    },
    {
      "o": -0.00071653776
    },
    {
      "('": -0.0005653418
    },
    {
      "st": -0.00060023234
    },
    {
      "ove": -0.00015815685
    },
    {
      "')": -0.0022379905
    },
    {
      "\n": -0.0047599906
    },
    {
      " assert": -0.7153663
    },
    {
      "on": -0.0021479703
    },
    {
      "('": -0.0007825099
    },
    {
      "st": -0.00038674276
    },
    {
      "ove": -0.00023595692
    },
    {
      "')": -0.0014269535
    },
    {
      "\n": -0.003296285
    },
    {
      " #": -0.013674498
    },
    {
      " 3": -0.0070404136
    },
    {
      ":": -0.0009080253
    },
    {
      " find": -0.17127638
    },
    {
      " pot": -0.5482668
    },
    {
      "\n": -0.07649511
    },
    {
      " find": -0.1444292
    },
    {
      "('": -0.0008654275
    },
    {
      "pot": -0.0010296162
    },
    {
      "')": -0.0018776549
    },
    {
      "\n": -0.004086818
    },
    {
      " #": -0.041463364
    },
    {
      " 4": -0.003342393
    },
    {
      ":": -0.0008052355
    },
    {
      " pour": -0.97656614
    },
    {
      " oil": -0.84945613
    },
    {
      " in": -0.5493827
    },
    {
      " pot": -0.6983775
    },
    {
      "\n": -0.015197038
    },
    {
      " assert": -0.7358025
    },
    {
      "('": -0.0020147148
    },
    {
      "close": -0.0653936
    },
    {
      "'": -0.0038530156
    },
    {
      " to": -0.00049610215
    },
    {
      " '": -0.0029912218
    },
    {
      "pot": -0.17954928
    },
    {
      "')": -0.0097780675
    },
    {
      "\n": -0.0050727217
    },
    {
      " else": -0.0014507698
    },
    {
      ":": -0.0017182213
    },
    {
      " find": -0.011038529
    },
    {
      "('": -0.001682639
    },
    {
      "pot": -0.0007006726
    },
    {
      "')": -0.002517966
    },
    {
      "\n": -0.004561715
    },
    {
      " pour": -0.37664953
    },
    {
      "('": -0.004576446
    },
    {
      "oil": -0.034943137
    },
    {
      "',": -0.5663034
    },
    {
      " '": -0.011244841
    },
    {
      "pot": -0.005484196
    },
    {
      "')": -0.002485699
    },
    {
      "\n": -0.006071707
    },
    {
      " #": -0.047543705
    },
    {
      " 5": -0.0036204632
    },
    {
      ":": -0.0013290665
    },
    {
      " find": -0.9554425
    },
    {
      " food": -0.4882918
    },
    {
      "\n": -0.18985376
    },
    {
      " cook": -1.0152274
    },
    {
      "nt": -4.29881e-05
    },
    {
      "o": -0.0005711877
    },
    {
      "('": -0.0005869927
    },
    {
      "pot": -0.6523821
    },
    {
      "ove": -6.051553e-05
    },
    {
      "')": -0.0052581546
    },
    {
      "\n": -0.003257772
    },
    {
      " cook": -0.7215752
    },
    {
      "on": -0.58926934
    },
    {
      "('": -0.0016722481
    },
    {
      "pot": -0.16186817
    },
    {
      "')": -0.26213712
    },
    {
      "\n": -0.010689104
    },
    {
      " #": -1.0954922
    },
    {
      " 6": -0.005369311
    },
    {
      ":": -0.0019324777
    },
    {
      " Done": -0.41744387
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.887434959411621
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find closet\n find('closet')\n # 2: find jacket\n find('jacket')\n # 3: grab the hanger\n grab('hanger')\n # 4: hang the jacket on the hanger\n assert('hanger' in 'hands')\n else: grab('hanger')\n hangup('jacket', 'hanger')\n # 5: put the hanger in the closet\n assert('close' to 'closet')\n else: find('closet')\n assert('hanger' in 'hands')\n else: grab('hanger')\n putin('hanger', 'closet')\n # 6: done", <OpenAIObject at 0x7fdf9801fae0> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3399,
    3400,
    3405,
    3407,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3434,
    3435,
    3440,
    3442,
    3444,
    3446,
    3448,
    3450,
    3451,
    3453,
    3455,
    3456,
    3461,
    3468,
    3469,
    3474,
    3476,
    3477,
    3482,
    3484,
    3485,
    3487,
    3489,
    3490,
    3495,
    3499,
    3501,
    3506,
    3507,
    3512,
    3514,
    3515,
    3520,
    3522,
    3523,
    3525,
    3527,
    3528,
    3533,
    3537,
    3544,
    3547,
    3551,
    3553,
    3558,
    3559,
    3566,
    3568,
    3569,
    3574,
    3575,
    3578,
    3580,
    3585,
    3587,
    3588,
    3593,
    3594,
    3599,
    3601,
    3602,
    3607,
    3609,
    3610,
    3615,
    3617,
    3619,
    3620,
    3625,
    3627,
    3629,
    3630,
    3635,
    3637,
    3638,
    3640,
    3642,
    3643,
    3647,
    3651,
    3653,
    3658,
    3661,
    3665,
    3672,
    3673,
    3680,
    3682,
    3687,
    3688,
    3691,
    3693,
    3695,
    3697,
    3699,
    3701,
    3702,
    3707,
    3708,
    3713,
    3715,
    3717,
    3719,
    3721,
    3723,
    3724,
    3731,
    3733,
    3734,
    3739,
    3740,
    3743,
    3745,
    3750,
    3752,
    3753,
    3758,
    3759,
    3764,
    3766,
    3767,
    3772,
    3774,
    3775,
    3779,
    3781,
    3783,
    3784,
    3789,
    3791,
    3793,
    3795,
    3797,
    3799,
    3801,
    3802,
    3804,
    3806,
    3807
  ],
  "token_logprobs": [
    -0.013653589,
    -0.006344419,
    -0.0015852643,
    -0.6541261,
    -0.33329612,
    -1.049649,
    -0.026953857,
    -0.0047823284,
    -0.0036877044,
    -0.0017401961,
    -0.0011776583,
    -0.0067267097,
    -0.0043977248,
    -0.0029756778,
    -0.0006008294,
    -0.035975084,
    -0.63046354,
    -0.22725895,
    -0.95663416,
    -0.0010714434,
    -0.0010025869,
    -0.0018328062,
    -0.00016590822,
    -0.035989664,
    -0.0060458602,
    -0.02637372,
    -0.003341555,
    -0.0004983709,
    -0.51353997,
    -2.02825,
    -0.02397303,
    -0.12814586,
    -0.0009185241,
    -0.029526796,
    -0.00032705773,
    -0.0021494036,
    -0.0035245146,
    -0.01498017,
    -0.0044313096,
    -0.000698404,
    -0.2691687,
    -1.3484617,
    -0.7552206,
    -0.0074860207,
    -0.04121184,
    -0.8532633,
    -0.0018673241,
    -0.00041411104,
    -0.0006506285,
    -0.0015621595,
    -0.005339767,
    -0.047379762,
    -0.006780837,
    -0.0006275471,
    -0.28221112,
    -0.82376355,
    -0.057540715,
    -1.2396625,
    -0.1794686,
    -0.016756698,
    -0.0011916828,
    -0.012105873,
    -0.5332593,
    -0.0032455134,
    -1.3231725,
    -0.00092102936,
    -0.0028311335,
    -0.046355233,
    -0.0065960833,
    -0.015376185,
    -0.06307637,
    -0.006034827,
    -0.007976093,
    -0.0049445867,
    -0.012574998,
    -0.0023644068,
    -0.0007195207,
    -0.00040379618,
    -0.003859418,
    -0.0068496116,
    -1.1794723,
    -2.311548,
    -0.0029508066,
    -0.07016004,
    -8.852958e-05,
    -1.224962,
    -0.005306091,
    -0.0043921573,
    -0.00027196546,
    -0.0025494588,
    -0.38036487,
    -0.12788942,
    -0.007633641,
    -0.0014389515,
    -0.20873782,
    -0.6179565,
    -0.0051942826,
    -0.00058526185,
    -2.3044384,
    -0.18074758,
    -0.0027806866,
    -0.012605056,
    -0.6053109,
    -0.0019422716,
    -1.9486359,
    -0.0049957423,
    -0.010743025,
    -0.0030529194,
    -0.119643904,
    -0.00070079096,
    -9.437268e-05,
    -0.018626625,
    -0.0047823284,
    -0.006799199,
    -0.002212184,
    -0.026337005,
    -0.002071336,
    -0.0019780407,
    -0.00034249946,
    -0.0002338093,
    -0.0033676897,
    -0.006789358,
    -1.3933591,
    -0.0018869119,
    -0.030816017,
    -0.00060774625,
    -0.0018112509,
    -0.0085270135,
    -0.0038363829,
    -0.005138383,
    -0.0067751356,
    -0.004281409,
    -0.0015975006,
    -0.0018125661,
    -0.008443578,
    -0.0018141177,
    -0.0008091732,
    -0.00039234746,
    -0.0015035991,
    -0.006431937,
    -0.041500516,
    -0.1997351,
    -0.0038971172,
    -0.0135848895,
    -0.00019666688,
    -0.052501623,
    -0.0022382298,
    -0.0005305741,
    -0.00020561034,
    -7.326899e-05,
    -0.004456576,
    -1.5965356,
    -0.09850106,
    -0.008093257,
    -0.002660135,
    -1.7799524
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " closet",
    "\n",
    " find",
    "('",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " jacket",
    "\n",
    " find",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " the",
    " h",
    "anger",
    "\n",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " hang",
    " the",
    " jacket",
    " on",
    " the",
    " h",
    "anger",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " hang",
    "up",
    "('",
    "j",
    "acket",
    "',",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " the",
    " h",
    "anger",
    " in",
    " the",
    " closet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " put",
    "in",
    "('",
    "h",
    "anger",
    "',",
    " '",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " done"
  ],
  "top_logprobs": [
    {
      " #": -0.013653589
    },
    {
      " 0": -0.006344419
    },
    {
      ":": -0.0015852643
    },
    {
      " walk": -0.6541261
    },
    {
      " to": -0.33329612
    },
    {
      " closet": -0.6283844
    },
    {
      "\n": -0.026953857
    },
    {
      " walk": -0.0047823284
    },
    {
      "('": -0.0036877044
    },
    {
      "bedroom": -0.0017401961
    },
    {
      "')": -0.0011776583
    },
    {
      "\n": -0.0067267097
    },
    {
      " #": -0.0043977248
    },
    {
      " 1": -0.0029756778
    },
    {
      ":": -0.0006008294
    },
    {
      " find": -0.035975084
    },
    {
      " closet": -0.63046354
    },
    {
      "\n": -0.22725895
    },
    {
      " walk": -0.49951982
    },
    {
      "('": -0.0010714434
    },
    {
      "cl": -0.0010025869
    },
    {
      "os": -0.0018328062
    },
    {
      "et": -0.00016590822
    },
    {
      "')": -0.035989664
    },
    {
      "\n": -0.0060458602
    },
    {
      " #": -0.02637372
    },
    {
      " 2": -0.003341555
    },
    {
      ":": -0.0004983709
    },
    {
      " find": -0.51353997
    },
    {
      " h": -0.23479001
    },
    {
      "\n": -0.02397303
    },
    {
      " find": -0.12814586
    },
    {
      "('": -0.0009185241
    },
    {
      "j": -0.029526796
    },
    {
      "acket": -0.00032705773
    },
    {
      "')": -0.0021494036
    },
    {
      "\n": -0.0035245146
    },
    {
      " #": -0.01498017
    },
    {
      " 3": -0.0044313096
    },
    {
      ":": -0.000698404
    },
    {
      " grab": -0.2691687
    },
    {
      " h": -0.64946514
    },
    {
      " jacket": -0.64866656
    },
    {
      "anger": -0.0074860207
    },
    {
      "\n": -0.04121184
    },
    {
      " find": -0.84161806
    },
    {
      "('": -0.0018673241
    },
    {
      "h": -0.00041411104
    },
    {
      "anger": -0.0006506285
    },
    {
      "')": -0.0015621595
    },
    {
      "\n": -0.005339767
    },
    {
      " #": -0.047379762
    },
    {
      " 4": -0.006780837
    },
    {
      ":": -0.0006275471
    },
    {
      " hang": -0.28221112
    },
    {
      " up": -0.6930205
    },
    {
      " jacket": -0.057540715
    },
    {
      "\n": -0.4567293
    },
    {
      " the": -0.1794686
    },
    {
      " h": -0.016756698
    },
    {
      "anger": -0.0011916828
    },
    {
      "\n": -0.012105873
    },
    {
      " assert": -0.5332593
    },
    {
      "('": -0.0032455134
    },
    {
      "close": -0.4740284
    },
    {
      "anger": -0.00092102936
    },
    {
      "'": -0.0028311335
    },
    {
      " in": -0.046355233
    },
    {
      " '": -0.0065960833
    },
    {
      "hands": -0.015376185
    },
    {
      "')": -0.06307637
    },
    {
      "\n": -0.006034827
    },
    {
      " else": -0.007976093
    },
    {
      ":": -0.0049445867
    },
    {
      " grab": -0.012574998
    },
    {
      "('": -0.0023644068
    },
    {
      "h": -0.0007195207
    },
    {
      "anger": -0.00040379618
    },
    {
      "')": -0.003859418
    },
    {
      "\n": -0.0068496116
    },
    {
      " assert": -1.1775002
    },
    {
      "('": -0.17523654
    },
    {
      "('": -0.0029508066
    },
    {
      "j": -0.07016004
    },
    {
      "acket": -8.852958e-05
    },
    {
      "')": -0.5843083
    },
    {
      " '": -0.005306091
    },
    {
      "h": -0.0043921573
    },
    {
      "anger": -0.00027196546
    },
    {
      "')": -0.0025494588
    },
    {
      "\n": -0.38036487
    },
    {
      " #": -0.12788942
    },
    {
      " 5": -0.007633641
    },
    {
      ":": -0.0014389515
    },
    {
      " put": -0.20873782
    },
    {
      " the": -0.6179565
    },
    {
      " h": -0.0051942826
    },
    {
      "anger": -0.00058526185
    },
    {
      " back": -0.15704809
    },
    {
      " the": -0.18074758
    },
    {
      " closet": -0.0027806866
    },
    {
      "\n": -0.012605056
    },
    {
      " assert": -0.6053109
    },
    {
      "('": -0.0019422716
    },
    {
      "h": -0.17519258
    },
    {
      "'": -0.0049957423
    },
    {
      " to": -0.010743025
    },
    {
      " '": -0.0030529194
    },
    {
      "cl": -0.119643904
    },
    {
      "os": -0.00070079096
    },
    {
      "et": -9.437268e-05
    },
    {
      "')": -0.018626625
    },
    {
      "\n": -0.0047823284
    },
    {
      " else": -0.006799199
    },
    {
      ":": -0.002212184
    },
    {
      " find": -0.026337005
    },
    {
      "('": -0.002071336
    },
    {
      "cl": -0.0019780407
    },
    {
      "os": -0.00034249946
    },
    {
      "et": -0.0002338093
    },
    {
      "')": -0.0033676897
    },
    {
      "\n": -0.006789358
    },
    {
      " put": -0.4096859
    },
    {
      "('": -0.0018869119
    },
    {
      "h": -0.030816017
    },
    {
      "anger": -0.00060774625
    },
    {
      "'": -0.0018112509
    },
    {
      " in": -0.0085270135
    },
    {
      " '": -0.0038363829
    },
    {
      "hands": -0.005138383
    },
    {
      "')": -0.0067751356
    },
    {
      "\n": -0.004281409
    },
    {
      " else": -0.0015975006
    },
    {
      ":": -0.0018125661
    },
    {
      " grab": -0.008443578
    },
    {
      "('": -0.0018141177
    },
    {
      "h": -0.0008091732
    },
    {
      "anger": -0.00039234746
    },
    {
      "')": -0.0015035991
    },
    {
      "\n": -0.006431937
    },
    {
      " put": -0.041500516
    },
    {
      "in": -0.1997351
    },
    {
      "('": -0.0038971172
    },
    {
      "h": -0.0135848895
    },
    {
      "anger": -0.00019666688
    },
    {
      "',": -0.052501623
    },
    {
      " '": -0.0022382298
    },
    {
      "cl": -0.0005305741
    },
    {
      "os": -0.00020561034
    },
    {
      "et": -7.326899e-05
    },
    {
      "')": -0.004456576
    },
    {
      "<|endoftext|>": -0.24452303
    },
    {
      " #": -0.09850106
    },
    {
      " 6": -0.008093257
    },
    {
      ":": -0.002660135
    },
    {
      " Done": -0.45870334
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.5203289985656738
[(" # 0: find a seat\n find('seat')\n # 1: walk to seat\n walk('seat')\n # 2: sit on the seat\n assert('close' to 'seat')\n else: find('seat')\n sit('seat')", <OpenAIObject at 0x7fdf9801fe50> JSON: {
  "text_offset": [
    3367,
    3369,
    3371,
    3372,
    3377,
    3379,
    3384,
    3385,
    3390,
    3392,
    3396,
    3398,
    3399,
    3401,
    3403,
    3404,
    3409,
    3412,
    3417,
    3418,
    3423,
    3425,
    3429,
    3431,
    3432,
    3434,
    3436,
    3437,
    3441,
    3444,
    3448,
    3453,
    3454,
    3461,
    3463,
    3468,
    3469,
    3472,
    3474,
    3478,
    3480,
    3481,
    3486,
    3487,
    3492,
    3494,
    3498,
    3500,
    3501,
    3505,
    3507,
    3511
  ],
  "token_logprobs": [
    -0.1608831,
    -0.036499742,
    -0.0037543522,
    -0.34075353,
    -1.4513005,
    -3.1945906,
    -0.049312193,
    -0.06502548,
    -0.012013573,
    -0.4712738,
    -0.0026205708,
    -0.014519295,
    -0.012828416,
    -0.0032593266,
    -0.0009125599,
    -1.3423619,
    -0.09001913,
    -0.9423801,
    -0.020350764,
    -0.36526224,
    -0.0058033876,
    -0.0018541868,
    -0.0012579252,
    -0.0078072925,
    -0.038059276,
    -0.0043880856,
    -0.001089046,
    -0.031318467,
    -0.46501186,
    -1.1487819,
    -0.008578774,
    -0.009041608,
    -0.4673458,
    -0.001909783,
    -0.008712305,
    -0.0035369573,
    -0.0010683412,
    -0.0017937564,
    -0.0011844616,
    -0.0035254722,
    -0.0046865684,
    -0.0013334837,
    -0.0013448216,
    -0.08644617,
    -0.0016216803,
    -0.0006722194,
    -0.0015612049,
    -0.0061003724,
    -0.2106069,
    -0.0022089588,
    -0.0007467792,
    -0.0014512477
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " a",
    " seat",
    "\n",
    " find",
    "('",
    "seat",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " walk",
    " to",
    " seat",
    "\n",
    " walk",
    "('",
    "seat",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " the",
    " seat",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "seat",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "seat",
    "')",
    "\n",
    " sit",
    "('",
    "seat",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.1608831
    },
    {
      " 0": -0.036499742
    },
    {
      ":": -0.0037543522
    },
    {
      " find": -0.34075353
    },
    {
      " chair": -0.59936893
    },
    {
      " chair": -0.090873726
    },
    {
      "\n": -0.049312193
    },
    {
      " find": -0.06502548
    },
    {
      "('": -0.012013573
    },
    {
      "seat": -0.4712738
    },
    {
      "')": -0.0026205708
    },
    {
      "\n": -0.014519295
    },
    {
      " #": -0.012828416
    },
    {
      " 1": -0.0032593266
    },
    {
      ":": -0.0009125599
    },
    {
      " sit": -0.77496773
    },
    {
      " to": -0.09001913
    },
    {
      " the": -0.5679503
    },
    {
      "\n": -0.020350764
    },
    {
      " walk": -0.36526224
    },
    {
      "('": -0.0058033876
    },
    {
      "seat": -0.0018541868
    },
    {
      "')": -0.0012579252
    },
    {
      "\n": -0.0078072925
    },
    {
      " #": -0.038059276
    },
    {
      " 2": -0.0043880856
    },
    {
      ":": -0.001089046
    },
    {
      " sit": -0.031318467
    },
    {
      " on": -0.46501186
    },
    {
      " seat": -0.41709897
    },
    {
      " seat": -0.008578774
    },
    {
      "\n": -0.009041608
    },
    {
      " assert": -0.4673458
    },
    {
      "('": -0.001909783
    },
    {
      "close": -0.008712305
    },
    {
      "'": -0.0035369573
    },
    {
      " to": -0.0010683412
    },
    {
      " '": -0.0017937564
    },
    {
      "seat": -0.0011844616
    },
    {
      "')": -0.0035254722
    },
    {
      "\n": -0.0046865684
    },
    {
      " else": -0.0013334837
    },
    {
      ":": -0.0013448216
    },
    {
      " find": -0.08644617
    },
    {
      "('": -0.0016216803
    },
    {
      "seat": -0.0006722194
    },
    {
      "')": -0.0015612049
    },
    {
      "\n": -0.0061003724
    },
    {
      " sit": -0.2106069
    },
    {
      "('": -0.0022089588
    },
    {
      "seat": -0.0007467792
    },
    {
      "')": -0.0014512477
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.043272018432617
[(" # 0: find sink\n walk('sink')\n find('sink')\n # 1: turn on the sink\n switchon('sink')\n # 2: grab soap\n find('soap')\n grab('soap')\n # 3: pour water from the sink\n pour('water', 'sink')\n # 4: wash sink with soap\n wash('soap', 'sink')\n # 5: turn off sink\n switchoff('sink')\n # 6: put soap back\n putback('soap')", <OpenAIObject at 0x7fdf9806d770> JSON: {
  "text_offset": [
    3373,
    3375,
    3377,
    3378,
    3383,
    3388,
    3389,
    3394,
    3396,
    3397,
    3400,
    3402,
    3403,
    3408,
    3410,
    3411,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3430,
    3434,
    3439,
    3440,
    3447,
    3449,
    3451,
    3452,
    3455,
    3457,
    3458,
    3460,
    3462,
    3463,
    3468,
    3473,
    3474,
    3479,
    3481,
    3483,
    3485,
    3487,
    3488,
    3493,
    3495,
    3497,
    3499,
    3501,
    3502,
    3504,
    3506,
    3507,
    3512,
    3518,
    3523,
    3527,
    3532,
    3533,
    3538,
    3540,
    3545,
    3547,
    3549,
    3550,
    3553,
    3555,
    3556,
    3558,
    3560,
    3561,
    3566,
    3571,
    3576,
    3581,
    3582,
    3587,
    3589,
    3591,
    3593,
    3595,
    3597,
    3598,
    3601,
    3603,
    3604,
    3606,
    3608,
    3609,
    3614,
    3618,
    3623,
    3624,
    3631,
    3634,
    3636,
    3637,
    3640,
    3642,
    3643,
    3645,
    3647,
    3648,
    3652,
    3657,
    3662,
    3663,
    3667,
    3671,
    3673,
    3675,
    3677
  ],
  "token_logprobs": [
    -0.019665018,
    -0.0070385532,
    -0.0018198501,
    -0.9530365,
    -0.2711564,
    -0.02537096,
    -2.152935,
    -0.0063736886,
    -0.14408922,
    -0.00019654672,
    -0.0020224173,
    -0.0077591767,
    -0.028709594,
    -0.001283586,
    -0.00035049114,
    -0.00010307304,
    -0.002292356,
    -0.0066958056,
    -0.009089786,
    -0.004622374,
    -0.00072506635,
    -0.6873389,
    -0.07976107,
    -1.1722789,
    -2.486722,
    -0.09533476,
    -1.4310304,
    -0.0027759634,
    -0.001182911,
    -0.03312714,
    -0.00044989053,
    -0.003106133,
    -0.0051764883,
    -0.04105235,
    -0.004483398,
    -0.0009221041,
    -1.6865814,
    -1.2450258,
    -0.13717663,
    -0.55779606,
    -0.0016621596,
    -0.0032658456,
    -0.00013526501,
    -0.0022235934,
    -0.0050345003,
    -0.07624485,
    -0.0010346277,
    -0.00015613029,
    -5.8010275e-05,
    -0.0013950798,
    -0.004777657,
    -0.18569109,
    -0.00837217,
    -0.00089328847,
    -0.6589994,
    -1.9718627,
    -3.7529905,
    -1.5739346,
    -0.4368207,
    -0.08976657,
    -0.5141175,
    -0.0045498577,
    -0.5447451,
    -1.3694975,
    -0.024516035,
    -0.014375071,
    -0.00017937786,
    -0.0043703048,
    -0.006355756,
    -0.018053902,
    -0.004468908,
    -0.0008552863,
    -0.7083134,
    -1.0406764,
    -0.9934635,
    -0.013010703,
    -0.01912743,
    -0.39274243,
    -0.0015895606,
    -2.0983598,
    -0.00017449218,
    -0.337031,
    -0.0023332792,
    -0.0015505175,
    -1.7834122e-05,
    -0.001597023,
    -0.007679529,
    -0.009249977,
    -0.0035438356,
    -0.0019342686,
    -0.56913155,
    -0.011877849,
    -1.7298323,
    -0.04192061,
    -0.02036062,
    -0.003011786,
    -0.0007278128,
    -0.00096864055,
    -0.00012763379,
    -0.0016906993,
    -0.30463323,
    -0.03533399,
    -0.002565534,
    -0.0016716531,
    -0.8103524,
    -0.3592531,
    -0.035719253,
    -0.036077283,
    -0.07139528,
    -0.49436113,
    -0.0028653257,
    -0.0006375071,
    -0.00035704856,
    -0.1233673
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " sink",
    "\n",
    " walk",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " turn",
    " on",
    " the",
    " sink",
    "\n",
    " switch",
    "on",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " soap",
    "\n",
    " find",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " water",
    " from",
    " the",
    " sink",
    "\n",
    " pour",
    "('",
    "water",
    "',",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " sink",
    " with",
    " soap",
    "\n",
    " wash",
    "('",
    "so",
    "ap",
    "',",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " off",
    " sink",
    "\n",
    " switch",
    "off",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " put",
    " soap",
    " back",
    "\n",
    " put",
    "back",
    "('",
    "so",
    "ap",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.019665018
    },
    {
      " 0": -0.0070385532
    },
    {
      ":": -0.0018198501
    },
    {
      " walk": -0.6756383
    },
    {
      " sink": -0.2711564
    },
    {
      "\n": -0.02537096
    },
    {
      " find": -0.1397323
    },
    {
      "('": -0.0063736886
    },
    {
      "s": -0.14408922
    },
    {
      "ink": -0.00019654672
    },
    {
      "')": -0.0020224173
    },
    {
      "\n": -0.0077591767
    },
    {
      " find": -0.028709594
    },
    {
      "('": -0.001283586
    },
    {
      "s": -0.00035049114
    },
    {
      "ink": -0.00010307304
    },
    {
      "')": -0.002292356
    },
    {
      "\n": -0.0066958056
    },
    {
      " #": -0.009089786
    },
    {
      " 1": -0.004622374
    },
    {
      ":": -0.00072506635
    },
    {
      " turn": -0.6873389
    },
    {
      " on": -0.07976107
    },
    {
      " f": -0.7621893
    },
    {
      " f": -0.39141846
    },
    {
      "\n": -0.09533476
    },
    {
      " assert": -1.0288469
    },
    {
      "on": -0.0027759634
    },
    {
      "('": -0.001182911
    },
    {
      "s": -0.03312714
    },
    {
      "ink": -0.00044989053
    },
    {
      "')": -0.003106133
    },
    {
      "\n": -0.0051764883
    },
    {
      " #": -0.04105235
    },
    {
      " 2": -0.004483398
    },
    {
      ":": -0.0009221041
    },
    {
      " pour": -0.8486144
    },
    {
      " soap": -1.2450258
    },
    {
      "\n": -0.13717663
    },
    {
      " find": -0.55779606
    },
    {
      "('": -0.0016621596
    },
    {
      "so": -0.0032658456
    },
    {
      "ap": -0.00013526501
    },
    {
      "')": -0.0022235934
    },
    {
      "\n": -0.0050345003
    },
    {
      " grab": -0.07624485
    },
    {
      "('": -0.0010346277
    },
    {
      "so": -0.00015613029
    },
    {
      "ap": -5.8010275e-05
    },
    {
      "')": -0.0013950798
    },
    {
      "\n": -0.004777657
    },
    {
      " #": -0.18569109
    },
    {
      " 3": -0.00837217
    },
    {
      ":": -0.00089328847
    },
    {
      " pour": -0.6589994
    },
    {
      " soap": -0.27634898
    },
    {
      "\n": -0.9196736
    },
    {
      " sink": -0.6803225
    },
    {
      " sink": -0.4368207
    },
    {
      "\n": -0.08976657
    },
    {
      " pour": -0.5141175
    },
    {
      "('": -0.0045498577
    },
    {
      "water": -0.5447451
    },
    {
      "')": -0.59493065
    },
    {
      " '": -0.024516035
    },
    {
      "s": -0.014375071
    },
    {
      "ink": -0.00017937786
    },
    {
      "')": -0.0043703048
    },
    {
      "\n": -0.006355756
    },
    {
      " #": -0.018053902
    },
    {
      " 4": -0.004468908
    },
    {
      ":": -0.0008552863
    },
    {
      " wash": -0.7083134
    },
    {
      " the": -0.62834764
    },
    {
      "\n": -0.5074139
    },
    {
      " soap": -0.013010703
    },
    {
      "\n": -0.01912743
    },
    {
      " wash": -0.39274243
    },
    {
      "('": -0.0015895606
    },
    {
      "s": -0.13155161
    },
    {
      "ap": -0.00017449218
    },
    {
      "',": -0.337031
    },
    {
      " '": -0.0023332792
    },
    {
      "s": -0.0015505175
    },
    {
      "ink": -1.7834122e-05
    },
    {
      "')": -0.001597023
    },
    {
      "\n": -0.007679529
    },
    {
      " #": -0.009249977
    },
    {
      " 5": -0.0035438356
    },
    {
      ":": -0.0019342686
    },
    {
      " turn": -0.56913155
    },
    {
      " off": -0.011877849
    },
    {
      " the": -0.20463745
    },
    {
      "\n": -0.04192061
    },
    {
      " switch": -0.02036062
    },
    {
      "off": -0.003011786
    },
    {
      "('": -0.0007278128
    },
    {
      "s": -0.00096864055
    },
    {
      "ink": -0.00012763379
    },
    {
      "')": -0.0016906993
    },
    {
      "\n": -0.30463323
    },
    {
      " #": -0.03533399
    },
    {
      " 6": -0.002565534
    },
    {
      ":": -0.0016716531
    },
    {
      " put": -0.8103524
    },
    {
      " soap": -0.3592531
    },
    {
      " back": -0.035719253
    },
    {
      "\n": -0.036077283
    },
    {
      " put": -0.07139528
    },
    {
      "back": -0.49436113
    },
    {
      "('": -0.0028653257
    },
    {
      "so": -0.0006375071
    },
    {
      "ap": -0.00035704856
    },
    {
      "')": -0.1233673
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.937894821166992
[(" # 0: find bed\n find('bed')\n # 1: lie down on bed\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n lie('bed')\n # 2: close eyes\n close('eyes')", <OpenAIObject at 0x7fdf9801fcc0> JSON: {
  "text_offset": [
    3369,
    3371,
    3373,
    3374,
    3379,
    3383,
    3384,
    3389,
    3391,
    3394,
    3396,
    3397,
    3399,
    3401,
    3402,
    3406,
    3411,
    3414,
    3418,
    3419,
    3423,
    3425,
    3426,
    3428,
    3431,
    3433,
    3434,
    3439,
    3441,
    3443,
    3446,
    3448,
    3449,
    3456,
    3458,
    3463,
    3464,
    3467,
    3469,
    3472,
    3474,
    3475,
    3480,
    3481,
    3486,
    3488,
    3491,
    3493,
    3494,
    3498,
    3500,
    3503,
    3505,
    3506,
    3508,
    3510,
    3511,
    3517,
    3522,
    3523,
    3529,
    3531,
    3535
  ],
  "token_logprobs": [
    -0.2454959,
    -0.06238138,
    -0.002727669,
    -0.8302009,
    -0.16075338,
    -0.01931427,
    -0.024857245,
    -0.0029062722,
    -0.0003989058,
    -0.002071336,
    -0.008208878,
    -0.003088434,
    -0.001965919,
    -0.00041935995,
    -1.6441265,
    -0.448556,
    -0.25119424,
    -0.08058615,
    -0.008682181,
    -0.820743,
    -1.7834122e-05,
    -0.00022891893,
    -0.0004993255,
    -9.377476e-05,
    -0.0010384442,
    -0.003523437,
    -0.10476823,
    -0.00022528353,
    -0.0003960448,
    -0.000108559456,
    -0.0004432111,
    -0.0030483773,
    -0.019932523,
    -0.00058072904,
    -0.0013758601,
    -0.0016495009,
    -0.0002875865,
    -0.0010016323,
    -0.00021479129,
    -0.0028145746,
    -0.0036226176,
    -0.000785613,
    -0.0008916177,
    -0.0029207398,
    -0.001006884,
    -0.00014694748,
    -0.0015391757,
    -0.0046006353,
    -0.51807016,
    -0.0061511667,
    -0.000846937,
    -0.001154207,
    -0.012951648,
    -0.08341226,
    -0.006025234,
    -0.0006933953,
    -0.34280294,
    -0.24365944,
    -0.15807618,
    -0.16605905,
    -0.45403394,
    -0.016597854,
    -0.0017030576
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " lie",
    " down",
    " on",
    " bed",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " lie",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " close",
    " eyes",
    "\n",
    " close",
    "('",
    "eyes",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.2454959
    },
    {
      " 0": -0.06238138
    },
    {
      ":": -0.002727669
    },
    {
      " find": -0.8302009
    },
    {
      " bed": -0.16075338
    },
    {
      "\n": -0.01931427
    },
    {
      " find": -0.024857245
    },
    {
      "('": -0.0029062722
    },
    {
      "bed": -0.0003989058
    },
    {
      "')": -0.002071336
    },
    {
      "\n": -0.008208878
    },
    {
      " #": -0.003088434
    },
    {
      " 1": -0.001965919
    },
    {
      ":": -0.00041935995
    },
    {
      " lay": -0.5886333
    },
    {
      " down": -0.448556
    },
    {
      " on": -0.25119424
    },
    {
      " bed": -0.08058615
    },
    {
      "\n": -0.008682181
    },
    {
      " assert": -0.6703248
    },
    {
      "nt": -1.7834122e-05
    },
    {
      "o": -0.00022891893
    },
    {
      "('": -0.0004993255
    },
    {
      "bed": -9.377476e-05
    },
    {
      "')": -0.0010384442
    },
    {
      "\n": -0.003523437
    },
    {
      " look": -0.10476823
    },
    {
      "at": -0.00022528353
    },
    {
      "('": -0.0003960448
    },
    {
      "bed": -0.000108559456
    },
    {
      "')": -0.0004432111
    },
    {
      "\n": -0.0030483773
    },
    {
      " assert": -0.019932523
    },
    {
      "('": -0.00058072904
    },
    {
      "close": -0.0013758601
    },
    {
      "'": -0.0016495009
    },
    {
      " to": -0.0002875865
    },
    {
      " '": -0.0010016323
    },
    {
      "bed": -0.00021479129
    },
    {
      "')": -0.0028145746
    },
    {
      "\n": -0.0036226176
    },
    {
      " else": -0.000785613
    },
    {
      ":": -0.0008916177
    },
    {
      " find": -0.0029207398
    },
    {
      "('": -0.001006884
    },
    {
      "bed": -0.00014694748
    },
    {
      "')": -0.0015391757
    },
    {
      "\n": -0.0046006353
    },
    {
      " lie": -0.51807016
    },
    {
      "('": -0.0061511667
    },
    {
      "bed": -0.000846937
    },
    {
      "')": -0.001154207
    },
    {
      "\n": -0.012951648
    },
    {
      " #": -0.08341226
    },
    {
      " 2": -0.006025234
    },
    {
      ":": -0.0006933953
    },
    {
      " close": -0.34280294
    },
    {
      " eyes": -0.24365944
    },
    {
      "\n": -0.15807618
    },
    {
      " close": -0.16605905
    },
    {
      "('": -0.45403394
    },
    {
      "eyes": -0.016597854
    },
    {
      "')": -0.0017030576
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.9464631080627441
[(" # 0: find glasses\n find('glasses')\n # 1: grab glasses\n assert('close' to 'glasses')\n else: find('glasses')\n grab('glasses')\n # 2: put on glasses\n assert('glasses' in 'hands')\n else: grab('glasses')\n puton('glasses')\n lookat('glasses')", <OpenAIObject at 0x7fdf9809fcc0> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3396,
    3397,
    3402,
    3404,
    3406,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3424,
    3432,
    3433,
    3440,
    3442,
    3447,
    3448,
    3451,
    3453,
    3455,
    3460,
    3462,
    3463,
    3468,
    3469,
    3474,
    3476,
    3478,
    3483,
    3485,
    3486,
    3491,
    3493,
    3495,
    3500,
    3502,
    3503,
    3505,
    3507,
    3508,
    3512,
    3515,
    3523,
    3524,
    3531,
    3533,
    3535,
    3540,
    3541,
    3544,
    3546,
    3551,
    3553,
    3554,
    3559,
    3560,
    3565,
    3567,
    3569,
    3574,
    3576,
    3577,
    3581,
    3583,
    3585,
    3587,
    3592,
    3594,
    3595,
    3600,
    3602,
    3604,
    3606,
    3611
  ],
  "token_logprobs": [
    -0.014647877,
    -0.007479715,
    -0.0018432572,
    -0.19064675,
    -0.15282305,
    -0.03072339,
    -0.019980317,
    -0.0020608832,
    -0.073367186,
    -0.0014108961,
    -0.004377908,
    -0.0071404804,
    -0.0044490932,
    -0.002072052,
    -0.00060094945,
    -0.13053894,
    -0.0755917,
    -0.017607022,
    -0.569439,
    -0.0015179839,
    -0.0052021896,
    -0.0024050954,
    -0.0006101332,
    -0.0022099144,
    -0.0011134509,
    -0.00050516764,
    -0.0057413997,
    -0.0060690674,
    -0.0011850595,
    -0.0013633844,
    -0.0031844599,
    -0.0013984825,
    -0.0006353595,
    -0.0018589646,
    -0.0015249093,
    -0.0057109464,
    -0.0028275468,
    -0.00082444504,
    -0.00024477651,
    -0.0002620674,
    -0.0018267182,
    -0.00493686,
    -0.7734926,
    -0.008386235,
    -0.00079169736,
    -0.06058745,
    -0.26743954,
    -0.06632142,
    -0.017480424,
    -0.8247935,
    -0.0012163299,
    -0.070633344,
    -0.00053671666,
    -0.0016847276,
    -0.01090125,
    -0.003918595,
    -0.008077877,
    -0.02324192,
    -0.0037524381,
    -0.0035967147,
    -0.002203283,
    -0.013123449,
    -0.0014498152,
    -0.0003708805,
    -0.00021360109,
    -0.002587643,
    -0.0058797062,
    -0.09088756,
    -0.00961972,
    -0.000792652,
    -0.00032610405,
    -0.0012738606,
    -0.0019555844,
    -0.20530404,
    -2.6673849,
    -0.021046842,
    -0.0014975072,
    -0.0056807334,
    -0.0004178074,
    -0.0019362998
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " glasses",
    "\n",
    " find",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " glasses",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "gl",
    "asses",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " grab",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " on",
    " glasses",
    "\n",
    " assert",
    "('",
    "gl",
    "asses",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "gl",
    "asses",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "gl",
    "asses",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.014647877
    },
    {
      " 0": -0.007479715
    },
    {
      ":": -0.0018432572
    },
    {
      " find": -0.19064675
    },
    {
      " glasses": -0.15282305
    },
    {
      "\n": -0.03072339
    },
    {
      " find": -0.019980317
    },
    {
      "('": -0.0020608832
    },
    {
      "gl": -0.073367186
    },
    {
      "asses": -0.0014108961
    },
    {
      "')": -0.004377908
    },
    {
      "\n": -0.0071404804
    },
    {
      " #": -0.0044490932
    },
    {
      " 1": -0.002072052
    },
    {
      ":": -0.00060094945
    },
    {
      " grab": -0.13053894
    },
    {
      " glasses": -0.0755917
    },
    {
      "\n": -0.017607022
    },
    {
      " assert": -0.569439
    },
    {
      "('": -0.0015179839
    },
    {
      "close": -0.0052021896
    },
    {
      "'": -0.0024050954
    },
    {
      " to": -0.0006101332
    },
    {
      " '": -0.0022099144
    },
    {
      "gl": -0.0011134509
    },
    {
      "asses": -0.00050516764
    },
    {
      "')": -0.0057413997
    },
    {
      "\n": -0.0060690674
    },
    {
      " else": -0.0011850595
    },
    {
      ":": -0.0013633844
    },
    {
      " find": -0.0031844599
    },
    {
      "('": -0.0013984825
    },
    {
      "gl": -0.0006353595
    },
    {
      "asses": -0.0018589646
    },
    {
      "')": -0.0015249093
    },
    {
      "\n": -0.0057109464
    },
    {
      " grab": -0.0028275468
    },
    {
      "('": -0.00082444504
    },
    {
      "gl": -0.00024477651
    },
    {
      "asses": -0.0002620674
    },
    {
      "')": -0.0018267182
    },
    {
      "\n": -0.00493686
    },
    {
      " assert": -0.6910513
    },
    {
      " 2": -0.008386235
    },
    {
      ":": -0.00079169736
    },
    {
      " put": -0.06058745
    },
    {
      " on": -0.26743954
    },
    {
      " glasses": -0.06632142
    },
    {
      "\n": -0.017480424
    },
    {
      " assert": -0.8247935
    },
    {
      "('": -0.0012163299
    },
    {
      "gl": -0.070633344
    },
    {
      "asses": -0.00053671666
    },
    {
      "'": -0.0016847276
    },
    {
      " in": -0.01090125
    },
    {
      " '": -0.003918595
    },
    {
      "hands": -0.008077877
    },
    {
      "')": -0.02324192
    },
    {
      "\n": -0.0037524381
    },
    {
      " else": -0.0035967147
    },
    {
      ":": -0.002203283
    },
    {
      " grab": -0.013123449
    },
    {
      "('": -0.0014498152
    },
    {
      "gl": -0.0003708805
    },
    {
      "asses": -0.00021360109
    },
    {
      "')": -0.002587643
    },
    {
      "\n": -0.0058797062
    },
    {
      " put": -0.09088756
    },
    {
      "on": -0.00961972
    },
    {
      "('": -0.000792652
    },
    {
      "gl": -0.00032610405
    },
    {
      "asses": -0.0012738606
    },
    {
      "')": -0.0019555844
    },
    {
      "\n": -0.20530404
    },
    {
      " #": -0.28345165
    },
    {
      "at": -0.021046842
    },
    {
      "('": -0.0014975072
    },
    {
      "gl": -0.0056807334
    },
    {
      "asses": -0.0004178074
    },
    {
      "')": -0.0019362998
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.110349178314209
[(" # 0: walk to desk\n walk('desk')\n # 1: find laptop\n find('laptop')\n # 2: open laptop\n open('laptop')\n # 3: find power socket\n find('powersocket')\n # 4: plug in laptop\n plugin('laptop')\n # 5: turn on laptop\n switchon('laptop')\n # 6: Done\n return", <OpenAIObject at 0x7fdf9801fea0> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3396,
    3397,
    3402,
    3404,
    3407,
    3408,
    3410,
    3411,
    3413,
    3415,
    3416,
    3421,
    3428,
    3429,
    3434,
    3436,
    3437,
    3442,
    3444,
    3445,
    3447,
    3449,
    3450,
    3455,
    3462,
    3463,
    3468,
    3470,
    3471,
    3476,
    3478,
    3479,
    3481,
    3483,
    3484,
    3489,
    3495,
    3502,
    3503,
    3508,
    3510,
    3516,
    3521,
    3523,
    3524,
    3526,
    3528,
    3529,
    3534,
    3537,
    3544,
    3545,
    3552,
    3554,
    3555,
    3560,
    3562,
    3563,
    3565,
    3567,
    3568,
    3573,
    3576,
    3583,
    3584,
    3591,
    3593,
    3595,
    3596,
    3601,
    3603,
    3604,
    3606,
    3608,
    3609,
    3614,
    3615
  ],
  "token_logprobs": [
    -0.019804113,
    -0.008206173,
    -0.0018716832,
    -0.6059168,
    -0.19582668,
    -2.427754,
    -0.030183084,
    -0.008724149,
    -0.004124106,
    -0.01738726,
    -0.00046921265,
    -0.0015075376,
    -0.00823502,
    -0.007110044,
    -0.0030430541,
    -0.0006016647,
    -0.082431436,
    -1.121969,
    -0.029449938,
    -0.049232297,
    -0.0010241861,
    -0.002358254,
    -0.00011213572,
    -0.0018427793,
    -0.005468193,
    -0.009249377,
    -0.003946242,
    -0.0009669106,
    -0.25189835,
    -0.27747932,
    -0.06469553,
    -0.7690541,
    -0.0061337743,
    -0.0010826613,
    -0.00012226657,
    -0.00159159,
    -0.0060668485,
    -0.019371333,
    -0.0044602873,
    -0.0006670915,
    -1.889209,
    -0.302072,
    -1.0128682,
    -0.048538648,
    -0.079675615,
    -0.0013032836,
    -0.6727791,
    -0.00087968557,
    -0.0017961444,
    -0.006381848,
    -0.013234637,
    -0.0057074092,
    -0.00077606883,
    -0.42600214,
    -0.13450718,
    -0.56137586,
    -0.09457716,
    -0.50645715,
    -0.0018415854,
    -0.22192445,
    -0.0005844273,
    -0.0057583633,
    -0.014587636,
    -0.015782546,
    -0.004027811,
    -0.0009268772,
    -0.83220345,
    -0.032855835,
    -0.12204311,
    -0.015848007,
    -0.22903718,
    -0.0015192989,
    -0.0008841019,
    -0.001984015,
    -9.56821e-05,
    -0.0016555908,
    -0.064101174,
    -0.028334688,
    -0.00396569,
    -0.0016107552,
    -0.79836494,
    -0.3848417,
    -4.4449687
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " desk",
    "\n",
    " walk",
    "('",
    "des",
    "k",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " laptop",
    "\n",
    " find",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " open",
    " laptop",
    "\n",
    " open",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " power",
    " socket",
    "\n",
    " find",
    "('",
    "powers",
    "ocket",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " plug",
    " in",
    " laptop",
    "\n",
    " plugin",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " on",
    " laptop",
    "\n",
    " switch",
    "on",
    "('",
    "l",
    "aptop",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done",
    "\n",
    " return"
  ],
  "top_logprobs": [
    {
      " #": -0.019804113
    },
    {
      " 0": -0.008206173
    },
    {
      ":": -0.0018716832
    },
    {
      " walk": -0.6059168
    },
    {
      " to": -0.19582668
    },
    {
      " home": -0.9685139
    },
    {
      "\n": -0.030183084
    },
    {
      " walk": -0.008724149
    },
    {
      "('": -0.004124106
    },
    {
      "des": -0.01738726
    },
    {
      "k": -0.00046921265
    },
    {
      "')": -0.0015075376
    },
    {
      "\n": -0.00823502
    },
    {
      " #": -0.007110044
    },
    {
      " 1": -0.0030430541
    },
    {
      ":": -0.0006016647
    },
    {
      " find": -0.082431436
    },
    {
      " computer": -0.6613757
    },
    {
      "\n": -0.029449938
    },
    {
      " find": -0.049232297
    },
    {
      "('": -0.0010241861
    },
    {
      "l": -0.002358254
    },
    {
      "aptop": -0.00011213572
    },
    {
      "')": -0.0018427793
    },
    {
      "\n": -0.005468193
    },
    {
      " #": -0.009249377
    },
    {
      " 2": -0.003946242
    },
    {
      ":": -0.0009669106
    },
    {
      " open": -0.25189835
    },
    {
      " laptop": -0.27747932
    },
    {
      "\n": -0.06469553
    },
    {
      " open": -0.7690541
    },
    {
      "('": -0.0061337743
    },
    {
      "l": -0.0010826613
    },
    {
      "aptop": -0.00012226657
    },
    {
      "')": -0.00159159
    },
    {
      "\n": -0.0060668485
    },
    {
      " #": -0.019371333
    },
    {
      " 3": -0.0044602873
    },
    {
      ":": -0.0006670915
    },
    {
      " turn": -0.8997235
    },
    {
      " power": -0.302072
    },
    {
      " button": -0.90690356
    },
    {
      "\n": -0.048538648
    },
    {
      " find": -0.079675615
    },
    {
      "('": -0.0013032836
    },
    {
      "powers": -0.6727791
    },
    {
      "ocket": -0.00087968557
    },
    {
      "')": -0.0017961444
    },
    {
      "\n": -0.006381848
    },
    {
      " #": -0.013234637
    },
    {
      " 4": -0.0057074092
    },
    {
      ":": -0.00077606883
    },
    {
      " plug": -0.42600214
    },
    {
      " in": -0.13450718
    },
    {
      " laptop": -0.56137586
    },
    {
      "\n": -0.09457716
    },
    {
      " plugin": -0.50645715
    },
    {
      "('": -0.0018415854
    },
    {
      "l": -0.22192445
    },
    {
      "aptop": -0.0005844273
    },
    {
      "')": -0.0057583633
    },
    {
      "\n": -0.014587636
    },
    {
      " #": -0.015782546
    },
    {
      " 5": -0.004027811
    },
    {
      ":": -0.0009268772
    },
    {
      " turn": -0.83220345
    },
    {
      " on": -0.032855835
    },
    {
      " laptop": -0.12204311
    },
    {
      "\n": -0.015848007
    },
    {
      " switch": -0.22903718
    },
    {
      "on": -0.0015192989
    },
    {
      "('": -0.0008841019
    },
    {
      "l": -0.001984015
    },
    {
      "aptop": -9.56821e-05
    },
    {
      "')": -0.0016555908
    },
    {
      "\n": -0.064101174
    },
    {
      " #": -0.028334688
    },
    {
      " 6": -0.00396569
    },
    {
      ":": -0.0016107552
    },
    {
      " Done": -0.79836494
    },
    {
      "\n": -0.3848417
    },
    {
      "<|endoftext|>": -1.5820268
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.224239110946655
[(" # 0: find alarm clock\n find('alarm_clock')\n # 1: grab alarm clock\n assert('close' to 'alarm_clock')\n else: find('alarm_clock')\n grab('alarm_clock')\n assert('alarm_clock' in 'hands')\n else: grab('alarm_clock')\n # 2: walk to bedroom\n walk('bedroom')\n # 3: put alarm clock on the night stand\n find('nightstand')\n assert('close' to 'nightstand')\n else: find('nightstand')\n puton('alarm_clock')\n # 4: Done\n assert('alarm_clock' on 'nightstand')\n else: puton('alarm_clock')", <OpenAIObject at 0x7fdf980d0b80> JSON: {
  "text_offset": [
    3390,
    3392,
    3394,
    3395,
    3400,
    3406,
    3412,
    3413,
    3418,
    3420,
    3422,
    3425,
    3426,
    3431,
    3433,
    3434,
    3436,
    3438,
    3439,
    3444,
    3450,
    3456,
    3457,
    3464,
    3466,
    3471,
    3472,
    3475,
    3477,
    3479,
    3482,
    3483,
    3488,
    3490,
    3491,
    3496,
    3497,
    3502,
    3504,
    3506,
    3509,
    3510,
    3515,
    3517,
    3518,
    3523,
    3525,
    3527,
    3530,
    3531,
    3536,
    3538,
    3539,
    3546,
    3548,
    3550,
    3553,
    3554,
    3559,
    3560,
    3563,
    3565,
    3570,
    3572,
    3573,
    3578,
    3579,
    3584,
    3586,
    3588,
    3591,
    3592,
    3597,
    3599,
    3600,
    3602,
    3604,
    3605,
    3610,
    3613,
    3621,
    3622,
    3627,
    3629,
    3636,
    3638,
    3639,
    3641,
    3643,
    3644,
    3648,
    3654,
    3660,
    3663,
    3667,
    3673,
    3679,
    3680,
    3685,
    3687,
    3692,
    3697,
    3699,
    3700,
    3707,
    3709,
    3714,
    3715,
    3718,
    3720,
    3725,
    3730,
    3732,
    3733,
    3738,
    3739,
    3744,
    3746,
    3751,
    3756,
    3758,
    3759,
    3763,
    3765,
    3767,
    3769,
    3772,
    3773,
    3778,
    3780,
    3781,
    3783,
    3785,
    3786,
    3791,
    3792,
    3799,
    3801,
    3803,
    3806,
    3807,
    3812,
    3813,
    3816,
    3818,
    3823,
    3828,
    3830,
    3831,
    3836,
    3837,
    3841,
    3843,
    3845,
    3847,
    3850,
    3851,
    3856
  ],
  "token_logprobs": [
    -0.016929822,
    -0.0070377127,
    -0.0018055186,
    -0.6725486,
    -0.18757613,
    -0.06808042,
    -0.029197488,
    -0.021764722,
    -0.0020144754,
    -0.0028987406,
    -0.00021014028,
    -0.012244645,
    -0.00039187065,
    -0.0032502967,
    -0.007393126,
    -0.007264754,
    -0.0019265651,
    -0.0006868351,
    -0.57190865,
    -0.19239557,
    -0.009022603,
    -0.016997904,
    -0.7137666,
    -0.0015988149,
    -0.005682952,
    -0.0028472724,
    -0.001257805,
    -0.0019924368,
    -0.0031056546,
    -0.00013025544,
    -0.0052307714,
    -0.0006101332,
    -0.007883454,
    -0.0066112624,
    -0.0014675407,
    -0.0012797083,
    -0.0037169,
    -0.0010287808,
    -0.00039306178,
    -7.517727e-05,
    -0.0010759791,
    -0.0007944392,
    -0.002838605,
    -0.0062300945,
    -0.0036203433,
    -0.000807982,
    -0.00037553246,
    -4.9308033e-05,
    -0.0014287436,
    -0.0005849042,
    -0.0018550222,
    -0.0048524044,
    -0.7676694,
    -0.0011300377,
    -0.0066818236,
    -0.0001539836,
    -0.0031021272,
    -0.0006283825,
    -0.0019674706,
    -0.016191116,
    -0.0032601648,
    -0.0052231015,
    -0.039492015,
    -0.0034468153,
    -0.019577367,
    -0.001784859,
    -0.0035151246,
    -0.0009794951,
    -0.00038519214,
    -1.9860674e-05,
    -0.0010501399,
    -0.0008327981,
    -0.002429473,
    -0.005429778,
    -0.21180584,
    -0.006221699,
    -0.0007983168,
    -0.0895228,
    -0.11181017,
    -0.07416105,
    -0.02050845,
    -0.012955633,
    -0.0016910578,
    -0.0024638278,
    -0.00096094364,
    -0.0048155095,
    -0.012440223,
    -0.0044637006,
    -0.0007300778,
    -0.37950936,
    -0.114367574,
    -0.005347737,
    -0.71479243,
    -2.2366543,
    -0.22506367,
    -1.4552718,
    -0.015896332,
    -0.22628126,
    -0.0012202683,
    -0.0017437781,
    -0.106496304,
    -0.0010552133,
    -0.004129552,
    -0.40231326,
    -0.0006892202,
    -0.04602227,
    -0.0018029516,
    -0.00042305636,
    -0.0015481304,
    -0.007822011,
    -0.003756866,
    -0.0042671612,
    -0.0033411973,
    -0.0009889238,
    -0.001154684,
    -0.016789613,
    -0.0012603713,
    -0.0009583192,
    -0.00071689725,
    -0.001732732,
    -0.004854201,
    -0.15091138,
    -0.20554216,
    -0.0015249093,
    -0.20842274,
    -8.459475e-05,
    -0.002216485,
    -0.00043641243,
    -0.36428374,
    -0.23364568,
    -0.6032826,
    -0.011186371,
    -0.0017003721,
    -0.27868354,
    -0.49070483,
    -1.2676734,
    -0.0027552822,
    -0.01972976,
    -0.00018164565,
    -0.002360762,
    -0.00059557945,
    -0.004237471,
    -0.8930911,
    -0.009434201,
    -0.0026484807,
    -0.004810778,
    -0.0061002523,
    -0.7550367,
    -0.011797267,
    -0.0019625756,
    -0.033048958,
    -0.010331551,
    -0.0024441131,
    -0.0007259036,
    -0.00013395278,
    -0.004308584,
    -0.0006606486,
    -0.0043967664
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " alarm",
    " clock",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " assert",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " alarm",
    " clock",
    " on",
    " the",
    " night",
    " stand",
    "\n",
    " find",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "night",
    "stand",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done",
    "\n",
    " assert",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "'",
    " on",
    " '",
    "night",
    "stand",
    "')",
    "\n",
    " else",
    ":",
    " put",
    "on",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.016929822
    },
    {
      " 0": -0.0070377127
    },
    {
      ":": -0.0018055186
    },
    {
      " find": -0.6725486
    },
    {
      " alarm": -0.18757613
    },
    {
      " clock": -0.06808042
    },
    {
      "\n": -0.029197488
    },
    {
      " find": -0.021764722
    },
    {
      "('": -0.0020144754
    },
    {
      "al": -0.0028987406
    },
    {
      "arm": -0.00021014028
    },
    {
      "_": -0.012244645
    },
    {
      "clock": -0.00039187065
    },
    {
      "')": -0.0032502967
    },
    {
      "\n": -0.007393126
    },
    {
      " #": -0.007264754
    },
    {
      " 1": -0.0019265651
    },
    {
      ":": -0.0006868351
    },
    {
      " grab": -0.57190865
    },
    {
      " alarm": -0.19239557
    },
    {
      " clock": -0.009022603
    },
    {
      "\n": -0.016997904
    },
    {
      " grab": -0.6925111
    },
    {
      "('": -0.0015988149
    },
    {
      "close": -0.005682952
    },
    {
      "'": -0.0028472724
    },
    {
      " to": -0.001257805
    },
    {
      " '": -0.0019924368
    },
    {
      "al": -0.0031056546
    },
    {
      "arm": -0.00013025544
    },
    {
      "_": -0.0052307714
    },
    {
      "clock": -0.0006101332
    },
    {
      "')": -0.007883454
    },
    {
      "\n": -0.0066112624
    },
    {
      " else": -0.0014675407
    },
    {
      ":": -0.0012797083
    },
    {
      " find": -0.0037169
    },
    {
      "('": -0.0010287808
    },
    {
      "al": -0.00039306178
    },
    {
      "arm": -7.517727e-05
    },
    {
      "_": -0.0010759791
    },
    {
      "clock": -0.0007944392
    },
    {
      "')": -0.002838605
    },
    {
      "\n": -0.0062300945
    },
    {
      " grab": -0.0036203433
    },
    {
      "('": -0.000807982
    },
    {
      "al": -0.00037553246
    },
    {
      "arm": -4.9308033e-05
    },
    {
      "_": -0.0014287436
    },
    {
      "clock": -0.0005849042
    },
    {
      "')": -0.0018550222
    },
    {
      "\n": -0.0048524044
    },
    {
      " #": -0.6535566
    },
    {
      "('": -0.0011300377
    },
    {
      "al": -0.0066818236
    },
    {
      "arm": -0.0001539836
    },
    {
      "_": -0.0031021272
    },
    {
      "clock": -0.0006283825
    },
    {
      "'": -0.0019674706
    },
    {
      " in": -0.016191116
    },
    {
      " '": -0.0032601648
    },
    {
      "hands": -0.0052231015
    },
    {
      "')": -0.039492015
    },
    {
      "\n": -0.0034468153
    },
    {
      " else": -0.019577367
    },
    {
      ":": -0.001784859
    },
    {
      " grab": -0.0035151246
    },
    {
      "('": -0.0009794951
    },
    {
      "al": -0.00038519214
    },
    {
      "arm": -1.9860674e-05
    },
    {
      "_": -0.0010501399
    },
    {
      "clock": -0.0008327981
    },
    {
      "')": -0.002429473
    },
    {
      "\n": -0.005429778
    },
    {
      " #": -0.21180584
    },
    {
      " 2": -0.006221699
    },
    {
      ":": -0.0007983168
    },
    {
      " walk": -0.0895228
    },
    {
      " to": -0.11181017
    },
    {
      " bedroom": -0.07416105
    },
    {
      "\n": -0.02050845
    },
    {
      " walk": -0.012955633
    },
    {
      "('": -0.0016910578
    },
    {
      "bedroom": -0.0024638278
    },
    {
      "')": -0.00096094364
    },
    {
      "\n": -0.0048155095
    },
    {
      " #": -0.012440223
    },
    {
      " 3": -0.0044637006
    },
    {
      ":": -0.0007300778
    },
    {
      " put": -0.37950936
    },
    {
      " alarm": -0.114367574
    },
    {
      " clock": -0.005347737
    },
    {
      " on": -0.71479243
    },
    {
      " night": -0.31818193
    },
    {
      " night": -0.22506367
    },
    {
      "stand": -0.2702152
    },
    {
      "\n": -0.015896332
    },
    {
      " find": -0.22628126
    },
    {
      "('": -0.0012202683
    },
    {
      "night": -0.0017437781
    },
    {
      "stand": -0.106496304
    },
    {
      "')": -0.0010552133
    },
    {
      "\n": -0.004129552
    },
    {
      " assert": -0.40231326
    },
    {
      "('": -0.0006892202
    },
    {
      "close": -0.04602227
    },
    {
      "'": -0.0018029516
    },
    {
      " to": -0.00042305636
    },
    {
      " '": -0.0015481304
    },
    {
      "night": -0.007822011
    },
    {
      "stand": -0.003756866
    },
    {
      "')": -0.0042671612
    },
    {
      "\n": -0.0033411973
    },
    {
      " else": -0.0009889238
    },
    {
      ":": -0.001154684
    },
    {
      " find": -0.016789613
    },
    {
      "('": -0.0012603713
    },
    {
      "night": -0.0009583192
    },
    {
      "stand": -0.00071689725
    },
    {
      "')": -0.001732732
    },
    {
      "\n": -0.004854201
    },
    {
      " put": -0.15091138
    },
    {
      "on": -0.20554216
    },
    {
      "('": -0.0015249093
    },
    {
      "al": -0.20842274
    },
    {
      "arm": -8.459475e-05
    },
    {
      "_": -0.002216485
    },
    {
      "clock": -0.00043641243
    },
    {
      "')": -0.36428374
    },
    {
      "\n": -0.23364568
    },
    {
      " #": -0.6032826
    },
    {
      " 4": -0.011186371
    },
    {
      ":": -0.0017003721
    },
    {
      " Done": -0.27868354
    },
    {
      "\n": -0.49070483
    },
    {
      " assert": -1.2676734
    },
    {
      "('": -0.0027552822
    },
    {
      "al": -0.01972976
    },
    {
      "arm": -0.00018164565
    },
    {
      "_": -0.002360762
    },
    {
      "clock": -0.00059557945
    },
    {
      "'": -0.004237471
    },
    {
      " in": -0.79662406
    },
    {
      " '": -0.009434201
    },
    {
      "night": -0.0026484807
    },
    {
      "stand": -0.004810778
    },
    {
      "')": -0.0061002523
    },
    {
      "<|endoftext|>": -0.6548313
    },
    {
      " else": -0.011797267
    },
    {
      ":": -0.0019625756
    },
    {
      " put": -0.033048958
    },
    {
      "on": -0.010331551
    },
    {
      "('": -0.0024441131
    },
    {
      "al": -0.0007259036
    },
    {
      "arm": -0.00013395278
    },
    {
      "_": -0.004308584
    },
    {
      "clock": -0.0006606486
    },
    {
      "')": -0.0043967664
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.8944549560546875
[(" # 0: walk to living room\n walk('living_room')\n # 1: find chair\n find('chair')\n # 2: sit in chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n assert('sitting' in 'chair')\n else: sit('chair')", <OpenAIObject at 0x7fdf980bf1d0> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3396,
    3401,
    3402,
    3407,
    3409,
    3415,
    3416,
    3420,
    3422,
    3423,
    3425,
    3427,
    3428,
    3433,
    3439,
    3440,
    3445,
    3447,
    3452,
    3454,
    3455,
    3457,
    3459,
    3460,
    3464,
    3467,
    3473,
    3474,
    3481,
    3483,
    3488,
    3489,
    3492,
    3494,
    3499,
    3501,
    3502,
    3507,
    3508,
    3513,
    3515,
    3520,
    3522,
    3523,
    3527,
    3529,
    3534,
    3536,
    3537,
    3544,
    3546,
    3547,
    3553,
    3554,
    3557,
    3559,
    3564,
    3566,
    3567,
    3572,
    3573,
    3577,
    3579,
    3584
  ],
  "token_logprobs": [
    -0.01994365,
    -0.006771475,
    -0.0015388172,
    -1.1268674,
    -0.2817807,
    -1.1271029,
    -0.05093922,
    -0.01812285,
    -0.0037873795,
    -0.0036918917,
    -0.014563565,
    -0.20087764,
    -0.00015386345,
    -0.0022853059,
    -0.007130515,
    -0.0013400486,
    -0.002387827,
    -0.0005038554,
    -0.017990243,
    -0.094760224,
    -0.017974284,
    -0.3920605,
    -0.00079939154,
    -0.00072936155,
    -0.000960586,
    -0.0045463257,
    -0.011449809,
    -0.0044462793,
    -0.00058526185,
    -0.12811556,
    -0.49849677,
    -0.3548489,
    -0.009615807,
    -0.26666507,
    -0.0011915636,
    -0.003969282,
    -0.0023587309,
    -0.0007490442,
    -0.0017732733,
    -0.0007290039,
    -0.0036396072,
    -0.004191441,
    -0.001172048,
    -0.001103245,
    -0.0046823155,
    -0.0013405264,
    -0.00064681104,
    -0.0016336819,
    -0.005224839,
    -0.19873214,
    -0.0017513012,
    -0.00047589114,
    -0.0015104032,
    -0.88525635,
    -2.6884813,
    -0.0021643366,
    -1.3970848,
    -0.0044056834,
    -0.06748052,
    -0.26654413,
    -0.008071027,
    -0.007241399,
    -0.0052051865,
    -0.13137819,
    -0.017631648,
    -0.0039923214,
    -0.010879799,
    -0.0031793753,
    -0.0005125633,
    -0.0033485526
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " living",
    " room",
    "\n",
    " walk",
    "('",
    "living",
    "_",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " in",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "s",
    "itting",
    "'",
    " in",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " sit",
    "('",
    "chair",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01994365
    },
    {
      " 0": -0.006771475
    },
    {
      ":": -0.0015388172
    },
    {
      " find": -0.50819606
    },
    {
      " to": -0.2817807
    },
    {
      " living": -1.1271029
    },
    {
      " room": -0.05093922
    },
    {
      "\n": -0.01812285
    },
    {
      " walk": -0.0037873795
    },
    {
      "('": -0.0036918917
    },
    {
      "living": -0.014563565
    },
    {
      "_": -0.20087764
    },
    {
      "room": -0.00015386345
    },
    {
      "')": -0.0022853059
    },
    {
      "\n": -0.007130515
    },
    {
      " #": -0.0013400486
    },
    {
      " 1": -0.002387827
    },
    {
      ":": -0.0005038554
    },
    {
      " find": -0.017990243
    },
    {
      " chair": -0.094760224
    },
    {
      "\n": -0.017974284
    },
    {
      " find": -0.3920605
    },
    {
      "('": -0.00079939154
    },
    {
      "chair": -0.00072936155
    },
    {
      "')": -0.000960586
    },
    {
      "\n": -0.0045463257
    },
    {
      " #": -0.011449809
    },
    {
      " 2": -0.0044462793
    },
    {
      ":": -0.00058526185
    },
    {
      " sit": -0.12811556
    },
    {
      " in": -0.49849677
    },
    {
      " chair": -0.3548489
    },
    {
      "\n": -0.009615807
    },
    {
      " assert": -0.26666507
    },
    {
      "('": -0.0011915636
    },
    {
      "close": -0.003969282
    },
    {
      "'": -0.0023587309
    },
    {
      " to": -0.0007490442
    },
    {
      " '": -0.0017732733
    },
    {
      "chair": -0.0007290039
    },
    {
      "')": -0.0036396072
    },
    {
      "\n": -0.004191441
    },
    {
      " else": -0.001172048
    },
    {
      ":": -0.001103245
    },
    {
      " find": -0.0046823155
    },
    {
      "('": -0.0013405264
    },
    {
      "chair": -0.00064681104
    },
    {
      "')": -0.0016336819
    },
    {
      "\n": -0.005224839
    },
    {
      " sit": -0.19873214
    },
    {
      "('": -0.0017513012
    },
    {
      "chair": -0.00047589114
    },
    {
      "')": -0.0015104032
    },
    {
      "<|endoftext|>": -0.54642826
    },
    {
      " #": -0.4485208
    },
    {
      "('": -0.0021643366
    },
    {
      "chair": -0.8031384
    },
    {
      "itting": -0.0044056834
    },
    {
      "'": -0.06748052
    },
    {
      " in": -0.26654413
    },
    {
      " '": -0.008071027
    },
    {
      "chair": -0.007241399
    },
    {
      "')": -0.0052051865
    },
    {
      "\n": -0.13137819
    },
    {
      " else": -0.017631648
    },
    {
      ":": -0.0039923214
    },
    {
      " sit": -0.010879799
    },
    {
      "('": -0.0031793753
    },
    {
      "chair": -0.0005125633
    },
    {
      "')": -0.0033485526
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.8323559761047363
[(" # 0: find alarm clock\n find('alarm_clock')\n # 1: switch off the alarm\n switchoff('alarm_clock')\n # 2: put alarm clock back\n assert('close' to 'alarm_clock')\n else: find('alarm_clock')\n putback('alarm_clock')", <OpenAIObject at 0x7fdf980bf310> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3394,
    3400,
    3401,
    3406,
    3408,
    3410,
    3413,
    3414,
    3419,
    3421,
    3422,
    3424,
    3426,
    3427,
    3434,
    3438,
    3442,
    3448,
    3449,
    3456,
    3459,
    3461,
    3463,
    3466,
    3467,
    3472,
    3474,
    3475,
    3477,
    3479,
    3480,
    3484,
    3490,
    3496,
    3501,
    3502,
    3509,
    3511,
    3516,
    3517,
    3520,
    3522,
    3524,
    3527,
    3528,
    3533,
    3535,
    3536,
    3541,
    3542,
    3547,
    3549,
    3551,
    3554,
    3555,
    3560,
    3562,
    3563,
    3567,
    3571,
    3573,
    3575,
    3578,
    3579,
    3584
  ],
  "token_logprobs": [
    -0.018830862,
    -0.01068109,
    -0.0022418145,
    -0.29008338,
    -0.21167892,
    -0.8780002,
    -0.02844709,
    -0.026573123,
    -0.0025853724,
    -0.0042575244,
    -0.0004084472,
    -0.019873606,
    -0.0006746054,
    -0.0043623424,
    -0.0089355195,
    -0.0055106245,
    -0.0035831952,
    -0.0009328432,
    -1.1696957,
    -0.08559865,
    -0.8865593,
    -0.01006949,
    -0.23026617,
    -1.2604644,
    -0.006356116,
    -0.0014363241,
    -0.00089054485,
    -0.00023571757,
    -0.018544586,
    -0.000272799,
    -0.0032739188,
    -0.21264717,
    -0.03785305,
    -0.0043729395,
    -0.0009540239,
    -1.198596,
    -1.0495046,
    -0.06723174,
    -0.11568092,
    -0.12255739,
    -1.2648668,
    -0.0017702302,
    -0.3842888,
    -0.0032804967,
    -0.000447267,
    -0.0020042618,
    -0.001645264,
    -0.00022528353,
    -0.0031915756,
    -0.0005897354,
    -0.00807992,
    -0.0060770437,
    -0.0015597717,
    -0.0015583383,
    -0.005727912,
    -0.00129624,
    -0.00046885313,
    -2.8921473e-05,
    -0.0008540951,
    -0.00094781845,
    -0.0026847585,
    -0.0066672447,
    -0.16565646,
    -0.52050984,
    -0.0038981335,
    -0.00041661627,
    -0.000111540605,
    -0.0008899478,
    -0.00049622235,
    -0.00755118
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " switch",
    " off",
    " the",
    " alarm",
    "\n",
    " switch",
    "off",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " alarm",
    " clock",
    " back",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " put",
    "back",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018830862
    },
    {
      " 0": -0.01068109
    },
    {
      ":": -0.0022418145
    },
    {
      " find": -0.29008338
    },
    {
      " alarm": -0.21167892
    },
    {
      "\n": -0.5916185
    },
    {
      "\n": -0.02844709
    },
    {
      " find": -0.026573123
    },
    {
      "('": -0.0025853724
    },
    {
      "al": -0.0042575244
    },
    {
      "arm": -0.0004084472
    },
    {
      "_": -0.019873606
    },
    {
      "clock": -0.0006746054
    },
    {
      "')": -0.0043623424
    },
    {
      "\n": -0.0089355195
    },
    {
      " #": -0.0055106245
    },
    {
      " 1": -0.0035831952
    },
    {
      ":": -0.0009328432
    },
    {
      " switch": -1.1696957
    },
    {
      " off": -0.08559865
    },
    {
      " alarm": -0.58492744
    },
    {
      " alarm": -0.01006949
    },
    {
      "\n": -0.23026617
    },
    {
      " assert": -0.51463383
    },
    {
      "off": -0.006356116
    },
    {
      "('": -0.0014363241
    },
    {
      "al": -0.00089054485
    },
    {
      "arm": -0.00023571757
    },
    {
      "_": -0.018544586
    },
    {
      "clock": -0.000272799
    },
    {
      "')": -0.0032739188
    },
    {
      "\n": -0.21264717
    },
    {
      " #": -0.03785305
    },
    {
      " 2": -0.0043729395
    },
    {
      ":": -0.0009540239
    },
    {
      " Done": -1.1974354
    },
    {
      " the": -1.0457929
    },
    {
      " clock": -0.06723174
    },
    {
      " back": -0.11568092
    },
    {
      "\n": -0.12255739
    },
    {
      " put": -0.3886642
    },
    {
      "('": -0.0017702302
    },
    {
      "close": -0.3842888
    },
    {
      "'": -0.0032804967
    },
    {
      " to": -0.000447267
    },
    {
      " '": -0.0020042618
    },
    {
      "al": -0.001645264
    },
    {
      "arm": -0.00022528353
    },
    {
      "_": -0.0031915756
    },
    {
      "clock": -0.0005897354
    },
    {
      "')": -0.00807992
    },
    {
      "\n": -0.0060770437
    },
    {
      " else": -0.0015597717
    },
    {
      ":": -0.0015583383
    },
    {
      " find": -0.005727912
    },
    {
      "('": -0.00129624
    },
    {
      "al": -0.00046885313
    },
    {
      "arm": -2.8921473e-05
    },
    {
      "_": -0.0008540951
    },
    {
      "clock": -0.00094781845
    },
    {
      "')": -0.0026847585
    },
    {
      "\n": -0.0066672447
    },
    {
      " put": -0.16565646
    },
    {
      "back": -0.52050984
    },
    {
      "('": -0.0038981335
    },
    {
      "al": -0.00041661627
    },
    {
      "arm": -0.000111540605
    },
    {
      "_": -0.0008899478
    },
    {
      "clock": -0.00049622235
    },
    {
      "')": -0.00755118
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.939535140991211
[(" # 0: walk in to bed room\n walk('bedroom')\n # 1: find bed\n walk('bed')\n find('bed')\n # 2: lay down on bed\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n else: turnto('bed')\n sit('bed')\n sleep()\n # 3: wake up after a few minutes\n assert('asleep'):\n else: sleep()\n wakeup()\n # 4: stand up\n standup()\n # 5: Done\n", <OpenAIObject at 0x7fdf980d0c70> JSON: {
  "text_offset": [
    3372,
    3374,
    3376,
    3377,
    3382,
    3385,
    3388,
    3392,
    3397,
    3398,
    3403,
    3405,
    3412,
    3414,
    3415,
    3417,
    3419,
    3420,
    3425,
    3429,
    3430,
    3435,
    3437,
    3440,
    3442,
    3443,
    3448,
    3450,
    3453,
    3455,
    3456,
    3458,
    3460,
    3461,
    3465,
    3470,
    3473,
    3477,
    3478,
    3482,
    3484,
    3485,
    3487,
    3490,
    3492,
    3493,
    3498,
    3500,
    3502,
    3505,
    3507,
    3508,
    3515,
    3517,
    3522,
    3523,
    3526,
    3528,
    3531,
    3533,
    3534,
    3539,
    3540,
    3545,
    3547,
    3550,
    3552,
    3553,
    3558,
    3559,
    3563,
    3565,
    3566,
    3568,
    3571,
    3573,
    3574,
    3578,
    3580,
    3583,
    3585,
    3586,
    3592,
    3594,
    3595,
    3597,
    3599,
    3600,
    3605,
    3608,
    3614,
    3616,
    3620,
    3628,
    3629,
    3636,
    3638,
    3640,
    3644,
    3645,
    3647,
    3648,
    3653,
    3654,
    3660,
    3662,
    3663,
    3668,
    3670,
    3672,
    3673,
    3675,
    3677,
    3678,
    3684,
    3687,
    3688,
    3694,
    3696,
    3698,
    3699,
    3701,
    3703,
    3704,
    3709
  ],
  "token_logprobs": [
    -0.017093882,
    -0.009095741,
    -0.0018474389,
    -0.68378747,
    -0.89460075,
    -0.022065142,
    -0.32230932,
    -0.009137667,
    -0.008874898,
    -0.0036662281,
    -0.0042960127,
    -0.010904084,
    -0.0011719288,
    -0.003735566,
    -0.0037701477,
    -0.0023979852,
    -0.00036646696,
    -0.028631264,
    -0.008499603,
    -0.005538856,
    -0.2886001,
    -0.00043844085,
    -0.00020167646,
    -0.000635719,
    -0.0013815904,
    -0.0033502271,
    -0.0002723231,
    -0.00010474478,
    -0.0002085915,
    -0.0024509823,
    -0.0009346924,
    -0.0031356087,
    -0.00035418657,
    -0.0958822,
    -0.0035765562,
    -0.0066229613,
    -0.0031557006,
    -0.009453454,
    -0.012029801,
    -1.2231317e-05,
    -2.5225998e-05,
    -0.0001711534,
    -8.388231e-05,
    -0.00068241963,
    -0.0014512477,
    -0.015799198,
    -8.948419e-05,
    -0.00026814893,
    -4.859278e-05,
    -0.0003762477,
    -0.0010672655,
    -0.005166182,
    -0.00020334445,
    -0.00026457265,
    -0.00046825802,
    -0.00023857858,
    -0.0002600399,
    -8.161453e-05,
    -0.0007488067,
    -0.0010450102,
    -0.00035704856,
    -0.0003487011,
    -0.0009711468,
    -0.0006129933,
    -5.4075444e-05,
    -0.0009862984,
    -0.0014388321,
    -0.12459317,
    -0.00033880305,
    -0.001981508,
    -2.2958224e-05,
    -3.8338017e-05,
    -0.00039043918,
    -9.759038e-05,
    -0.00030570905,
    -0.0008636384,
    -0.1883506,
    -0.00025849018,
    -8.054166e-05,
    -0.0006951844,
    -0.0026414879,
    -0.34261566,
    -0.051551253,
    -0.0762426,
    -0.10874991,
    -0.019620098,
    -0.0022681004,
    -0.932585,
    -0.10281702,
    -0.52351123,
    -1.5075839,
    -0.7061058,
    -0.12215968,
    -0.025985561,
    -3.9083805,
    -0.008128052,
    -1.3908001,
    -0.00088099967,
    -1.0403734,
    -2.3101764,
    -0.02084233,
    -0.16305795,
    -0.006871514,
    -0.14430141,
    -0.025855392,
    -0.011271245,
    -0.012257135,
    -0.0012081532,
    -0.007332781,
    -0.073642775,
    -0.23700538,
    -0.0076271547,
    -0.0013529991,
    -0.42658275,
    -0.095280334,
    -0.387471,
    -0.092215896,
    -0.0022191734,
    -0.008310805,
    -1.1491383,
    -0.18892108,
    -0.007131476,
    -0.0025770655,
    -0.43824315,
    -0.6935085
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bed",
    " room",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " bed",
    "\n",
    " walk",
    "('",
    "bed",
    "')",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " lay",
    " down",
    " on",
    " bed",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " sleep",
    "()",
    "\n",
    " #",
    " 3",
    ":",
    " wake",
    " up",
    " after",
    " a",
    " few",
    " minutes",
    "\n",
    " assert",
    "('",
    "as",
    "leep",
    "'",
    "):",
    "\n",
    " else",
    ":",
    " sleep",
    "()",
    "\n",
    " wake",
    "up",
    "()",
    "\n",
    " #",
    " 4",
    ":",
    " stand",
    " up",
    "\n",
    " stand",
    "up",
    "()",
    "\n",
    " #",
    " 5",
    ":",
    " Done",
    "\n"
  ],
  "top_logprobs": [
    {
      " #": -0.017093882
    },
    {
      " 0": -0.009095741
    },
    {
      ":": -0.0018474389
    },
    {
      " walk": -0.68378747
    },
    {
      " to": -0.64525604
    },
    {
      " to": -0.022065142
    },
    {
      " bed": -0.32230932
    },
    {
      " room": -0.009137667
    },
    {
      "\n": -0.008874898
    },
    {
      " walk": -0.0036662281
    },
    {
      "('": -0.0042960127
    },
    {
      "bedroom": -0.010904084
    },
    {
      "')": -0.0011719288
    },
    {
      "\n": -0.003735566
    },
    {
      " #": -0.0037701477
    },
    {
      " 1": -0.0023979852
    },
    {
      ":": -0.00036646696
    },
    {
      " find": -0.028631264
    },
    {
      " bed": -0.008499603
    },
    {
      "\n": -0.005538856
    },
    {
      " walk": -0.2886001
    },
    {
      "('": -0.00043844085
    },
    {
      "bed": -0.00020167646
    },
    {
      "')": -0.000635719
    },
    {
      "\n": -0.0013815904
    },
    {
      " find": -0.0033502271
    },
    {
      "('": -0.0002723231
    },
    {
      "bed": -0.00010474478
    },
    {
      "')": -0.0002085915
    },
    {
      "\n": -0.0024509823
    },
    {
      " #": -0.0009346924
    },
    {
      " 2": -0.0031356087
    },
    {
      ":": -0.00035418657
    },
    {
      " lay": -0.0958822
    },
    {
      " down": -0.0035765562
    },
    {
      " on": -0.0066229613
    },
    {
      " bed": -0.0031557006
    },
    {
      "\n": -0.009453454
    },
    {
      " tur": -0.012029801
    },
    {
      "nt": -1.2231317e-05
    },
    {
      "o": -2.5225998e-05
    },
    {
      "('": -0.0001711534
    },
    {
      "bed": -8.388231e-05
    },
    {
      "')": -0.00068241963
    },
    {
      "\n": -0.0014512477
    },
    {
      " look": -0.015799198
    },
    {
      "at": -8.948419e-05
    },
    {
      "('": -0.00026814893
    },
    {
      "bed": -4.859278e-05
    },
    {
      "')": -0.0003762477
    },
    {
      "\n": -0.0010672655
    },
    {
      " assert": -0.005166182
    },
    {
      "('": -0.00020334445
    },
    {
      "close": -0.00026457265
    },
    {
      "'": -0.00046825802
    },
    {
      " to": -0.00023857858
    },
    {
      " '": -0.0002600399
    },
    {
      "bed": -8.161453e-05
    },
    {
      "')": -0.0007488067
    },
    {
      "\n": -0.0010450102
    },
    {
      " else": -0.00035704856
    },
    {
      ":": -0.0003487011
    },
    {
      " find": -0.0009711468
    },
    {
      "('": -0.0006129933
    },
    {
      "bed": -5.4075444e-05
    },
    {
      "')": -0.0009862984
    },
    {
      "\n": -0.0014388321
    },
    {
      " else": -0.12459317
    },
    {
      ":": -0.00033880305
    },
    {
      " tur": -0.001981508
    },
    {
      "nt": -2.2958224e-05
    },
    {
      "o": -3.8338017e-05
    },
    {
      "('": -0.00039043918
    },
    {
      "bed": -9.759038e-05
    },
    {
      "')": -0.00030570905
    },
    {
      "\n": -0.0008636384
    },
    {
      " sit": -0.1883506
    },
    {
      "('": -0.00025849018
    },
    {
      "bed": -8.054166e-05
    },
    {
      "')": -0.0006951844
    },
    {
      "\n": -0.0026414879
    },
    {
      " sleep": -0.34261566
    },
    {
      "()": -0.051551253
    },
    {
      "\n": -0.0762426
    },
    {
      " #": -0.10874991
    },
    {
      " 3": -0.019620098
    },
    {
      ":": -0.0022681004
    },
    {
      " wake": -0.932585
    },
    {
      " up": -0.10281702
    },
    {
      " after": -0.52351123
    },
    {
      " a": -1.5075839
    },
    {
      " few": -0.7061058
    },
    {
      " minutes": -0.12215968
    },
    {
      "\n": -0.025985561
    },
    {
      " wake": -0.09193742
    },
    {
      "('": -0.008128052
    },
    {
      "sle": -1.0879141
    },
    {
      "leep": -0.00088099967
    },
    {
      "')": -0.44352967
    },
    {
      " is": -0.94238037
    },
    {
      "\n": -0.02084233
    },
    {
      " else": -0.16305795
    },
    {
      ":": -0.006871514
    },
    {
      " sleep": -0.14430141
    },
    {
      "()": -0.025855392
    },
    {
      "\n": -0.011271245
    },
    {
      " wake": -0.012257135
    },
    {
      "up": -0.0012081532
    },
    {
      "()": -0.007332781
    },
    {
      "\n": -0.073642775
    },
    {
      " #": -0.23700538
    },
    {
      " 4": -0.0076271547
    },
    {
      ":": -0.0013529991
    },
    {
      " stand": -0.42658275
    },
    {
      " up": -0.095280334
    },
    {
      "\n": -0.387471
    },
    {
      " stand": -0.092215896
    },
    {
      "up": -0.0022191734
    },
    {
      "()": -0.008310805
    },
    {
      "<|endoftext|>": -0.3975991
    },
    {
      " #": -0.18892108
    },
    {
      " 5": -0.007131476
    },
    {
      ":": -0.0025770655
    },
    {
      " Done": -0.43824315
    },
    {
      "\n": -0.6935085
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.488952159881592
[(" # 0: find computer\n find('computer')\n # 1: open computer\n assert('close' to 'computer')\n else: find('computer')\n open('computer')\n # 2: sit in chair\n find('chair')\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 3: turn on computer\n turnto('computer')\n switchon('computer')\n # 4: use computer\n lookat('computer')", <OpenAIObject at 0x7fdf98122d10> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3395,
    3396,
    3401,
    3403,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3424,
    3433,
    3434,
    3441,
    3443,
    3448,
    3449,
    3452,
    3454,
    3462,
    3464,
    3465,
    3470,
    3471,
    3476,
    3478,
    3486,
    3488,
    3489,
    3494,
    3496,
    3504,
    3506,
    3507,
    3509,
    3511,
    3512,
    3516,
    3519,
    3525,
    3526,
    3531,
    3533,
    3538,
    3540,
    3541,
    3548,
    3550,
    3555,
    3556,
    3559,
    3561,
    3566,
    3568,
    3569,
    3574,
    3575,
    3580,
    3582,
    3587,
    3589,
    3590,
    3594,
    3596,
    3601,
    3603,
    3604,
    3606,
    3608,
    3609,
    3614,
    3617,
    3626,
    3627,
    3631,
    3633,
    3634,
    3636,
    3644,
    3646,
    3647,
    3654,
    3656,
    3658,
    3666,
    3668,
    3669,
    3671,
    3673,
    3674,
    3678,
    3687,
    3688,
    3693,
    3695,
    3697,
    3705
  ],
  "token_logprobs": [
    -0.016373409,
    -0.0057117846,
    -0.0015220435,
    -1.4103906,
    -0.47989634,
    -0.031375416,
    -0.09257747,
    -0.0021367401,
    -0.002364527,
    -0.0022701316,
    -0.006930691,
    -0.0051067495,
    -0.0028534904,
    -0.00060381147,
    -1.8859751,
    -0.601463,
    -0.053443518,
    -0.5897709,
    -0.0018449298,
    -0.023307383,
    -0.003394066,
    -0.001024066,
    -0.0033236137,
    -0.002434373,
    -0.0074976115,
    -0.0055816504,
    -0.0019386887,
    -0.0016721308,
    -0.00371014,
    -0.0015933217,
    -0.00076377817,
    -0.0023617186,
    -0.00817234,
    -0.06063837,
    -0.0031034413,
    -0.0014907621,
    -0.0019480649,
    -0.006735231,
    -0.03520161,
    -0.0058618425,
    -0.00077356264,
    -0.9213626,
    -1.0499549,
    -1.4782857,
    -0.0638484,
    -0.24342157,
    -0.0012781577,
    -0.0023736092,
    -0.0018578888,
    -0.0039065713,
    -0.44235095,
    -0.00071474863,
    -0.004445321,
    -0.0019122912,
    -0.00062170305,
    -0.0014630081,
    -0.005984577,
    -0.0036811838,
    -0.0028639503,
    -0.0011995599,
    -0.00095318665,
    -0.0028582115,
    -0.0012381112,
    -0.0017360154,
    -0.0019300287,
    -0.004498487,
    -0.012224974,
    -0.0013122956,
    -0.0020394386,
    -0.0014584706,
    -0.0055465274,
    -0.025344547,
    -0.0065119066,
    -0.0006811084,
    -0.60149497,
    -0.029646821,
    -0.2979248,
    -0.021288779,
    -1.9261602,
    -9.9142904e-05,
    -0.00022826564,
    -0.0008696636,
    -0.0023156554,
    -0.0020099361,
    -0.004095018,
    -1.092782,
    -0.0013782469,
    -0.00096798356,
    -0.0007797653,
    -0.0025290197,
    -0.0069341133,
    -0.025695276,
    -0.0055438294,
    -0.0010398775,
    -0.5137963,
    -0.2937754,
    -0.018678423,
    -0.64903516,
    -0.00181376,
    -0.00060047174,
    -0.0076195863,
    -0.0077653043
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " open",
    " computer",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "computer",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " open",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " in",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " turn",
    " on",
    " computer",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "computer",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " use",
    " computer",
    "\n",
    " look",
    "at",
    "('",
    "computer",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.016373409
    },
    {
      " 0": -0.0057117846
    },
    {
      ":": -0.0015220435
    },
    {
      " walk": -0.37071964
    },
    {
      " computer": -0.47989634
    },
    {
      "\n": -0.031375416
    },
    {
      " find": -0.09257747
    },
    {
      "('": -0.0021367401
    },
    {
      "computer": -0.002364527
    },
    {
      "')": -0.0022701316
    },
    {
      "\n": -0.006930691
    },
    {
      " #": -0.0051067495
    },
    {
      " 1": -0.0028534904
    },
    {
      ":": -0.00060381147
    },
    {
      " turn": -0.9455043
    },
    {
      " computer": -0.601463
    },
    {
      "\n": -0.053443518
    },
    {
      " assert": -0.5897709
    },
    {
      "('": -0.0018449298
    },
    {
      "close": -0.023307383
    },
    {
      "'": -0.003394066
    },
    {
      " to": -0.001024066
    },
    {
      " '": -0.0033236137
    },
    {
      "computer": -0.002434373
    },
    {
      "')": -0.0074976115
    },
    {
      "\n": -0.0055816504
    },
    {
      " else": -0.0019386887
    },
    {
      ":": -0.0016721308
    },
    {
      " find": -0.00371014
    },
    {
      "('": -0.0015933217
    },
    {
      "computer": -0.00076377817
    },
    {
      "')": -0.0023617186
    },
    {
      "\n": -0.00817234
    },
    {
      " open": -0.06063837
    },
    {
      "('": -0.0031034413
    },
    {
      "computer": -0.0014907621
    },
    {
      "')": -0.0019480649
    },
    {
      "\n": -0.006735231
    },
    {
      " #": -0.03520161
    },
    {
      " 2": -0.0058618425
    },
    {
      ":": -0.00077356264
    },
    {
      " sit": -0.9213626
    },
    {
      " on": -0.868751
    },
    {
      " front": -0.34884933
    },
    {
      "\n": -0.0638484
    },
    {
      " find": -0.24342157
    },
    {
      "('": -0.0012781577
    },
    {
      "chair": -0.0023736092
    },
    {
      "')": -0.0018578888
    },
    {
      "\n": -0.0039065713
    },
    {
      " assert": -0.44235095
    },
    {
      "('": -0.00071474863
    },
    {
      "close": -0.004445321
    },
    {
      "'": -0.0019122912
    },
    {
      " to": -0.00062170305
    },
    {
      " '": -0.0014630081
    },
    {
      "chair": -0.005984577
    },
    {
      "')": -0.0036811838
    },
    {
      "\n": -0.0028639503
    },
    {
      " else": -0.0011995599
    },
    {
      ":": -0.00095318665
    },
    {
      " find": -0.0028582115
    },
    {
      "('": -0.0012381112
    },
    {
      "chair": -0.0017360154
    },
    {
      "')": -0.0019300287
    },
    {
      "\n": -0.004498487
    },
    {
      " sit": -0.012224974
    },
    {
      "('": -0.0013122956
    },
    {
      "chair": -0.0020394386
    },
    {
      "')": -0.0014584706
    },
    {
      "\n": -0.0055465274
    },
    {
      " #": -0.025344547
    },
    {
      " 3": -0.0065119066
    },
    {
      ":": -0.0006811084
    },
    {
      " turn": -0.60149497
    },
    {
      " on": -0.029646821
    },
    {
      " computer": -0.2979248
    },
    {
      "\n": -0.021288779
    },
    {
      " switch": -1.0648673
    },
    {
      "nt": -9.9142904e-05
    },
    {
      "o": -0.00022826564
    },
    {
      "('": -0.0008696636
    },
    {
      "computer": -0.0023156554
    },
    {
      "')": -0.0020099361
    },
    {
      "\n": -0.004095018
    },
    {
      " look": -0.9143029
    },
    {
      "on": -0.0013782469
    },
    {
      "('": -0.00096798356
    },
    {
      "computer": -0.0007797653
    },
    {
      "')": -0.0025290197
    },
    {
      "\n": -0.0069341133
    },
    {
      " #": -0.025695276
    },
    {
      " 4": -0.0055438294
    },
    {
      ":": -0.0010398775
    },
    {
      " use": -0.5137963
    },
    {
      " computer": -0.2937754
    },
    {
      "\n": -0.018678423
    },
    {
      " look": -0.64903516
    },
    {
      "at": -0.00181376
    },
    {
      "('": -0.00060047174
    },
    {
      "computer": -0.0076195863
    },
    {
      "')": -0.0077653043
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.5696799755096436
[(" # 0: find sink\n find('sink')\n # 1: turn on the faucet\n assert('close' to 'faucet')\n else: find('faucet')\n turnon('faucet')\n # 2: wet face\n putin('face', 'faucet')\n # 3: put soap on hands\n grab('soap')\n puton('hands', 'soap')\n # 4: wash face\n wash('face')\n # 5: turn off the faucet\n assert('close' to 'faucet')\n else: find('faucet')\n turnoff('faucet')\n # 6: dry face\n wipe('face')\n # 7: Done\n print('Done washing face')", <OpenAIObject at 0x7fdf9810fd10> JSON: {
  "text_offset": [
    3373,
    3375,
    3377,
    3378,
    3383,
    3388,
    3389,
    3394,
    3396,
    3397,
    3400,
    3402,
    3403,
    3405,
    3407,
    3408,
    3413,
    3416,
    3420,
    3422,
    3425,
    3427,
    3428,
    3435,
    3437,
    3442,
    3443,
    3446,
    3448,
    3449,
    3452,
    3454,
    3456,
    3457,
    3462,
    3463,
    3468,
    3470,
    3471,
    3474,
    3476,
    3478,
    3479,
    3484,
    3486,
    3488,
    3489,
    3492,
    3494,
    3496,
    3497,
    3499,
    3501,
    3502,
    3506,
    3511,
    3512,
    3516,
    3518,
    3520,
    3524,
    3526,
    3528,
    3529,
    3532,
    3534,
    3536,
    3537,
    3539,
    3541,
    3542,
    3546,
    3551,
    3554,
    3560,
    3561,
    3566,
    3568,
    3570,
    3572,
    3574,
    3575,
    3579,
    3581,
    3583,
    3588,
    3590,
    3592,
    3594,
    3596,
    3598,
    3599,
    3601,
    3603,
    3604,
    3609,
    3614,
    3615,
    3620,
    3622,
    3626,
    3628,
    3629,
    3631,
    3633,
    3634,
    3639,
    3643,
    3647,
    3649,
    3652,
    3654,
    3655,
    3662,
    3664,
    3669,
    3670,
    3673,
    3675,
    3676,
    3679,
    3681,
    3683,
    3684,
    3689,
    3690,
    3695,
    3697,
    3698,
    3701,
    3703,
    3705,
    3706,
    3711,
    3714,
    3716,
    3717,
    3720,
    3722,
    3724,
    3725,
    3727,
    3729,
    3730,
    3734,
    3739,
    3740,
    3745,
    3747,
    3751,
    3753,
    3754,
    3756,
    3758,
    3759,
    3764,
    3765,
    3771,
    3773,
    3777,
    3785,
    3790
  ],
  "token_logprobs": [
    -0.016204381,
    -0.0057780286,
    -0.0015038374,
    -0.76891464,
    -0.57593536,
    -0.030540612,
    -0.20296001,
    -0.001965202,
    -0.0012163299,
    -0.00012882493,
    -0.0018790873,
    -0.0069052465,
    -0.009810633,
    -0.0029335925,
    -0.0006129933,
    -0.65065044,
    -0.13938826,
    -1.1949874,
    -0.4427925,
    -0.0017262816,
    -0.002006173,
    -0.030946646,
    -0.62982476,
    -0.0019414352,
    -0.016412672,
    -0.0042917025,
    -0.00053993624,
    -0.0018150732,
    -0.17926444,
    -0.0005615252,
    -0.00054399215,
    -0.00973756,
    -0.0071381987,
    -0.0017287907,
    -0.0014880174,
    -0.0048067644,
    -0.0020143553,
    -0.0018695327,
    -0.001247063,
    -0.00021729656,
    -0.004006204,
    -0.008100829,
    -1.5100578,
    -0.020519461,
    -0.0025410317,
    -0.0009124398,
    -0.00017317903,
    -0.00025264802,
    -0.0021284379,
    -0.005820833,
    -0.036782797,
    -0.0066262013,
    -0.0005061223,
    -2.1798267,
    -0.69915557,
    -0.26858556,
    -4.039339,
    -0.5860977,
    -0.0050964453,
    -0.2363871,
    -0.5328053,
    -0.0045239925,
    -0.8656622,
    -0.0008127541,
    -0.00033629782,
    -0.016703121,
    -0.011312958,
    -0.123394266,
    -0.0061464286,
    -0.0012127497,
    -2.5174055,
    -0.6499083,
    -0.9688444,
    -2.2552004,
    -0.027115218,
    -0.5534218,
    -0.0020418295,
    -0.0067687146,
    -0.00039664176,
    -0.0033254083,
    -0.0052174088,
    -0.69121194,
    -0.14089534,
    -0.00083810807,
    -1.2647679,
    -0.053943582,
    -0.0023419422,
    -0.00045072404,
    -0.0002476394,
    -0.0022229964,
    -0.007945935,
    -0.038772136,
    -0.006421381,
    -0.00086685986,
    -0.4709141,
    -0.3341844,
    -0.11434478,
    -0.26090598,
    -0.0013681601,
    -0.01862219,
    -0.007353854,
    -0.010037823,
    -0.0734178,
    -0.0043943725,
    -0.0015953511,
    -0.7394739,
    -0.033216234,
    -1.0385531,
    -0.014078581,
    -0.00076604687,
    -0.0008741973,
    -0.018130014,
    -2.5620809,
    -0.0014094636,
    -0.03784766,
    -0.0024650234,
    -0.00043020982,
    -0.0014336386,
    -0.002486297,
    -0.00054053415,
    -0.00026218753,
    -0.0033635034,
    -0.0041557676,
    -0.0019209511,
    -0.00097245903,
    -0.0038806016,
    -0.00086196855,
    -0.000276853,
    -0.00041518486,
    -0.0003605084,
    -0.0014560234,
    -0.0068123424,
    -0.12666799,
    -0.0036247706,
    -0.00065599853,
    -0.0005575876,
    -0.0013506113,
    -0.0003708805,
    -0.0020317333,
    -0.033990446,
    -0.0064940276,
    -0.0035487383,
    -0.0013239939,
    -0.75189227,
    -0.052740734,
    -0.050818935,
    -0.27434766,
    -0.0012938529,
    -0.0025985783,
    -0.011726706,
    -0.0946033,
    -0.023934511,
    -0.009799076,
    -0.002035976,
    -0.62006783,
    -0.96937835,
    -2.7461643,
    -0.19600388,
    -0.62305033,
    -0.62168175,
    -0.0328729,
    -0.74242616
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " turn",
    " on",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " turn",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " wet",
    " face",
    "\n",
    " put",
    "in",
    "('",
    "face",
    "',",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " put",
    " soap",
    " on",
    " hands",
    "\n",
    " grab",
    "('",
    "so",
    "ap",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "hands",
    "',",
    " '",
    "so",
    "ap",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wash",
    " face",
    "\n",
    " wash",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " off",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " turn",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " dry",
    " face",
    "\n",
    " wipe",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done",
    "\n",
    " print",
    "('",
    "Done",
    " washing",
    " face",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.016204381
    },
    {
      " 0": -0.0057780286
    },
    {
      ":": -0.0015038374
    },
    {
      " find": -0.76891464
    },
    {
      " sink": -0.57593536
    },
    {
      "\n": -0.030540612
    },
    {
      " find": -0.20296001
    },
    {
      "('": -0.001965202
    },
    {
      "s": -0.0012163299
    },
    {
      "ink": -0.00012882493
    },
    {
      "')": -0.0018790873
    },
    {
      "\n": -0.0069052465
    },
    {
      " #": -0.009810633
    },
    {
      " 1": -0.0029335925
    },
    {
      ":": -0.0006129933
    },
    {
      " turn": -0.65065044
    },
    {
      " on": -0.13938826
    },
    {
      " f": -0.7656689
    },
    {
      " f": -0.4427925
    },
    {
      "auc": -0.0017262816
    },
    {
      "et": -0.002006173
    },
    {
      "\n": -0.030946646
    },
    {
      " assert": -0.62982476
    },
    {
      "('": -0.0019414352
    },
    {
      "close": -0.016412672
    },
    {
      "'": -0.0042917025
    },
    {
      " to": -0.00053993624
    },
    {
      " '": -0.0018150732
    },
    {
      "f": -0.17926444
    },
    {
      "auc": -0.0005615252
    },
    {
      "et": -0.00054399215
    },
    {
      "')": -0.00973756
    },
    {
      "\n": -0.0071381987
    },
    {
      " else": -0.0017287907
    },
    {
      ":": -0.0014880174
    },
    {
      " find": -0.0048067644
    },
    {
      "('": -0.0020143553
    },
    {
      "f": -0.0018695327
    },
    {
      "auc": -0.001247063
    },
    {
      "et": -0.00021729656
    },
    {
      "')": -0.004006204
    },
    {
      "\n": -0.008100829
    },
    {
      " switch": -0.73749095
    },
    {
      "on": -0.020519461
    },
    {
      "('": -0.0025410317
    },
    {
      "f": -0.0009124398
    },
    {
      "auc": -0.00017317903
    },
    {
      "et": -0.00025264802
    },
    {
      "')": -0.0021284379
    },
    {
      "\n": -0.005820833
    },
    {
      " #": -0.036782797
    },
    {
      " 2": -0.0066262013
    },
    {
      ":": -0.0005061223
    },
    {
      " pour": -1.3491259
    },
    {
      " face": -0.69915557
    },
    {
      "\n": -0.26858556
    },
    {
      " assert": -0.74301934
    },
    {
      "in": -0.5860977
    },
    {
      "('": -0.0050964453
    },
    {
      "face": -0.2363871
    },
    {
      "',": -0.5328053
    },
    {
      " '": -0.0045239925
    },
    {
      "water": -0.69499844
    },
    {
      "auc": -0.0008127541
    },
    {
      "et": -0.00033629782
    },
    {
      "')": -0.016703121
    },
    {
      "\n": -0.011312958
    },
    {
      " #": -0.123394266
    },
    {
      " 3": -0.0061464286
    },
    {
      ":": -0.0012127497
    },
    {
      " wash": -1.3026296
    },
    {
      " soap": -0.6499083
    },
    {
      "\n": -0.613636
    },
    {
      " face": -0.1977415
    },
    {
      "\n": -0.027115218
    },
    {
      " grab": -0.5534218
    },
    {
      "('": -0.0020418295
    },
    {
      "so": -0.0067687146
    },
    {
      "ap": -0.00039664176
    },
    {
      "')": -0.0033254083
    },
    {
      "\n": -0.0052174088
    },
    {
      " put": -0.69121194
    },
    {
      "on": -0.14089534
    },
    {
      "('": -0.00083810807
    },
    {
      "so": -0.37745023
    },
    {
      "',": -0.053943582
    },
    {
      " '": -0.0023419422
    },
    {
      "so": -0.00045072404
    },
    {
      "ap": -0.0002476394
    },
    {
      "')": -0.0022229964
    },
    {
      "\n": -0.007945935
    },
    {
      " #": -0.038772136
    },
    {
      " 4": -0.006421381
    },
    {
      ":": -0.00086685986
    },
    {
      " wash": -0.4709141
    },
    {
      " face": -0.3341844
    },
    {
      "\n": -0.11434478
    },
    {
      " wash": -0.26090598
    },
    {
      "('": -0.0013681601
    },
    {
      "face": -0.01862219
    },
    {
      "')": -0.007353854
    },
    {
      "\n": -0.010037823
    },
    {
      " #": -0.0734178
    },
    {
      " 5": -0.0043943725
    },
    {
      ":": -0.0015953511
    },
    {
      " turn": -0.7394739
    },
    {
      " off": -0.033216234
    },
    {
      " f": -0.45987314
    },
    {
      " f": -0.014078581
    },
    {
      "auc": -0.00076604687
    },
    {
      "et": -0.0008741973
    },
    {
      "\n": -0.018130014
    },
    {
      " turn": -0.2641473
    },
    {
      "('": -0.0014094636
    },
    {
      "close": -0.03784766
    },
    {
      "'": -0.0024650234
    },
    {
      " to": -0.00043020982
    },
    {
      " '": -0.0014336386
    },
    {
      "f": -0.002486297
    },
    {
      "auc": -0.00054053415
    },
    {
      "et": -0.00026218753
    },
    {
      "')": -0.0033635034
    },
    {
      "\n": -0.0041557676
    },
    {
      " else": -0.0019209511
    },
    {
      ":": -0.00097245903
    },
    {
      " find": -0.0038806016
    },
    {
      "('": -0.00086196855
    },
    {
      "f": -0.000276853
    },
    {
      "auc": -0.00041518486
    },
    {
      "et": -0.0003605084
    },
    {
      "')": -0.0014560234
    },
    {
      "\n": -0.0068123424
    },
    {
      " turn": -0.12666799
    },
    {
      "off": -0.0036247706
    },
    {
      "('": -0.00065599853
    },
    {
      "f": -0.0005575876
    },
    {
      "auc": -0.0013506113
    },
    {
      "et": -0.0003708805
    },
    {
      "')": -0.0020317333
    },
    {
      "\n": -0.033990446
    },
    {
      " #": -0.0064940276
    },
    {
      " 6": -0.0035487383
    },
    {
      ":": -0.0013239939
    },
    {
      " dry": -0.75189227
    },
    {
      " face": -0.052740734
    },
    {
      "\n": -0.050818935
    },
    {
      " wipe": -0.27434766
    },
    {
      "('": -0.0012938529
    },
    {
      "face": -0.0025985783
    },
    {
      "')": -0.011726706
    },
    {
      "\n": -0.0946033
    },
    {
      " #": -0.023934511
    },
    {
      " 7": -0.009799076
    },
    {
      ":": -0.002035976
    },
    {
      " Done": -0.62006783
    },
    {
      "<|endoftext|>": -0.55080116
    },
    {
      "def": -0.69619566
    },
    {
      "('": -0.19600388
    },
    {
      "Done": -0.62305033
    },
    {
      " washing": -0.62168175
    },
    {
      " face": -0.0328729
    },
    {
      "')": -0.74242616
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.402760982513428
[(" # 0: find the newspaper\n find('newspaper')\n # 1: grab the newspaper\n assert('close' to 'newspaper')\n else: find('newspaper')\n grab('newspaper')\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n turnto('newspaper')\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n # 2: sit down and read the newspaper\n find('chair')\n sit('chair')\n # 3: read the newspaper\n read('newspaper')\n # 4: put back the newspaper\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n putback('newspaper')\n # 5: Done", <OpenAIObject at 0x7fdf980fd040> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3392,
    3402,
    3403,
    3408,
    3410,
    3413,
    3415,
    3419,
    3421,
    3422,
    3424,
    3426,
    3427,
    3432,
    3436,
    3446,
    3447,
    3454,
    3456,
    3461,
    3462,
    3465,
    3467,
    3470,
    3472,
    3476,
    3478,
    3479,
    3484,
    3485,
    3490,
    3492,
    3495,
    3497,
    3501,
    3503,
    3504,
    3509,
    3511,
    3514,
    3516,
    3520,
    3522,
    3523,
    3530,
    3532,
    3535,
    3537,
    3541,
    3542,
    3545,
    3547,
    3552,
    3554,
    3555,
    3560,
    3561,
    3566,
    3568,
    3571,
    3573,
    3577,
    3579,
    3580,
    3584,
    3586,
    3587,
    3589,
    3592,
    3594,
    3598,
    3600,
    3601,
    3608,
    3610,
    3613,
    3615,
    3619,
    3620,
    3623,
    3625,
    3630,
    3632,
    3633,
    3638,
    3639,
    3644,
    3646,
    3649,
    3651,
    3655,
    3657,
    3658,
    3660,
    3662,
    3663,
    3667,
    3672,
    3676,
    3681,
    3685,
    3695,
    3696,
    3701,
    3703,
    3708,
    3710,
    3711,
    3715,
    3717,
    3722,
    3724,
    3725,
    3727,
    3729,
    3730,
    3735,
    3739,
    3749,
    3750,
    3755,
    3757,
    3760,
    3762,
    3766,
    3768,
    3769,
    3771,
    3773,
    3774,
    3778,
    3783,
    3787,
    3797,
    3798,
    3805,
    3807,
    3810,
    3812,
    3816,
    3817,
    3820,
    3822,
    3827,
    3829,
    3830,
    3835,
    3836,
    3841,
    3843,
    3846,
    3848,
    3852,
    3854,
    3855,
    3859,
    3863,
    3865,
    3868,
    3870,
    3874,
    3876,
    3877,
    3879,
    3881,
    3882
  ],
  "token_logprobs": [
    -0.01763899,
    -0.007705657,
    -0.0017840217,
    -0.23926897,
    -1.6277846,
    -0.028283674,
    -0.027300004,
    -0.024103321,
    -0.0023403887,
    -0.0023753413,
    -0.00037386353,
    -0.0009685204,
    -0.002623321,
    -0.008193075,
    -0.0053748847,
    -0.0019924368,
    -0.00038364052,
    -0.16163708,
    -0.14161772,
    -0.009319102,
    -0.014840294,
    -0.7895025,
    -0.0016244277,
    -0.0041618715,
    -0.0022750904,
    -0.0004933604,
    -0.0012684878,
    -0.0030139391,
    -0.00029545708,
    -0.0023360278,
    -0.0058232914,
    -0.006497928,
    -0.0017255673,
    -0.0013169494,
    -0.0029902644,
    -0.0012853779,
    -0.0007041307,
    -0.00041291988,
    -0.0003816121,
    -0.0020714551,
    -0.006118245,
    -0.002399717,
    -0.0007281695,
    -0.00049073686,
    -0.00072166836,
    -6.778445e-05,
    -0.0013375415,
    -0.0043553393,
    -0.5509443,
    -0.0009841517,
    -0.0061087687,
    -0.00042079046,
    -0.0005640305,
    -0.0016738017,
    -0.011119831,
    -0.002617463,
    -0.004143916,
    -0.019804113,
    -0.003287254,
    -0.0121173365,
    -0.0017825883,
    -0.0028054311,
    -0.0012085127,
    -0.0005689208,
    -0.000167457,
    -0.0010388028,
    -0.0017108173,
    -0.004162469,
    -0.6258765,
    -3.7028603e-05,
    -0.00017282138,
    -0.0003566928,
    -0.0007215482,
    -0.00013645618,
    -0.00047529323,
    -0.0007998683,
    -0.0027739312,
    -0.3917556,
    -0.0003264598,
    -0.0019734432,
    -0.00044547606,
    -0.00025383916,
    -0.00065468537,
    -0.000968343,
    -0.0006711474,
    -0.00072733505,
    -0.0012055287,
    -0.0012489733,
    -0.0028741716,
    -0.0007470167,
    -0.0011053944,
    -0.00053516414,
    -0.00023559744,
    -0.00035168228,
    -0.001072399,
    -0.00079002563,
    -0.0024269642,
    -2.6214583,
    -0.007247462,
    -0.0009466245,
    -2.026877,
    -1.0716846,
    -1.1497366,
    -0.09103242,
    -0.55493563,
    -0.017489338,
    -0.012634936,
    -0.67748743,
    -0.0016302774,
    -0.03560825,
    -0.0022060913,
    -0.0065119066,
    -1.2360637,
    -0.0017437781,
    -0.00068468647,
    -0.0015457426,
    -0.0045002825,
    -2.1808534,
    -0.0108124325,
    -0.0010105823,
    -0.63347775,
    -0.06355619,
    -0.01069308,
    -0.010089903,
    -0.6120558,
    -0.0025274681,
    -0.0007913397,
    -0.0001668619,
    -0.00056629634,
    -0.0017584069,
    -0.040429644,
    -0.118931375,
    -0.0065864837,
    -0.0013594439,
    -0.4890144,
    -2.5715318,
    -0.053236924,
    -0.007230411,
    -0.023143953,
    -0.6513829,
    -0.001105035,
    -0.1328585,
    -0.00040164858,
    -0.00026814893,
    -0.0015361899,
    -0.0031687957,
    -0.0018219413,
    -0.0022379905,
    -0.004203892,
    -0.0021626046,
    -0.002049595,
    -0.0010919089,
    -0.0042459103,
    -0.0007405738,
    -0.000346913,
    -0.0006028587,
    -0.00051900244,
    -0.0016655612,
    -0.003964733,
    -0.021949314,
    -0.83200204,
    -0.0034298294,
    -0.0015376232,
    -0.0007761871,
    -0.0017816329,
    -0.0052618706,
    -1.3688211,
    -0.09740606,
    -0.009866792,
    -0.0023111152,
    -0.25983322
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " the",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " the",
    " newspaper",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " down",
    " and",
    " read",
    " the",
    " newspaper",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " read",
    " the",
    " newspaper",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " back",
    " the",
    " newspaper",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " put",
    "back",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01763899
    },
    {
      " 0": -0.007705657
    },
    {
      ":": -0.0017840217
    },
    {
      " find": -0.23926897
    },
    {
      " newspaper": -0.29943374
    },
    {
      " newspaper": -0.028283674
    },
    {
      "\n": -0.027300004
    },
    {
      " find": -0.024103321
    },
    {
      "('": -0.0023403887
    },
    {
      "new": -0.0023753413
    },
    {
      "sp": -0.00037386353
    },
    {
      "aper": -0.0009685204
    },
    {
      "')": -0.002623321
    },
    {
      "\n": -0.008193075
    },
    {
      " #": -0.0053748847
    },
    {
      " 1": -0.0019924368
    },
    {
      ":": -0.00038364052
    },
    {
      " grab": -0.16163708
    },
    {
      " the": -0.14161772
    },
    {
      " newspaper": -0.009319102
    },
    {
      "\n": -0.014840294
    },
    {
      " grab": -0.61678344
    },
    {
      "('": -0.0016244277
    },
    {
      "close": -0.0041618715
    },
    {
      "'": -0.0022750904
    },
    {
      " to": -0.0004933604
    },
    {
      " '": -0.0012684878
    },
    {
      "new": -0.0030139391
    },
    {
      "sp": -0.00029545708
    },
    {
      "aper": -0.0023360278
    },
    {
      "')": -0.0058232914
    },
    {
      "\n": -0.006497928
    },
    {
      " else": -0.0017255673
    },
    {
      ":": -0.0013169494
    },
    {
      " find": -0.0029902644
    },
    {
      "('": -0.0012853779
    },
    {
      "new": -0.0007041307
    },
    {
      "sp": -0.00041291988
    },
    {
      "aper": -0.0003816121
    },
    {
      "')": -0.0020714551
    },
    {
      "\n": -0.006118245
    },
    {
      " grab": -0.002399717
    },
    {
      "('": -0.0007281695
    },
    {
      "new": -0.00049073686
    },
    {
      "sp": -0.00072166836
    },
    {
      "aper": -6.778445e-05
    },
    {
      "')": -0.0013375415
    },
    {
      "\n": -0.0043553393
    },
    {
      " assert": -0.5509443
    },
    {
      "('": -0.0009841517
    },
    {
      "new": -0.0061087687
    },
    {
      "sp": -0.00042079046
    },
    {
      "aper": -0.0005640305
    },
    {
      "'": -0.0016738017
    },
    {
      " in": -0.011119831
    },
    {
      " '": -0.002617463
    },
    {
      "hands": -0.004143916
    },
    {
      "')": -0.019804113
    },
    {
      "\n": -0.003287254
    },
    {
      " else": -0.0121173365
    },
    {
      ":": -0.0017825883
    },
    {
      " grab": -0.0028054311
    },
    {
      "('": -0.0012085127
    },
    {
      "new": -0.0005689208
    },
    {
      "sp": -0.000167457
    },
    {
      "aper": -0.0010388028
    },
    {
      "')": -0.0017108173
    },
    {
      "\n": -0.004162469
    },
    {
      " tur": -0.6258765
    },
    {
      "nt": -3.7028603e-05
    },
    {
      "o": -0.00017282138
    },
    {
      "('": -0.0003566928
    },
    {
      "new": -0.0007215482
    },
    {
      "sp": -0.00013645618
    },
    {
      "aper": -0.00047529323
    },
    {
      "')": -0.0007998683
    },
    {
      "\n": -0.0027739312
    },
    {
      " assert": -0.3917556
    },
    {
      "('": -0.0003264598
    },
    {
      "new": -0.0019734432
    },
    {
      "sp": -0.00044547606
    },
    {
      "aper": -0.00025383916
    },
    {
      "'": -0.00065468537
    },
    {
      " in": -0.000968343
    },
    {
      " '": -0.0006711474
    },
    {
      "hands": -0.00072733505
    },
    {
      "')": -0.0012055287
    },
    {
      "\n": -0.0012489733
    },
    {
      " else": -0.0028741716
    },
    {
      ":": -0.0007470167
    },
    {
      " grab": -0.0011053944
    },
    {
      "('": -0.00053516414
    },
    {
      "new": -0.00023559744
    },
    {
      "sp": -0.00035168228
    },
    {
      "aper": -0.001072399
    },
    {
      "')": -0.00079002563
    },
    {
      "\n": -0.0024269642
    },
    {
      " point": -0.08431078
    },
    {
      " 2": -0.007247462
    },
    {
      ":": -0.0009466245
    },
    {
      " read": -0.61951685
    },
    {
      " on": -0.86970305
    },
    {
      "\n": -0.67098933
    },
    {
      " read": -0.09103242
    },
    {
      " the": -0.55493563
    },
    {
      " newspaper": -0.017489338
    },
    {
      "\n": -0.012634936
    },
    {
      " find": -0.67748743
    },
    {
      "('": -0.0016302774
    },
    {
      "chair": -0.03560825
    },
    {
      "')": -0.0022060913
    },
    {
      "\n": -0.0065119066
    },
    {
      " assert": -0.39710203
    },
    {
      "('": -0.0017437781
    },
    {
      "chair": -0.00068468647
    },
    {
      "')": -0.0015457426
    },
    {
      "\n": -0.0045002825
    },
    {
      " read": -0.9925541
    },
    {
      " 3": -0.0108124325
    },
    {
      ":": -0.0010105823
    },
    {
      " read": -0.63347775
    },
    {
      " the": -0.06355619
    },
    {
      " newspaper": -0.01069308
    },
    {
      "\n": -0.010089903
    },
    {
      " read": -0.6120558
    },
    {
      "('": -0.0025274681
    },
    {
      "new": -0.0007913397
    },
    {
      "sp": -0.0001668619
    },
    {
      "aper": -0.00056629634
    },
    {
      "')": -0.0017584069
    },
    {
      "\n": -0.040429644
    },
    {
      " #": -0.118931375
    },
    {
      " 4": -0.0065864837
    },
    {
      ":": -0.0013594439
    },
    {
      " put": -0.4890144
    },
    {
      " the": -0.337154
    },
    {
      " the": -0.053236924
    },
    {
      " newspaper": -0.007230411
    },
    {
      "\n": -0.023143953
    },
    {
      " assert": -0.6513829
    },
    {
      "('": -0.001105035
    },
    {
      "new": -0.1328585
    },
    {
      "sp": -0.00040164858
    },
    {
      "aper": -0.00026814893
    },
    {
      "'": -0.0015361899
    },
    {
      " in": -0.0031687957
    },
    {
      " '": -0.0018219413
    },
    {
      "hands": -0.0022379905
    },
    {
      "')": -0.004203892
    },
    {
      "\n": -0.0021626046
    },
    {
      " else": -0.002049595
    },
    {
      ":": -0.0010919089
    },
    {
      " grab": -0.0042459103
    },
    {
      "('": -0.0007405738
    },
    {
      "new": -0.000346913
    },
    {
      "sp": -0.0006028587
    },
    {
      "aper": -0.00051900244
    },
    {
      "')": -0.0016655612
    },
    {
      "\n": -0.003964733
    },
    {
      " put": -0.021949314
    },
    {
      "obj": -0.5896296
    },
    {
      "('": -0.0034298294
    },
    {
      "new": -0.0015376232
    },
    {
      "sp": -0.0007761871
    },
    {
      "aper": -0.0017816329
    },
    {
      "')": -0.0052618706
    },
    {
      "<|endoftext|>": -0.31094828
    },
    {
      " #": -0.09740606
    },
    {
      " 5": -0.009866792
    },
    {
      ":": -0.0023111152
    },
    {
      " Done": -0.25983322
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.0778512954711914
[(" # 0: find cup\n find('cup')\n # 1: pick up cup\n grab('cup')\n # 2: pour liquid into cup\n pour('liquid')\n # 3: drink the liquid\n assert('close' to 'cup')\n else: find('cup')\n drink('cup')", <OpenAIObject at 0x7fdfb005c3b0> JSON: {
  "text_offset": [
    3369,
    3371,
    3373,
    3374,
    3379,
    3383,
    3384,
    3389,
    3391,
    3394,
    3396,
    3397,
    3399,
    3401,
    3402,
    3407,
    3410,
    3414,
    3415,
    3420,
    3422,
    3425,
    3427,
    3428,
    3430,
    3432,
    3433,
    3438,
    3445,
    3450,
    3454,
    3455,
    3460,
    3462,
    3468,
    3470,
    3471,
    3473,
    3475,
    3476,
    3482,
    3486,
    3493,
    3494,
    3501,
    3503,
    3508,
    3509,
    3512,
    3514,
    3517,
    3519,
    3520,
    3525,
    3526,
    3531,
    3533,
    3536,
    3538,
    3539,
    3545,
    3547,
    3550
  ],
  "token_logprobs": [
    -0.092419714,
    -0.03459538,
    -0.004282602,
    -0.18120395,
    -0.81336457,
    -0.064923584,
    -0.019704536,
    -0.004156486,
    -0.00052484934,
    -0.0035873232,
    -0.011076919,
    -0.005733607,
    -0.003870728,
    -0.0010142815,
    -3.7915397,
    -0.09442131,
    -0.22770433,
    -0.02401888,
    -0.5323219,
    -0.0013821865,
    -0.0001821234,
    -0.0017889787,
    -0.0056847516,
    -0.6260959,
    -0.0069624437,
    -0.0011295627,
    -1.4908574,
    -0.6061083,
    -0.6201934,
    -0.08189449,
    -0.015242125,
    -0.3851906,
    -0.0075472766,
    -0.056401674,
    -0.47629562,
    -0.016462296,
    -0.03900216,
    -0.0040358896,
    -0.00074486993,
    -0.24322087,
    -1.7821534,
    -0.098294884,
    -0.056675527,
    -1.7198604,
    -0.0033012494,
    -0.57218766,
    -0.0035803241,
    -0.0011136893,
    -0.007938123,
    -0.12051259,
    -0.011603203,
    -0.0045994394,
    -0.002043979,
    -0.0020565812,
    -0.14145441,
    -0.0020757553,
    -0.00053969875,
    -0.005450991,
    -0.006528826,
    -0.51959175,
    -0.008058829,
    -0.45849442,
    -0.0017658119
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " cup",
    "\n",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " pick",
    " up",
    " cup",
    "\n",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pour",
    " liquid",
    " into",
    " cup",
    "\n",
    " pour",
    "('",
    "liquid",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " drink",
    " the",
    " liquid",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cup",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " drink",
    "('",
    "cup",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.092419714
    },
    {
      " 0": -0.03459538
    },
    {
      ":": -0.004282602
    },
    {
      " find": -0.18120395
    },
    {
      " cup": -0.81336457
    },
    {
      "\n": -0.064923584
    },
    {
      " find": -0.019704536
    },
    {
      "('": -0.004156486
    },
    {
      "cup": -0.00052484934
    },
    {
      "')": -0.0035873232
    },
    {
      "\n": -0.011076919
    },
    {
      " #": -0.005733607
    },
    {
      " 1": -0.003870728
    },
    {
      ":": -0.0010142815
    },
    {
      " grab": -0.09454604
    },
    {
      " up": -0.09442131
    },
    {
      " cup": -0.22770433
    },
    {
      "\n": -0.02401888
    },
    {
      " grab": -0.5323219
    },
    {
      "('": -0.0013821865
    },
    {
      "cup": -0.0001821234
    },
    {
      "')": -0.0017889787
    },
    {
      "\n": -0.0056847516
    },
    {
      " #": -0.6260959
    },
    {
      " 2": -0.0069624437
    },
    {
      ":": -0.0011295627
    },
    {
      " fill": -0.9083845
    },
    {
      " liquid": -0.6061083
    },
    {
      " into": -0.6201934
    },
    {
      " cup": -0.08189449
    },
    {
      "\n": -0.015242125
    },
    {
      " pour": -0.3851906
    },
    {
      "('": -0.0075472766
    },
    {
      "liquid": -0.056401674
    },
    {
      "')": -0.47629562
    },
    {
      "\n": -0.016462296
    },
    {
      " #": -0.03900216
    },
    {
      " 3": -0.0040358896
    },
    {
      ":": -0.00074486993
    },
    {
      " drink": -0.24322087
    },
    {
      " from": -1.1583178
    },
    {
      " liquid": -0.098294884
    },
    {
      "\n": -0.056675527
    },
    {
      " tur": -0.9678549
    },
    {
      "('": -0.0033012494
    },
    {
      "close": -0.57218766
    },
    {
      "'": -0.0035803241
    },
    {
      " to": -0.0011136893
    },
    {
      " '": -0.007938123
    },
    {
      "cup": -0.12051259
    },
    {
      "')": -0.011603203
    },
    {
      "\n": -0.0045994394
    },
    {
      " else": -0.002043979
    },
    {
      ":": -0.0020565812
    },
    {
      " find": -0.14145441
    },
    {
      "('": -0.0020757553
    },
    {
      "cup": -0.00053969875
    },
    {
      "')": -0.005450991
    },
    {
      "\n": -0.006528826
    },
    {
      " drink": -0.51959175
    },
    {
      "('": -0.008058829
    },
    {
      "cup": -0.45849442
    },
    {
      "')": -0.0017658119
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 10.274439811706543
[(" # 0: walk in to bathroom\n walk('bathroom')\n # 1: find bathroom sink\n find('bathroom_sink')\n # 2: find sponge\n find('sponge')\n # 3: grab sponge\n assert('close' to 'sponge')\n else: find('sponge')\n grab('sponge')\n assert('sponge' in 'hands')\n else: grab('sponge')\n turnto('sponge')\n lookat('sponge')\n # 4: wipe sink with sponge\n assert('sponge' in 'hands')\n else: grab('sponge')\n wipe('sponge')\n turnto('sponge')\n lookat('sponge')\n # 5: put sponge back\n assert('sponge' in 'hands')\n else: grab('sponge')\n putobjback('sponge')\n # 6: Done\ndef pick_up_clothes():\n # 0: walk in to bedroom\n walk('bedroom')\n # 1: find laundry basket\n find('laundry_basket')\n # 2: find clothes in the basket\n find('clothes_in_basket')\n # 3: grab clothes\n assert('close' to 'clothes_in_basket')\n else: find('clothes_in_basket')\n grab('clothes_in_basket')\n assert('clothes_in_basket' in 'hands')\n else: grab('clothes_in_basket')\n turnto('clothes_in_basket')\n lookat('clothes_in_basket')\n # 4: put clothes in closet\n assert('clothes_in_basket' in 'hands')\n else: grab('clothes_in_basket')\n putin('clothes_in_basket')\n # 5: Done", <OpenAIObject at 0x7fdfb0082ea0> JSON: {
  "text_offset": [
    3378,
    3380,
    3382,
    3383,
    3388,
    3391,
    3394,
    3403,
    3404,
    3409,
    3411,
    3415,
    3419,
    3421,
    3422,
    3424,
    3426,
    3427,
    3432,
    3441,
    3446,
    3447,
    3452,
    3454,
    3458,
    3462,
    3463,
    3464,
    3467,
    3469,
    3470,
    3472,
    3474,
    3475,
    3480,
    3487,
    3488,
    3493,
    3495,
    3497,
    3501,
    3503,
    3504,
    3506,
    3508,
    3509,
    3514,
    3521,
    3522,
    3529,
    3531,
    3536,
    3537,
    3540,
    3542,
    3544,
    3548,
    3550,
    3551,
    3556,
    3557,
    3562,
    3564,
    3566,
    3570,
    3572,
    3573,
    3578,
    3580,
    3582,
    3586,
    3588,
    3589,
    3596,
    3598,
    3600,
    3604,
    3605,
    3608,
    3610,
    3615,
    3617,
    3618,
    3623,
    3624,
    3629,
    3631,
    3633,
    3637,
    3639,
    3640,
    3644,
    3646,
    3647,
    3649,
    3651,
    3655,
    3657,
    3658,
    3663,
    3665,
    3667,
    3669,
    3673,
    3675,
    3676,
    3678,
    3680,
    3681,
    3686,
    3691,
    3696,
    3703,
    3704,
    3711,
    3713,
    3715,
    3719,
    3720,
    3723,
    3725,
    3730,
    3732,
    3733,
    3738,
    3739,
    3744,
    3746,
    3748,
    3752,
    3754,
    3755,
    3760,
    3762,
    3764,
    3768,
    3770,
    3771,
    3775,
    3777,
    3778,
    3780,
    3782,
    3786,
    3788,
    3789,
    3794,
    3796,
    3798,
    3800,
    3804,
    3806,
    3807,
    3809,
    3811,
    3812,
    3816,
    3823,
    3828,
    3829,
    3836,
    3838,
    3840,
    3844,
    3845,
    3848,
    3850,
    3855,
    3857,
    3858,
    3863,
    3864,
    3869,
    3871,
    3873,
    3877,
    3879,
    3880,
    3884,
    3887,
    3891,
    3893,
    3895,
    3899,
    3901,
    3902,
    3904,
    3906,
    3907,
    3912,
    3913,
    3916,
    3921,
    3922,
    3924,
    3925,
    3927,
    3932,
    3935,
    3936,
    3938,
    3940,
    3941,
    3946,
    3949,
    3952,
    3960,
    3961,
    3966,
    3968,
    3975,
    3977,
    3978,
    3980,
    3982,
    3983,
    3988,
    3996,
    4003,
    4004,
    4009,
    4011,
    4012,
    4016,
    4018,
    4019,
    4020,
    4025,
    4027,
    4028,
    4030,
    4032,
    4033,
    4038,
    4046,
    4049,
    4053,
    4060,
    4061,
    4066,
    4068,
    4070,
    4075,
    4076,
    4078,
    4079,
    4080,
    4085,
    4087,
    4088,
    4090,
    4092,
    4093,
    4098,
    4106,
    4107,
    4114,
    4116,
    4121,
    4122,
    4125,
    4127,
    4129,
    4134,
    4135,
    4137,
    4138,
    4139,
    4144,
    4146,
    4147,
    4152,
    4153,
    4158,
    4160,
    4162,
    4167,
    4168,
    4170,
    4171,
    4172,
    4177,
    4179,
    4180,
    4185,
    4187,
    4189,
    4194,
    4195,
    4197,
    4198,
    4199,
    4204,
    4206,
    4207,
    4214,
    4216,
    4218,
    4223,
    4224,
    4226,
    4227,
    4228,
    4233,
    4234,
    4237,
    4239,
    4244,
    4246,
    4247,
    4252,
    4253,
    4258,
    4260,
    4262,
    4267,
    4268,
    4270,
    4271,
    4272,
    4277,
    4279,
    4280,
    4284,
    4286,
    4287,
    4289,
    4291,
    4296,
    4297,
    4299,
    4300,
    4301,
    4306,
    4308,
    4309,
    4314,
    4316,
    4318,
    4320,
    4325,
    4326,
    4328,
    4329,
    4330,
    4335,
    4337,
    4338,
    4340,
    4342,
    4343,
    4347,
    4355,
    4358,
    4365,
    4366,
    4373,
    4375,
    4377,
    4382,
    4383,
    4385,
    4386,
    4387,
    4392,
    4393,
    4396,
    4398,
    4403,
    4405,
    4406,
    4411,
    4412,
    4417,
    4419,
    4421,
    4426,
    4427,
    4429,
    4430,
    4431,
    4436,
    4438,
    4439,
    4443,
    4445,
    4447,
    4449,
    4454,
    4455,
    4457,
    4458,
    4459,
    4464,
    4466,
    4467,
    4469,
    4471,
    4472
  ],
  "token_logprobs": [
    -0.01383252,
    -0.005826289,
    -0.0020037831,
    -0.14164677,
    -1.5237586,
    -0.05133231,
    -0.1499997,
    -0.019890934,
    -0.0045162705,
    -0.006076086,
    -0.0019735633,
    -0.00014086877,
    -0.0020506077,
    -0.0069596814,
    -0.0020113704,
    -0.0030431743,
    -0.0005695159,
    -0.10549894,
    -2.6241434,
    -2.40582,
    -0.03254779,
    -0.20954098,
    -0.0010599872,
    -0.14604679,
    -0.0011758674,
    -0.0089450795,
    -0.0011745561,
    -6.122609e-05,
    -0.0026205708,
    -0.006607843,
    -0.014102883,
    -0.0039735306,
    -0.001038922,
    -2.2376797,
    -1.6046407,
    -0.10689572,
    -0.053289544,
    -0.0008702596,
    -0.000556755,
    -0.0006281441,
    -0.0015323095,
    -0.004958721,
    -0.032811306,
    -0.0052322084,
    -0.0011439439,
    -0.21042658,
    -0.13745472,
    -0.058466952,
    -1.2618334,
    -0.0016334434,
    -0.009929038,
    -0.002234527,
    -0.0007421263,
    -0.002378329,
    -0.003265367,
    -0.00026123386,
    -0.0063913246,
    -0.0057765287,
    -0.0015206101,
    -0.0014549479,
    -0.0056468043,
    -0.001603233,
    -0.00052162877,
    -0.0010328386,
    -0.0021418764,
    -0.005740801,
    -0.0042683575,
    -0.0008815948,
    -0.00012548709,
    -0.00022707166,
    -0.001339691,
    -0.005828867,
    -1.1111447,
    -0.0017392406,
    -0.006809102,
    -0.00087013945,
    -0.0014070758,
    -0.018589886,
    -0.0028878015,
    -0.0079442505,
    -0.01854319,
    -0.0040701805,
    -0.01696359,
    -0.0022158881,
    -0.0029308433,
    -0.0013153987,
    -0.00039807137,
    -0.000751311,
    -0.0023265867,
    -0.004943267,
    -1.1793339,
    -5.586358e-05,
    -8.984087e-05,
    -0.00047112093,
    -0.0028151728,
    -0.0002556273,
    -0.0009961412,
    -0.003440894,
    -2.4893048,
    -0.00062217895,
    -0.00047589114,
    -0.00036432498,
    -0.00023941304,
    -0.0020380074,
    -0.0059610135,
    -0.011375052,
    -0.007214083,
    -0.000827428,
    -2.4315217,
    -0.78962857,
    -0.4267863,
    -0.014369207,
    -0.010676153,
    -0.3359964,
    -0.0009978138,
    -0.15921971,
    -0.0003444068,
    -0.0011122569,
    -0.0030125028,
    -0.0012661017,
    -0.0025645776,
    -0.0035140468,
    -0.0028232432,
    -0.0015090901,
    -0.00095247134,
    -0.0065789237,
    -0.0007860908,
    -0.00017186676,
    -0.00035108434,
    -0.0013766944,
    -0.0040308,
    -0.04476079,
    -0.0015766684,
    -0.5484315,
    -0.0004011717,
    -0.09062871,
    -0.007151466,
    -0.46622142,
    -5.145473e-05,
    -0.0004130372,
    -0.00032753454,
    -0.13562863,
    -0.0002060853,
    -0.0009279501,
    -0.0024706414,
    -0.08429723,
    -0.00023464282,
    -0.00044011069,
    -0.0017828278,
    -4.144026e-05,
    -0.0012876457,
    -0.0057838443,
    -0.0063466383,
    -0.00495968,
    -0.0008391809,
    -0.39258215,
    -0.15544681,
    -0.019577002,
    -0.024765346,
    -0.053576324,
    -0.00059069006,
    -0.0017590038,
    -0.00021586417,
    -0.0007232782,
    -0.0012977934,
    -0.00038960468,
    -0.0012731435,
    -0.0013158765,
    -0.0011770613,
    -0.00044977036,
    -0.00063858187,
    -0.0027157762,
    -0.00055663486,
    -0.00018522002,
    -0.0001697229,
    -0.0010286607,
    -0.0024877305,
    -0.00941248,
    -0.2709974,
    -0.0022391863,
    -0.00070556306,
    -0.00045525676,
    -0.0004023657,
    -0.001922145,
    -0.04483453,
    -0.0032796594,
    -0.004065452,
    -0.0022827378,
    -0.2444033,
    -2.3524582,
    -0.35191357,
    -5.398966,
    -0.0013244717,
    -0.07103385,
    -0.0056535793,
    -0.98657805,
    -0.07730732,
    -0.020748794,
    -0.013799948,
    -0.0032168112,
    -0.0021651746,
    -0.0016136811,
    -0.08160691,
    -0.7321877,
    -0.027118219,
    -0.051192082,
    -0.017356208,
    -0.0018433772,
    -0.0017754228,
    -0.0021581836,
    -0.0010311669,
    -0.0048373686,
    -0.0015862199,
    -0.0017203118,
    -0.00042305636,
    -0.025466701,
    -3.3650994,
    -0.18082972,
    -0.014523469,
    -0.091225095,
    -0.0008129916,
    -0.0035712912,
    -0.00041745167,
    -0.0004278247,
    -0.007434739,
    -0.0007558447,
    -0.00028281534,
    -0.0016867588,
    -0.0041236263,
    -0.004613451,
    -0.0021356062,
    -0.00044965209,
    -0.91374445,
    -0.118816055,
    -3.2833066,
    -1.7299103,
    -0.30499017,
    -0.010104414,
    -0.15677886,
    -0.0034694874,
    -0.004277098,
    -0.009500449,
    -1.2817528,
    -0.22094443,
    -0.0045719547,
    -0.4377746,
    -0.00063207984,
    -0.0025955916,
    -0.0040099146,
    -0.003849487,
    -0.002126167,
    -0.0005801321,
    -0.17426603,
    -0.19921672,
    -0.1053688,
    -0.11237871,
    -0.0005640305,
    -0.0224285,
    -0.001535056,
    -0.00028651362,
    -0.001155999,
    -0.0040627006,
    -0.0015390556,
    -0.20801735,
    -0.001190132,
    -0.00045537692,
    -0.00092735497,
    -4.7279616e-05,
    -0.00400429,
    -0.003761472,
    -0.0005311711,
    -0.0007913397,
    -0.0022569306,
    -0.0008143039,
    -0.0007767841,
    -0.00023857858,
    -0.0016474725,
    -0.00024406594,
    -0.00079939154,
    -0.00020501523,
    -2.5344274e-05,
    -0.0024234375,
    -0.0036026377,
    -0.0020923007,
    -0.0003828061,
    -0.0004650366,
    -0.000754295,
    -0.0090343915,
    -0.00065850193,
    -0.0005729758,
    -0.00017151104,
    -9.615988e-05,
    -0.00082886044,
    -0.0025075069,
    -0.08464746,
    -0.00039628413,
    -0.0040096743,
    -0.0007974823,
    -0.03942759,
    -0.00030845366,
    -0.0001910622,
    -0.00076461444,
    -0.0002893765,
    -0.0013473288,
    -0.0030529194,
    -0.0012826305,
    -0.0017224613,
    -0.0033065097,
    -0.0017549442,
    -0.0013876775,
    -0.0007067561,
    -0.0013102652,
    -0.0007494018,
    -0.0002534825,
    -0.00023690966,
    -0.0007062783,
    -0.00013347782,
    -0.0003634877,
    -0.00018700723,
    -0.00010534082,
    -0.0010722788,
    -0.003981249,
    -0.12221531,
    -2.0696069e-05,
    -0.00030106178,
    -0.00021777152,
    -0.0006341674,
    -0.00035514025,
    -0.001304716,
    -0.0002202777,
    -0.00014611395,
    -0.00010688772,
    -8.936497e-05,
    -0.00096034666,
    -0.002016503,
    -0.12250254,
    -0.00015601015,
    -0.0002454927,
    -0.00014778474,
    -3.4287736e-05,
    -0.00022421066,
    -9.532728e-05,
    -0.00019547573,
    -0.00011702421,
    -9.9616926e-05,
    -0.0014802567,
    -0.0037399929,
    -0.0016908195,
    -0.004342648,
    -0.00071319804,
    -0.122446634,
    -0.113279894,
    -0.51059896,
    -0.8115965,
    -0.30928418,
    -0.13481896,
    -0.00041244208,
    -0.10065782,
    -0.0027093801,
    -0.002486178,
    -8.0899285e-05,
    -0.00012131666,
    -0.00022802629,
    -6.325358e-05,
    -0.00083184446,
    -0.0011468077,
    -0.0005781046,
    -0.0010597479,
    -0.0011990821,
    -0.001176226,
    -0.00039830978,
    -0.0004434504,
    -0.003735566,
    -0.00043056931,
    -0.00019595257,
    -0.00013800588,
    -0.00088720414,
    -7.9112084e-05,
    -0.00017103326,
    -9.997455e-05,
    -3.7743856e-05,
    -0.00095163693,
    -0.0027522927,
    -0.08024903,
    -0.18181549,
    -0.0064557544,
    -0.0008960331,
    -0.01866968,
    -0.002586208,
    -0.0003489405,
    -0.00013431041,
    -0.00015016893,
    -0.00022683514,
    -1.2997552,
    -0.11636918,
    -0.77253026,
    -0.0034900606,
    -0.001103245,
    -0.08584704
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " bathroom",
    " sink",
    "\n",
    " find",
    "('",
    "bath",
    "room",
    "_",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " sponge",
    "\n",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " sponge",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wipe",
    " sink",
    " with",
    " sponge",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " wipe",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " sponge",
    " back",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done",
    "\n",
    "def",
    " pick",
    "_",
    "up",
    "_",
    "cl",
    "othes",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " laundry",
    " basket",
    "\n",
    " find",
    "('",
    "l",
    "aund",
    "ry",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " clothes",
    " in",
    " the",
    " basket",
    "\n",
    " find",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " clothes",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " grab",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " assert",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " clothes",
    " in",
    " closet",
    "\n",
    " assert",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " put",
    "in",
    "('",
    "cl",
    "othes",
    "_",
    "in",
    "_",
    "b",
    "asket",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01383252
    },
    {
      " 0": -0.005826289
    },
    {
      ":": -0.0020037831
    },
    {
      " walk": -0.14164677
    },
    {
      " to": -0.37759477
    },
    {
      " to": -0.05133231
    },
    {
      " bathroom": -0.1499997
    },
    {
      "\n": -0.019890934
    },
    {
      " walk": -0.0045162705
    },
    {
      "('": -0.006076086
    },
    {
      "bath": -0.0019735633
    },
    {
      "room": -0.00014086877
    },
    {
      "')": -0.0020506077
    },
    {
      "\n": -0.0069596814
    },
    {
      " #": -0.0020113704
    },
    {
      " 1": -0.0030431743
    },
    {
      ":": -0.0005695159
    },
    {
      " find": -0.10549894
    },
    {
      " cleaning": -1.5557306
    },
    {
      " counter": -0.77466285
    },
    {
      "\n": -0.03254779
    },
    {
      " find": -0.20954098
    },
    {
      "('": -0.0010599872
    },
    {
      "bath": -0.14604679
    },
    {
      "room": -0.0011758674
    },
    {
      "_": -0.0089450795
    },
    {
      "s": -0.0011745561
    },
    {
      "ink": -6.122609e-05
    },
    {
      "')": -0.0026205708
    },
    {
      "\n": -0.006607843
    },
    {
      " #": -0.014102883
    },
    {
      " 2": -0.0039735306
    },
    {
      ":": -0.001038922
    },
    {
      " turn": -0.76399547
    },
    {
      " cleaning": -1.2025411
    },
    {
      "\n": -0.10689572
    },
    {
      " find": -0.053289544
    },
    {
      "('": -0.0008702596
    },
    {
      "sp": -0.000556755
    },
    {
      "onge": -0.0006281441
    },
    {
      "')": -0.0015323095
    },
    {
      "\n": -0.004958721
    },
    {
      " #": -0.032811306
    },
    {
      " 3": -0.0052322084
    },
    {
      ":": -0.0011439439
    },
    {
      " grab": -0.21042658
    },
    {
      " sponge": -0.13745472
    },
    {
      "\n": -0.058466952
    },
    {
      " grab": -0.3460066
    },
    {
      "('": -0.0016334434
    },
    {
      "close": -0.009929038
    },
    {
      "'": -0.002234527
    },
    {
      " to": -0.0007421263
    },
    {
      " '": -0.002378329
    },
    {
      "sp": -0.003265367
    },
    {
      "onge": -0.00026123386
    },
    {
      "')": -0.0063913246
    },
    {
      "\n": -0.0057765287
    },
    {
      " else": -0.0015206101
    },
    {
      ":": -0.0014549479
    },
    {
      " find": -0.0056468043
    },
    {
      "('": -0.001603233
    },
    {
      "sp": -0.00052162877
    },
    {
      "onge": -0.0010328386
    },
    {
      "')": -0.0021418764
    },
    {
      "\n": -0.005740801
    },
    {
      " grab": -0.0042683575
    },
    {
      "('": -0.0008815948
    },
    {
      "sp": -0.00012548709
    },
    {
      "onge": -0.00022707166
    },
    {
      "')": -0.001339691
    },
    {
      "\n": -0.005828867
    },
    {
      " #": -0.4533651
    },
    {
      "('": -0.0017392406
    },
    {
      "sp": -0.006809102
    },
    {
      "onge": -0.00087013945
    },
    {
      "'": -0.0014070758
    },
    {
      " in": -0.018589886
    },
    {
      " '": -0.0028878015
    },
    {
      "hands": -0.0079442505
    },
    {
      "')": -0.01854319
    },
    {
      "\n": -0.0040701805
    },
    {
      " else": -0.01696359
    },
    {
      ":": -0.0022158881
    },
    {
      " grab": -0.0029308433
    },
    {
      "('": -0.0013153987
    },
    {
      "sp": -0.00039807137
    },
    {
      "onge": -0.000751311
    },
    {
      "')": -0.0023265867
    },
    {
      "\n": -0.004943267
    },
    {
      " #": -0.42527896
    },
    {
      "nt": -5.586358e-05
    },
    {
      "o": -8.984087e-05
    },
    {
      "('": -0.00047112093
    },
    {
      "sp": -0.0028151728
    },
    {
      "onge": -0.0002556273
    },
    {
      "')": -0.0009961412
    },
    {
      "\n": -0.003440894
    },
    {
      " assert": -0.8609279
    },
    {
      "at": -0.00062217895
    },
    {
      "('": -0.00047589114
    },
    {
      "sp": -0.00036432498
    },
    {
      "onge": -0.00023941304
    },
    {
      "')": -0.0020380074
    },
    {
      "\n": -0.0059610135
    },
    {
      " #": -0.011375052
    },
    {
      " 4": -0.007214083
    },
    {
      ":": -0.000827428
    },
    {
      " wash": -0.39675075
    },
    {
      " sink": -0.78962857
    },
    {
      " with": -0.4267863
    },
    {
      " sponge": -0.014369207
    },
    {
      "\n": -0.010676153
    },
    {
      " assert": -0.3359964
    },
    {
      "('": -0.0009978138
    },
    {
      "sp": -0.15921971
    },
    {
      "onge": -0.0003444068
    },
    {
      "'": -0.0011122569
    },
    {
      " in": -0.0030125028
    },
    {
      " '": -0.0012661017
    },
    {
      "hands": -0.0025645776
    },
    {
      "')": -0.0035140468
    },
    {
      "\n": -0.0028232432
    },
    {
      " else": -0.0015090901
    },
    {
      ":": -0.00095247134
    },
    {
      " grab": -0.0065789237
    },
    {
      "('": -0.0007860908
    },
    {
      "sp": -0.00017186676
    },
    {
      "onge": -0.00035108434
    },
    {
      "')": -0.0013766944
    },
    {
      "\n": -0.0040308
    },
    {
      " wipe": -0.04476079
    },
    {
      "('": -0.0015766684
    },
    {
      "sp": -0.5484315
    },
    {
      "onge": -0.0004011717
    },
    {
      "')": -0.09062871
    },
    {
      "\n": -0.007151466
    },
    {
      " tur": -0.46622142
    },
    {
      "nt": -5.145473e-05
    },
    {
      "o": -0.0004130372
    },
    {
      "('": -0.00032753454
    },
    {
      "sp": -0.13562863
    },
    {
      "onge": -0.0002060853
    },
    {
      "')": -0.0009279501
    },
    {
      "\n": -0.0024706414
    },
    {
      " look": -0.08429723
    },
    {
      "at": -0.00023464282
    },
    {
      "('": -0.00044011069
    },
    {
      "sp": -0.0017828278
    },
    {
      "onge": -4.144026e-05
    },
    {
      "')": -0.0012876457
    },
    {
      "\n": -0.0057838443
    },
    {
      " #": -0.0063466383
    },
    {
      " 5": -0.00495968
    },
    {
      ":": -0.0008391809
    },
    {
      " put": -0.39258215
    },
    {
      " sponge": -0.15544681
    },
    {
      " back": -0.019577002
    },
    {
      "\n": -0.024765346
    },
    {
      " assert": -0.053576324
    },
    {
      "('": -0.00059069006
    },
    {
      "sp": -0.0017590038
    },
    {
      "onge": -0.00021586417
    },
    {
      "'": -0.0007232782
    },
    {
      " in": -0.0012977934
    },
    {
      " '": -0.00038960468
    },
    {
      "hands": -0.0012731435
    },
    {
      "')": -0.0013158765
    },
    {
      "\n": -0.0011770613
    },
    {
      " else": -0.00044977036
    },
    {
      ":": -0.00063858187
    },
    {
      " grab": -0.0027157762
    },
    {
      "('": -0.00055663486
    },
    {
      "sp": -0.00018522002
    },
    {
      "onge": -0.0001697229
    },
    {
      "')": -0.0010286607
    },
    {
      "\n": -0.0024877305
    },
    {
      " put": -0.00941248
    },
    {
      "obj": -0.2709974
    },
    {
      "back": -0.0022391863
    },
    {
      "('": -0.00070556306
    },
    {
      "sp": -0.00045525676
    },
    {
      "onge": -0.0004023657
    },
    {
      "')": -0.001922145
    },
    {
      "\n": -0.04483453
    },
    {
      " #": -0.0032796594
    },
    {
      " 6": -0.004065452
    },
    {
      ":": -0.0022827378
    },
    {
      " Done": -0.2444033
    },
    {
      "<|endoftext|>": -0.11430776
    },
    {
      "def": -0.35191357
    },
    {
      " make": -1.2025559
    },
    {
      "_": -0.0013244717
    },
    {
      "up": -0.07103385
    },
    {
      "_": -0.0056535793
    },
    {
      "cl": -0.98657805
    },
    {
      "othes": -0.07730732
    },
    {
      "():": -0.020748794
    },
    {
      "\n": -0.013799948
    },
    {
      " #": -0.0032168112
    },
    {
      " 0": -0.0021651746
    },
    {
      ":": -0.0016136811
    },
    {
      " walk": -0.08160691
    },
    {
      " in": -0.7321877
    },
    {
      " to": -0.027118219
    },
    {
      " bedroom": -0.051192082
    },
    {
      "\n": -0.017356208
    },
    {
      " walk": -0.0018433772
    },
    {
      "('": -0.0017754228
    },
    {
      "bedroom": -0.0021581836
    },
    {
      "')": -0.0010311669
    },
    {
      "\n": -0.0048373686
    },
    {
      " #": -0.0015862199
    },
    {
      " 1": -0.0017203118
    },
    {
      ":": -0.00042305636
    },
    {
      " find": -0.025466701
    },
    {
      " closet": -0.9217372
    },
    {
      " basket": -0.18082972
    },
    {
      "\n": -0.014523469
    },
    {
      " find": -0.091225095
    },
    {
      "('": -0.0008129916
    },
    {
      "l": -0.0035712912
    },
    {
      "aund": -0.00041745167
    },
    {
      "ry": -0.0004278247
    },
    {
      "_": -0.007434739
    },
    {
      "b": -0.0007558447
    },
    {
      "asket": -0.00028281534
    },
    {
      "')": -0.0016867588
    },
    {
      "\n": -0.0041236263
    },
    {
      " #": -0.004613451
    },
    {
      " 2": -0.0021356062
    },
    {
      ":": -0.00044965209
    },
    {
      " grab": -0.761581
    },
    {
      " clothes": -0.118816055
    },
    {
      "\n": -0.0803202
    },
    {
      " basket": -0.6620268
    },
    {
      " basket": -0.30499017
    },
    {
      "\n": -0.010104414
    },
    {
      " find": -0.15677886
    },
    {
      "('": -0.0034694874
    },
    {
      "cl": -0.004277098
    },
    {
      "othes": -0.009500449
    },
    {
      "')": -0.33338282
    },
    {
      "in": -0.22094443
    },
    {
      "_": -0.0045719547
    },
    {
      "b": -0.4377746
    },
    {
      "asket": -0.00063207984
    },
    {
      "')": -0.0025955916
    },
    {
      "\n": -0.0040099146
    },
    {
      " #": -0.003849487
    },
    {
      " 3": -0.002126167
    },
    {
      ":": -0.0005801321
    },
    {
      " grab": -0.17426603
    },
    {
      " clothes": -0.19921672
    },
    {
      "\n": -0.1053688
    },
    {
      " assert": -0.11237871
    },
    {
      "('": -0.0005640305
    },
    {
      "close": -0.0224285
    },
    {
      "'": -0.001535056
    },
    {
      " to": -0.00028651362
    },
    {
      " '": -0.001155999
    },
    {
      "cl": -0.0040627006
    },
    {
      "othes": -0.0015390556
    },
    {
      "_": -0.20801735
    },
    {
      "in": -0.001190132
    },
    {
      "_": -0.00045537692
    },
    {
      "b": -0.00092735497
    },
    {
      "asket": -4.7279616e-05
    },
    {
      "')": -0.00400429
    },
    {
      "\n": -0.003761472
    },
    {
      " else": -0.0005311711
    },
    {
      ":": -0.0007913397
    },
    {
      " find": -0.0022569306
    },
    {
      "('": -0.0008143039
    },
    {
      "cl": -0.0007767841
    },
    {
      "othes": -0.00023857858
    },
    {
      "_": -0.0016474725
    },
    {
      "in": -0.00024406594
    },
    {
      "_": -0.00079939154
    },
    {
      "b": -0.00020501523
    },
    {
      "asket": -2.5344274e-05
    },
    {
      "')": -0.0024234375
    },
    {
      "\n": -0.0036026377
    },
    {
      " grab": -0.0020923007
    },
    {
      "('": -0.0003828061
    },
    {
      "cl": -0.0004650366
    },
    {
      "othes": -0.000754295
    },
    {
      "_": -0.0090343915
    },
    {
      "in": -0.00065850193
    },
    {
      "_": -0.0005729758
    },
    {
      "b": -0.00017151104
    },
    {
      "asket": -9.615988e-05
    },
    {
      "')": -0.00082886044
    },
    {
      "\n": -0.0025075069
    },
    {
      " assert": -0.08464746
    },
    {
      "('": -0.00039628413
    },
    {
      "cl": -0.0040096743
    },
    {
      "othes": -0.0007974823
    },
    {
      "_": -0.03942759
    },
    {
      "in": -0.00030845366
    },
    {
      "_": -0.0001910622
    },
    {
      "b": -0.00076461444
    },
    {
      "asket": -0.0002893765
    },
    {
      "'": -0.0013473288
    },
    {
      " in": -0.0030529194
    },
    {
      " '": -0.0012826305
    },
    {
      "hands": -0.0017224613
    },
    {
      "')": -0.0033065097
    },
    {
      "\n": -0.0017549442
    },
    {
      " else": -0.0013876775
    },
    {
      ":": -0.0007067561
    },
    {
      " grab": -0.0013102652
    },
    {
      "('": -0.0007494018
    },
    {
      "cl": -0.0002534825
    },
    {
      "othes": -0.00023690966
    },
    {
      "_": -0.0007062783
    },
    {
      "in": -0.00013347782
    },
    {
      "_": -0.0003634877
    },
    {
      "b": -0.00018700723
    },
    {
      "asket": -0.00010534082
    },
    {
      "')": -0.0010722788
    },
    {
      "\n": -0.003981249
    },
    {
      " tur": -0.12221531
    },
    {
      "nt": -2.0696069e-05
    },
    {
      "o": -0.00030106178
    },
    {
      "('": -0.00021777152
    },
    {
      "cl": -0.0006341674
    },
    {
      "othes": -0.00035514025
    },
    {
      "_": -0.001304716
    },
    {
      "in": -0.0002202777
    },
    {
      "_": -0.00014611395
    },
    {
      "b": -0.00010688772
    },
    {
      "asket": -8.936497e-05
    },
    {
      "')": -0.00096034666
    },
    {
      "\n": -0.002016503
    },
    {
      " look": -0.12250254
    },
    {
      "at": -0.00015601015
    },
    {
      "('": -0.0002454927
    },
    {
      "cl": -0.00014778474
    },
    {
      "othes": -3.4287736e-05
    },
    {
      "_": -0.00022421066
    },
    {
      "in": -9.532728e-05
    },
    {
      "_": -0.00019547573
    },
    {
      "b": -0.00011702421
    },
    {
      "asket": -9.9616926e-05
    },
    {
      "')": -0.0014802567
    },
    {
      "\n": -0.0037399929
    },
    {
      " #": -0.0016908195
    },
    {
      " 4": -0.004342648
    },
    {
      ":": -0.00071319804
    },
    {
      " put": -0.122446634
    },
    {
      " clothes": -0.113279894
    },
    {
      " in": -0.51059896
    },
    {
      " closet": -0.8115965
    },
    {
      "\n": -0.30928418
    },
    {
      " assert": -0.13481896
    },
    {
      "('": -0.00041244208
    },
    {
      "cl": -0.10065782
    },
    {
      "othes": -0.0027093801
    },
    {
      "_": -0.002486178
    },
    {
      "in": -8.0899285e-05
    },
    {
      "_": -0.00012131666
    },
    {
      "b": -0.00022802629
    },
    {
      "asket": -6.325358e-05
    },
    {
      "'": -0.00083184446
    },
    {
      " in": -0.0011468077
    },
    {
      " '": -0.0005781046
    },
    {
      "hands": -0.0010597479
    },
    {
      "')": -0.0011990821
    },
    {
      "\n": -0.001176226
    },
    {
      " else": -0.00039830978
    },
    {
      ":": -0.0004434504
    },
    {
      " grab": -0.003735566
    },
    {
      "('": -0.00043056931
    },
    {
      "cl": -0.00019595257
    },
    {
      "othes": -0.00013800588
    },
    {
      "_": -0.00088720414
    },
    {
      "in": -7.9112084e-05
    },
    {
      "_": -0.00017103326
    },
    {
      "b": -9.997455e-05
    },
    {
      "asket": -3.7743856e-05
    },
    {
      "')": -0.00095163693
    },
    {
      "\n": -0.0027522927
    },
    {
      " put": -0.08024903
    },
    {
      "in": -0.18181549
    },
    {
      "('": -0.0064557544
    },
    {
      "cl": -0.0008960331
    },
    {
      "othes": -0.01866968
    },
    {
      "_": -0.002586208
    },
    {
      "in": -0.0003489405
    },
    {
      "_": -0.00013431041
    },
    {
      "b": -0.00015016893
    },
    {
      "asket": -0.00022683514
    },
    {
      "',": -0.57380116
    },
    {
      "\n": -0.11636918
    },
    {
      " #": -0.77253026
    },
    {
      " 5": -0.0034900606
    },
    {
      ":": -0.001103245
    },
    {
      " Done": -0.08584704
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.8705191612243652
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find phone\n walk('phone')\n find('phone')\n # 2: pick up phone\n assert('close' to 'phone')\n else: find('phone')\n grab('phone')\n assert('phone' in 'hands')\n else: grab('phone')", <OpenAIObject at 0x7fdfb00b1630> JSON: {
  "text_offset": [
    3377,
    3379,
    3381,
    3382,
    3387,
    3390,
    3398,
    3399,
    3404,
    3406,
    3413,
    3415,
    3416,
    3418,
    3420,
    3421,
    3426,
    3432,
    3433,
    3438,
    3440,
    3445,
    3447,
    3448,
    3453,
    3455,
    3460,
    3462,
    3463,
    3465,
    3467,
    3468,
    3473,
    3476,
    3482,
    3483,
    3490,
    3492,
    3497,
    3498,
    3501,
    3503,
    3508,
    3510,
    3511,
    3516,
    3517,
    3522,
    3524,
    3529,
    3531,
    3532,
    3537,
    3539,
    3544,
    3546,
    3547,
    3554,
    3556,
    3561,
    3562,
    3565,
    3567,
    3572,
    3574,
    3575,
    3580,
    3581,
    3586,
    3588,
    3593
  ],
  "token_logprobs": [
    -0.017112618,
    -0.007984084,
    -0.0017256874,
    -0.91346145,
    -0.22951584,
    -0.29938516,
    -0.017985871,
    -0.004359349,
    -0.0037713447,
    -0.0028113495,
    -0.0011338572,
    -0.008332202,
    -0.0025058333,
    -0.0027454214,
    -0.00060631573,
    -0.025670752,
    -0.36984304,
    -0.023314703,
    -0.9182501,
    -0.0014655143,
    -0.003906691,
    -0.001791009,
    -0.0038028155,
    -0.009400082,
    -0.000789071,
    -0.0003051177,
    -0.0007510726,
    -0.00431475,
    -0.0034919756,
    -0.004083348,
    -0.00084741286,
    -0.9086557,
    -0.013711901,
    -0.6502216,
    -0.017235348,
    -0.58180577,
    -0.0014905236,
    -0.006721368,
    -0.0031133085,
    -0.0008536183,
    -0.0016663986,
    -0.00068218034,
    -0.0041349996,
    -0.005321732,
    -0.0013873208,
    -0.0011658425,
    -0.004231305,
    -0.0014073141,
    -0.00043975122,
    -0.0020580164,
    -0.0068336474,
    -0.10352789,
    -0.0010683412,
    -0.000189275,
    -0.002112369,
    -0.07023843,
    -0.8266899,
    -0.0021460592,
    -0.01816783,
    -0.002959356,
    -0.02897468,
    -0.004839825,
    -0.018365052,
    -0.020630136,
    -0.01725311,
    -0.0042037717,
    -0.0034335982,
    -0.0053512733,
    -0.0018161489,
    -0.0003377283,
    -0.002439572
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " phone",
    "\n",
    " walk",
    "('",
    "phone",
    "')",
    "\n",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pick",
    " up",
    " phone",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " assert",
    "('",
    "phone",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "phone",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.017112618
    },
    {
      " 0": -0.007984084
    },
    {
      ":": -0.0017256874
    },
    {
      " find": -0.64648515
    },
    {
      " to": -0.22951584
    },
    {
      " bedroom": -0.29938516
    },
    {
      "\n": -0.017985871
    },
    {
      " walk": -0.004359349
    },
    {
      "('": -0.0037713447
    },
    {
      "bedroom": -0.0028113495
    },
    {
      "')": -0.0011338572
    },
    {
      "\n": -0.008332202
    },
    {
      " #": -0.0025058333
    },
    {
      " 1": -0.0027454214
    },
    {
      ":": -0.00060631573
    },
    {
      " find": -0.025670752
    },
    {
      " phone": -0.36984304
    },
    {
      "\n": -0.023314703
    },
    {
      " find": -0.5322543
    },
    {
      "('": -0.0014655143
    },
    {
      "phone": -0.003906691
    },
    {
      "')": -0.001791009
    },
    {
      "\n": -0.0038028155
    },
    {
      " find": -0.009400082
    },
    {
      "('": -0.000789071
    },
    {
      "phone": -0.0003051177
    },
    {
      "')": -0.0007510726
    },
    {
      "\n": -0.00431475
    },
    {
      " #": -0.0034919756
    },
    {
      " 2": -0.004083348
    },
    {
      ":": -0.00084741286
    },
    {
      " grab": -0.56290305
    },
    {
      " up": -0.013711901
    },
    {
      " phone": -0.6502216
    },
    {
      "\n": -0.017235348
    },
    {
      " assert": -0.58180577
    },
    {
      "('": -0.0014905236
    },
    {
      "close": -0.006721368
    },
    {
      "'": -0.0031133085
    },
    {
      " to": -0.0008536183
    },
    {
      " '": -0.0016663986
    },
    {
      "phone": -0.00068218034
    },
    {
      "')": -0.0041349996
    },
    {
      "\n": -0.005321732
    },
    {
      " else": -0.0013873208
    },
    {
      ":": -0.0011658425
    },
    {
      " find": -0.004231305
    },
    {
      "('": -0.0014073141
    },
    {
      "phone": -0.00043975122
    },
    {
      "')": -0.0020580164
    },
    {
      "\n": -0.0068336474
    },
    {
      " grab": -0.10352789
    },
    {
      "('": -0.0010683412
    },
    {
      "phone": -0.000189275
    },
    {
      "')": -0.002112369
    },
    {
      "\n": -0.07023843
    },
    {
      " #": -0.7518425
    },
    {
      "('": -0.0021460592
    },
    {
      "phone": -0.01816783
    },
    {
      "'": -0.002959356
    },
    {
      " in": -0.02897468
    },
    {
      " '": -0.004839825
    },
    {
      "hands": -0.018365052
    },
    {
      "')": -0.020630136
    },
    {
      "\n": -0.01725311
    },
    {
      " else": -0.0042037717
    },
    {
      ":": -0.0034335982
    },
    {
      " grab": -0.0053512733
    },
    {
      "('": -0.0018161489
    },
    {
      "phone": -0.0003377283
    },
    {
      "')": -0.002439572
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.424421787261963
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: sit on toilet\n turnto('toilet')\n sit('toilet')\n # 3: open toilet\n assert('close' to 'toilet')\n else: find('toilet')\n open('toilet')\n # 4: flush toilet\n flush('toilet')\n # 5: close toilet\n close('toilet')", <OpenAIObject at 0x7fdfb00bf950> JSON: {
  "text_offset": [
    3376,
    3378,
    3380,
    3381,
    3386,
    3389,
    3398,
    3399,
    3404,
    3406,
    3410,
    3414,
    3416,
    3417,
    3419,
    3421,
    3422,
    3427,
    3434,
    3435,
    3440,
    3442,
    3444,
    3448,
    3450,
    3451,
    3453,
    3455,
    3456,
    3460,
    3463,
    3470,
    3471,
    3475,
    3477,
    3478,
    3480,
    3482,
    3486,
    3488,
    3489,
    3493,
    3495,
    3497,
    3501,
    3503,
    3504,
    3506,
    3508,
    3509,
    3514,
    3521,
    3522,
    3529,
    3531,
    3536,
    3537,
    3540,
    3542,
    3544,
    3548,
    3550,
    3551,
    3556,
    3557,
    3562,
    3564,
    3566,
    3570,
    3572,
    3573,
    3578,
    3580,
    3582,
    3586,
    3588,
    3589,
    3591,
    3593,
    3594,
    3600,
    3607,
    3608,
    3614,
    3616,
    3618,
    3622,
    3624,
    3625,
    3627,
    3629,
    3630,
    3636,
    3643,
    3644,
    3650,
    3652,
    3654,
    3658
  ],
  "token_logprobs": [
    -0.013513055,
    -0.006816423,
    -0.0023857357,
    -0.13197285,
    -0.2609421,
    -0.4454277,
    -0.020938192,
    -0.0038508032,
    -0.0034635635,
    -0.0021967143,
    -0.00013407106,
    -0.0017920848,
    -0.0063541364,
    -0.0018448106,
    -0.0027531306,
    -0.00046122,
    -0.108322665,
    -0.037474513,
    -0.021764906,
    -0.20625295,
    -0.0008466986,
    -0.0006191959,
    -0.00016304628,
    -0.0018744307,
    -0.0049146945,
    -0.014680237,
    -0.0044778297,
    -0.00069327606,
    -0.49067223,
    -0.053878725,
    -0.37146613,
    -0.020161783,
    -1.179899,
    -2.6060465e-05,
    -0.00018164565,
    -0.00047207458,
    -0.00052866584,
    -0.00019797911,
    -0.0013325282,
    -0.0038055077,
    -1.8790681,
    -0.0015068215,
    -0.00029307103,
    -0.00054232136,
    -0.0010769317,
    -0.037442584,
    -0.04504239,
    -0.007868794,
    -0.0015225213,
    -3.7727075,
    -0.6538803,
    -2.13086,
    -1.720963,
    -0.0016086057,
    -0.008165489,
    -0.003780918,
    -0.00047135746,
    -0.0019781608,
    -0.0016545171,
    -0.00013931624,
    -0.008198722,
    -0.0049090055,
    -0.002578022,
    -0.001476197,
    -0.009338713,
    -0.0013759792,
    -0.00068599783,
    -0.00024692412,
    -0.001995661,
    -0.008528517,
    -0.088126116,
    -0.0012336348,
    -0.0005558004,
    -0.0002058497,
    -0.002078142,
    -0.06711999,
    -0.023905268,
    -0.007372649,
    -0.0015171483,
    -1.9632871,
    -0.6617135,
    -0.03471873,
    -0.110657096,
    -0.0062249964,
    -0.00036539597,
    -0.0002528855,
    -0.0021451025,
    -0.03549554,
    -0.015072259,
    -0.0044873506,
    -0.0010989525,
    -0.48436832,
    -0.052702595,
    -0.030746251,
    -0.06389777,
    -0.00068850396,
    -0.0001635231,
    -3.4642555e-05,
    -0.000976635
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " toilet",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " sit",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " open",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " open",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " flush",
    " toilet",
    "\n",
    " flush",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " close",
    " toilet",
    "\n",
    " close",
    "('",
    "to",
    "ilet",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.013513055
    },
    {
      " 0": -0.006816423
    },
    {
      ":": -0.0023857357
    },
    {
      " walk": -0.13197285
    },
    {
      " to": -0.2609421
    },
    {
      " bathroom": -0.4454277
    },
    {
      "\n": -0.020938192
    },
    {
      " walk": -0.0038508032
    },
    {
      "('": -0.0034635635
    },
    {
      "bath": -0.0021967143
    },
    {
      "room": -0.00013407106
    },
    {
      "')": -0.0017920848
    },
    {
      "\n": -0.0063541364
    },
    {
      " #": -0.0018448106
    },
    {
      " 1": -0.0027531306
    },
    {
      ":": -0.00046122
    },
    {
      " find": -0.108322665
    },
    {
      " toilet": -0.037474513
    },
    {
      "\n": -0.021764906
    },
    {
      " find": -0.20625295
    },
    {
      "('": -0.0008466986
    },
    {
      "to": -0.0006191959
    },
    {
      "ilet": -0.00016304628
    },
    {
      "')": -0.0018744307
    },
    {
      "\n": -0.0049146945
    },
    {
      " #": -0.014680237
    },
    {
      " 2": -0.0044778297
    },
    {
      ":": -0.00069327606
    },
    {
      " sit": -0.49067223
    },
    {
      " on": -0.053878725
    },
    {
      " toilet": -0.37146613
    },
    {
      "\n": -0.020161783
    },
    {
      " sit": -1.0778177
    },
    {
      "nt": -2.6060465e-05
    },
    {
      "o": -0.00018164565
    },
    {
      "('": -0.00047207458
    },
    {
      "to": -0.00052866584
    },
    {
      "ilet": -0.00019797911
    },
    {
      "')": -0.0013325282
    },
    {
      "\n": -0.0038055077
    },
    {
      " look": -0.27967626
    },
    {
      "('": -0.0015068215
    },
    {
      "to": -0.00029307103
    },
    {
      "ilet": -0.00054232136
    },
    {
      "')": -0.0010769317
    },
    {
      "\n": -0.037442584
    },
    {
      " #": -0.04504239
    },
    {
      " 3": -0.007868794
    },
    {
      ":": -0.0015225213
    },
    {
      " flush": -1.3659484
    },
    {
      " toilet": -0.6538803
    },
    {
      " lid": -0.7083118
    },
    {
      " open": -0.2522836
    },
    {
      "('": -0.0016086057
    },
    {
      "close": -0.008165489
    },
    {
      "'": -0.003780918
    },
    {
      " to": -0.00047135746
    },
    {
      " '": -0.0019781608
    },
    {
      "to": -0.0016545171
    },
    {
      "ilet": -0.00013931624
    },
    {
      "')": -0.008198722
    },
    {
      "\n": -0.0049090055
    },
    {
      " else": -0.002578022
    },
    {
      ":": -0.001476197
    },
    {
      " find": -0.009338713
    },
    {
      "('": -0.0013759792
    },
    {
      "to": -0.00068599783
    },
    {
      "ilet": -0.00024692412
    },
    {
      "')": -0.001995661
    },
    {
      "\n": -0.008528517
    },
    {
      " open": -0.088126116
    },
    {
      "('": -0.0012336348
    },
    {
      "to": -0.0005558004
    },
    {
      "ilet": -0.0002058497
    },
    {
      "')": -0.002078142
    },
    {
      "\n": -0.06711999
    },
    {
      " #": -0.023905268
    },
    {
      " 4": -0.007372649
    },
    {
      ":": -0.0015171483
    },
    {
      " do": -1.3234395
    },
    {
      " toilet": -0.6617135
    },
    {
      "\n": -0.03471873
    },
    {
      " flush": -0.110657096
    },
    {
      "('": -0.0062249964
    },
    {
      "to": -0.00036539597
    },
    {
      "ilet": -0.0002528855
    },
    {
      "')": -0.0021451025
    },
    {
      "\n": -0.03549554
    },
    {
      " #": -0.015072259
    },
    {
      " 5": -0.0044873506
    },
    {
      ":": -0.0010989525
    },
    {
      " close": -0.48436832
    },
    {
      " toilet": -0.052702595
    },
    {
      "\n": -0.030746251
    },
    {
      " close": -0.06389777
    },
    {
      "('": -0.00068850396
    },
    {
      "to": -0.0001635231
    },
    {
      "ilet": -3.4642555e-05
    },
    {
      "')": -0.000976635
    }
  ]
})]
experiment time3 on environment scene4
none else: sleep()
Turn on computer {'script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Sit] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Switchon] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Sit] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)']}
Clean toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Find] <coffee_maker> (1)', '[Grab] <coffee> (1)', '[Fill] <coffee_maker> (1)', '[Fill] <coffee_grounds> (1)', '[Switchon] <coffee_maker> (1)', '[Grab] <cup> (1)', '[Pour] <coffee> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <toilet_brush> (1)', "assert('toilet_brush' in 'hands')", 'else: [Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', "assert('toilet_brush' in 'hands')", 'else: [Grab] <toilet_brush> (1)', '[Putobjback] <toilet_brush> (1)', '[Find] <coffee_maker> (1)', '[Grab] <coffee> (1)', "assert('close' to 'coffee_maker')", 'else: [Find] <coffee_maker> (1)', "assert('coffee' in 'hands')", 'else: [Grab] <coffee> (1)', '[Fill] <coffee_maker> (1)', '[Fill] <coffee_grounds> (1)', '[Switchon] <coffee_maker> (1)', '[Grab] <cup> (1)', '[Pour] <coffee> (1)', "assert('coffee' in 'cup')"]}
Pick up spare change on dresser {'script': ['[Walk] <bedroom> (1)', '[Walk] <dresser> (1)', '[Find] <dresser> (1)', '[Find] <spare_change> (1)', '[Grab] <spare_change> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <dresser> (1)', '[Find] <dresser> (1)', '[Find] <spare_change> (1)', "assert('close' to 'spare_change')", 'else: [Find] <spare_change> (1)', '[Grab] <spare_change> (1)', "assert('spare_change' in 'hands')", 'else: [Grab] <spare_change> (1)']}
Turn on TV {'script': ['[Walk] <living_room> (1)', '[Find] <television> (1)', '[Turnto] <television> (1)', '[Switchon] <television> (1)', '[Walk] <kitchen> (1)', '[Walk] <stove> (1)', '[Find] <stove> (1)', '[Turnto] <stove> (1)', '[Switchon] <stove> (1)', '[Find] <pot> (1)', '[Pour] <oil> (1) <pot> (1)', '[Turnto] <stove> (1)', '[Puton] <pot> (1)'], 'assert_script': ['[Walk] <living_room> (1)', '[Find] <television> (1)', '[Turnto] <television> (1)', "assert('television' is 'switchoff')", 'else: [Switchoff] <television> (1)', '[Switchon] <television> (1)', '[Walk] <kitchen> (1)', '[Walk] <stove> (1)', '[Find] <stove> (1)', '[Turnto] <stove> (1)', '[Switchon] <stove> (1)', '[Find] <pot> (1)', "assert('close' to 'pot')", 'else: [Find] <pot> (1)', '[Pour] <oil> (1) <pot> (1)', '[Turnto] <stove> (1)', '[Puton] <pot> (1)']}
Hang up jacket {'script': ['[Walk] <bedroom> (1)', '[Find] <closet> (1)', '[Find] <jacket> (1)', '[Grab] <hanger> (1)', '[Hangup] <jacket> (1) <hanger> (1)', '[Putin] <hanger> (1) <closet> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <closet> (1)', '[Find] <jacket> (1)', '[Grab] <hanger> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Hangup] <jacket> (1) <hanger> (1)', "assert('close' to 'closet')", 'else: [Find] <closet> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Putin] <hanger> (1) <closet> (1)']}
Sit {'script': ['[Find] <seat> (1)', '[Walk] <seat> (1)', '[Sit] <seat> (1)'], 'assert_script': ['[Find] <seat> (1)', '[Walk] <seat> (1)', "assert('close' to 'seat')", 'else: [Find] <seat> (1)', '[Sit] <seat> (1)']}
Wash sink {'script': ['[Walk] <sink> (1)', '[Find] <sink> (1)', '[Switchon] <sink> (1)', '[Find] <soap> (1)', '[Grab] <soap> (1)', '[Pour] <water> (1) <sink> (1)', '[Wash] <soap> (1) <sink> (1)', '[Switchoff] <sink> (1)', '[Putback] <soap> (1)'], 'assert_script': ['[Walk] <sink> (1)', '[Find] <sink> (1)', '[Switchon] <sink> (1)', '[Find] <soap> (1)', '[Grab] <soap> (1)', '[Pour] <water> (1) <sink> (1)', '[Wash] <soap> (1) <sink> (1)', '[Switchoff] <sink> (1)', '[Putback] <soap> (1)']}
Sleep {'script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Lie] <bed> (1)', '[Close] <eyes> (1)'], 'assert_script': ['[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', '[Lie] <bed> (1)', '[Close] <eyes> (1)']}
Put on glasses {'script': ['[Find] <glasses> (1)', '[Grab] <glasses> (1)', '[Puton] <glasses> (1)', '[Lookat] <glasses> (1)'], 'assert_script': ['[Find] <glasses> (1)', "assert('close' to 'glasses')", 'else: [Find] <glasses> (1)', '[Grab] <glasses> (1)', "assert('glasses' in 'hands')", 'else: [Grab] <glasses> (1)', '[Puton] <glasses> (1)', '[Lookat] <glasses> (1)']}
Start computer {'script': ['[Walk] <desk> (1)', '[Find] <laptop> (1)', '[Open] <laptop> (1)', '[Find] <powersocket> (1)', '[Plugin] <laptop> (1)', '[Switchon] <laptop> (1)'], 'assert_script': ['[Walk] <desk> (1)', '[Find] <laptop> (1)', '[Open] <laptop> (1)', '[Find] <powersocket> (1)', '[Plugin] <laptop> (1)', '[Switchon] <laptop> (1)']}
Put alarm clock in bedroom {'script': ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Find] <nightstand> (1)', '[Puton] <alarm_clock> (1)'], 'assert_script': ['[Find] <alarm_clock> (1)', "assert('close' to 'alarm_clock')", 'else: [Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', "assert('alarm_clock' in 'hands')", 'else: [Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Find] <nightstand> (1)', "assert('close' to 'nightstand')", 'else: [Find] <nightstand> (1)', '[Puton] <alarm_clock> (1)', "assert('alarm_clock' on 'nightstand')", 'else: [Puton] <alarm_clock> (1)']}
Sit in chair {'script': ['[Walk] <living_room> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)'], 'assert_script': ['[Walk] <living_room> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', "assert('sitting' in 'chair')", 'else: [Sit] <chair> (1)']}
Shut off alarm {'script': ['[Find] <alarm_clock> (1)', '[Switchoff] <alarm_clock> (1)', '[Putback] <alarm_clock> (1)'], 'assert_script': ['[Find] <alarm_clock> (1)', '[Switchoff] <alarm_clock> (1)', "assert('close' to 'alarm_clock')", 'else: [Find] <alarm_clock> (1)', '[Putback] <alarm_clock> (1)']}
Take nap {'script': ['[Walk] <bedroom> (1)', '[Walk] <bed> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <bed> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', 'else: [Turnto] <bed> (1)', '[Sit] <bed> (1)', "assert('asleep'):", 'else: None']}
Use computer {'script': ['[Find] <computer> (1)', '[Open] <computer> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', '[Switchon] <computer> (1)', '[Lookat] <computer> (1)'], 'assert_script': ['[Find] <computer> (1)', "assert('close' to 'computer')", 'else: [Find] <computer> (1)', '[Open] <computer> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', '[Turnto] <computer> (1)', '[Switchon] <computer> (1)', '[Lookat] <computer> (1)']}
Wash face {'script': ['[Find] <sink> (1)', '[Turnon] <faucet> (1)', '[Putin] <face> (1) <faucet> (1)', '[Grab] <soap> (1)', '[Puton] <hands> (1) <soap> (1)', '[Wash] <face> (1)', '[Turnoff] <faucet> (1)', '[Wipe] <face> (1)'], 'assert_script': ['[Find] <sink> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Turnon] <faucet> (1)', '[Putin] <face> (1) <faucet> (1)', '[Grab] <soap> (1)', '[Puton] <hands> (1) <soap> (1)', '[Wash] <face> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Turnoff] <faucet> (1)', '[Wipe] <face> (1)']}
Read newspaper {'script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)'], 'assert_script': ['[Find] <newspaper> (1)', "assert('close' to 'newspaper')", 'else: [Find] <newspaper> (1)', '[Grab] <newspaper> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Read] <newspaper> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Putback] <newspaper> (1)']}
Drink {'script': ['[Find] <cup> (1)', '[Grab] <cup> (1)', '[Pour] <liquid> (1)', '[Drink] <cup> (1)'], 'assert_script': ['[Find] <cup> (1)', '[Grab] <cup> (1)', '[Pour] <liquid> (1)', "assert('close' to 'cup')", 'else: [Find] <cup> (1)', '[Drink] <cup> (1)']}
Clean bathroom {'script': ['[Walk] <bathroom> (1)', '[Find] <bathroom_sink> (1)', '[Find] <sponge> (1)', '[Grab] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', '[Wipe] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', '[Putobjback] <sponge> (1)', '[Walk] <bedroom> (1)', '[Find] <laundry_basket> (1)', '[Find] <clothes_in_basket> (1)', '[Grab] <clothes_in_basket> (1)', '[Turnto] <clothes_in_basket> (1)', '[Lookat] <clothes_in_basket> (1)', '[Putin] <clothes_in_basket> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <bathroom_sink> (1)', '[Find] <sponge> (1)', "assert('close' to 'sponge')", 'else: [Find] <sponge> (1)', '[Grab] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Wipe] <sponge> (1)', '[Turnto] <sponge> (1)', '[Lookat] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Putobjback] <sponge> (1)', '[Walk] <bedroom> (1)', '[Find] <laundry_basket> (1)', '[Find] <clothes_in_basket> (1)', "assert('close' to 'clothes_in_basket')", 'else: [Find] <clothes_in_basket> (1)', '[Grab] <clothes_in_basket> (1)', "assert('clothes_in_basket' in 'hands')", 'else: [Grab] <clothes_in_basket> (1)', '[Turnto] <clothes_in_basket> (1)', '[Lookat] <clothes_in_basket> (1)', "assert('clothes_in_basket' in 'hands')", 'else: [Grab] <clothes_in_basket> (1)', '[Putin] <clothes_in_basket> (1)']}
Pick up phone {'script': ['[Walk] <bedroom> (1)', '[Walk] <phone> (1)', '[Find] <phone> (1)', '[Grab] <phone> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <phone> (1)', '[Find] <phone> (1)', "assert('close' to 'phone')", 'else: [Find] <phone> (1)', '[Grab] <phone> (1)', "assert('phone' in 'hands')", 'else: [Grab] <phone> (1)']}
Go to toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Sit] <toilet> (1)', '[Open] <toilet> (1)', '[Flush] <toilet> (1)', '[Close] <toilet> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Turnto] <toilet> (1)', '[Sit] <toilet> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', '[Open] <toilet> (1)', '[Flush] <toilet> (1)', '[Close] <toilet> (1)']}
experiment time3 on environment scene4
Turn on computer
script before ['[Walk] <home_office> (1)', '[Find] <computer> (1)', '[Switchon] <computer> (1)', '[Sit] <computer> (1)', '[Turnto] <computer> (1)', '[Lookat] <computer> (1)']
illegal action Unknown action "END"  be deleted
Clean toilet
script before ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <toilet_brush> (1)', '[Wash] <toilet> (1)', '[Putobjback] <toilet_brush> (1)', '[Find] <coffee_maker> (1)', '[Grab] <coffee> (1)', '[Fill] <coffee_maker> (1)', '[Fill] <coffee_grounds> (1)', '[Switchon] <coffee_maker> (1)', '[Grab] <cup> (1)', '[Pour] <coffee> (1)']
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action ('toilet_brush', 1) does not exist in the environment  be deleted
illegal action ('coffee_maker', 1) does not exist in the environment  be deleted
illegal action ('coffee_maker', 1) does not exist in the environment  be deleted
illegal action Unknown action "FILL"  be deleted
illegal action Unknown action "FILL"  be deleted
illegal action ('coffee_maker', 1) does not exist in the environment  be deleted
illegal action Wrong number of parameters for "POUR". Got 1, expected 2  be deleted
Args info:
language_planner_result_file: language_planner.json
retry_times: 0
n_shots: 1
instruction: False
step_by_step_generation_prompt_path: None
step_by_step_generation_result_file: None
object_topk: 5
grounded_deciding_prompt_path: None
grounded_deciding_result_file: default_gd.json
prompt_choices_sequence: False
dataset_split: validation
dataset: ./data/val.json
retrieval_dataset: ./data/train.json
example_idx_file: None
api_keys_file: key.txt
save_dir: results/
plan_generation_result_file: default_pg.json
processed_plan_generation_result_file: None
graph_dict_path: None
plan_generation_prompt_path: None
graph_num: 4
exp_times: 3
n_processes: 1
seed: 42
engine: text-davinci-003
n_parallel_prompts: 1
max_generation_tokens: 512
max_api_total_tokens: 4096
temperature: 0.4
sampling_n: 20
top_p: 1.0
stop_tokens: ['\n\n']
verbose: False
experiment time3 on environment scene4
['[WALK] <home_office> (248)', '[FIND] <computer> (273)', '[SWITCHON] <computer> (273)', '[SIT] <computer> (273)', '[TURNTO] <computer> (273)', '[LOOKAT] <computer> (273)']
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is off, clean
walllamp is close to computer
tvstand is facing computer
chair is close to computer
ceiling is facing computer
floor is close to computer
floor is facing computer
computer is inside home_office
closetdrawer is facing computer
mouse is close to computer
computer is close to floor
mat is facing computer
mousepad is facing computer
desk is close to computer
walllamp is facing computer
computer is close to wall
pillow is facing computer
wall is facing computer
computer is close to mousepad
computer is close to walllamp
computer is close to chair
computer is close to cpuscreen
television is facing computer
mousepad is close to computer
doorjamb is facing computer
table is facing computer
ceilinglamp is facing computer
light is facing computer
chair is facing computer
orchid is facing computer
keyboard is close to computer
character is close to computer
computer is close to desk
computer is close to character
computer is close to keyboard
door is facing computer
cpuscreen is close to computer
wall is close to computer
computer is close to mouse
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction True
next step------- assert('close' to 'computer')else: [Find] <computer> (1)
prompt You see computer is clean, on
walllamp is close to computer
tvstand is facing computer
chair is close to computer
ceiling is facing computer
floor is close to computer
floor is facing computer
computer is inside home_office
closetdrawer is facing computer
mouse is close to computer
computer is close to floor
mat is facing computer
mousepad is facing computer
desk is close to computer
walllamp is facing computer
computer is close to wall
pillow is facing computer
wall is facing computer
computer is close to mousepad
computer is close to walllamp
computer is close to chair
computer is close to cpuscreen
television is facing computer
mousepad is close to computer
doorjamb is facing computer
table is facing computer
ceilinglamp is facing computer
light is facing computer
chair is facing computer
orchid is facing computer
keyboard is close to computer
character is close to computer
computer is close to desk
computer is close to character
computer is close to keyboard
door is facing computer
cpuscreen is close to computer
wall is close to computer
computer is close to mouse
computer is inside home_office
You have Currently, you are standing in the home_office, and holding nothing in your right hand and nothing in your left hand., give one word answer True or False to this assert statement: assert('close' to 'computer'), 
prediction False
execute failed at [SIT] <computer> (273)
experiment time1 on environment scene5
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
You exceeded your current quota, please check your plan and billing details. Retry.
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 19.09500479698181
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find dresser\n walk('dresser')\n find('dresser')\n # 2: find spare change\n find('spare_change')\n # 3: grab the spare change\n grab('spare_change')\n # 4: put the spare change in pocket\n assert('close' to 'pocket')\n else: find('pocket')\n putin('spare_change', 'pocket')", <OpenAIObject at 0x7f9f8149d400> JSON: {
  "text_offset": [
    3182,
    3184,
    3186,
    3187,
    3192,
    3195,
    3203,
    3204,
    3209,
    3211,
    3218,
    3220,
    3221,
    3223,
    3225,
    3226,
    3231,
    3237,
    3239,
    3240,
    3245,
    3247,
    3252,
    3254,
    3256,
    3257,
    3262,
    3264,
    3269,
    3271,
    3273,
    3274,
    3276,
    3278,
    3279,
    3284,
    3290,
    3297,
    3298,
    3303,
    3305,
    3307,
    3310,
    3311,
    3317,
    3319,
    3320,
    3322,
    3324,
    3325,
    3330,
    3334,
    3340,
    3347,
    3348,
    3353,
    3355,
    3357,
    3360,
    3361,
    3367,
    3369,
    3370,
    3372,
    3374,
    3375,
    3379,
    3383,
    3389,
    3396,
    3399,
    3406,
    3407,
    3414,
    3416,
    3421,
    3422,
    3425,
    3427,
    3433,
    3435,
    3436,
    3441,
    3442,
    3447,
    3449,
    3455,
    3457,
    3458,
    3462,
    3464,
    3466,
    3468,
    3471,
    3472,
    3478,
    3480,
    3482,
    3488
  ],
  "token_logprobs": [
    -0.020593386,
    -0.011028583,
    -0.0024611985,
    -0.23299138,
    -0.19691154,
    -0.20991933,
    -0.023830183,
    -0.0048978627,
    -0.0043609063,
    -0.0019145607,
    -0.0011181047,
    -0.0075082416,
    -0.0017562592,
    -0.0031852971,
    -0.0010079559,
    -0.045717936,
    -0.034908444,
    -0.00084025477,
    -0.019264687,
    -0.5146343,
    -0.0011628587,
    -0.0027810433,
    -0.0003417842,
    -0.00096189824,
    -0.004582493,
    -0.010571028,
    -0.00066291733,
    -0.00101631,
    -7.5774245e-05,
    -0.0009744874,
    -0.0049630953,
    -0.0051852353,
    -0.005282241,
    -0.0006666147,
    -0.74306214,
    -0.79697895,
    -0.06620047,
    -0.07824864,
    -0.33259872,
    -0.0011970546,
    -0.38895744,
    -0.00022111216,
    -0.04057309,
    -0.0010278262,
    -0.0023864529,
    -0.005847034,
    -0.018320797,
    -0.005065353,
    -0.0012271882,
    -0.6497556,
    -1.3656875,
    -0.11674946,
    -0.0038482905,
    -0.017126927,
    -0.8453154,
    -0.001081348,
    -0.0011312318,
    -0.0001884396,
    -0.0014217009,
    -0.0001485,
    -0.0012562544,
    -0.049105637,
    -0.41470698,
    -0.0093322145,
    -0.0016029936,
    -0.24517846,
    -0.71987903,
    -0.11207983,
    -0.00395085,
    -0.12585491,
    -0.46635777,
    -0.023053799,
    -1.0353849,
    -0.0028843936,
    -0.6425634,
    -0.0030786882,
    -0.0005781046,
    -0.013522901,
    -0.78487015,
    -0.006317305,
    -0.006249766,
    -0.004565787,
    -0.0018643374,
    -0.050171252,
    -0.0016988196,
    -0.0030232058,
    -0.004275122,
    -0.008282676,
    -0.04626215,
    -0.09652591,
    -0.0056886463,
    -0.08029598,
    -0.00027888143,
    -0.0013803964,
    -0.00026158962,
    -0.29197848,
    -0.0019353443,
    -0.0012055287,
    -0.0029732855
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " dress",
    "er",
    "\n",
    " walk",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " find",
    "('",
    "dress",
    "er",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " spare",
    " change",
    "\n",
    " find",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " grab",
    " the",
    " spare",
    " change",
    "\n",
    " grab",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " the",
    " spare",
    " change",
    " in",
    " pocket",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "pocket",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "pocket",
    "')",
    "\n",
    " put",
    "in",
    "('",
    "sp",
    "are",
    "_",
    "change",
    "',",
    " '",
    "pocket",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.020593386
    },
    {
      " 0": -0.011028583
    },
    {
      ":": -0.0024611985
    },
    {
      " walk": -0.23299138
    },
    {
      " to": -0.19691154
    },
    {
      " bedroom": -0.20991933
    },
    {
      "\n": -0.023830183
    },
    {
      " walk": -0.0048978627
    },
    {
      "('": -0.0043609063
    },
    {
      "bedroom": -0.0019145607
    },
    {
      "')": -0.0011181047
    },
    {
      "\n": -0.0075082416
    },
    {
      " #": -0.0017562592
    },
    {
      " 1": -0.0031852971
    },
    {
      ":": -0.0010079559
    },
    {
      " find": -0.045717936
    },
    {
      " dress": -0.034908444
    },
    {
      "er": -0.00084025477
    },
    {
      "\n": -0.019264687
    },
    {
      " walk": -0.5146343
    },
    {
      "('": -0.0011628587
    },
    {
      "dress": -0.0027810433
    },
    {
      "er": -0.0003417842
    },
    {
      "')": -0.00096189824
    },
    {
      "\n": -0.004582493
    },
    {
      " find": -0.010571028
    },
    {
      "('": -0.00066291733
    },
    {
      "dress": -0.00101631
    },
    {
      "er": -7.5774245e-05
    },
    {
      "')": -0.0009744874
    },
    {
      "\n": -0.0049630953
    },
    {
      " #": -0.0051852353
    },
    {
      " 2": -0.005282241
    },
    {
      ":": -0.0006666147
    },
    {
      " find": -0.74306214
    },
    {
      " spare": -0.79697895
    },
    {
      " change": -0.06620047
    },
    {
      "\n": -0.07824864
    },
    {
      " find": -0.33259872
    },
    {
      "('": -0.0011970546
    },
    {
      "sp": -0.38895744
    },
    {
      "are": -0.00022111216
    },
    {
      "_": -0.04057309
    },
    {
      "change": -0.0010278262
    },
    {
      "')": -0.0023864529
    },
    {
      "\n": -0.005847034
    },
    {
      " #": -0.018320797
    },
    {
      " 3": -0.005065353
    },
    {
      ":": -0.0012271882
    },
    {
      " grab": -0.6497556
    },
    {
      " spare": -0.39620215
    },
    {
      " spare": -0.11674946
    },
    {
      " change": -0.0038482905
    },
    {
      "\n": -0.017126927
    },
    {
      " assert": -0.6240534
    },
    {
      "('": -0.001081348
    },
    {
      "sp": -0.0011312318
    },
    {
      "are": -0.0001884396
    },
    {
      "_": -0.0014217009
    },
    {
      "change": -0.0001485
    },
    {
      "')": -0.0012562544
    },
    {
      "\n": -0.049105637
    },
    {
      " #": -0.41470698
    },
    {
      " 4": -0.0093322145
    },
    {
      ":": -0.0016029936
    },
    {
      " put": -0.24517846
    },
    {
      " the": -0.71987903
    },
    {
      " spare": -0.11207983
    },
    {
      " change": -0.00395085
    },
    {
      " in": -0.12585491
    },
    {
      " pocket": -0.46635777
    },
    {
      "\n": -0.023053799
    },
    {
      " put": -0.5433253
    },
    {
      "('": -0.0028843936
    },
    {
      "close": -0.6425634
    },
    {
      "'": -0.0030786882
    },
    {
      " to": -0.0005781046
    },
    {
      " '": -0.013522901
    },
    {
      "sp": -0.6242312
    },
    {
      "')": -0.006317305
    },
    {
      "\n": -0.006249766
    },
    {
      " else": -0.004565787
    },
    {
      ":": -0.0018643374
    },
    {
      " find": -0.050171252
    },
    {
      "('": -0.0016988196
    },
    {
      "pocket": -0.0030232058
    },
    {
      "')": -0.004275122
    },
    {
      "\n": -0.008282676
    },
    {
      " put": -0.04626215
    },
    {
      "in": -0.09652591
    },
    {
      "('": -0.0056886463
    },
    {
      "sp": -0.08029598
    },
    {
      "are": -0.00027888143
    },
    {
      "_": -0.0013803964
    },
    {
      "change": -0.00026158962
    },
    {
      "',": -0.29197848
    },
    {
      " '": -0.0019353443
    },
    {
      "pocket": -0.0012055287
    },
    {
      "')": -0.0029732855
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.6261839866638184
[(" # 0: walk to tv\n walk('tvstand')\n # 1: find tv\n find('television')\n # 2: turn on tv\n assert('close' to 'tv')\n else: find('tv')\n switchon('television')\n # 3: find remote control\n find('remote_control')\n # 4: touch the remote control and set a channel\n assert('close' to 'remote_control')\n else: find('remote_control')\n touch('remote_control')\n # 5: look at the television\n turnto('television')\n lookat('television')", <OpenAIObject at 0x7f9f8149d810> JSON: {
  "text_offset": [
    3161,
    3163,
    3165,
    3166,
    3171,
    3174,
    3177,
    3178,
    3183,
    3185,
    3187,
    3192,
    3194,
    3195,
    3197,
    3199,
    3200,
    3205,
    3208,
    3209,
    3214,
    3216,
    3218,
    3226,
    3228,
    3229,
    3231,
    3233,
    3234,
    3239,
    3242,
    3245,
    3246,
    3253,
    3255,
    3260,
    3261,
    3264,
    3266,
    3268,
    3270,
    3271,
    3276,
    3277,
    3282,
    3284,
    3286,
    3288,
    3289,
    3296,
    3298,
    3300,
    3302,
    3310,
    3312,
    3313,
    3315,
    3317,
    3318,
    3323,
    3330,
    3338,
    3339,
    3344,
    3346,
    3352,
    3353,
    3360,
    3362,
    3363,
    3365,
    3367,
    3368,
    3374,
    3378,
    3385,
    3393,
    3397,
    3401,
    3403,
    3411,
    3412,
    3419,
    3421,
    3426,
    3427,
    3430,
    3432,
    3438,
    3439,
    3446,
    3448,
    3449,
    3454,
    3455,
    3460,
    3462,
    3468,
    3469,
    3476,
    3478,
    3479,
    3485,
    3487,
    3493,
    3494,
    3501,
    3503,
    3504,
    3506,
    3508,
    3509,
    3514,
    3517,
    3521,
    3532,
    3533,
    3537,
    3539,
    3540,
    3542,
    3544,
    3552,
    3554,
    3555,
    3560,
    3562,
    3564,
    3566,
    3574
  ],
  "token_logprobs": [
    -0.013966334,
    -0.0074095787,
    -0.0014977466,
    -0.41757208,
    -0.3388085,
    -3.2197936,
    -0.66674083,
    -0.018021801,
    -0.0039390004,
    -0.32812747,
    -2.5297213,
    -0.0015131489,
    -0.00815936,
    -0.18789385,
    -0.0032815735,
    -0.0005540104,
    -0.07598455,
    -0.4261804,
    -0.045071382,
    -0.15132846,
    -0.0009963805,
    -0.16038842,
    -0.00074987864,
    -0.0019679493,
    -0.0045897374,
    -0.0039468403,
    -0.0052443133,
    -0.00085683604,
    -0.19862214,
    -0.026908608,
    -0.4202947,
    -0.066594504,
    -0.2982604,
    -0.001266938,
    -0.035424396,
    -0.004238787,
    -0.0014554255,
    -0.0018080277,
    -0.55507696,
    -0.0069013443,
    -0.0032275738,
    -0.0014265949,
    -0.001137975,
    -0.0076121395,
    -0.0008551662,
    -0.020291943,
    -0.013052249,
    -0.004530279,
    -0.47013485,
    -0.00297496,
    -0.00056367373,
    -0.07398845,
    -0.0012919428,
    -0.0014953004,
    -0.45998546,
    -0.08340423,
    -0.007458099,
    -0.0006718608,
    -1.1537747,
    -0.3256959,
    -0.2884481,
    -0.054723315,
    -0.09072322,
    -0.0007656874,
    -0.0010408321,
    -0.0037225238,
    -0.0015602494,
    -0.001987001,
    -0.020870084,
    -0.054252885,
    -0.0060685864,
    -0.00067102915,
    -0.48216262,
    -0.3118605,
    -0.0032441372,
    -0.072513595,
    -0.26810914,
    -0.023798322,
    -0.03889402,
    -0.0020651831,
    -0.008798349,
    -0.087207384,
    -0.00048263065,
    -0.016068695,
    -0.0017471225,
    -0.0011173876,
    -0.00050791225,
    -0.0024079639,
    -0.0015795339,
    -0.0005517445,
    -0.0032506553,
    -0.0018411076,
    -0.0007609162,
    -0.0005424415,
    -0.0021812425,
    -0.00055770774,
    -0.0003301562,
    -0.00059283763,
    -0.00024429872,
    -0.0012909872,
    -0.0035894765,
    -0.009327102,
    -0.00025431695,
    -0.00022242252,
    -0.0002351206,
    -0.00021014028,
    -0.00102711,
    -0.03791799,
    -0.01165223,
    -0.0034449021,
    -0.00059629476,
    -0.019255327,
    -0.0010025869,
    -0.020740397,
    -0.0545665,
    -0.006248086,
    -0.014842047,
    -2.4866502e-05,
    -0.00014957195,
    -0.00017306075,
    -0.0026590584,
    -0.0001118973,
    -0.0006631548,
    -0.0030606305,
    -0.0024072458,
    -9.675685e-05,
    -0.00018903565,
    -0.00027780765,
    -0.00021383668,
    -0.0017246117
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " tv",
    "\n",
    " walk",
    "('",
    "tv",
    "stand",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " tv",
    "\n",
    " find",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " tv",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "tv",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "tv",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " remote",
    " control",
    "\n",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " touch",
    " the",
    " remote",
    " control",
    " and",
    " set",
    " a",
    " channel",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " touch",
    "('",
    "remote",
    "_",
    "control",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " look",
    " at",
    " the",
    " television",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "te",
    "levision",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "te",
    "levision",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.013966334
    },
    {
      " 0": -0.0074095787
    },
    {
      ":": -0.0014977466
    },
    {
      " walk": -0.41757208
    },
    {
      " to": -0.3388085
    },
    {
      " living": -0.6098495
    },
    {
      "\n": -0.66674083
    },
    {
      " walk": -0.018021801
    },
    {
      "('": -0.0039390004
    },
    {
      "tv": -0.32812747
    },
    {
      "')": -0.103263825
    },
    {
      "')": -0.0015131489
    },
    {
      "\n": -0.00815936
    },
    {
      " #": -0.18789385
    },
    {
      " 1": -0.0032815735
    },
    {
      ":": -0.0005540104
    },
    {
      " find": -0.07598455
    },
    {
      " tv": -0.4261804
    },
    {
      "\n": -0.045071382
    },
    {
      " find": -0.15132846
    },
    {
      "('": -0.0009963805
    },
    {
      "te": -0.16038842
    },
    {
      "levision": -0.00074987864
    },
    {
      "')": -0.0019679493
    },
    {
      "\n": -0.0045897374
    },
    {
      " #": -0.0039468403
    },
    {
      " 2": -0.0052443133
    },
    {
      ":": -0.00085683604
    },
    {
      " turn": -0.19862214
    },
    {
      " on": -0.026908608
    },
    {
      " tv": -0.4202947
    },
    {
      "\n": -0.066594504
    },
    {
      " assert": -0.2982604
    },
    {
      "('": -0.001266938
    },
    {
      "close": -0.035424396
    },
    {
      "'": -0.004238787
    },
    {
      " to": -0.0014554255
    },
    {
      " '": -0.0018080277
    },
    {
      "tv": -0.55507696
    },
    {
      "')": -0.0069013443
    },
    {
      "\n": -0.0032275738
    },
    {
      " else": -0.0014265949
    },
    {
      ":": -0.001137975
    },
    {
      " find": -0.0076121395
    },
    {
      "('": -0.0008551662
    },
    {
      "tv": -0.020291943
    },
    {
      "')": -0.013052249
    },
    {
      "\n": -0.004530279
    },
    {
      " switch": -0.47013485
    },
    {
      "on": -0.00297496
    },
    {
      "('": -0.00056367373
    },
    {
      "te": -0.07398845
    },
    {
      "levision": -0.0012919428
    },
    {
      "')": -0.0014953004
    },
    {
      "\n": -0.45998546
    },
    {
      " #": -0.08340423
    },
    {
      " 3": -0.007458099
    },
    {
      ":": -0.0006718608
    },
    {
      " find": -1.1537747
    },
    {
      " remote": -0.3256959
    },
    {
      " control": -0.2884481
    },
    {
      "\n": -0.054723315
    },
    {
      " find": -0.09072322
    },
    {
      "('": -0.0007656874
    },
    {
      "remote": -0.0010408321
    },
    {
      "_": -0.0037225238
    },
    {
      "control": -0.0015602494
    },
    {
      "')": -0.001987001
    },
    {
      "\n": -0.020870084
    },
    {
      " #": -0.054252885
    },
    {
      " 4": -0.0060685864
    },
    {
      ":": -0.00067102915
    },
    {
      " touch": -0.48216262
    },
    {
      " the": -0.3118605
    },
    {
      " remote": -0.0032441372
    },
    {
      " control": -0.072513595
    },
    {
      " and": -0.26810914
    },
    {
      " set": -0.023798322
    },
    {
      " a": -0.03889402
    },
    {
      " channel": -0.0020651831
    },
    {
      "\n": -0.008798349
    },
    {
      " assert": -0.087207384
    },
    {
      "('": -0.00048263065
    },
    {
      "close": -0.016068695
    },
    {
      "'": -0.0017471225
    },
    {
      " to": -0.0011173876
    },
    {
      " '": -0.00050791225
    },
    {
      "remote": -0.0024079639
    },
    {
      "_": -0.0015795339
    },
    {
      "control": -0.0005517445
    },
    {
      "')": -0.0032506553
    },
    {
      "\n": -0.0018411076
    },
    {
      " else": -0.0007609162
    },
    {
      ":": -0.0005424415
    },
    {
      " find": -0.0021812425
    },
    {
      "('": -0.00055770774
    },
    {
      "remote": -0.0003301562
    },
    {
      "_": -0.00059283763
    },
    {
      "control": -0.00024429872
    },
    {
      "')": -0.0012909872
    },
    {
      "\n": -0.0035894765
    },
    {
      " touch": -0.009327102
    },
    {
      "('": -0.00025431695
    },
    {
      "remote": -0.00022242252
    },
    {
      "_": -0.0002351206
    },
    {
      "control": -0.00021014028
    },
    {
      "')": -0.00102711
    },
    {
      "\n": -0.03791799
    },
    {
      " #": -0.01165223
    },
    {
      " 5": -0.0034449021
    },
    {
      ":": -0.00059629476
    },
    {
      " look": -0.019255327
    },
    {
      " at": -0.0010025869
    },
    {
      " the": -0.020740397
    },
    {
      " television": -0.0545665
    },
    {
      "\n": -0.006248086
    },
    {
      " tur": -0.014842047
    },
    {
      "nt": -2.4866502e-05
    },
    {
      "o": -0.00014957195
    },
    {
      "('": -0.00017306075
    },
    {
      "te": -0.0026590584
    },
    {
      "levision": -0.0001118973
    },
    {
      "')": -0.0006631548
    },
    {
      "\n": -0.0030606305
    },
    {
      " look": -0.0024072458
    },
    {
      "at": -9.675685e-05
    },
    {
      "('": -0.00018903565
    },
    {
      "te": -0.00027780765
    },
    {
      "levision": -0.00021383668
    },
    {
      "')": -0.0017246117
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 6.864567041397095
[(" # 0: find sponge\n find('sponge')\n # 1: grab sponge\n assert('close' to 'sponge')\n else: find('sponge')\n grab('sponge')\n assert('sponge' in 'hands')\n else: grab('sponge')\n turnto('sponge')\n assert('sponge' in 'hands')\n else: grab('sponge')\n pointat('sponge')\n # 2: grab detergent\n find('detergent')\n grab('detergent')\n assert('detergent' in 'hands')\n else: grab('detergent')\n turnto('detergent')\n lookat('detergent')\n # 3: pour detergent on sponge\n assert('close' to 'sponge')\n else: find('sponge')\n assert('detergent' in 'hands')\n else: grab('detergent')\n pour('detergent')\n # 4: turn to sink and wash it\n turnto('sink')\n assert('close' to 'sink')\n else: find('sink')\n wash('sink')\n # 5: wipe sink\n wipe('sink')\n # 6: put sponge back\n putobjback('sponge')", <OpenAIObject at 0x7f9f20021e00> JSON: {
  "text_offset": [
    3160,
    3162,
    3164,
    3165,
    3170,
    3177,
    3178,
    3183,
    3185,
    3187,
    3191,
    3193,
    3194,
    3196,
    3198,
    3199,
    3204,
    3211,
    3212,
    3219,
    3221,
    3226,
    3227,
    3230,
    3232,
    3234,
    3238,
    3240,
    3241,
    3246,
    3247,
    3252,
    3254,
    3256,
    3260,
    3262,
    3263,
    3268,
    3270,
    3272,
    3276,
    3278,
    3279,
    3286,
    3288,
    3290,
    3294,
    3295,
    3298,
    3300,
    3305,
    3307,
    3308,
    3313,
    3314,
    3319,
    3321,
    3323,
    3327,
    3329,
    3330,
    3334,
    3336,
    3337,
    3339,
    3341,
    3345,
    3347,
    3348,
    3355,
    3357,
    3359,
    3363,
    3364,
    3367,
    3369,
    3374,
    3376,
    3377,
    3382,
    3383,
    3388,
    3390,
    3392,
    3396,
    3398,
    3399,
    3405,
    3407,
    3409,
    3411,
    3415,
    3417,
    3418,
    3420,
    3422,
    3423,
    3428,
    3434,
    3438,
    3439,
    3444,
    3446,
    3447,
    3451,
    3455,
    3457,
    3458,
    3463,
    3465,
    3466,
    3470,
    3474,
    3476,
    3477,
    3484,
    3486,
    3487,
    3491,
    3495,
    3496,
    3499,
    3501,
    3506,
    3508,
    3509,
    3514,
    3515,
    3520,
    3522,
    3523,
    3527,
    3531,
    3533,
    3534,
    3538,
    3540,
    3541,
    3543,
    3544,
    3548,
    3552,
    3554,
    3555,
    3560,
    3562,
    3564,
    3565,
    3569,
    3573,
    3575,
    3576,
    3578,
    3580,
    3581,
    3586,
    3592,
    3596,
    3599,
    3606,
    3607,
    3614,
    3616,
    3621,
    3622,
    3625,
    3627,
    3629,
    3633,
    3635,
    3636,
    3641,
    3642,
    3647,
    3649,
    3651,
    3655,
    3657,
    3658,
    3665,
    3667,
    3668,
    3672,
    3676,
    3677,
    3680,
    3682,
    3687,
    3689,
    3690,
    3695,
    3696,
    3701,
    3703,
    3704,
    3708,
    3712,
    3714,
    3715,
    3720,
    3722,
    3723,
    3727,
    3731,
    3733,
    3734,
    3736,
    3738,
    3739,
    3744,
    3747,
    3752,
    3756,
    3761,
    3764,
    3765,
    3769,
    3771,
    3772,
    3774,
    3775,
    3778,
    3780,
    3781,
    3788,
    3790,
    3795,
    3796,
    3799,
    3801,
    3802,
    3805,
    3807,
    3808,
    3813,
    3814,
    3819,
    3821,
    3822,
    3825,
    3827,
    3828,
    3833,
    3835,
    3836,
    3839,
    3841,
    3842,
    3844,
    3846,
    3847,
    3852,
    3857,
    3858,
    3863,
    3865,
    3866,
    3869,
    3871,
    3872,
    3874,
    3876,
    3877,
    3881,
    3888,
    3893,
    3894,
    3898,
    3901,
    3905,
    3907,
    3909,
    3913
  ],
  "token_logprobs": [
    -0.020539537,
    -0.007002777,
    -0.0019397625,
    -0.6469823,
    -1.8592108,
    -0.039792538,
    -0.017673327,
    -0.0022113477,
    -0.00096523983,
    -0.00039187065,
    -0.0015041932,
    -0.008862871,
    -0.006923129,
    -0.0024210487,
    -0.0009302187,
    -0.13531256,
    -0.03600128,
    -0.02410906,
    -0.30396983,
    -0.0014225353,
    -0.00412255,
    -0.0020143553,
    -0.00051005994,
    -0.0024187781,
    -0.0012003971,
    -0.0003841183,
    -0.004389643,
    -0.0070839934,
    -0.0010641633,
    -0.0012637138,
    -0.0033282186,
    -0.001322799,
    -0.00022337619,
    -0.001028304,
    -0.00092878635,
    -0.0071205515,
    -0.0024316246,
    -0.00076783594,
    -5.944078e-05,
    -0.0002601591,
    -0.00027399295,
    -0.0050697257,
    -0.29682553,
    -0.0010440545,
    -0.0024772729,
    -0.00054876425,
    -0.0009923818,
    -0.009991947,
    -0.0019481841,
    -0.005092132,
    -0.008750486,
    -0.0029600738,
    -0.012306072,
    -0.0019383293,
    -0.0015526679,
    -0.00090862135,
    -0.00023154433,
    -0.00034715232,
    -0.0033707996,
    -0.004651175,
    -0.21766517,
    -2.7611111e-05,
    -0.00024001097,
    -0.00032586468,
    -0.0004589541,
    -0.0001506467,
    -0.00066160323,
    -0.002809617,
    -0.23581274,
    -0.00029807872,
    -0.00091697165,
    -0.00013335768,
    -0.0004259183,
    -0.00077642646,
    -0.00061764714,
    -0.0006476483,
    -0.00069804816,
    -0.0012816186,
    -0.0031290925,
    -0.0005363581,
    -0.0006382224,
    -0.0006973329,
    -0.00013287991,
    -0.00023619535,
    -0.00053492666,
    -0.002785229,
    -0.036444105,
    -0.0007204754,
    -0.00030642524,
    -0.00020871071,
    -0.00025145593,
    -0.0008564793,
    -0.0063038096,
    -0.003155461,
    -0.006590203,
    -0.0008275482,
    -3.2650435,
    -0.035535436,
    -0.001327575,
    -0.047575083,
    -0.28136972,
    -0.0012761275,
    -0.00041613853,
    -0.00031560898,
    -0.0012165691,
    -0.0019730856,
    -0.004784185,
    -0.3057823,
    -0.0013328867,
    -0.0002915213,
    -0.0005930761,
    -0.00034357232,
    -0.0007152264,
    -0.004303975,
    -0.48501325,
    -0.0014926723,
    -0.010663381,
    -0.0012030216,
    -0.00074427295,
    -0.0011801645,
    -0.0047782552,
    -0.0017064019,
    -0.0031408698,
    -0.0051727714,
    -0.003104039,
    -0.009467532,
    -0.0024435145,
    -0.0306508,
    -0.0023337563,
    -0.0014717197,
    -0.00048596945,
    -0.00024477651,
    -0.0009509207,
    -0.005837561,
    -0.45590118,
    -6.3134365e-05,
    -0.0005087468,
    -0.0005826383,
    -0.0036628782,
    -0.0002555109,
    -0.00045716506,
    -0.0008610139,
    -0.0030653544,
    -0.8776598,
    -0.0005732152,
    -0.0005427982,
    -0.00066291733,
    -0.00014885482,
    -0.00021944042,
    -0.0017260432,
    -0.006983269,
    -0.011142855,
    -0.009575546,
    -0.0016785786,
    -1.4351919,
    -0.019531963,
    -0.0011753915,
    -0.54195,
    -0.23020427,
    -0.01745616,
    -0.29375693,
    -0.0013784863,
    -1.3369478,
    -0.0037651223,
    -0.0006034519,
    -0.0014465919,
    -0.5987252,
    -0.0002665992,
    -0.01463983,
    -0.006228536,
    -0.0058324654,
    -0.0011426316,
    -0.055239502,
    -0.0011615454,
    -0.0009828367,
    -0.00047350506,
    -0.00207862,
    -0.0042334604,
    -0.45277867,
    -0.0012624016,
    -0.21876232,
    -0.0002358368,
    -0.0005273536,
    -0.001508374,
    -0.005163185,
    -0.0020066497,
    -0.0052307714,
    -0.010249408,
    -0.0027672967,
    -0.0011466885,
    -0.0015137449,
    -0.024496369,
    -0.0013774115,
    -0.0018738327,
    -5.0260765e-05,
    -8.3165185e-05,
    -0.0018313756,
    -0.005702793,
    -0.051462077,
    -0.0032560974,
    -0.013665917,
    -0.000554368,
    -0.0003774407,
    -0.94018245,
    -0.012314822,
    -0.46350825,
    -0.004057851,
    -0.0010515723,
    -4.306231,
    -0.037606083,
    -0.047930125,
    -2.7393215,
    -0.2896649,
    -0.96112055,
    -0.069346584,
    -0.4283475,
    -3.5120327e-05,
    -0.000494912,
    -0.0005064818,
    -0.0022301679,
    -7.720381e-05,
    -0.000901283,
    -0.004361385,
    -1.5914079,
    -0.0011386921,
    -1.0275612,
    -0.002707229,
    -0.00038173224,
    -0.0016788178,
    -0.012608798,
    -0.00013681567,
    -0.0033793524,
    -0.0028460766,
    -0.001331932,
    -0.0012495712,
    -0.032670334,
    -0.0012677707,
    -0.0008465784,
    -0.00019583241,
    -0.0015973814,
    -0.0057645394,
    -0.2958387,
    -0.0012252779,
    -0.016543072,
    -0.0005673702,
    -0.0023995978,
    -0.011262625,
    -0.36992136,
    -0.0065925424,
    -0.0018268373,
    -0.495155,
    -0.82799965,
    -0.32866833,
    -0.28620467,
    -0.00081824145,
    -0.0024483511,
    -0.00020191487,
    -0.0011203715,
    -0.028374057,
    -0.04368207,
    -0.0044541797,
    -0.002035976,
    -0.47109118,
    -0.70537096,
    -0.18147056,
    -0.040305525,
    -1.2130173,
    -0.5130119,
    -0.0045557874,
    -0.0013611156,
    -0.002934305,
    -0.00031179338,
    -0.0030881949
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " sponge",
    "\n",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " sponge",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " assert",
    "('",
    "sp",
    "onge",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " deter",
    "gent",
    "\n",
    " find",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " grab",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " assert",
    "('",
    "d",
    "eter",
    "gent",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " deter",
    "gent",
    " on",
    " sponge",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " assert",
    "('",
    "d",
    "eter",
    "gent",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " pour",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " turn",
    " to",
    " sink",
    " and",
    " wash",
    " it",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "s",
    "ink",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " wash",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " wipe",
    " sink",
    "\n",
    " wipe",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " put",
    " sponge",
    " back",
    "\n",
    " put",
    "obj",
    "back",
    "('",
    "sp",
    "onge",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.020539537
    },
    {
      " 0": -0.007002777
    },
    {
      ":": -0.0019397625
    },
    {
      " find": -0.6469823
    },
    {
      " sink": -0.39316466
    },
    {
      "\n": -0.039792538
    },
    {
      " find": -0.017673327
    },
    {
      "('": -0.0022113477
    },
    {
      "sp": -0.00096523983
    },
    {
      "onge": -0.00039187065
    },
    {
      "')": -0.0015041932
    },
    {
      "\n": -0.008862871
    },
    {
      " #": -0.006923129
    },
    {
      " 1": -0.0024210487
    },
    {
      ":": -0.0009302187
    },
    {
      " grab": -0.13531256
    },
    {
      " sponge": -0.03600128
    },
    {
      "\n": -0.02410906
    },
    {
      " assert": -0.30396983
    },
    {
      "('": -0.0014225353
    },
    {
      "close": -0.00412255
    },
    {
      "'": -0.0020143553
    },
    {
      " to": -0.00051005994
    },
    {
      " '": -0.0024187781
    },
    {
      "sp": -0.0012003971
    },
    {
      "onge": -0.0003841183
    },
    {
      "')": -0.004389643
    },
    {
      "\n": -0.0070839934
    },
    {
      " else": -0.0010641633
    },
    {
      ":": -0.0012637138
    },
    {
      " find": -0.0033282186
    },
    {
      "('": -0.001322799
    },
    {
      "sp": -0.00022337619
    },
    {
      "onge": -0.001028304
    },
    {
      "')": -0.00092878635
    },
    {
      "\n": -0.0071205515
    },
    {
      " grab": -0.0024316246
    },
    {
      "('": -0.00076783594
    },
    {
      "sp": -5.944078e-05
    },
    {
      "onge": -0.0002601591
    },
    {
      "')": -0.00027399295
    },
    {
      "\n": -0.0050697257
    },
    {
      " assert": -0.29682553
    },
    {
      "('": -0.0010440545
    },
    {
      "sp": -0.0024772729
    },
    {
      "onge": -0.00054876425
    },
    {
      "'": -0.0009923818
    },
    {
      " in": -0.009991947
    },
    {
      " '": -0.0019481841
    },
    {
      "hands": -0.005092132
    },
    {
      "')": -0.008750486
    },
    {
      "\n": -0.0029600738
    },
    {
      " else": -0.012306072
    },
    {
      ":": -0.0019383293
    },
    {
      " grab": -0.0015526679
    },
    {
      "('": -0.00090862135
    },
    {
      "sp": -0.00023154433
    },
    {
      "onge": -0.00034715232
    },
    {
      "')": -0.0033707996
    },
    {
      "\n": -0.004651175
    },
    {
      " tur": -0.21766517
    },
    {
      "nt": -2.7611111e-05
    },
    {
      "o": -0.00024001097
    },
    {
      "('": -0.00032586468
    },
    {
      "sp": -0.0004589541
    },
    {
      "onge": -0.0001506467
    },
    {
      "')": -0.00066160323
    },
    {
      "\n": -0.002809617
    },
    {
      " assert": -0.23581274
    },
    {
      "('": -0.00029807872
    },
    {
      "sp": -0.00091697165
    },
    {
      "onge": -0.00013335768
    },
    {
      "'": -0.0004259183
    },
    {
      " in": -0.00077642646
    },
    {
      " '": -0.00061764714
    },
    {
      "hands": -0.0006476483
    },
    {
      "')": -0.00069804816
    },
    {
      "\n": -0.0012816186
    },
    {
      " else": -0.0031290925
    },
    {
      ":": -0.0005363581
    },
    {
      " grab": -0.0006382224
    },
    {
      "('": -0.0006973329
    },
    {
      "sp": -0.00013287991
    },
    {
      "onge": -0.00023619535
    },
    {
      "')": -0.00053492666
    },
    {
      "\n": -0.002785229
    },
    {
      " point": -0.036444105
    },
    {
      "at": -0.0007204754
    },
    {
      "('": -0.00030642524
    },
    {
      "sp": -0.00020871071
    },
    {
      "onge": -0.00025145593
    },
    {
      "')": -0.0008564793
    },
    {
      "\n": -0.0063038096
    },
    {
      " #": -0.003155461
    },
    {
      " 2": -0.006590203
    },
    {
      ":": -0.0008275482
    },
    {
      " find": -0.836659
    },
    {
      " deter": -0.035535436
    },
    {
      "gent": -0.001327575
    },
    {
      "\n": -0.047575083
    },
    {
      " find": -0.28136972
    },
    {
      "('": -0.0012761275
    },
    {
      "d": -0.00041613853
    },
    {
      "eter": -0.00031560898
    },
    {
      "gent": -0.0012165691
    },
    {
      "')": -0.0019730856
    },
    {
      "\n": -0.004784185
    },
    {
      " grab": -0.3057823
    },
    {
      "('": -0.0013328867
    },
    {
      "d": -0.0002915213
    },
    {
      "eter": -0.0005930761
    },
    {
      "gent": -0.00034357232
    },
    {
      "')": -0.0007152264
    },
    {
      "\n": -0.004303975
    },
    {
      " assert": -0.48501325
    },
    {
      "('": -0.0014926723
    },
    {
      "d": -0.010663381
    },
    {
      "eter": -0.0012030216
    },
    {
      "gent": -0.00074427295
    },
    {
      "'": -0.0011801645
    },
    {
      " in": -0.0047782552
    },
    {
      " '": -0.0017064019
    },
    {
      "hands": -0.0031408698
    },
    {
      "')": -0.0051727714
    },
    {
      "\n": -0.003104039
    },
    {
      " else": -0.009467532
    },
    {
      ":": -0.0024435145
    },
    {
      " grab": -0.0306508
    },
    {
      "('": -0.0023337563
    },
    {
      "d": -0.0014717197
    },
    {
      "eter": -0.00048596945
    },
    {
      "gent": -0.00024477651
    },
    {
      "')": -0.0009509207
    },
    {
      "\n": -0.005837561
    },
    {
      " tur": -0.45590118
    },
    {
      "nt": -6.3134365e-05
    },
    {
      "o": -0.0005087468
    },
    {
      "('": -0.0005826383
    },
    {
      "d": -0.0036628782
    },
    {
      "eter": -0.0002555109
    },
    {
      "gent": -0.00045716506
    },
    {
      "')": -0.0008610139
    },
    {
      "\n": -0.0030653544
    },
    {
      " look": -0.8776598
    },
    {
      "at": -0.0005732152
    },
    {
      "('": -0.0005427982
    },
    {
      "d": -0.00066291733
    },
    {
      "eter": -0.00014885482
    },
    {
      "gent": -0.00021944042
    },
    {
      "')": -0.0017260432
    },
    {
      "\n": -0.006983269
    },
    {
      " #": -0.011142855
    },
    {
      " 3": -0.009575546
    },
    {
      ":": -0.0016785786
    },
    {
      " pour": -1.4351919
    },
    {
      " deter": -0.019531963
    },
    {
      "gent": -0.0011753915
    },
    {
      " on": -0.54195
    },
    {
      " sponge": -0.23020427
    },
    {
      "\n": -0.01745616
    },
    {
      " assert": -0.29375693
    },
    {
      "('": -0.0013784863
    },
    {
      "d": -0.38282707
    },
    {
      "'": -0.0037651223
    },
    {
      " to": -0.0006034519
    },
    {
      " '": -0.0014465919
    },
    {
      "sp": -0.5987252
    },
    {
      "onge": -0.0002665992
    },
    {
      "')": -0.01463983
    },
    {
      "\n": -0.006228536
    },
    {
      " else": -0.0058324654
    },
    {
      ":": -0.0011426316
    },
    {
      " find": -0.055239502
    },
    {
      "('": -0.0011615454
    },
    {
      "sp": -0.0009828367
    },
    {
      "onge": -0.00047350506
    },
    {
      "')": -0.00207862
    },
    {
      "\n": -0.0042334604
    },
    {
      " assert": -0.45277867
    },
    {
      "('": -0.0012624016
    },
    {
      "d": -0.21876232
    },
    {
      "eter": -0.0002358368
    },
    {
      "gent": -0.0005273536
    },
    {
      "'": -0.001508374
    },
    {
      " in": -0.005163185
    },
    {
      " '": -0.0020066497
    },
    {
      "hands": -0.0052307714
    },
    {
      "')": -0.010249408
    },
    {
      "\n": -0.0027672967
    },
    {
      " else": -0.0011466885
    },
    {
      ":": -0.0015137449
    },
    {
      " grab": -0.024496369
    },
    {
      "('": -0.0013774115
    },
    {
      "d": -0.0018738327
    },
    {
      "eter": -5.0260765e-05
    },
    {
      "gent": -8.3165185e-05
    },
    {
      "')": -0.0018313756
    },
    {
      "\n": -0.005702793
    },
    {
      " pour": -0.051462077
    },
    {
      "('": -0.0032560974
    },
    {
      "d": -0.013665917
    },
    {
      "eter": -0.000554368
    },
    {
      "gent": -0.0003774407
    },
    {
      "',": -0.8542764
    },
    {
      "\n": -0.012314822
    },
    {
      " #": -0.46350825
    },
    {
      " 4": -0.004057851
    },
    {
      ":": -0.0010515723
    },
    {
      " wash": -0.5116704
    },
    {
      " to": -0.037606083
    },
    {
      " sink": -0.047930125
    },
    {
      "\n": -0.09266445
    },
    {
      " wash": -0.2896649
    },
    {
      "\n": -0.8198346
    },
    {
      "\n": -0.069346584
    },
    {
      " tur": -0.4283475
    },
    {
      "nt": -3.5120327e-05
    },
    {
      "o": -0.000494912
    },
    {
      "('": -0.0005064818
    },
    {
      "s": -0.0022301679
    },
    {
      "ink": -7.720381e-05
    },
    {
      "')": -0.000901283
    },
    {
      "\n": -0.004361385
    },
    {
      " look": -0.684762
    },
    {
      "('": -0.0011386921
    },
    {
      "sp": -0.5187072
    },
    {
      "'": -0.002707229
    },
    {
      " to": -0.00038173224
    },
    {
      " '": -0.0016788178
    },
    {
      "s": -0.012608798
    },
    {
      "ink": -0.00013681567
    },
    {
      "')": -0.0033793524
    },
    {
      "\n": -0.0028460766
    },
    {
      " else": -0.001331932
    },
    {
      ":": -0.0012495712
    },
    {
      " find": -0.032670334
    },
    {
      "('": -0.0012677707
    },
    {
      "s": -0.0008465784
    },
    {
      "ink": -0.00019583241
    },
    {
      "')": -0.0015973814
    },
    {
      "\n": -0.0057645394
    },
    {
      " wash": -0.2958387
    },
    {
      "('": -0.0012252779
    },
    {
      "s": -0.016543072
    },
    {
      "ink": -0.0005673702
    },
    {
      "')": -0.0023995978
    },
    {
      "\n": -0.011262625
    },
    {
      " #": -0.36992136
    },
    {
      " 5": -0.0065925424
    },
    {
      ":": -0.0018268373
    },
    {
      " wipe": -0.495155
    },
    {
      " sink": -0.82799965
    },
    {
      "\n": -0.32866833
    },
    {
      " wipe": -0.28620467
    },
    {
      "('": -0.00081824145
    },
    {
      "s": -0.0024483511
    },
    {
      "ink": -0.00020191487
    },
    {
      "')": -0.0011203715
    },
    {
      "\n": -0.028374057
    },
    {
      " #": -0.04368207
    },
    {
      " 6": -0.0044541797
    },
    {
      ":": -0.002035976
    },
    {
      " put": -0.47109118
    },
    {
      " sponge": -0.70537096
    },
    {
      " back": -0.18147056
    },
    {
      "\n": -0.040305525
    },
    {
      " assert": -0.42600727
    },
    {
      "obj": -0.5130119
    },
    {
      "back": -0.0045557874
    },
    {
      "('": -0.0013611156
    },
    {
      "sp": -0.002934305
    },
    {
      "onge": -0.00031179338
    },
    {
      "')": -0.0030881949
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.5211141109466553
[(" # 0: find closet\n find('closet')\n # 1: find hanger\n find('hanger')\n # 2: grab hanger\n grab('hanger')\n assert('hanger' in 'hands')\n else: grab('hanger')\n # 3: find jacket\n find('jacket')\n # 4: put hanger on the jacket\n assert('close' to 'hanger')\n else: find('hanger')\n assert('hanger' in 'hands')\n else: grab('hanger')\n puton('jacket')\n # 5: put back hanger in closet\n assert('close' to 'closet')\n else: find('closet')\n putback('hanger', 'closet')", <OpenAIObject at 0x7f9f10018590> JSON: {
  "text_offset": [
    3165,
    3167,
    3169,
    3170,
    3175,
    3182,
    3183,
    3188,
    3190,
    3192,
    3194,
    3196,
    3198,
    3199,
    3201,
    3203,
    3204,
    3209,
    3211,
    3216,
    3217,
    3222,
    3224,
    3225,
    3230,
    3232,
    3233,
    3235,
    3237,
    3238,
    3243,
    3245,
    3250,
    3251,
    3256,
    3258,
    3259,
    3264,
    3266,
    3267,
    3274,
    3276,
    3277,
    3282,
    3283,
    3286,
    3288,
    3293,
    3295,
    3296,
    3301,
    3302,
    3307,
    3309,
    3310,
    3315,
    3317,
    3318,
    3320,
    3322,
    3323,
    3328,
    3335,
    3336,
    3341,
    3343,
    3344,
    3349,
    3351,
    3352,
    3354,
    3356,
    3357,
    3361,
    3363,
    3368,
    3371,
    3375,
    3382,
    3383,
    3390,
    3392,
    3397,
    3398,
    3401,
    3403,
    3404,
    3409,
    3411,
    3412,
    3417,
    3418,
    3423,
    3425,
    3426,
    3431,
    3433,
    3434,
    3441,
    3443,
    3444,
    3449,
    3450,
    3453,
    3455,
    3460,
    3462,
    3463,
    3468,
    3469,
    3474,
    3476,
    3477,
    3482,
    3484,
    3485,
    3489,
    3491,
    3493,
    3494,
    3499,
    3501,
    3502,
    3504,
    3506,
    3507,
    3511,
    3516,
    3518,
    3523,
    3526,
    3533,
    3534,
    3541,
    3543,
    3548,
    3549,
    3552,
    3554,
    3556,
    3558,
    3560,
    3562,
    3563,
    3568,
    3569,
    3574,
    3576,
    3578,
    3580,
    3582,
    3584,
    3585,
    3589,
    3593,
    3595,
    3596,
    3601,
    3603,
    3605,
    3607,
    3609,
    3611
  ],
  "token_logprobs": [
    -0.014259223,
    -0.006779757,
    -0.0017007297,
    -0.760516,
    -1.5292681,
    -0.31606162,
    -0.15499453,
    -0.0019057224,
    -0.0007445123,
    -0.0035474224,
    -0.0006269501,
    -0.025724689,
    -0.008760167,
    -0.008620978,
    -0.0029175119,
    -0.0006027385,
    -0.53637165,
    -0.28744537,
    -0.025223814,
    -0.032516878,
    -0.15744807,
    -0.0008882761,
    -0.0008595825,
    -0.0006741286,
    -0.0011683488,
    -0.004824074,
    -0.023552364,
    -0.0036506737,
    -0.00051316124,
    -0.3433401,
    -0.372058,
    -0.0010534205,
    -0.04483291,
    -0.48654133,
    -0.0012732628,
    -0.0003632502,
    -0.0002687459,
    -0.0015444293,
    -0.0046935743,
    -1.2580888,
    -0.0022610493,
    -0.30199063,
    -0.0017059242,
    -0.0017930403,
    -0.020328136,
    -0.005480839,
    -0.011294691,
    -0.021495938,
    -0.005582249,
    -0.021606537,
    -0.00598116,
    -0.009480772,
    -0.0021537654,
    -0.0006340482,
    -0.00031417754,
    -0.0038819176,
    -0.005659394,
    -0.26821265,
    -0.008328415,
    -0.0010946554,
    -0.2717437,
    -0.110453315,
    -0.031651236,
    -0.0313002,
    -0.0006802711,
    -0.5981229,
    -9.115311e-05,
    -0.0012483763,
    -0.0040369625,
    -0.03871408,
    -0.004442684,
    -0.00072602095,
    -1.7208518,
    -0.9172543,
    -0.00080833875,
    -0.25074685,
    -1.4451016,
    -0.54702336,
    -0.029465836,
    -0.4888057,
    -0.0021987446,
    -1.3369083,
    -0.0039417534,
    -0.014371322,
    -0.0027354392,
    -1.4436165,
    -0.0007964676,
    -0.06963826,
    -0.008644003,
    -0.020158622,
    -0.0018689367,
    -0.20064631,
    -0.0017617514,
    -0.00142003,
    -0.00013800588,
    -0.0031465515,
    -0.0053206524,
    -0.52592885,
    -0.0015076578,
    -1.3403832,
    -0.001133738,
    -0.0016445467,
    -0.012786274,
    -0.0033684068,
    -0.0036929091,
    -0.008465397,
    -0.004105133,
    -0.0019915996,
    -0.0023982245,
    -0.010464172,
    -0.0014563802,
    -0.00073675625,
    -0.00047541337,
    -0.0025943967,
    -0.0057097464,
    -0.5566496,
    -0.03056673,
    -0.0017067596,
    -1.3194662,
    -0.00016924512,
    -0.59413934,
    -0.031844843,
    -0.2761982,
    -0.008080042,
    -0.0011520595,
    -0.74334943,
    -2.4739273,
    -0.34654206,
    -0.0005058838,
    -1.9708741,
    -0.314578,
    -0.015234743,
    -0.38799608,
    -0.0011728844,
    -0.35697538,
    -0.003270152,
    -0.00062229816,
    -0.0016068139,
    -0.54681486,
    -0.0010659533,
    -8.566857e-05,
    -0.005975944,
    -0.004056295,
    -0.0017555421,
    -0.0016106352,
    -0.004153196,
    -0.0012328003,
    -0.0023155361,
    -0.00038662262,
    -0.0012658624,
    -0.0017154749,
    -0.0058077048,
    -0.44013774,
    -0.49436674,
    -0.008819756,
    -0.01678131,
    -0.00024322867,
    -1.2493871,
    -0.0054129367,
    -0.001287288,
    -0.00032038015,
    -0.00011392572,
    -0.0030127424
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " closet",
    "\n",
    " find",
    "('",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " h",
    "anger",
    "\n",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " h",
    "anger",
    "\n",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " jacket",
    "\n",
    " find",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " h",
    "anger",
    " on",
    " the",
    " jacket",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "h",
    "anger",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " assert",
    "('",
    "h",
    "anger",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "h",
    "anger",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "j",
    "acket",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " put",
    " back",
    " h",
    "anger",
    " in",
    " closet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cl",
    "os",
    "et",
    "')",
    "\n",
    " put",
    "back",
    "('",
    "h",
    "anger",
    "',",
    " '",
    "cl",
    "os",
    "et",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.014259223
    },
    {
      " 0": -0.006779757
    },
    {
      ":": -0.0017007297
    },
    {
      " find": -0.760516
    },
    {
      " h": -0.98437876
    },
    {
      "\n": -0.31606162
    },
    {
      " find": -0.15499453
    },
    {
      "('": -0.0019057224
    },
    {
      "cl": -0.0007445123
    },
    {
      "os": -0.0035474224
    },
    {
      "et": -0.0006269501
    },
    {
      "')": -0.025724689
    },
    {
      "\n": -0.008760167
    },
    {
      " #": -0.008620978
    },
    {
      " 1": -0.0029175119
    },
    {
      ":": -0.0006027385
    },
    {
      " find": -0.53637165
    },
    {
      " h": -0.28744537
    },
    {
      "anger": -0.025223814
    },
    {
      "\n": -0.032516878
    },
    {
      " find": -0.15744807
    },
    {
      "('": -0.0008882761
    },
    {
      "h": -0.0008595825
    },
    {
      "anger": -0.0006741286
    },
    {
      "')": -0.0011683488
    },
    {
      "\n": -0.004824074
    },
    {
      " #": -0.023552364
    },
    {
      " 2": -0.0036506737
    },
    {
      ":": -0.00051316124
    },
    {
      " grab": -0.3433401
    },
    {
      " h": -0.372058
    },
    {
      "anger": -0.0010534205
    },
    {
      "\n": -0.04483291
    },
    {
      " grab": -0.48654133
    },
    {
      "('": -0.0012732628
    },
    {
      "h": -0.0003632502
    },
    {
      "anger": -0.0002687459
    },
    {
      "')": -0.0015444293
    },
    {
      "\n": -0.0046935743
    },
    {
      " #": -0.3691957
    },
    {
      "('": -0.0022610493
    },
    {
      "h": -0.30199063
    },
    {
      "anger": -0.0017059242
    },
    {
      "'": -0.0017930403
    },
    {
      " in": -0.020328136
    },
    {
      " '": -0.005480839
    },
    {
      "hands": -0.011294691
    },
    {
      "')": -0.021495938
    },
    {
      "\n": -0.005582249
    },
    {
      " else": -0.021606537
    },
    {
      ":": -0.00598116
    },
    {
      " grab": -0.009480772
    },
    {
      "('": -0.0021537654
    },
    {
      "h": -0.0006340482
    },
    {
      "anger": -0.00031417754
    },
    {
      "')": -0.0038819176
    },
    {
      "\n": -0.005659394
    },
    {
      " #": -0.26821265
    },
    {
      " 3": -0.008328415
    },
    {
      ":": -0.0010946554
    },
    {
      " find": -0.2717437
    },
    {
      " jacket": -0.110453315
    },
    {
      "\n": -0.031651236
    },
    {
      " find": -0.0313002
    },
    {
      "('": -0.0006802711
    },
    {
      "j": -0.5981229
    },
    {
      "acket": -9.115311e-05
    },
    {
      "')": -0.0012483763
    },
    {
      "\n": -0.0040369625
    },
    {
      " #": -0.03871408
    },
    {
      " 4": -0.004442684
    },
    {
      ":": -0.00072602095
    },
    {
      " hang": -0.7429169
    },
    {
      " jacket": -0.8249053
    },
    {
      "anger": -0.00080833875
    },
    {
      " on": -0.25074685
    },
    {
      " jacket": -0.5190029
    },
    {
      " jacket": -0.54702336
    },
    {
      "\n": -0.029465836
    },
    {
      " assert": -0.4888057
    },
    {
      "('": -0.0021987446
    },
    {
      "h": -0.516161
    },
    {
      "'": -0.0039417534
    },
    {
      " to": -0.014371322
    },
    {
      " '": -0.0027354392
    },
    {
      "j": -0.27699053
    },
    {
      "anger": -0.0007964676
    },
    {
      "')": -0.06963826
    },
    {
      "\n": -0.008644003
    },
    {
      " else": -0.020158622
    },
    {
      ":": -0.0018689367
    },
    {
      " find": -0.20064631
    },
    {
      "('": -0.0017617514
    },
    {
      "h": -0.00142003
    },
    {
      "anger": -0.00013800588
    },
    {
      "')": -0.0031465515
    },
    {
      "\n": -0.0053206524
    },
    {
      " assert": -0.52592885
    },
    {
      "('": -0.0015076578
    },
    {
      "close": -0.89938146
    },
    {
      "anger": -0.001133738
    },
    {
      "'": -0.0016445467
    },
    {
      " in": -0.012786274
    },
    {
      " '": -0.0033684068
    },
    {
      "hands": -0.0036929091
    },
    {
      "')": -0.008465397
    },
    {
      "\n": -0.004105133
    },
    {
      " else": -0.0019915996
    },
    {
      ":": -0.0023982245
    },
    {
      " grab": -0.010464172
    },
    {
      "('": -0.0014563802
    },
    {
      "h": -0.00073675625
    },
    {
      "anger": -0.00047541337
    },
    {
      "')": -0.0025943967
    },
    {
      "\n": -0.0057097464
    },
    {
      " put": -0.5566496
    },
    {
      "on": -0.03056673
    },
    {
      "('": -0.0017067596
    },
    {
      "h": -0.31288394
    },
    {
      "acket": -0.00016924512
    },
    {
      "')": -0.59413934
    },
    {
      "\n": -0.031844843
    },
    {
      " #": -0.2761982
    },
    {
      " 5": -0.008080042
    },
    {
      ":": -0.0011520595
    },
    {
      " put": -0.74334943
    },
    {
      " h": -0.53571856
    },
    {
      " h": -0.34654206
    },
    {
      "anger": -0.0005058838
    },
    {
      "\n": -0.35099906
    },
    {
      " closet": -0.314578
    },
    {
      "\n": -0.015234743
    },
    {
      " assert": -0.38799608
    },
    {
      "('": -0.0011728844
    },
    {
      "close": -0.35697538
    },
    {
      "'": -0.003270152
    },
    {
      " to": -0.00062229816
    },
    {
      " '": -0.0016068139
    },
    {
      "cl": -0.54681486
    },
    {
      "os": -0.0010659533
    },
    {
      "et": -8.566857e-05
    },
    {
      "')": -0.005975944
    },
    {
      "\n": -0.004056295
    },
    {
      " else": -0.0017555421
    },
    {
      ":": -0.0016106352
    },
    {
      " find": -0.004153196
    },
    {
      "('": -0.0012328003
    },
    {
      "cl": -0.0023155361
    },
    {
      "os": -0.00038662262
    },
    {
      "et": -0.0012658624
    },
    {
      "')": -0.0017154749
    },
    {
      "\n": -0.0058077048
    },
    {
      " put": -0.44013774
    },
    {
      "back": -0.49436674
    },
    {
      "('": -0.008819756
    },
    {
      "h": -0.01678131
    },
    {
      "anger": -0.00024322867
    },
    {
      "')": -0.6134321
    },
    {
      " '": -0.0054129367
    },
    {
      "cl": -0.001287288
    },
    {
      "os": -0.00032038015
    },
    {
      "et": -0.00011392572
    },
    {
      "')": -0.0030127424
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.865177869796753
[(" # 0: find newspaper\n find('newspaper')\n # 1: grab newspaper\n grab('newspaper')\n # 2: find chair\n find('chair')\n # 3: sit on chair\n assert('close' to 'chair')\n else: find('chair')\n sit('chair')\n # 4: open newspaper\n assert('newspaper' in 'hands')\n else: grab('newspaper')\n open('newspaper')\n # 5: read newspaper\n read('newspaper')\n # 6: Done", <OpenAIObject at 0x7f9f10018b30> JSON: {
  "text_offset": [
    3165,
    3167,
    3169,
    3170,
    3175,
    3185,
    3186,
    3191,
    3193,
    3196,
    3198,
    3202,
    3204,
    3205,
    3207,
    3209,
    3210,
    3215,
    3225,
    3226,
    3231,
    3233,
    3236,
    3238,
    3242,
    3244,
    3245,
    3247,
    3249,
    3250,
    3255,
    3261,
    3262,
    3267,
    3269,
    3274,
    3276,
    3277,
    3279,
    3281,
    3282,
    3286,
    3289,
    3295,
    3296,
    3303,
    3305,
    3310,
    3311,
    3314,
    3316,
    3321,
    3323,
    3324,
    3329,
    3330,
    3335,
    3337,
    3342,
    3344,
    3345,
    3349,
    3351,
    3356,
    3358,
    3359,
    3361,
    3363,
    3364,
    3369,
    3379,
    3380,
    3387,
    3389,
    3392,
    3394,
    3398,
    3399,
    3402,
    3404,
    3409,
    3411,
    3412,
    3417,
    3418,
    3423,
    3425,
    3428,
    3430,
    3434,
    3436,
    3437,
    3442,
    3444,
    3447,
    3449,
    3453,
    3455,
    3456,
    3458,
    3460,
    3461,
    3466,
    3476,
    3477,
    3482,
    3484,
    3487,
    3489,
    3493,
    3495,
    3496,
    3498,
    3500,
    3501
  ],
  "token_logprobs": [
    -0.01718368,
    -0.00896282,
    -0.001854903,
    -0.6493188,
    -0.306238,
    -0.031602144,
    -0.033270083,
    -0.0021254502,
    -0.0016608447,
    -0.0006460958,
    -0.0004178074,
    -0.0026890624,
    -0.00792118,
    -0.0047565773,
    -0.002348276,
    -0.0004051084,
    -0.29951373,
    -0.12734558,
    -0.01625848,
    -0.8521705,
    -0.0012857355,
    -0.00071212515,
    -0.0001957132,
    -0.0007344904,
    -0.0012913458,
    -0.0048565962,
    -0.6251929,
    -0.006981831,
    -0.00055472564,
    -0.8378356,
    -1.8257567,
    -0.23611754,
    -0.13052359,
    -0.0010208464,
    -0.00090623525,
    -0.0014324456,
    -0.004825632,
    -0.014464144,
    -0.007174638,
    -0.00077272824,
    -0.026334004,
    -0.15756123,
    -0.22062543,
    -0.024305075,
    -1.2101027,
    -0.0014889711,
    -0.01324249,
    -0.0029252837,
    -0.0003352268,
    -0.0024724333,
    -0.0013266193,
    -0.0064297165,
    -0.0043373187,
    -0.0015463396,
    -0.001765214,
    -0.004178571,
    -0.0016874758,
    -0.00092425174,
    -0.0019481841,
    -0.0065695625,
    -0.02829704,
    -0.0010165493,
    -0.0006053611,
    -0.0010710839,
    -0.006119442,
    -0.016935095,
    -0.008176606,
    -0.00097424805,
    -1.8979378,
    -0.25523472,
    -0.0660165,
    -1.4136136,
    -0.0016028754,
    -0.3755486,
    -0.0013120571,
    -0.0007720111,
    -0.0026018065,
    -0.020224428,
    -0.0065818634,
    -0.011692755,
    -0.03072394,
    -0.0045881793,
    -0.013114149,
    -0.0026631227,
    -0.055938426,
    -0.0016303376,
    -0.0011483602,
    -0.00041208262,
    -0.0013617136,
    -0.0038204668,
    -0.006517007,
    -0.015448155,
    -0.0020180582,
    -0.00057357183,
    -0.0004746981,
    -0.00019940869,
    -0.0016220398,
    -0.0060691875,
    -0.027794076,
    -0.0063859867,
    -0.0011919212,
    -0.08253817,
    -0.15211171,
    -0.010037944,
    -0.7175405,
    -0.0030742034,
    -0.00085242523,
    -0.0006723386,
    -0.00030368532,
    -0.0015628758,
    -0.2752298,
    -0.053372473,
    -0.0036844728,
    -0.0013795601,
    -1.728535
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " newspaper",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " find",
    " chair",
    "\n",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " sit",
    " on",
    " chair",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "chair",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "chair",
    "')",
    "\n",
    " sit",
    "('",
    "chair",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " open",
    " newspaper",
    "\n",
    " assert",
    "('",
    "new",
    "sp",
    "aper",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " open",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " read",
    " newspaper",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.01718368
    },
    {
      " 0": -0.00896282
    },
    {
      ":": -0.001854903
    },
    {
      " find": -0.6493188
    },
    {
      " newspaper": -0.306238
    },
    {
      "\n": -0.031602144
    },
    {
      " find": -0.033270083
    },
    {
      "('": -0.0021254502
    },
    {
      "new": -0.0016608447
    },
    {
      "sp": -0.0006460958
    },
    {
      "aper": -0.0004178074
    },
    {
      "')": -0.0026890624
    },
    {
      "\n": -0.00792118
    },
    {
      " #": -0.0047565773
    },
    {
      " 1": -0.002348276
    },
    {
      ":": -0.0004051084
    },
    {
      " grab": -0.29951373
    },
    {
      " newspaper": -0.12734558
    },
    {
      "\n": -0.01625848
    },
    {
      " assert": -0.5692678
    },
    {
      "('": -0.0012857355
    },
    {
      "new": -0.00071212515
    },
    {
      "sp": -0.0001957132
    },
    {
      "aper": -0.0007344904
    },
    {
      "')": -0.0012913458
    },
    {
      "\n": -0.0048565962
    },
    {
      " #": -0.6251929
    },
    {
      " 2": -0.006981831
    },
    {
      ":": -0.00055472564
    },
    {
      " find": -0.8378356
    },
    {
      " desk": -1.3829771
    },
    {
      "\n": -0.23611754
    },
    {
      " find": -0.13052359
    },
    {
      "('": -0.0010208464
    },
    {
      "chair": -0.00090623525
    },
    {
      "')": -0.0014324456
    },
    {
      "\n": -0.004825632
    },
    {
      " #": -0.014464144
    },
    {
      " 3": -0.007174638
    },
    {
      ":": -0.00077272824
    },
    {
      " sit": -0.026334004
    },
    {
      " on": -0.15756123
    },
    {
      " chair": -0.22062543
    },
    {
      "\n": -0.024305075
    },
    {
      " sit": -0.48009652
    },
    {
      "('": -0.0014889711
    },
    {
      "close": -0.01324249
    },
    {
      "'": -0.0029252837
    },
    {
      " to": -0.0003352268
    },
    {
      " '": -0.0024724333
    },
    {
      "chair": -0.0013266193
    },
    {
      "')": -0.0064297165
    },
    {
      "\n": -0.0043373187
    },
    {
      " else": -0.0015463396
    },
    {
      ":": -0.001765214
    },
    {
      " find": -0.004178571
    },
    {
      "('": -0.0016874758
    },
    {
      "chair": -0.00092425174
    },
    {
      "')": -0.0019481841
    },
    {
      "\n": -0.0065695625
    },
    {
      " sit": -0.02829704
    },
    {
      "('": -0.0010165493
    },
    {
      "chair": -0.0006053611
    },
    {
      "')": -0.0010710839
    },
    {
      "\n": -0.006119442
    },
    {
      " #": -0.016935095
    },
    {
      " 4": -0.008176606
    },
    {
      ":": -0.00097424805
    },
    {
      " read": -0.3452979
    },
    {
      " newspaper": -0.25523472
    },
    {
      "\n": -0.0660165
    },
    {
      " open": -0.3580639
    },
    {
      "('": -0.0016028754
    },
    {
      "new": -0.3755486
    },
    {
      "sp": -0.0013120571
    },
    {
      "aper": -0.0007720111
    },
    {
      "'": -0.0026018065
    },
    {
      " in": -0.020224428
    },
    {
      " '": -0.0065818634
    },
    {
      "hands": -0.011692755
    },
    {
      "')": -0.03072394
    },
    {
      "\n": -0.0045881793
    },
    {
      " else": -0.013114149
    },
    {
      ":": -0.0026631227
    },
    {
      " grab": -0.055938426
    },
    {
      "('": -0.0016303376
    },
    {
      "new": -0.0011483602
    },
    {
      "sp": -0.00041208262
    },
    {
      "aper": -0.0013617136
    },
    {
      "')": -0.0038204668
    },
    {
      "\n": -0.006517007
    },
    {
      " open": -0.015448155
    },
    {
      "('": -0.0020180582
    },
    {
      "new": -0.00057357183
    },
    {
      "sp": -0.0004746981
    },
    {
      "aper": -0.00019940869
    },
    {
      "')": -0.0016220398
    },
    {
      "\n": -0.0060691875
    },
    {
      " #": -0.027794076
    },
    {
      " 5": -0.0063859867
    },
    {
      ":": -0.0011919212
    },
    {
      " read": -0.08253817
    },
    {
      " newspaper": -0.15211171
    },
    {
      "\n": -0.010037944
    },
    {
      " read": -0.7175405
    },
    {
      "('": -0.0030742034
    },
    {
      "new": -0.00085242523
    },
    {
      "sp": -0.0006723386
    },
    {
      "aper": -0.00030368532
    },
    {
      "')": -0.0015628758
    },
    {
      "\n": -0.2752298
    },
    {
      " #": -0.053372473
    },
    {
      " 6": -0.0036844728
    },
    {
      ":": -0.0013795601
    },
    {
      " put": -0.7729639
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.167703866958618
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: grab cleaning supplies\n grab('sponge')\n grab('detergent')\n # 3: pour detergent on sponge\n pour('detergent', 'sponge')\n # 4: wipe toilet\n wipe('toilet', 'sponge')\n # 5: flush toilet\n flush('toilet')\n # 6: put cleaning supplies back\n putback('sponge', 'detergent')\n # 7: Done", <OpenAIObject at 0x7f9f10065c20> JSON: {
  "text_offset": [
    3163,
    3165,
    3167,
    3168,
    3173,
    3176,
    3185,
    3186,
    3191,
    3193,
    3197,
    3201,
    3203,
    3204,
    3206,
    3208,
    3209,
    3214,
    3221,
    3222,
    3227,
    3229,
    3231,
    3235,
    3237,
    3238,
    3240,
    3242,
    3243,
    3248,
    3257,
    3266,
    3267,
    3272,
    3274,
    3276,
    3280,
    3282,
    3283,
    3288,
    3290,
    3291,
    3295,
    3299,
    3301,
    3302,
    3304,
    3306,
    3307,
    3312,
    3318,
    3322,
    3325,
    3332,
    3333,
    3338,
    3340,
    3341,
    3345,
    3349,
    3351,
    3353,
    3355,
    3359,
    3361,
    3362,
    3364,
    3366,
    3367,
    3372,
    3379,
    3380,
    3385,
    3387,
    3389,
    3393,
    3395,
    3397,
    3399,
    3403,
    3405,
    3406,
    3408,
    3410,
    3411,
    3417,
    3424,
    3425,
    3431,
    3433,
    3435,
    3439,
    3441,
    3442,
    3444,
    3446,
    3447,
    3451,
    3460,
    3469,
    3474,
    3475,
    3479,
    3483,
    3485,
    3487,
    3491,
    3493,
    3495,
    3496,
    3500,
    3504,
    3506,
    3507,
    3509,
    3511,
    3512
  ],
  "token_logprobs": [
    -0.015016229,
    -0.007333382,
    -0.0019229823,
    -0.37379286,
    -0.25249794,
    -0.3264664,
    -0.022086715,
    -0.00478137,
    -0.0038126283,
    -0.0018377632,
    -9.818829e-05,
    -0.0012940904,
    -0.0072302907,
    -0.002256571,
    -0.003512013,
    -0.000807982,
    -0.07731118,
    -0.14795016,
    -0.03721935,
    -0.3160404,
    -0.0008928117,
    -0.0005885433,
    -0.00017914227,
    -0.0019100223,
    -0.0055199745,
    -0.018696703,
    -0.005714424,
    -0.0012310075,
    -0.6926295,
    -2.0141501,
    -0.45322007,
    -0.03774274,
    -0.71504974,
    -0.0018896584,
    -0.5249399,
    -0.0013266193,
    -0.033198856,
    -0.016399764,
    -0.043525733,
    -0.00080678804,
    -0.0046372246,
    -0.000323121,
    -0.00081871834,
    -0.0015777412,
    -0.0059598135,
    -0.0462584,
    -0.012324839,
    -0.0008570753,
    -1.587756,
    -0.07504267,
    -0.0012222949,
    -0.5635896,
    -0.6332961,
    -0.019548798,
    -0.59478253,
    -0.0029071704,
    -0.012095317,
    -0.00018057182,
    -0.00042556066,
    -0.7421524,
    -0.006358634,
    -0.0013363475,
    -0.00022123232,
    -0.0015614424,
    -0.00691887,
    -0.02112878,
    -0.005810283,
    -0.0006805105,
    -0.9385461,
    -1.2044284,
    -0.9708236,
    -0.3993956,
    -0.0014206251,
    -0.06327396,
    -0.000114638155,
    -1.6968232,
    -0.006156385,
    -0.0018861956,
    -4.9782993e-05,
    -0.009954258,
    -0.011985763,
    -0.014613161,
    -0.0047304644,
    -0.0012572099,
    -1.5380778,
    -0.4562798,
    -0.042640213,
    -0.23295248,
    -0.006787918,
    -0.00073771086,
    -0.00052055495,
    -0.0033100382,
    -0.019117586,
    -0.004975434,
    -0.0036690375,
    -0.0012477792,
    -0.51039577,
    -0.7354187,
    -0.0074792346,
    -0.2853521,
    -0.021946147,
    -0.060857013,
    -0.3251819,
    -0.0022513126,
    -0.06849824,
    -0.000581326,
    -0.17533214,
    -0.0012897942,
    -0.18189622,
    -0.001014641,
    -0.0013676825,
    -0.0019122912,
    -1.0983969,
    -0.13189043,
    -0.008996623,
    -0.0017260432,
    -0.34137475
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " cleaning",
    " supplies",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " grab",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " deter",
    "gent",
    " on",
    " sponge",
    "\n",
    " pour",
    "('",
    "d",
    "eter",
    "gent",
    "',",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wipe",
    " toilet",
    "\n",
    " wipe",
    "('",
    "to",
    "ilet",
    "',",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " flush",
    " toilet",
    "\n",
    " flush",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " put",
    " cleaning",
    " supplies",
    " back",
    "\n",
    " put",
    "back",
    "('",
    "sp",
    "onge",
    "',",
    " '",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.015016229
    },
    {
      " 0": -0.007333382
    },
    {
      ":": -0.0019229823
    },
    {
      " walk": -0.37379286
    },
    {
      " to": -0.25249794
    },
    {
      " bathroom": -0.3264664
    },
    {
      "\n": -0.022086715
    },
    {
      " walk": -0.00478137
    },
    {
      "('": -0.0038126283
    },
    {
      "bath": -0.0018377632
    },
    {
      "room": -9.818829e-05
    },
    {
      "')": -0.0012940904
    },
    {
      "\n": -0.0072302907
    },
    {
      " #": -0.002256571
    },
    {
      " 1": -0.003512013
    },
    {
      ":": -0.000807982
    },
    {
      " find": -0.07731118
    },
    {
      " toilet": -0.14795016
    },
    {
      "\n": -0.03721935
    },
    {
      " find": -0.3160404
    },
    {
      "('": -0.0008928117
    },
    {
      "to": -0.0005885433
    },
    {
      "ilet": -0.00017914227
    },
    {
      "')": -0.0019100223
    },
    {
      "\n": -0.0055199745
    },
    {
      " #": -0.018696703
    },
    {
      " 2": -0.005714424
    },
    {
      ":": -0.0012310075
    },
    {
      " grab": -0.6926295
    },
    {
      " sponge": -0.85394824
    },
    {
      " supplies": -0.45322007
    },
    {
      "\n": -0.03774274
    },
    {
      " grab": -0.71504974
    },
    {
      "('": -0.0018896584
    },
    {
      "sp": -0.5249399
    },
    {
      "onge": -0.0013266193
    },
    {
      "')": -0.033198856
    },
    {
      "\n": -0.016399764
    },
    {
      " grab": -0.043525733
    },
    {
      "('": -0.00080678804
    },
    {
      "d": -0.0046372246
    },
    {
      "eter": -0.000323121
    },
    {
      "gent": -0.00081871834
    },
    {
      "')": -0.0015777412
    },
    {
      "\n": -0.0059598135
    },
    {
      " #": -0.0462584
    },
    {
      " 3": -0.012324839
    },
    {
      ":": -0.0008570753
    },
    {
      " wash": -1.0485152
    },
    {
      " deter": -0.07504267
    },
    {
      "gent": -0.0012222949
    },
    {
      " on": -0.5635896
    },
    {
      " sponge": -0.6332961
    },
    {
      "\n": -0.019548798
    },
    {
      " pour": -0.59478253
    },
    {
      "('": -0.0029071704
    },
    {
      "d": -0.012095317
    },
    {
      "eter": -0.00018057182
    },
    {
      "gent": -0.00042556066
    },
    {
      "',": -0.7421524
    },
    {
      " '": -0.006358634
    },
    {
      "sp": -0.0013363475
    },
    {
      "onge": -0.00022123232
    },
    {
      "')": -0.0015614424
    },
    {
      "\n": -0.00691887
    },
    {
      " #": -0.02112878
    },
    {
      " 4": -0.005810283
    },
    {
      ":": -0.0006805105
    },
    {
      " wipe": -0.9385461
    },
    {
      " the": -0.7005194
    },
    {
      " with": -0.6769659
    },
    {
      " wipe": -0.3993956
    },
    {
      "('": -0.0014206251
    },
    {
      "to": -0.06327396
    },
    {
      "ilet": -0.000114638155
    },
    {
      "')": -0.20836659
    },
    {
      " '": -0.006156385
    },
    {
      "sp": -0.0018861956
    },
    {
      "onge": -4.9782993e-05
    },
    {
      "')": -0.009954258
    },
    {
      "\n": -0.011985763
    },
    {
      " #": -0.014613161
    },
    {
      " 5": -0.0047304644
    },
    {
      ":": -0.0012572099
    },
    {
      " put": -0.9673638
    },
    {
      " toilet": -0.4562798
    },
    {
      "\n": -0.042640213
    },
    {
      " flush": -0.23295248
    },
    {
      "('": -0.006787918
    },
    {
      "to": -0.00073771086
    },
    {
      "ilet": -0.00052055495
    },
    {
      "')": -0.0033100382
    },
    {
      "\n": -0.019117586
    },
    {
      " #": -0.004975434
    },
    {
      " 6": -0.0036690375
    },
    {
      ":": -0.0012477792
    },
    {
      " put": -0.51039577
    },
    {
      " cleaning": -0.7354187
    },
    {
      " supplies": -0.0074792346
    },
    {
      " back": -0.2853521
    },
    {
      "\n": -0.021946147
    },
    {
      " put": -0.060857013
    },
    {
      "back": -0.3251819
    },
    {
      "('": -0.0022513126
    },
    {
      "sp": -0.06849824
    },
    {
      "onge": -0.000581326
    },
    {
      "',": -0.17533214
    },
    {
      " '": -0.0012897942
    },
    {
      "d": -0.18189622
    },
    {
      "eter": -0.001014641
    },
    {
      "gent": -0.0013676825
    },
    {
      "')": -0.0019122912
    },
    {
      "<|endoftext|>": -0.42527357
    },
    {
      " #": -0.13189043
    },
    {
      " 7": -0.008996623
    },
    {
      ":": -0.0017260432
    },
    {
      " Done": -0.34137475
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.8029508590698242
[(" # 0: find the computer\n find('computer')\n # 1: open the computer\n open('computer')\n # 2: turn on the computer\n switchon('computer')\n # 3: wait for it to boot up\n wait('computer')\n # 4: Done", <OpenAIObject at 0x7f9f100186d0> JSON: {
  "text_offset": [
    3165,
    3167,
    3169,
    3170,
    3175,
    3179,
    3188,
    3189,
    3194,
    3196,
    3204,
    3206,
    3207,
    3209,
    3211,
    3212,
    3217,
    3221,
    3230,
    3231,
    3236,
    3238,
    3246,
    3248,
    3249,
    3251,
    3253,
    3254,
    3259,
    3262,
    3266,
    3275,
    3276,
    3283,
    3285,
    3287,
    3295,
    3297,
    3298,
    3300,
    3302,
    3303,
    3308,
    3312,
    3315,
    3318,
    3323,
    3326,
    3327,
    3332,
    3334,
    3342,
    3344,
    3345,
    3347,
    3349,
    3350
  ],
  "token_logprobs": [
    -0.020493178,
    -0.009925363,
    -0.0021756876,
    -1.0737435,
    -1.5101079,
    -0.14193262,
    -0.038950536,
    -0.058616795,
    -0.0029279739,
    -0.0032423425,
    -0.0017297462,
    -0.009821824,
    -0.0076616886,
    -0.004071017,
    -0.00072972104,
    -2.1920943,
    -0.19089466,
    -0.27971694,
    -0.08917412,
    -0.9996458,
    -0.004304095,
    -0.0027855872,
    -0.0021338135,
    -0.00697841,
    -0.029430415,
    -0.004307268,
    -0.00069876347,
    -1.3289304,
    -0.06720356,
    -0.066480465,
    -0.03208731,
    -0.017531741,
    -0.31937402,
    -0.0018299423,
    -0.001036658,
    -0.0020052164,
    -0.0015876532,
    -0.00641844,
    -0.008835808,
    -0.003481867,
    -0.0006583827,
    -1.908678,
    -0.18076994,
    -2.1060262,
    -0.008960354,
    -0.19841976,
    -0.7204681,
    -0.024070654,
    -0.52512586,
    -0.82761747,
    -0.15188959,
    -0.26051733,
    -0.02066835,
    -0.013983741,
    -0.0038880806,
    -0.0011667971,
    -1.1962888
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " the",
    " computer",
    "\n",
    " find",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " open",
    " the",
    " computer",
    "\n",
    " open",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " the",
    " computer",
    "\n",
    " switch",
    "on",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " wait",
    " for",
    " it",
    " to",
    " boot",
    " up",
    "\n",
    " wait",
    "('",
    "computer",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.020493178
    },
    {
      " 0": -0.009925363
    },
    {
      ":": -0.0021756876
    },
    {
      " walk": -0.5781818
    },
    {
      " computer": -0.37431598
    },
    {
      " computer": -0.14193262
    },
    {
      "\n": -0.038950536
    },
    {
      " find": -0.058616795
    },
    {
      "('": -0.0029279739
    },
    {
      "computer": -0.0032423425
    },
    {
      "')": -0.0017297462
    },
    {
      "\n": -0.009821824
    },
    {
      " #": -0.0076616886
    },
    {
      " 1": -0.004071017
    },
    {
      ":": -0.00072972104
    },
    {
      " turn": -1.3643444
    },
    {
      " the": -0.19089466
    },
    {
      " computer": -0.27971694
    },
    {
      "\n": -0.08917412
    },
    {
      " assert": -0.6159388
    },
    {
      "('": -0.004304095
    },
    {
      "computer": -0.0027855872
    },
    {
      "')": -0.0021338135
    },
    {
      "\n": -0.00697841
    },
    {
      " #": -0.029430415
    },
    {
      " 2": -0.004307268
    },
    {
      ":": -0.00069876347
    },
    {
      " find": -1.075518
    },
    {
      " on": -0.06720356
    },
    {
      " the": -0.066480465
    },
    {
      " computer": -0.03208731
    },
    {
      "\n": -0.017531741
    },
    {
      " switch": -0.31937402
    },
    {
      "on": -0.0018299423
    },
    {
      "('": -0.001036658
    },
    {
      "computer": -0.0020052164
    },
    {
      "')": -0.0015876532
    },
    {
      "\n": -0.00641844
    },
    {
      " #": -0.008835808
    },
    {
      " 3": -0.003481867
    },
    {
      ":": -0.0006583827
    },
    {
      " find": -0.39194682
    },
    {
      " for": -0.18076994
    },
    {
      " the": -0.59448844
    },
    {
      " to": -0.008960354
    },
    {
      " boot": -0.19841976
    },
    {
      "\n": -0.69913626
    },
    {
      "\n": -0.024070654
    },
    {
      " wait": -0.52512586
    },
    {
      "('": -0.82761747
    },
    {
      "computer": -0.15188959
    },
    {
      "')": -0.26051733
    },
    {
      "\n": -0.02066835
    },
    {
      " #": -0.013983741
    },
    {
      " 4": -0.0038880806
    },
    {
      ":": -0.0011667971
    },
    {
      " find": -1.0466524
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.620983123779297
[(" # 0: find alarm clock\n find('alarm_clock')\n # 1: grab alarm clock\n grab('alarm_clock')\n assert('alarm_clock' in 'hands')\n else: grab('alarm_clock')\n # 2: walk to bedroom\n walk('bedroom')\n # 3: find nightstand\n find('nightstand')\n # 4: put alarm clock on nightstand\n puton('alarm_clock')\n # 5: done\n lookat('alarm_clock')", <OpenAIObject at 0x7f9f10087770> JSON: {
  "text_offset": [
    3177,
    3179,
    3181,
    3182,
    3187,
    3193,
    3199,
    3200,
    3205,
    3207,
    3209,
    3212,
    3213,
    3218,
    3220,
    3221,
    3223,
    3225,
    3226,
    3231,
    3237,
    3243,
    3244,
    3249,
    3251,
    3253,
    3256,
    3257,
    3262,
    3264,
    3265,
    3272,
    3274,
    3276,
    3279,
    3280,
    3285,
    3286,
    3289,
    3291,
    3296,
    3298,
    3299,
    3304,
    3305,
    3310,
    3312,
    3314,
    3317,
    3318,
    3323,
    3325,
    3326,
    3328,
    3330,
    3331,
    3336,
    3339,
    3347,
    3348,
    3353,
    3355,
    3362,
    3364,
    3365,
    3367,
    3369,
    3370,
    3375,
    3381,
    3386,
    3387,
    3392,
    3394,
    3399,
    3404,
    3406,
    3407,
    3409,
    3411,
    3412,
    3416,
    3422,
    3428,
    3431,
    3437,
    3442,
    3443,
    3447,
    3449,
    3451,
    3453,
    3456,
    3457,
    3462,
    3464,
    3465,
    3467,
    3469,
    3470,
    3475,
    3476,
    3481,
    3483,
    3485,
    3487,
    3490,
    3491,
    3496
  ],
  "token_logprobs": [
    -0.019297073,
    -0.008304672,
    -0.001941913,
    -0.7089773,
    -0.18915632,
    -0.078733146,
    -0.03368747,
    -0.01674979,
    -0.0021649352,
    -0.0026519464,
    -0.00025085802,
    -0.0107091665,
    -0.00039842993,
    -0.0030400667,
    -0.007921059,
    -0.00834945,
    -0.0021311843,
    -0.00066589756,
    -0.5592382,
    -0.18498135,
    -0.009211475,
    -0.019426513,
    -0.80853516,
    -0.0012468238,
    -0.0005334971,
    -0.00012012551,
    -0.0038017381,
    -0.00043140285,
    -0.0016218004,
    -0.00535469,
    -0.842754,
    -0.0014043311,
    -0.16185059,
    -0.000353232,
    -0.0077192923,
    -0.001008552,
    -0.0022875774,
    -0.02039341,
    -0.005226757,
    -0.007091917,
    -0.038880385,
    -0.0042706924,
    -0.015272565,
    -0.004092145,
    -0.011185046,
    -0.0011807624,
    -0.0005383865,
    -0.00022683514,
    -0.0025899138,
    -0.0007423638,
    -0.0024208094,
    -0.006828186,
    -0.26809105,
    -0.0072567696,
    -0.0009915503,
    -0.14484394,
    -0.12559266,
    -0.07678823,
    -0.024659652,
    -0.009763381,
    -0.0019576168,
    -0.0022535832,
    -0.0010590326,
    -0.005638053,
    -0.019303516,
    -0.005455605,
    -0.000828026,
    -0.9331951,
    -0.18256713,
    -0.17301442,
    -0.01988613,
    -0.34928688,
    -0.0007958706,
    -0.0005608109,
    -0.0015637131,
    -0.0011282497,
    -0.0051287967,
    -0.033071075,
    -0.0068302867,
    -0.00078048056,
    -0.076383226,
    -0.12771001,
    -0.0062861154,
    -0.23473108,
    -0.061494153,
    -0.027476247,
    -0.011557134,
    -1.1812379,
    -0.13897875,
    -0.0025803526,
    -0.26682094,
    -8.7457636e-05,
    -0.0015288477,
    -0.00040928167,
    -0.62018543,
    -0.248376,
    -0.95153064,
    -0.006437035,
    -0.002037289,
    -1.8156006,
    -0.2605347,
    -3.2963138,
    -0.0064514945,
    -0.0014304152,
    -0.5610007,
    -0.00014933258,
    -0.0015986946,
    -0.00016304628,
    -0.004069942
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " alarm",
    " clock",
    "\n",
    " find",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " alarm",
    " clock",
    "\n",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " assert",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " night",
    "stand",
    "\n",
    " find",
    "('",
    "night",
    "stand",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " alarm",
    " clock",
    " on",
    " night",
    "stand",
    "\n",
    " put",
    "on",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " done",
    "\n",
    " look",
    "at",
    "('",
    "al",
    "arm",
    "_",
    "clock",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.019297073
    },
    {
      " 0": -0.008304672
    },
    {
      ":": -0.001941913
    },
    {
      " find": -0.7089773
    },
    {
      " alarm": -0.18915632
    },
    {
      " clock": -0.078733146
    },
    {
      "\n": -0.03368747
    },
    {
      " find": -0.01674979
    },
    {
      "('": -0.0021649352
    },
    {
      "al": -0.0026519464
    },
    {
      "arm": -0.00025085802
    },
    {
      "_": -0.0107091665
    },
    {
      "clock": -0.00039842993
    },
    {
      "')": -0.0030400667
    },
    {
      "\n": -0.007921059
    },
    {
      " #": -0.00834945
    },
    {
      " 1": -0.0021311843
    },
    {
      ":": -0.00066589756
    },
    {
      " grab": -0.5592382
    },
    {
      " alarm": -0.18498135
    },
    {
      " clock": -0.009211475
    },
    {
      "\n": -0.019426513
    },
    {
      " assert": -0.60650116
    },
    {
      "('": -0.0012468238
    },
    {
      "al": -0.0005334971
    },
    {
      "arm": -0.00012012551
    },
    {
      "_": -0.0038017381
    },
    {
      "clock": -0.00043140285
    },
    {
      "')": -0.0016218004
    },
    {
      "\n": -0.00535469
    },
    {
      " #": -0.6013142
    },
    {
      "('": -0.0014043311
    },
    {
      "al": -0.16185059
    },
    {
      "arm": -0.000353232
    },
    {
      "_": -0.0077192923
    },
    {
      "clock": -0.001008552
    },
    {
      "'": -0.0022875774
    },
    {
      " in": -0.02039341
    },
    {
      " '": -0.005226757
    },
    {
      "hands": -0.007091917
    },
    {
      "')": -0.038880385
    },
    {
      "\n": -0.0042706924
    },
    {
      " else": -0.015272565
    },
    {
      ":": -0.004092145
    },
    {
      " grab": -0.011185046
    },
    {
      "('": -0.0011807624
    },
    {
      "al": -0.0005383865
    },
    {
      "arm": -0.00022683514
    },
    {
      "_": -0.0025899138
    },
    {
      "clock": -0.0007423638
    },
    {
      "')": -0.0024208094
    },
    {
      "\n": -0.006828186
    },
    {
      " #": -0.26809105
    },
    {
      " 2": -0.0072567696
    },
    {
      ":": -0.0009915503
    },
    {
      " walk": -0.14484394
    },
    {
      " to": -0.12559266
    },
    {
      " bedroom": -0.07678823
    },
    {
      "\n": -0.024659652
    },
    {
      " walk": -0.009763381
    },
    {
      "('": -0.0019576168
    },
    {
      "bedroom": -0.0022535832
    },
    {
      "')": -0.0010590326
    },
    {
      "\n": -0.005638053
    },
    {
      " #": -0.019303516
    },
    {
      " 3": -0.005455605
    },
    {
      ":": -0.000828026
    },
    {
      " put": -0.6436901
    },
    {
      " night": -0.18256713
    },
    {
      "stand": -0.17301442
    },
    {
      "\n": -0.01988613
    },
    {
      " find": -0.34928688
    },
    {
      "('": -0.0007958706
    },
    {
      "night": -0.0005608109
    },
    {
      "stand": -0.0015637131
    },
    {
      "')": -0.0011282497
    },
    {
      "\n": -0.0051287967
    },
    {
      " #": -0.033071075
    },
    {
      " 4": -0.0068302867
    },
    {
      ":": -0.00078048056
    },
    {
      " put": -0.076383226
    },
    {
      " alarm": -0.12771001
    },
    {
      " clock": -0.0062861154
    },
    {
      " on": -0.23473108
    },
    {
      " night": -0.061494153
    },
    {
      "stand": -0.027476247
    },
    {
      "\n": -0.011557134
    },
    {
      " assert": -0.5618334
    },
    {
      "on": -0.13897875
    },
    {
      "('": -0.0025803526
    },
    {
      "al": -0.26682094
    },
    {
      "arm": -8.7457636e-05
    },
    {
      "_": -0.0015288477
    },
    {
      "clock": -0.00040928167
    },
    {
      "')": -0.62018543
    },
    {
      "\n": -0.248376
    },
    {
      " assert": -0.8167479
    },
    {
      " 5": -0.006437035
    },
    {
      ":": -0.002037289
    },
    {
      " Done": -0.4099208
    },
    {
      "\n": -0.2605347
    },
    {
      "<|endoftext|>": -0.8371953
    },
    {
      "at": -0.0064514945
    },
    {
      "('": -0.0014304152
    },
    {
      "al": -0.5610007
    },
    {
      "arm": -0.00014933258
    },
    {
      "_": -0.0015986946
    },
    {
      "clock": -0.00016304628
    },
    {
      "')": -0.004069942
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 1.6330549716949463
[(" # 0: walk to bathroom\n walk('bathroom')\n # 1: find mirror\n find('mirror')\n # 2: turn to mirror\n turnto('mirror')\n # 3: look at mirror\n lookat('mirror')", <OpenAIObject at 0x7f9f10018ea0> JSON: {
  "text_offset": [
    3165,
    3167,
    3169,
    3170,
    3175,
    3178,
    3187,
    3188,
    3193,
    3195,
    3199,
    3203,
    3205,
    3206,
    3208,
    3210,
    3211,
    3216,
    3223,
    3224,
    3229,
    3231,
    3234,
    3237,
    3239,
    3240,
    3242,
    3244,
    3245,
    3250,
    3253,
    3260,
    3261,
    3265,
    3267,
    3268,
    3270,
    3273,
    3276,
    3278,
    3279,
    3281,
    3283,
    3284,
    3289,
    3292,
    3299,
    3300,
    3305,
    3307,
    3309,
    3312,
    3315
  ],
  "token_logprobs": [
    -0.022364192,
    -0.009132314,
    -0.0019214288,
    -0.47696295,
    -0.31051004,
    -0.27326155,
    -0.02105433,
    -0.005086321,
    -0.0043928744,
    -0.002203403,
    -0.0002116928,
    -0.0014416969,
    -0.0071246917,
    -0.0021096217,
    -0.00289898,
    -0.0007114089,
    -0.042695075,
    -0.19275723,
    -0.014526431,
    -0.2407197,
    -0.0008982999,
    -0.0012993431,
    -0.0008736013,
    -0.00079002563,
    -0.0051434743,
    -0.013527613,
    -0.0050322246,
    -0.00060392875,
    -1.3017501,
    -0.14281194,
    -0.6136788,
    -0.056308597,
    -0.11678891,
    -2.8921473e-05,
    -0.00021503064,
    -0.00067896076,
    -0.00041196714,
    -0.0014788234,
    -0.0008109622,
    -0.0062588835,
    -0.3787812,
    -0.0049935863,
    -0.0009564099,
    -0.054181777,
    -0.076140195,
    -0.3608524,
    -0.008504292,
    -0.032924272,
    -0.0008606544,
    -0.0005704706,
    -0.00028281534,
    -0.0005279506,
    -0.0017040131
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " mirror",
    "\n",
    " find",
    "('",
    "mir",
    "ror",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " to",
    " mirror",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "mir",
    "ror",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " look",
    " at",
    " mirror",
    "\n",
    " look",
    "at",
    "('",
    "mir",
    "ror",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.022364192
    },
    {
      " 0": -0.009132314
    },
    {
      ":": -0.0019214288
    },
    {
      " walk": -0.47696295
    },
    {
      " to": -0.31051004
    },
    {
      " bathroom": -0.27326155
    },
    {
      "\n": -0.02105433
    },
    {
      " walk": -0.005086321
    },
    {
      "('": -0.0043928744
    },
    {
      "bath": -0.002203403
    },
    {
      "room": -0.0002116928
    },
    {
      "')": -0.0014416969
    },
    {
      "\n": -0.0071246917
    },
    {
      " #": -0.0021096217
    },
    {
      " 1": -0.00289898
    },
    {
      ":": -0.0007114089
    },
    {
      " find": -0.042695075
    },
    {
      " mirror": -0.19275723
    },
    {
      "\n": -0.014526431
    },
    {
      " find": -0.2407197
    },
    {
      "('": -0.0008982999
    },
    {
      "mir": -0.0012993431
    },
    {
      "ror": -0.0008736013
    },
    {
      "')": -0.00079002563
    },
    {
      "\n": -0.0051434743
    },
    {
      " #": -0.013527613
    },
    {
      " 2": -0.0050322246
    },
    {
      ":": -0.00060392875
    },
    {
      " look": -0.7658184
    },
    {
      " to": -0.14281194
    },
    {
      " mirror": -0.6136788
    },
    {
      "\n": -0.056308597
    },
    {
      " tur": -0.11678891
    },
    {
      "nt": -2.8921473e-05
    },
    {
      "o": -0.00021503064
    },
    {
      "('": -0.00067896076
    },
    {
      "mir": -0.00041196714
    },
    {
      "ror": -0.0014788234
    },
    {
      "')": -0.0008109622
    },
    {
      "\n": -0.0062588835
    },
    {
      " #": -0.3787812
    },
    {
      " 3": -0.0049935863
    },
    {
      ":": -0.0009564099
    },
    {
      " look": -0.054181777
    },
    {
      " at": -0.076140195
    },
    {
      " mirror": -0.3608524
    },
    {
      "\n": -0.008504292
    },
    {
      " look": -0.032924272
    },
    {
      "at": -0.0008606544
    },
    {
      "('": -0.0005704706
    },
    {
      "mir": -0.00028281534
    },
    {
      "ror": -0.0005279506
    },
    {
      "')": -0.0017040131
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.1536638736724854
[(" # 0: walk to bedroom\n walk('bedroom')\n # 1: find bed\n find('bed')\n # 2: lay down on bed\n turnto('bed')\n lookat('bed')\n assert('close' to 'bed')\n else: find('bed')\n else: turnto('bed')\n sit('bed')\n lie('bed')\n sleep()", <OpenAIObject at 0x7f9f7214fa40> JSON: {
  "text_offset": [
    3159,
    3161,
    3163,
    3164,
    3169,
    3172,
    3180,
    3181,
    3186,
    3188,
    3195,
    3197,
    3198,
    3200,
    3202,
    3203,
    3208,
    3212,
    3213,
    3218,
    3220,
    3223,
    3225,
    3226,
    3228,
    3230,
    3231,
    3235,
    3240,
    3243,
    3247,
    3248,
    3252,
    3254,
    3255,
    3257,
    3260,
    3262,
    3263,
    3268,
    3270,
    3272,
    3275,
    3277,
    3278,
    3285,
    3287,
    3292,
    3293,
    3296,
    3298,
    3301,
    3303,
    3304,
    3309,
    3310,
    3315,
    3317,
    3320,
    3322,
    3323,
    3328,
    3329,
    3333,
    3335,
    3336,
    3338,
    3341,
    3343,
    3344,
    3348,
    3350,
    3353,
    3355,
    3356,
    3360,
    3362,
    3365,
    3367,
    3368,
    3374
  ],
  "token_logprobs": [
    -0.016578339,
    -0.009175443,
    -0.0019924368,
    -0.43890956,
    -0.59429616,
    -0.3903704,
    -0.016974807,
    -0.0041661216,
    -0.0037799003,
    -0.0021573491,
    -0.00062552054,
    -0.0067920596,
    -0.003563694,
    -0.003107208,
    -0.0004927634,
    -0.08773145,
    -0.028254857,
    -0.014029677,
    -0.9607311,
    -0.0009116053,
    -0.00039866925,
    -0.0013553861,
    -0.004481721,
    -0.013286821,
    -0.0048041292,
    -0.00055854215,
    -0.27945465,
    -0.047874663,
    -0.07342017,
    -0.03942604,
    -0.010575969,
    -0.3247349,
    -3.5477948e-05,
    -0.00026182804,
    -0.00041888215,
    -0.0001283481,
    -0.0010096268,
    -0.0030971037,
    -0.09952331,
    -0.00035442502,
    -0.00035287626,
    -0.00017139182,
    -0.00019940869,
    -0.0026723873,
    -0.033112105,
    -0.00048131656,
    -0.001117747,
    -0.001470168,
    -0.00037457785,
    -0.0011175077,
    -0.00012536882,
    -0.0022945064,
    -0.0027923419,
    -0.00067102915,
    -0.00084860687,
    -0.003973053,
    -0.0009972168,
    -0.00019547573,
    -0.00069172354,
    -0.0034761254,
    -0.43700808,
    -0.0011671558,
    -0.007072048,
    -5.669991e-05,
    -0.00078227243,
    -0.00050898513,
    -0.00023404865,
    -0.0006689998,
    -0.0015200131,
    -0.2618286,
    -0.00050445244,
    -0.00011082348,
    -0.00039771467,
    -0.0029603133,
    -1.1623968,
    -0.44582713,
    -0.002214814,
    -0.0013679218,
    -0.00691995,
    -0.6390187,
    -0.020930095
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " bed",
    "\n",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " lay",
    " down",
    " on",
    " bed",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "bed",
    "')",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "bed",
    "')",
    "\n",
    " else",
    ":",
    " tur",
    "nt",
    "o",
    "('",
    "bed",
    "')",
    "\n",
    " sit",
    "('",
    "bed",
    "')",
    "\n",
    " lie",
    "('",
    "bed",
    "')",
    "\n",
    " sleep",
    "()"
  ],
  "top_logprobs": [
    {
      " #": -0.016578339
    },
    {
      " 0": -0.009175443
    },
    {
      ":": -0.0019924368
    },
    {
      " walk": -0.43890956
    },
    {
      " to": -0.59429616
    },
    {
      " bedroom": -0.3903704
    },
    {
      "\n": -0.016974807
    },
    {
      " walk": -0.0041661216
    },
    {
      "('": -0.0037799003
    },
    {
      "bedroom": -0.0021573491
    },
    {
      "')": -0.00062552054
    },
    {
      "\n": -0.0067920596
    },
    {
      " #": -0.003563694
    },
    {
      " 1": -0.003107208
    },
    {
      ":": -0.0004927634
    },
    {
      " find": -0.08773145
    },
    {
      " bed": -0.028254857
    },
    {
      "\n": -0.014029677
    },
    {
      " walk": -0.49116665
    },
    {
      "('": -0.0009116053
    },
    {
      "bed": -0.00039866925
    },
    {
      "')": -0.0013553861
    },
    {
      "\n": -0.004481721
    },
    {
      " #": -0.013286821
    },
    {
      " 2": -0.0048041292
    },
    {
      ":": -0.00055854215
    },
    {
      " lay": -0.27945465
    },
    {
      " down": -0.047874663
    },
    {
      " on": -0.07342017
    },
    {
      " bed": -0.03942604
    },
    {
      "\n": -0.010575969
    },
    {
      " tur": -0.3247349
    },
    {
      "nt": -3.5477948e-05
    },
    {
      "o": -0.00026182804
    },
    {
      "('": -0.00041888215
    },
    {
      "bed": -0.0001283481
    },
    {
      "')": -0.0010096268
    },
    {
      "\n": -0.0030971037
    },
    {
      " look": -0.09952331
    },
    {
      "at": -0.00035442502
    },
    {
      "('": -0.00035287626
    },
    {
      "bed": -0.00017139182
    },
    {
      "')": -0.00019940869
    },
    {
      "\n": -0.0026723873
    },
    {
      " assert": -0.033112105
    },
    {
      "('": -0.00048131656
    },
    {
      "close": -0.001117747
    },
    {
      "'": -0.001470168
    },
    {
      " to": -0.00037457785
    },
    {
      " '": -0.0011175077
    },
    {
      "bed": -0.00012536882
    },
    {
      "')": -0.0022945064
    },
    {
      "\n": -0.0027923419
    },
    {
      " else": -0.00067102915
    },
    {
      ":": -0.00084860687
    },
    {
      " find": -0.003973053
    },
    {
      "('": -0.0009972168
    },
    {
      "bed": -0.00019547573
    },
    {
      "')": -0.00069172354
    },
    {
      "\n": -0.0034761254
    },
    {
      " else": -0.43700808
    },
    {
      ":": -0.0011671558
    },
    {
      " tur": -0.007072048
    },
    {
      "nt": -5.669991e-05
    },
    {
      "o": -0.00078227243
    },
    {
      "('": -0.00050898513
    },
    {
      "bed": -0.00023404865
    },
    {
      "')": -0.0006689998
    },
    {
      "\n": -0.0015200131
    },
    {
      " sit": -0.2618286
    },
    {
      "('": -0.00050445244
    },
    {
      "bed": -0.00011082348
    },
    {
      "')": -0.00039771467
    },
    {
      "\n": -0.0029603133
    },
    {
      " sleep": -0.74175006
    },
    {
      "('": -0.44582713
    },
    {
      "bed": -0.002214814
    },
    {
      "')": -0.0013679218
    },
    {
      "\n": -0.00691995
    },
    {
      " sleep": -0.6390187
    },
    {
      "()": -0.020930095
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.017883777618408
[(" # 0: find sink\n find('sink')\n # 1: find faucet\n find('faucet')\n # 2: turn on faucet\n assert('close' to 'faucet')\n else: find('faucet')\n turnto('faucet')\n switchon('faucet')\n # 3: pour water on face\n pour('water')\n # 4: wipe face\n wipe('face')\n # 5: turn off faucet\n switchoff('faucet')\n # 6: Done", <OpenAIObject at 0x7f9f7214fdb0> JSON: {
  "text_offset": [
    3160,
    3162,
    3164,
    3165,
    3170,
    3175,
    3176,
    3181,
    3183,
    3184,
    3187,
    3189,
    3190,
    3192,
    3194,
    3195,
    3200,
    3202,
    3205,
    3207,
    3208,
    3213,
    3215,
    3216,
    3219,
    3221,
    3223,
    3224,
    3226,
    3228,
    3229,
    3234,
    3237,
    3239,
    3242,
    3244,
    3245,
    3252,
    3254,
    3259,
    3260,
    3263,
    3265,
    3266,
    3269,
    3271,
    3273,
    3274,
    3279,
    3280,
    3285,
    3287,
    3288,
    3291,
    3293,
    3295,
    3296,
    3300,
    3302,
    3303,
    3305,
    3306,
    3309,
    3311,
    3313,
    3314,
    3321,
    3323,
    3325,
    3326,
    3329,
    3331,
    3333,
    3334,
    3336,
    3338,
    3339,
    3344,
    3350,
    3353,
    3358,
    3359,
    3364,
    3366,
    3371,
    3373,
    3374,
    3376,
    3378,
    3379,
    3384,
    3389,
    3390,
    3395,
    3397,
    3401,
    3403,
    3404,
    3406,
    3408,
    3409,
    3414,
    3418,
    3420,
    3423,
    3425,
    3426,
    3433,
    3436,
    3438,
    3439,
    3442,
    3444,
    3446,
    3447,
    3449,
    3451,
    3452
  ],
  "token_logprobs": [
    -0.016073724,
    -0.006387786,
    -0.0016390538,
    -0.78428066,
    -0.56792635,
    -0.036251564,
    -0.16145404,
    -0.0018004444,
    -0.00089388643,
    -0.00016232915,
    -0.0014710035,
    -0.008110505,
    -0.010997968,
    -0.0031773457,
    -0.0007124828,
    -2.2899282,
    -0.2626426,
    -0.0016201288,
    -0.00181376,
    -0.04186001,
    -0.11421709,
    -0.0009897592,
    -0.00062921696,
    -0.00045978764,
    -0.00061597634,
    -0.0012462287,
    -0.0059162215,
    -0.011028042,
    -0.004883012,
    -0.0008352442,
    -0.22928686,
    -0.078181796,
    -0.7100182,
    -0.0012129882,
    -0.0007540565,
    -0.029675553,
    -0.7879829,
    -0.0018147156,
    -0.020200102,
    -0.0036844728,
    -0.00056200207,
    -0.0030654748,
    -0.0045085466,
    -0.00094877306,
    -0.0005023067,
    -0.0058452357,
    -0.006644083,
    -0.0016981023,
    -0.0015740992,
    -0.003973173,
    -0.0019459736,
    -0.00041244208,
    -0.00086745684,
    -0.00022194568,
    -0.0020769509,
    -0.007893664,
    -1.959898,
    -8.960433e-05,
    -0.0011301578,
    -0.0009033114,
    -0.0006948258,
    -0.00046575186,
    -6.885639e-05,
    -0.0018263595,
    -0.0067365477,
    -0.9085443,
    -0.00190178,
    -0.0009639266,
    -0.00072733505,
    -0.0005433961,
    -0.0001856978,
    -0.0016505757,
    -0.005198417,
    -0.039403345,
    -0.0070802122,
    -0.0006852826,
    -2.318412,
    -0.13767846,
    -0.46862555,
    -0.104084924,
    -0.015185178,
    -0.8645506,
    -0.0051799035,
    -0.24345632,
    -0.25345024,
    -0.016377043,
    -0.56328875,
    -0.0055342396,
    -0.0019812686,
    -1.5203773,
    -0.15618934,
    -0.29620862,
    -0.66662365,
    -0.003899091,
    -0.0076794084,
    -0.0016496202,
    -0.04827864,
    -0.02377537,
    -0.0046953126,
    -0.002469685,
    -0.1489111,
    -0.024696859,
    -0.044194527,
    -0.00083100714,
    -0.0008517091,
    -0.015818756,
    -0.20146191,
    -0.0035451518,
    -0.001008552,
    -0.0008248027,
    -0.0006444259,
    -0.00013013717,
    -0.002072052,
    -0.28906944,
    -0.057855174,
    -0.0041220705,
    -0.0027419552,
    -0.34337667
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " f",
    "auc",
    "et",
    "\n",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " turn",
    " on",
    " f",
    "auc",
    "et",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " switch",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " pour",
    " water",
    " on",
    " face",
    "\n",
    " pour",
    "('",
    "water",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " wipe",
    " face",
    "\n",
    " wipe",
    "('",
    "face",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " turn",
    " off",
    " f",
    "auc",
    "et",
    "\n",
    " switch",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.016073724
    },
    {
      " 0": -0.006387786
    },
    {
      ":": -0.0016390538
    },
    {
      " find": -0.78428066
    },
    {
      " sink": -0.56792635
    },
    {
      "\n": -0.036251564
    },
    {
      " find": -0.16145404
    },
    {
      "('": -0.0018004444
    },
    {
      "s": -0.00089388643
    },
    {
      "ink": -0.00016232915
    },
    {
      "')": -0.0014710035
    },
    {
      "\n": -0.008110505
    },
    {
      " #": -0.010997968
    },
    {
      " 1": -0.0031773457
    },
    {
      ":": -0.0007124828
    },
    {
      " turn": -0.66653615
    },
    {
      " f": -0.2626426
    },
    {
      "auc": -0.0016201288
    },
    {
      "et": -0.00181376
    },
    {
      "\n": -0.04186001
    },
    {
      " find": -0.11421709
    },
    {
      "('": -0.0009897592
    },
    {
      "f": -0.00062921696
    },
    {
      "auc": -0.00045978764
    },
    {
      "et": -0.00061597634
    },
    {
      "')": -0.0012462287
    },
    {
      "\n": -0.0059162215
    },
    {
      " #": -0.011028042
    },
    {
      " 2": -0.004883012
    },
    {
      ":": -0.0008352442
    },
    {
      " turn": -0.22928686
    },
    {
      " on": -0.078181796
    },
    {
      " f": -0.7100182
    },
    {
      "auc": -0.0012129882
    },
    {
      "et": -0.0007540565
    },
    {
      "\n": -0.029675553
    },
    {
      " assert": -0.7879829
    },
    {
      "('": -0.0018147156
    },
    {
      "close": -0.020200102
    },
    {
      "'": -0.0036844728
    },
    {
      " to": -0.00056200207
    },
    {
      " '": -0.0030654748
    },
    {
      "f": -0.0045085466
    },
    {
      "auc": -0.00094877306
    },
    {
      "et": -0.0005023067
    },
    {
      "')": -0.0058452357
    },
    {
      "\n": -0.006644083
    },
    {
      " else": -0.0016981023
    },
    {
      ":": -0.0015740992
    },
    {
      " find": -0.003973173
    },
    {
      "('": -0.0019459736
    },
    {
      "f": -0.00041244208
    },
    {
      "auc": -0.00086745684
    },
    {
      "et": -0.00022194568
    },
    {
      "')": -0.0020769509
    },
    {
      "\n": -0.007893664
    },
    {
      " switch": -0.6541033
    },
    {
      "nt": -8.960433e-05
    },
    {
      "o": -0.0011301578
    },
    {
      "('": -0.0009033114
    },
    {
      "f": -0.0006948258
    },
    {
      "auc": -0.00046575186
    },
    {
      "et": -6.885639e-05
    },
    {
      "')": -0.0018263595
    },
    {
      "\n": -0.0067365477
    },
    {
      " switch": -0.9085443
    },
    {
      "on": -0.00190178
    },
    {
      "('": -0.0009639266
    },
    {
      "f": -0.00072733505
    },
    {
      "auc": -0.0005433961
    },
    {
      "et": -0.0001856978
    },
    {
      "')": -0.0016505757
    },
    {
      "\n": -0.005198417
    },
    {
      " #": -0.039403345
    },
    {
      " 3": -0.0070802122
    },
    {
      ":": -0.0006852826
    },
    {
      " find": -1.525635
    },
    {
      " water": -0.13767846
    },
    {
      " on": -0.46862555
    },
    {
      " face": -0.104084924
    },
    {
      "\n": -0.015185178
    },
    {
      " assert": -0.8249951
    },
    {
      "('": -0.0051799035
    },
    {
      "water": -0.24345632
    },
    {
      "')": -0.25345024
    },
    {
      "\n": -0.016377043
    },
    {
      " #": -0.56328875
    },
    {
      " 4": -0.0055342396
    },
    {
      ":": -0.0019812686
    },
    {
      " turn": -1.3505517
    },
    {
      " face": -0.15618934
    },
    {
      "\n": -0.29620862
    },
    {
      " wipe": -0.66662365
    },
    {
      "('": -0.003899091
    },
    {
      "face": -0.0076794084
    },
    {
      "')": -0.0016496202
    },
    {
      "\n": -0.04827864
    },
    {
      " #": -0.02377537
    },
    {
      " 5": -0.0046953126
    },
    {
      ":": -0.002469685
    },
    {
      " turn": -0.1489111
    },
    {
      " off": -0.024696859
    },
    {
      " f": -0.044194527
    },
    {
      "auc": -0.00083100714
    },
    {
      "et": -0.0008517091
    },
    {
      "\n": -0.015818756
    },
    {
      " switch": -0.20146191
    },
    {
      "off": -0.0035451518
    },
    {
      "('": -0.001008552
    },
    {
      "f": -0.0008248027
    },
    {
      "auc": -0.0006444259
    },
    {
      "et": -0.00013013717
    },
    {
      "')": -0.002072052
    },
    {
      "\n": -0.28906944
    },
    {
      " #": -0.057855174
    },
    {
      " 6": -0.0041220705
    },
    {
      ":": -0.0027419552
    },
    {
      " Done": -0.34337667
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.12056303024292
[(" # 0: lay down\n lay('bed')\n # 1: close eyes\n close('eyes')\n # 2: relax\n relax()\n # 3: Done\ndef wake_up():\n # 0: open eyes\n open('eyes')\n # 1: stand up\n standup()\n # 2: Done", <OpenAIObject at 0x7f9f100adf40> JSON: {
  "text_offset": [
    3156,
    3158,
    3160,
    3161,
    3165,
    3170,
    3171,
    3175,
    3177,
    3180,
    3182,
    3183,
    3185,
    3187,
    3188,
    3194,
    3199,
    3200,
    3206,
    3208,
    3212,
    3214,
    3215,
    3217,
    3219,
    3220,
    3226,
    3227,
    3233,
    3235,
    3236,
    3238,
    3240,
    3241,
    3246,
    3247,
    3250,
    3255,
    3256,
    3258,
    3261,
    3262,
    3264,
    3266,
    3267,
    3272,
    3277,
    3278,
    3283,
    3285,
    3289,
    3291,
    3292,
    3294,
    3296,
    3297,
    3303,
    3306,
    3307,
    3313,
    3315,
    3317,
    3318,
    3320,
    3322,
    3323
  ],
  "token_logprobs": [
    -0.27035874,
    -0.0679911,
    -0.0028759043,
    -2.0079951,
    -0.047820453,
    -0.544302,
    -0.43024188,
    -0.48103592,
    -0.96419203,
    -0.0035620183,
    -0.012408658,
    -0.044685304,
    -0.0034227143,
    -0.000654446,
    -0.12534277,
    -0.16650383,
    -0.021651305,
    -0.23777243,
    -0.20365018,
    -0.020610543,
    -0.0013615934,
    -0.010287048,
    -0.002493826,
    -0.0054627387,
    -0.000629813,
    -1.1032947,
    -0.3585615,
    -0.027477592,
    -0.04049879,
    -0.21204565,
    -0.03350933,
    -0.0056516607,
    -0.0008854123,
    -1.716645,
    -0.15540364,
    -2.5986378,
    -1.4391297,
    -0.6714269,
    -0.00022754945,
    -0.022563342,
    -0.016598156,
    -0.0033857524,
    -0.0037177373,
    -0.0010159514,
    -0.09368573,
    -0.016930733,
    -0.018781181,
    -0.002943334,
    -0.0026095165,
    -0.0011385729,
    -0.0017835438,
    -0.007353013,
    -0.00179292,
    -0.0019518872,
    -0.00068432797,
    -0.86943936,
    -0.052417573,
    -0.03268431,
    -0.043295845,
    -0.02308826,
    -0.045972094,
    -0.005298121,
    -0.0017901736,
    -0.002503207,
    -0.00070043333,
    -0.8239021
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " lay",
    " down",
    "\n",
    " lay",
    "('",
    "bed",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " close",
    " eyes",
    "\n",
    " close",
    "('",
    "eyes",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " relax",
    "\n",
    " relax",
    "()",
    "\n",
    " #",
    " 3",
    ":",
    " Done",
    "\n",
    "def",
    " wake",
    "_",
    "up",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " open",
    " eyes",
    "\n",
    " open",
    "('",
    "eyes",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " stand",
    " up",
    "\n",
    " stand",
    "up",
    "()",
    "\n",
    " #",
    " 2",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.27035874
    },
    {
      " 0": -0.0679911
    },
    {
      ":": -0.0028759043
    },
    {
      " find": -0.9979395
    },
    {
      " down": -0.047820453
    },
    {
      "\n": -0.544302
    },
    {
      " lay": -0.43024188
    },
    {
      "('": -0.48103592
    },
    {
      "down": -0.65810466
    },
    {
      "')": -0.0035620183
    },
    {
      "\n": -0.012408658
    },
    {
      " #": -0.044685304
    },
    {
      " 1": -0.0034227143
    },
    {
      ":": -0.000654446
    },
    {
      " close": -0.12534277
    },
    {
      " eyes": -0.16650383
    },
    {
      "\n": -0.021651305
    },
    {
      " close": -0.23777243
    },
    {
      "('": -0.20365018
    },
    {
      "eyes": -0.020610543
    },
    {
      "')": -0.0013615934
    },
    {
      "\n": -0.010287048
    },
    {
      " #": -0.002493826
    },
    {
      " 2": -0.0054627387
    },
    {
      ":": -0.000629813
    },
    {
      " relax": -1.1032947
    },
    {
      "\n": -0.3585615
    },
    {
      " relax": -0.027477592
    },
    {
      "()": -0.04049879
    },
    {
      "\n": -0.21204565
    },
    {
      " #": -0.03350933
    },
    {
      " 3": -0.0056516607
    },
    {
      ":": -0.0008854123
    },
    {
      " sleep": -1.2607238
    },
    {
      "\n": -0.15540364
    },
    {
      " print": -1.4566642
    },
    {
      " wake": -1.4391297
    },
    {
      "_": -0.6714269
    },
    {
      "up": -0.00022754945
    },
    {
      "():": -0.022563342
    },
    {
      "\n": -0.016598156
    },
    {
      " #": -0.0033857524
    },
    {
      " 0": -0.0037177373
    },
    {
      ":": -0.0010159514
    },
    {
      " open": -0.09368573
    },
    {
      " eyes": -0.016930733
    },
    {
      "\n": -0.018781181
    },
    {
      " open": -0.002943334
    },
    {
      "('": -0.0026095165
    },
    {
      "eyes": -0.0011385729
    },
    {
      "')": -0.0017835438
    },
    {
      "\n": -0.007353013
    },
    {
      " #": -0.00179292
    },
    {
      " 1": -0.0019518872
    },
    {
      ":": -0.00068432797
    },
    {
      " stand": -0.86943936
    },
    {
      " up": -0.052417573
    },
    {
      "\n": -0.03268431
    },
    {
      " stand": -0.043295845
    },
    {
      "up": -0.02308826
    },
    {
      "()": -0.045972094
    },
    {
      "\n": -0.005298121
    },
    {
      " #": -0.0017901736
    },
    {
      " 2": -0.002503207
    },
    {
      ":": -0.00070043333
    },
    {
      " Done": -0.8239021
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 3.0094830989837646
[(" # 0: walk to office\n walk('home_office')\n # 1: find newspaper\n find('newspaper')\n # 2: grab newspaper\n assert('close' to 'newspaper')\n else: find('newspaper')\n grab('newspaper')\n # 3: read the newspaper\n turnto('newspaper')\n lookat('newspaper')\n read('newspaper')\n # 4: put newspaper away\n assert('close' to 'newspaper')\n else: find('newspaper')\n putback('newspaper')", <OpenAIObject at 0x7f9f7213fcc0> JSON: {
  "text_offset": [
    3160,
    3162,
    3164,
    3165,
    3170,
    3173,
    3180,
    3181,
    3186,
    3188,
    3192,
    3193,
    3199,
    3201,
    3202,
    3204,
    3206,
    3207,
    3212,
    3222,
    3223,
    3228,
    3230,
    3233,
    3235,
    3239,
    3241,
    3242,
    3244,
    3246,
    3247,
    3252,
    3262,
    3263,
    3270,
    3272,
    3277,
    3278,
    3281,
    3283,
    3286,
    3288,
    3292,
    3294,
    3295,
    3300,
    3301,
    3306,
    3308,
    3311,
    3313,
    3317,
    3319,
    3320,
    3325,
    3327,
    3330,
    3332,
    3336,
    3338,
    3339,
    3341,
    3343,
    3344,
    3349,
    3353,
    3363,
    3364,
    3368,
    3370,
    3371,
    3373,
    3376,
    3378,
    3382,
    3384,
    3385,
    3390,
    3392,
    3394,
    3397,
    3399,
    3403,
    3405,
    3406,
    3411,
    3413,
    3416,
    3418,
    3422,
    3424,
    3425,
    3427,
    3429,
    3430,
    3434,
    3444,
    3449,
    3450,
    3457,
    3459,
    3464,
    3465,
    3468,
    3470,
    3473,
    3475,
    3479,
    3481,
    3482,
    3487,
    3488,
    3493,
    3495,
    3498,
    3500,
    3504,
    3506,
    3507,
    3511,
    3515,
    3517,
    3520,
    3522,
    3526
  ],
  "token_logprobs": [
    -0.01809032,
    -0.009945409,
    -0.0021346516,
    -0.74035263,
    -0.24225418,
    -4.1022563,
    -0.073274516,
    -0.005732048,
    -0.004664711,
    -0.1825702,
    -0.019334266,
    -0.00085540453,
    -0.0026839213,
    -0.0078295795,
    -0.004548662,
    -0.0038719245,
    -0.0008258774,
    -0.07103385,
    -0.5174129,
    -0.027671762,
    -0.1839122,
    -0.0013264992,
    -0.0018796852,
    -0.0008808795,
    -0.000403677,
    -0.002493826,
    -0.0057646595,
    -0.01274933,
    -0.005133291,
    -0.000670909,
    -0.21285443,
    -0.27030852,
    -0.025194414,
    -1.0885276,
    -0.0017956665,
    -0.0055030147,
    -0.0031610818,
    -0.0008777763,
    -0.0020953456,
    -0.0038034136,
    -0.0006078664,
    -0.00032777296,
    -0.005625228,
    -0.007299877,
    -0.0018825519,
    -0.0018553808,
    -0.004491721,
    -0.0019540377,
    -0.0013937666,
    -0.0005339749,
    -0.002222637,
    -0.0024732105,
    -0.007338185,
    -0.0043982044,
    -0.000939227,
    -0.0007075915,
    -0.00033952016,
    -0.00013013717,
    -0.0015619203,
    -0.005549405,
    -0.5875626,
    -0.008113271,
    -0.0007967051,
    -0.75155044,
    -1.5104526,
    -0.10841379,
    -0.013606159,
    -0.7098628,
    -6.277768e-05,
    -0.00046157953,
    -0.0005552024,
    -0.0018608755,
    -0.00020238983,
    -0.0006670915,
    -0.0011697821,
    -0.0051444327,
    -0.35163444,
    -0.00046527592,
    -0.00046861471,
    -0.0008973453,
    -0.0012689655,
    -0.0005670125,
    -0.0015068215,
    -0.07412813,
    -0.22706048,
    -0.009467654,
    -0.0016272934,
    -0.00024179816,
    -0.00024155974,
    -0.0020743217,
    -0.4671019,
    -0.07874294,
    -0.008006558,
    -0.0013405264,
    -0.39215365,
    -0.8386644,
    -3.2189405,
    -0.027460566,
    -0.4907422,
    -0.0012009923,
    -1.2325847,
    -0.002457076,
    -0.00038996234,
    -0.0016223975,
    -0.0028013068,
    -0.00031632424,
    -0.00040832703,
    -0.0035322304,
    -0.0036312907,
    -0.0011795675,
    -0.0005792986,
    -0.020810684,
    -0.00077272824,
    -0.0004453587,
    -0.0004967001,
    -0.00057369197,
    -0.0021189405,
    -0.00599609,
    -0.10905191,
    -1.2766052,
    -0.003428393,
    -0.0013570569,
    -0.00038304448,
    -0.00035645344,
    -0.003917159
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " office",
    "\n",
    " walk",
    "('",
    "home",
    "_",
    "office",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " newspaper",
    "\n",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " newspaper",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " grab",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " read",
    " the",
    " newspaper",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " look",
    "at",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " read",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " newspaper",
    " away",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "new",
    "sp",
    "aper",
    "')",
    "\n",
    " put",
    "back",
    "('",
    "new",
    "sp",
    "aper",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.01809032
    },
    {
      " 0": -0.009945409
    },
    {
      ":": -0.0021346516
    },
    {
      " walk": -0.74035263
    },
    {
      " to": -0.24225418
    },
    {
      " home": -0.8437991
    },
    {
      "\n": -0.073274516
    },
    {
      " walk": -0.005732048
    },
    {
      "('": -0.004664711
    },
    {
      "home": -0.1825702
    },
    {
      "_": -0.019334266
    },
    {
      "office": -0.00085540453
    },
    {
      "')": -0.0026839213
    },
    {
      "\n": -0.0078295795
    },
    {
      " #": -0.004548662
    },
    {
      " 1": -0.0038719245
    },
    {
      ":": -0.0008258774
    },
    {
      " find": -0.07103385
    },
    {
      " newspaper": -0.5174129
    },
    {
      "\n": -0.027671762
    },
    {
      " find": -0.1839122
    },
    {
      "('": -0.0013264992
    },
    {
      "new": -0.0018796852
    },
    {
      "sp": -0.0008808795
    },
    {
      "aper": -0.000403677
    },
    {
      "')": -0.002493826
    },
    {
      "\n": -0.0057646595
    },
    {
      " #": -0.01274933
    },
    {
      " 2": -0.005133291
    },
    {
      ":": -0.000670909
    },
    {
      " grab": -0.21285443
    },
    {
      " newspaper": -0.27030852
    },
    {
      "\n": -0.025194414
    },
    {
      " grab": -0.4254798
    },
    {
      "('": -0.0017956665
    },
    {
      "close": -0.0055030147
    },
    {
      "'": -0.0031610818
    },
    {
      " to": -0.0008777763
    },
    {
      " '": -0.0020953456
    },
    {
      "new": -0.0038034136
    },
    {
      "sp": -0.0006078664
    },
    {
      "aper": -0.00032777296
    },
    {
      "')": -0.005625228
    },
    {
      "\n": -0.007299877
    },
    {
      " else": -0.0018825519
    },
    {
      ":": -0.0018553808
    },
    {
      " find": -0.004491721
    },
    {
      "('": -0.0019540377
    },
    {
      "new": -0.0013937666
    },
    {
      "sp": -0.0005339749
    },
    {
      "aper": -0.002222637
    },
    {
      "')": -0.0024732105
    },
    {
      "\n": -0.007338185
    },
    {
      " grab": -0.0043982044
    },
    {
      "('": -0.000939227
    },
    {
      "new": -0.0007075915
    },
    {
      "sp": -0.00033952016
    },
    {
      "aper": -0.00013013717
    },
    {
      "')": -0.0015619203
    },
    {
      "\n": -0.005549405
    },
    {
      " #": -0.5875626
    },
    {
      " 3": -0.008113271
    },
    {
      ":": -0.0007967051
    },
    {
      " read": -0.75155044
    },
    {
      " newspaper": -0.31380868
    },
    {
      " newspaper": -0.10841379
    },
    {
      "\n": -0.013606159
    },
    {
      " tur": -0.7098628
    },
    {
      "nt": -6.277768e-05
    },
    {
      "o": -0.00046157953
    },
    {
      "('": -0.0005552024
    },
    {
      "new": -0.0018608755
    },
    {
      "sp": -0.00020238983
    },
    {
      "aper": -0.0006670915
    },
    {
      "')": -0.0011697821
    },
    {
      "\n": -0.0051444327
    },
    {
      " look": -0.35163444
    },
    {
      "at": -0.00046527592
    },
    {
      "('": -0.00046861471
    },
    {
      "new": -0.0008973453
    },
    {
      "sp": -0.0012689655
    },
    {
      "aper": -0.0005670125
    },
    {
      "')": -0.0015068215
    },
    {
      "\n": -0.07412813
    },
    {
      " read": -0.22706048
    },
    {
      "('": -0.009467654
    },
    {
      "new": -0.0016272934
    },
    {
      "sp": -0.00024179816
    },
    {
      "aper": -0.00024155974
    },
    {
      "')": -0.0020743217
    },
    {
      "\n": -0.4671019
    },
    {
      " #": -0.07874294
    },
    {
      " 4": -0.008006558
    },
    {
      ":": -0.0013405264
    },
    {
      " put": -0.39215365
    },
    {
      " newspaper": -0.8386644
    },
    {
      " back": -0.06457497
    },
    {
      "\n": -0.027460566
    },
    {
      " assert": -0.4907422
    },
    {
      "('": -0.0012009923
    },
    {
      "new": -0.3617447
    },
    {
      "'": -0.002457076
    },
    {
      " to": -0.00038996234
    },
    {
      " '": -0.0016223975
    },
    {
      "new": -0.0028013068
    },
    {
      "sp": -0.00031632424
    },
    {
      "aper": -0.00040832703
    },
    {
      "')": -0.0035322304
    },
    {
      "\n": -0.0036312907
    },
    {
      " else": -0.0011795675
    },
    {
      ":": -0.0005792986
    },
    {
      " find": -0.020810684
    },
    {
      "('": -0.00077272824
    },
    {
      "new": -0.0004453587
    },
    {
      "sp": -0.0004967001
    },
    {
      "aper": -0.00057369197
    },
    {
      "')": -0.0021189405
    },
    {
      "\n": -0.00599609
    },
    {
      " put": -0.10905191
    },
    {
      "obj": -0.4823747
    },
    {
      "('": -0.003428393
    },
    {
      "new": -0.0013570569
    },
    {
      "sp": -0.00038304448
    },
    {
      "aper": -0.00035645344
    },
    {
      "')": -0.003917159
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 8.891165971755981
[(" # 0: find shoes\n find('shoes')\n # 1: grab shoes\n assert('close' to 'shoes')\n else: find('shoes')\n grab('shoes')\n assert('shoes' in 'hands')\n else: grab('shoes')\n turnto('shoes')\n assert('shoes' in 'hands')\n else: grab('shoes')\n pointat('shoes')\n # 2: put on shoes\n assert('shoes' in 'hands')\n else: grab('shoes')\n puton('shoes')\n # 3: Done\n lookat('shoes')", <OpenAIObject at 0x7f9f20094b80> JSON: {
  "text_offset": [
    3168,
    3170,
    3172,
    3173,
    3178,
    3184,
    3185,
    3190,
    3192,
    3194,
    3197,
    3199,
    3200,
    3202,
    3204,
    3205,
    3210,
    3216,
    3217,
    3224,
    3226,
    3231,
    3232,
    3235,
    3237,
    3239,
    3242,
    3244,
    3245,
    3250,
    3251,
    3256,
    3258,
    3260,
    3263,
    3265,
    3266,
    3271,
    3273,
    3275,
    3278,
    3280,
    3281,
    3288,
    3290,
    3292,
    3295,
    3296,
    3299,
    3301,
    3306,
    3308,
    3309,
    3314,
    3315,
    3320,
    3322,
    3324,
    3327,
    3329,
    3330,
    3334,
    3336,
    3337,
    3339,
    3341,
    3344,
    3346,
    3347,
    3354,
    3356,
    3358,
    3361,
    3362,
    3365,
    3367,
    3372,
    3374,
    3375,
    3380,
    3381,
    3386,
    3388,
    3390,
    3393,
    3395,
    3396,
    3402,
    3404,
    3406,
    3408,
    3411,
    3413,
    3414,
    3416,
    3418,
    3419,
    3423,
    3426,
    3432,
    3433,
    3440,
    3442,
    3444,
    3447,
    3448,
    3451,
    3453,
    3458,
    3460,
    3461,
    3466,
    3467,
    3472,
    3474,
    3476,
    3479,
    3481,
    3482,
    3486,
    3488,
    3490,
    3492,
    3495,
    3497,
    3498,
    3500,
    3502,
    3503,
    3508,
    3509,
    3514,
    3516,
    3518,
    3520,
    3523
  ],
  "token_logprobs": [
    -0.013415668,
    -0.008201785,
    -0.0019450181,
    -0.45293543,
    -0.26697296,
    -0.040811352,
    -0.03720821,
    -0.0020255232,
    -0.0009701922,
    -0.0027475131,
    -0.0029002952,
    -0.007262353,
    -0.0071861655,
    -0.002146654,
    -0.00063368963,
    -0.22146565,
    -0.10650526,
    -0.021539297,
    -0.44972754,
    -0.0015188211,
    -0.004961417,
    -0.0023873483,
    -0.0006318414,
    -0.005001314,
    -0.0004976547,
    -0.0018982564,
    -0.005140537,
    -0.006160224,
    -0.0012852577,
    -0.0013205322,
    -0.0030797636,
    -0.0011251464,
    -0.00018677162,
    -0.0022773594,
    -0.0020715753,
    -0.006573583,
    -0.0046906993,
    -0.00083315483,
    -0.00010545909,
    -0.00026934195,
    -0.0021424724,
    -0.0063856263,
    -0.6511132,
    -0.0011587427,
    -0.0042967326,
    -0.0030107093,
    -0.0011648871,
    -0.012919765,
    -0.003626326,
    -0.0057246736,
    -0.019114973,
    -0.0030594356,
    -0.0116711045,
    -0.0017693947,
    -0.0026153126,
    -0.0010778873,
    -0.00014897496,
    -0.0005815645,
    -0.0024622753,
    -0.0040810136,
    -0.6444594,
    -5.20489e-05,
    -0.00015970749,
    -0.000425204,
    -0.00017985563,
    -0.0002643333,
    -0.0012434821,
    -0.0029454855,
    -0.3224654,
    -0.0003311108,
    -0.0023217509,
    -0.001174436,
    -0.0006196737,
    -0.0011068278,
    -0.0009589143,
    -0.0009010445,
    -0.0010758588,
    -0.0012256374,
    -0.0023364455,
    -0.00058526185,
    -0.00082635425,
    -0.00047255142,
    -8.900641e-05,
    -2.141132e-05,
    -0.0006019041,
    -0.0025486206,
    -0.080638036,
    -0.00061609555,
    -0.0003272952,
    -0.00014659172,
    -0.0006817035,
    -0.0020225374,
    -0.0049618953,
    -0.0033569855,
    -0.006921447,
    -0.00077988545,
    -0.068282254,
    -0.32402354,
    -0.09394918,
    -0.015158915,
    -0.24056767,
    -0.00063846173,
    -0.08204795,
    -0.0004403491,
    -0.0008895902,
    -0.0015720708,
    -0.0013290665,
    -0.002383225,
    -0.0026966503,
    -0.0016415627,
    -0.001305313,
    -0.00086978375,
    -0.0027396835,
    -0.00051793334,
    -0.00011428335,
    -7.1481794e-05,
    -0.00061382964,
    -0.0038461364,
    -0.03766395,
    -0.012508483,
    -0.001021801,
    -0.00017866449,
    -0.0004690925,
    -0.0022442052,
    -0.02131356,
    -0.7415023,
    -0.008977135,
    -0.0011933536,
    -0.30987644,
    -0.36902434,
    -2.803414,
    -0.00733074,
    -0.00149327,
    -0.044440385,
    -0.00207002,
    -0.0026980839
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " shoes",
    "\n",
    " find",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " shoes",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sh",
    "oes",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " grab",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " assert",
    "('",
    "sh",
    "oes",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " assert",
    "('",
    "sh",
    "oes",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " put",
    " on",
    " shoes",
    "\n",
    " assert",
    "('",
    "sh",
    "oes",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " put",
    "on",
    "('",
    "sh",
    "oes",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " Done",
    "\n",
    " look",
    "at",
    "('",
    "sh",
    "oes",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.013415668
    },
    {
      " 0": -0.008201785
    },
    {
      ":": -0.0019450181
    },
    {
      " find": -0.45293543
    },
    {
      " shoes": -0.26697296
    },
    {
      "\n": -0.040811352
    },
    {
      " find": -0.03720821
    },
    {
      "('": -0.0020255232
    },
    {
      "sh": -0.0009701922
    },
    {
      "oes": -0.0027475131
    },
    {
      "')": -0.0029002952
    },
    {
      "\n": -0.007262353
    },
    {
      " #": -0.0071861655
    },
    {
      " 1": -0.002146654
    },
    {
      ":": -0.00063368963
    },
    {
      " grab": -0.22146565
    },
    {
      " shoes": -0.10650526
    },
    {
      "\n": -0.021539297
    },
    {
      " assert": -0.44972754
    },
    {
      "('": -0.0015188211
    },
    {
      "close": -0.004961417
    },
    {
      "'": -0.0023873483
    },
    {
      " to": -0.0006318414
    },
    {
      " '": -0.005001314
    },
    {
      "sh": -0.0004976547
    },
    {
      "oes": -0.0018982564
    },
    {
      "')": -0.005140537
    },
    {
      "\n": -0.006160224
    },
    {
      " else": -0.0012852577
    },
    {
      ":": -0.0013205322
    },
    {
      " find": -0.0030797636
    },
    {
      "('": -0.0011251464
    },
    {
      "sh": -0.00018677162
    },
    {
      "oes": -0.0022773594
    },
    {
      "')": -0.0020715753
    },
    {
      "\n": -0.006573583
    },
    {
      " grab": -0.0046906993
    },
    {
      "('": -0.00083315483
    },
    {
      "sh": -0.00010545909
    },
    {
      "oes": -0.00026934195
    },
    {
      "')": -0.0021424724
    },
    {
      "\n": -0.0063856263
    },
    {
      " assert": -0.6511132
    },
    {
      "('": -0.0011587427
    },
    {
      "sh": -0.0042967326
    },
    {
      "oes": -0.0030107093
    },
    {
      "'": -0.0011648871
    },
    {
      " in": -0.012919765
    },
    {
      " '": -0.003626326
    },
    {
      "hands": -0.0057246736
    },
    {
      "')": -0.019114973
    },
    {
      "\n": -0.0030594356
    },
    {
      " else": -0.0116711045
    },
    {
      ":": -0.0017693947
    },
    {
      " grab": -0.0026153126
    },
    {
      "('": -0.0010778873
    },
    {
      "sh": -0.00014897496
    },
    {
      "oes": -0.0005815645
    },
    {
      "')": -0.0024622753
    },
    {
      "\n": -0.0040810136
    },
    {
      " tur": -0.6444594
    },
    {
      "nt": -5.20489e-05
    },
    {
      "o": -0.00015970749
    },
    {
      "('": -0.000425204
    },
    {
      "sh": -0.00017985563
    },
    {
      "oes": -0.0002643333
    },
    {
      "')": -0.0012434821
    },
    {
      "\n": -0.0029454855
    },
    {
      " assert": -0.3224654
    },
    {
      "('": -0.0003311108
    },
    {
      "sh": -0.0023217509
    },
    {
      "oes": -0.001174436
    },
    {
      "'": -0.0006196737
    },
    {
      " in": -0.0011068278
    },
    {
      " '": -0.0009589143
    },
    {
      "hands": -0.0009010445
    },
    {
      "')": -0.0010758588
    },
    {
      "\n": -0.0012256374
    },
    {
      " else": -0.0023364455
    },
    {
      ":": -0.00058526185
    },
    {
      " grab": -0.00082635425
    },
    {
      "('": -0.00047255142
    },
    {
      "sh": -8.900641e-05
    },
    {
      "oes": -2.141132e-05
    },
    {
      "')": -0.0006019041
    },
    {
      "\n": -0.0025486206
    },
    {
      " point": -0.080638036
    },
    {
      "at": -0.00061609555
    },
    {
      "('": -0.0003272952
    },
    {
      "sh": -0.00014659172
    },
    {
      "oes": -0.0006817035
    },
    {
      "')": -0.0020225374
    },
    {
      "\n": -0.0049618953
    },
    {
      " #": -0.0033569855
    },
    {
      " 2": -0.006921447
    },
    {
      ":": -0.00077988545
    },
    {
      " put": -0.068282254
    },
    {
      " on": -0.32402354
    },
    {
      " shoes": -0.09394918
    },
    {
      "\n": -0.015158915
    },
    {
      " assert": -0.24056767
    },
    {
      "('": -0.00063846173
    },
    {
      "sh": -0.08204795
    },
    {
      "oes": -0.0004403491
    },
    {
      "'": -0.0008895902
    },
    {
      " in": -0.0015720708
    },
    {
      " '": -0.0013290665
    },
    {
      "hands": -0.002383225
    },
    {
      "')": -0.0026966503
    },
    {
      "\n": -0.0016415627
    },
    {
      " else": -0.001305313
    },
    {
      ":": -0.00086978375
    },
    {
      " grab": -0.0027396835
    },
    {
      "('": -0.00051793334
    },
    {
      "sh": -0.00011428335
    },
    {
      "oes": -7.1481794e-05
    },
    {
      "')": -0.00061382964
    },
    {
      "\n": -0.0038461364
    },
    {
      " put": -0.03766395
    },
    {
      "on": -0.012508483
    },
    {
      "('": -0.001021801
    },
    {
      "sh": -0.00017866449
    },
    {
      "oes": -0.0004690925
    },
    {
      "')": -0.0022442052
    },
    {
      "\n": -0.02131356
    },
    {
      " #": -0.7415023
    },
    {
      " 3": -0.008977135
    },
    {
      ":": -0.0011933536
    },
    {
      " Done": -0.30987644
    },
    {
      "\n": -0.36902434
    },
    {
      "def": -1.2624693
    },
    {
      "at": -0.00733074
    },
    {
      "('": -0.00149327
    },
    {
      "sh": -0.044440385
    },
    {
      "oes": -0.00207002
    },
    {
      "')": -0.0026980839
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 5.280411005020142
[(" # 0: walk to kitchen\n walk('kitchen')\n # 1: find sink\n find('sink')\n # 2: pour some detergent\n pour('detergent')\n # 3: turn on the faucet\n switchon('faucet')\n # 4: grab a sponge\n grab('sponge')\n # 5: wash the sponge\n wash('sponge')\n # 6: turn off the faucet\n switchoff('faucet')\n # 7: wipe the sponge\n wipe('sponge')\n # 8: drop the sponge\n drop('sponge')", <OpenAIObject at 0x7f9f200ff6d0> JSON: {
  "text_offset": [
    3163,
    3165,
    3167,
    3168,
    3173,
    3176,
    3184,
    3185,
    3190,
    3192,
    3195,
    3199,
    3201,
    3202,
    3204,
    3206,
    3207,
    3212,
    3217,
    3218,
    3223,
    3225,
    3226,
    3229,
    3231,
    3232,
    3234,
    3236,
    3237,
    3242,
    3247,
    3253,
    3257,
    3258,
    3263,
    3265,
    3266,
    3270,
    3274,
    3276,
    3277,
    3279,
    3281,
    3282,
    3287,
    3290,
    3294,
    3296,
    3299,
    3301,
    3302,
    3309,
    3311,
    3313,
    3314,
    3317,
    3319,
    3321,
    3322,
    3324,
    3326,
    3327,
    3332,
    3334,
    3341,
    3342,
    3347,
    3349,
    3351,
    3355,
    3357,
    3358,
    3360,
    3362,
    3363,
    3368,
    3372,
    3379,
    3380,
    3385,
    3387,
    3389,
    3393,
    3395,
    3396,
    3398,
    3400,
    3401,
    3406,
    3410,
    3414,
    3416,
    3419,
    3421,
    3422,
    3429,
    3432,
    3434,
    3435,
    3438,
    3440,
    3442,
    3443,
    3445,
    3447,
    3448,
    3453,
    3457,
    3464,
    3465,
    3470,
    3472,
    3474,
    3478,
    3480,
    3481,
    3483,
    3485,
    3486,
    3491,
    3495,
    3502,
    3503,
    3508,
    3510,
    3512,
    3516
  ],
  "token_logprobs": [
    -0.018122971,
    -0.008963903,
    -0.0019366575,
    -1.1394272,
    -0.22991812,
    -1.6276962,
    -0.06826713,
    -0.0059937513,
    -0.0047677164,
    -0.0021792112,
    -0.0002419183,
    -0.0031453557,
    -0.006807601,
    -0.0031588096,
    -0.003818492,
    -0.0008631615,
    -0.10356074,
    -0.39301428,
    -0.025845729,
    -0.41000238,
    -0.0010729932,
    -0.0010864197,
    -8.948419e-05,
    -0.0012645501,
    -0.0061641224,
    -0.027108235,
    -0.005372727,
    -0.001170259,
    -3.6582708,
    -2.8311357,
    -1.4684185,
    -0.003723362,
    -0.33332542,
    -2.0787034,
    -0.0027623952,
    -0.00673391,
    -0.0002981989,
    -0.0006744853,
    -0.013678123,
    -0.008448988,
    -0.048482902,
    -0.0066514034,
    -0.0014336386,
    -1.3627552,
    -0.18088335,
    -0.86327094,
    -0.19499199,
    -0.0027937763,
    -0.0025409134,
    -0.02935111,
    -1.5810922,
    -0.0021313045,
    -0.0013304988,
    -0.00067031296,
    -0.00040320013,
    -0.0001866524,
    -0.0014176422,
    -0.0042824843,
    -0.017807286,
    -0.004249922,
    -0.0007704604,
    -0.40685308,
    -1.6942648,
    -0.0057412805,
    -0.02438319,
    -0.31728435,
    -0.0010509772,
    -0.0002822221,
    -0.0005217489,
    -0.0008687691,
    -0.004166838,
    -0.015672209,
    -0.003113607,
    -0.0007016272,
    -0.39365378,
    -0.8846784,
    -0.15127867,
    -0.17851342,
    -0.17564075,
    -0.0012475409,
    -0.0003297995,
    -6.873624e-05,
    -0.001532071,
    -0.005610422,
    -0.027534697,
    -0.0030194987,
    -0.0011439439,
    -0.76544815,
    -0.031809404,
    -0.07630037,
    -0.006518866,
    -0.00055770774,
    -0.00055365276,
    -0.018574886,
    -0.010795806,
    -0.0041505606,
    -0.0008595825,
    -0.0003748172,
    -0.00020167646,
    -0.00023094735,
    -0.0021258094,
    -0.0074114404,
    -0.002135486,
    -0.0057866005,
    -0.001190729,
    -1.4379286,
    -0.17904013,
    -0.79080254,
    -0.04388483,
    -0.039766986,
    -0.00086495065,
    -0.0006888607,
    -0.00017866449,
    -0.0021874553,
    -0.009711318,
    -0.004342289,
    -0.0020438607,
    -0.0017962635,
    -1.5076798,
    -0.02572842,
    -0.0021861412,
    -0.029134158,
    -0.044529688,
    -0.0014464728,
    -0.000113448885,
    -0.00033284168,
    -0.0017117729
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " kitchen",
    "\n",
    " walk",
    "('",
    "kit",
    "chen",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sink",
    "\n",
    " find",
    "('",
    "s",
    "ink",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pour",
    " some",
    " deter",
    "gent",
    "\n",
    " pour",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " turn",
    " on",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " switch",
    "on",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " grab",
    " a",
    " sponge",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " wash",
    " the",
    " sponge",
    "\n",
    " wash",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " turn",
    " off",
    " the",
    " f",
    "auc",
    "et",
    "\n",
    " switch",
    "off",
    "('",
    "f",
    "auc",
    "et",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " wipe",
    " the",
    " sponge",
    "\n",
    " wipe",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 8",
    ":",
    " drop",
    " the",
    " sponge",
    "\n",
    " drop",
    "('",
    "sp",
    "onge",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.018122971
    },
    {
      " 0": -0.008963903
    },
    {
      ":": -0.0019366575
    },
    {
      " find": -0.7191448
    },
    {
      " to": -0.22991812
    },
    {
      " bathroom": -1.0016738
    },
    {
      "\n": -0.06826713
    },
    {
      " walk": -0.0059937513
    },
    {
      "('": -0.0047677164
    },
    {
      "kit": -0.0021792112
    },
    {
      "chen": -0.0002419183
    },
    {
      "')": -0.0031453557
    },
    {
      "\n": -0.006807601
    },
    {
      " #": -0.0031588096
    },
    {
      " 1": -0.003818492
    },
    {
      ":": -0.0008631615
    },
    {
      " find": -0.10356074
    },
    {
      " sink": -0.39301428
    },
    {
      "\n": -0.025845729
    },
    {
      " find": -0.41000238
    },
    {
      "('": -0.0010729932
    },
    {
      "s": -0.0010864197
    },
    {
      "ink": -8.948419e-05
    },
    {
      "')": -0.0012645501
    },
    {
      "\n": -0.0061641224
    },
    {
      " #": -0.027108235
    },
    {
      " 2": -0.005372727
    },
    {
      ":": -0.001170259
    },
    {
      " turn": -0.34968397
    },
    {
      " deter": -1.016557
    },
    {
      " water": -0.5305198
    },
    {
      "gent": -0.003723362
    },
    {
      "\n": -0.33332542
    },
    {
      " assert": -0.42739907
    },
    {
      "('": -0.0027623952
    },
    {
      "d": -0.00673391
    },
    {
      "eter": -0.0002981989
    },
    {
      "gent": -0.0006744853
    },
    {
      "')": -0.013678123
    },
    {
      "\n": -0.008448988
    },
    {
      " #": -0.048482902
    },
    {
      " 3": -0.0066514034
    },
    {
      ":": -0.0014336386
    },
    {
      " grab": -0.92870563
    },
    {
      " on": -0.18088335
    },
    {
      " f": -0.77771974
    },
    {
      " f": -0.19499199
    },
    {
      "auc": -0.0027937763
    },
    {
      "et": -0.0025409134
    },
    {
      "\n": -0.02935111
    },
    {
      " tur": -1.2349582
    },
    {
      "on": -0.0021313045
    },
    {
      "('": -0.0013304988
    },
    {
      "f": -0.00067031296
    },
    {
      "auc": -0.00040320013
    },
    {
      "et": -0.0001866524
    },
    {
      "')": -0.0014176422
    },
    {
      "\n": -0.0042824843
    },
    {
      " #": -0.017807286
    },
    {
      " 4": -0.004249922
    },
    {
      ":": -0.0007704604
    },
    {
      " grab": -0.40685308
    },
    {
      " sponge": -0.83606374
    },
    {
      " sponge": -0.0057412805
    },
    {
      "\n": -0.02438319
    },
    {
      " grab": -0.31728435
    },
    {
      "('": -0.0010509772
    },
    {
      "sp": -0.0002822221
    },
    {
      "onge": -0.0005217489
    },
    {
      "')": -0.0008687691
    },
    {
      "\n": -0.004166838
    },
    {
      " #": -0.015672209
    },
    {
      " 5": -0.003113607
    },
    {
      ":": -0.0007016272
    },
    {
      " wash": -0.39365378
    },
    {
      " the": -0.8846784
    },
    {
      " sponge": -0.15127867
    },
    {
      "\n": -0.17851342
    },
    {
      " wash": -0.17564075
    },
    {
      "('": -0.0012475409
    },
    {
      "sp": -0.0003297995
    },
    {
      "onge": -6.873624e-05
    },
    {
      "')": -0.001532071
    },
    {
      "\n": -0.005610422
    },
    {
      " #": -0.027534697
    },
    {
      " 6": -0.0030194987
    },
    {
      ":": -0.0011439439
    },
    {
      " turn": -0.76544815
    },
    {
      " off": -0.031809404
    },
    {
      " the": -0.07630037
    },
    {
      " f": -0.006518866
    },
    {
      "auc": -0.00055770774
    },
    {
      "et": -0.00055365276
    },
    {
      "\n": -0.018574886
    },
    {
      " switch": -0.010795806
    },
    {
      "off": -0.0041505606
    },
    {
      "('": -0.0008595825
    },
    {
      "f": -0.0003748172
    },
    {
      "auc": -0.00020167646
    },
    {
      "et": -0.00023094735
    },
    {
      "')": -0.0021258094
    },
    {
      "\n": -0.0074114404
    },
    {
      " #": -0.002135486
    },
    {
      " 7": -0.0057866005
    },
    {
      ":": -0.001190729
    },
    {
      " put": -1.0098748
    },
    {
      " the": -0.17904013
    },
    {
      " sink": -0.70709944
    },
    {
      "\n": -0.04388483
    },
    {
      " wipe": -0.039766986
    },
    {
      "('": -0.00086495065
    },
    {
      "sp": -0.0006888607
    },
    {
      "onge": -0.00017866449
    },
    {
      "')": -0.0021874553
    },
    {
      "\n": -0.009711318
    },
    {
      " #": -0.004342289
    },
    {
      " 8": -0.0020438607
    },
    {
      ":": -0.0017962635
    },
    {
      " put": -0.824173
    },
    {
      " the": -0.02572842
    },
    {
      " sponge": -0.0021861412
    },
    {
      "\n": -0.029134158
    },
    {
      " drop": -0.044529688
    },
    {
      "('": -0.0014464728
    },
    {
      "sp": -0.000113448885
    },
    {
      "onge": -0.00033284168
    },
    {
      "')": -0.0017117729
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.7842156887054443
[(" # 0: find cup\n find('cup')\n # 1: grab cup\n assert('close' to 'cup')\n else: find('cup')\n grab('cup')\n assert('cup' in 'hands')\n else: grab('cup')\n turnto('cup')\n # 2: pour drink into cup\n pour('drink')\n # 3: drink\n drink('cup')\n # 4: put cup back\n assert('cup' in 'hands')\n else: grab('cup')\n putback('cup')", <OpenAIObject at 0x7f9f201229f0> JSON: {
  "text_offset": [
    3156,
    3158,
    3160,
    3161,
    3166,
    3170,
    3171,
    3176,
    3178,
    3181,
    3183,
    3184,
    3186,
    3188,
    3189,
    3194,
    3198,
    3199,
    3206,
    3208,
    3213,
    3214,
    3217,
    3219,
    3222,
    3224,
    3225,
    3230,
    3231,
    3236,
    3238,
    3241,
    3243,
    3244,
    3249,
    3251,
    3254,
    3256,
    3257,
    3264,
    3266,
    3269,
    3270,
    3273,
    3275,
    3280,
    3282,
    3283,
    3288,
    3289,
    3294,
    3296,
    3299,
    3301,
    3302,
    3306,
    3308,
    3309,
    3311,
    3314,
    3316,
    3317,
    3319,
    3321,
    3322,
    3327,
    3333,
    3338,
    3342,
    3343,
    3348,
    3350,
    3352,
    3355,
    3357,
    3358,
    3360,
    3362,
    3363,
    3369,
    3370,
    3376,
    3378,
    3381,
    3383,
    3384,
    3386,
    3388,
    3389,
    3393,
    3397,
    3402,
    3403,
    3410,
    3412,
    3415,
    3416,
    3419,
    3421,
    3426,
    3428,
    3429,
    3434,
    3435,
    3440,
    3442,
    3445,
    3447,
    3448,
    3452,
    3456,
    3458,
    3461
  ],
  "token_logprobs": [
    -0.07935383,
    -0.033952523,
    -0.00441233,
    -0.17568175,
    -0.57370794,
    -0.04759234,
    -0.018999789,
    -0.0035265486,
    -0.0004974163,
    -0.0028921051,
    -0.010871784,
    -0.0075234952,
    -0.004100344,
    -0.00083065045,
    -0.093059294,
    -0.04159465,
    -0.019884003,
    -0.5215227,
    -0.0021346516,
    -0.0035336665,
    -0.0025840565,
    -0.00040320013,
    -0.005229873,
    -0.0003151312,
    -0.006114945,
    -0.007296334,
    -0.0016736815,
    -0.0016565464,
    -0.003758242,
    -0.0014287436,
    -0.00018343095,
    -0.0012376334,
    -0.00737325,
    -0.0040327753,
    -0.0011333813,
    -0.00015255497,
    -0.0017849773,
    -0.0053321566,
    -0.5220579,
    -0.0015857422,
    -0.011568351,
    -0.0014554255,
    -0.016846715,
    -0.0037545918,
    -0.010791829,
    -0.014239694,
    -0.0034658378,
    -0.01584213,
    -0.002685594,
    -0.0025268693,
    -0.0013638621,
    -0.00022051518,
    -0.0015296832,
    -0.0050720028,
    -0.43035698,
    -3.5717305e-05,
    -0.00016650239,
    -0.00044070487,
    -0.00027160783,
    -0.00088183413,
    -0.0032357073,
    -1.8388147,
    -0.010363772,
    -0.0012145388,
    -0.39305532,
    -1.6111605,
    -1.0430002,
    -0.04877813,
    -0.0151774315,
    -0.7484892,
    -0.0071695955,
    -0.06254577,
    -0.00068576034,
    -0.8644769,
    -0.016938007,
    -0.51213294,
    -0.0049181688,
    -0.0011394074,
    -0.118497856,
    -0.8684171,
    -0.58448875,
    -0.06084764,
    -0.12456631,
    -0.0018160287,
    -0.18171822,
    -0.07113778,
    -0.0080187535,
    -0.0014271928,
    -0.26228705,
    -0.15740655,
    -0.118424855,
    -0.033014085,
    -0.5019403,
    -0.0010152343,
    -0.09791946,
    -0.0011012156,
    -0.0032095134,
    -0.0025562695,
    -0.005809563,
    -0.0037991053,
    -0.0023598066,
    -0.0015526679,
    -0.0010763338,
    -0.004229869,
    -0.00084967975,
    -0.00018700723,
    -0.0016343972,
    -0.0040910672,
    -0.01679616,
    -1.1603264,
    -0.0050512147,
    -0.0004155434,
    -0.0048054475
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " find",
    " cup",
    "\n",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " grab",
    " cup",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "cup",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "cup",
    "')",
    "\n",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " assert",
    "('",
    "cup",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pour",
    " drink",
    " into",
    " cup",
    "\n",
    " pour",
    "('",
    "dr",
    "ink",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " drink",
    "\n",
    " drink",
    "('",
    "cup",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " put",
    " cup",
    " back",
    "\n",
    " assert",
    "('",
    "cup",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "cup",
    "')",
    "\n",
    " put",
    "back",
    "('",
    "cup",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.07935383
    },
    {
      " 0": -0.033952523
    },
    {
      ":": -0.00441233
    },
    {
      " find": -0.17568175
    },
    {
      " cup": -0.57370794
    },
    {
      "\n": -0.04759234
    },
    {
      " find": -0.018999789
    },
    {
      "('": -0.0035265486
    },
    {
      "cup": -0.0004974163
    },
    {
      "')": -0.0028921051
    },
    {
      "\n": -0.010871784
    },
    {
      " #": -0.0075234952
    },
    {
      " 1": -0.004100344
    },
    {
      ":": -0.00083065045
    },
    {
      " grab": -0.093059294
    },
    {
      " cup": -0.04159465
    },
    {
      "\n": -0.019884003
    },
    {
      " assert": -0.5215227
    },
    {
      "('": -0.0021346516
    },
    {
      "close": -0.0035336665
    },
    {
      "'": -0.0025840565
    },
    {
      " to": -0.00040320013
    },
    {
      " '": -0.005229873
    },
    {
      "cup": -0.0003151312
    },
    {
      "')": -0.006114945
    },
    {
      "\n": -0.007296334
    },
    {
      " else": -0.0016736815
    },
    {
      ":": -0.0016565464
    },
    {
      " find": -0.003758242
    },
    {
      "('": -0.0014287436
    },
    {
      "cup": -0.00018343095
    },
    {
      "')": -0.0012376334
    },
    {
      "\n": -0.00737325
    },
    {
      " grab": -0.0040327753
    },
    {
      "('": -0.0011333813
    },
    {
      "cup": -0.00015255497
    },
    {
      "')": -0.0017849773
    },
    {
      "\n": -0.0053321566
    },
    {
      " assert": -0.5220579
    },
    {
      "('": -0.0015857422
    },
    {
      "cup": -0.011568351
    },
    {
      "'": -0.0014554255
    },
    {
      " in": -0.016846715
    },
    {
      " '": -0.0037545918
    },
    {
      "hands": -0.010791829
    },
    {
      "')": -0.014239694
    },
    {
      "\n": -0.0034658378
    },
    {
      " else": -0.01584213
    },
    {
      ":": -0.002685594
    },
    {
      " grab": -0.0025268693
    },
    {
      "('": -0.0013638621
    },
    {
      "cup": -0.00022051518
    },
    {
      "')": -0.0015296832
    },
    {
      "\n": -0.0050720028
    },
    {
      " tur": -0.43035698
    },
    {
      "nt": -3.5717305e-05
    },
    {
      "o": -0.00016650239
    },
    {
      "('": -0.00044070487
    },
    {
      "cup": -0.00027160783
    },
    {
      "')": -0.00088183413
    },
    {
      "\n": -0.0032357073
    },
    {
      " assert": -0.42329413
    },
    {
      " 2": -0.010363772
    },
    {
      ":": -0.0012145388
    },
    {
      " pour": -0.39305532
    },
    {
      " liquid": -0.7569059
    },
    {
      " into": -1.0430002
    },
    {
      " cup": -0.04877813
    },
    {
      "\n": -0.0151774315
    },
    {
      " assert": -0.6959807
    },
    {
      "('": -0.0071695955
    },
    {
      "dr": -0.06254577
    },
    {
      "ink": -0.00068576034
    },
    {
      "')": -0.8644769
    },
    {
      "\n": -0.016938007
    },
    {
      " #": -0.51213294
    },
    {
      " 3": -0.0049181688
    },
    {
      ":": -0.0011394074
    },
    {
      " drink": -0.118497856
    },
    {
      "\n": -0.8684171
    },
    {
      " drink": -0.58448875
    },
    {
      "('": -0.06084764
    },
    {
      "cup": -0.12456631
    },
    {
      "')": -0.0018160287
    },
    {
      "\n": -0.18171822
    },
    {
      " #": -0.07113778
    },
    {
      " 4": -0.0080187535
    },
    {
      ":": -0.0014271928
    },
    {
      " put": -0.26228705
    },
    {
      " cup": -0.15740655
    },
    {
      " back": -0.118424855
    },
    {
      "\n": -0.033014085
    },
    {
      " assert": -0.5019403
    },
    {
      "('": -0.0010152343
    },
    {
      "cup": -0.09791946
    },
    {
      "'": -0.0011012156
    },
    {
      " in": -0.0032095134
    },
    {
      " '": -0.0025562695
    },
    {
      "hands": -0.005809563
    },
    {
      "')": -0.0037991053
    },
    {
      "\n": -0.0023598066
    },
    {
      " else": -0.0015526679
    },
    {
      ":": -0.0010763338
    },
    {
      " grab": -0.004229869
    },
    {
      "('": -0.00084967975
    },
    {
      "cup": -0.00018700723
    },
    {
      "')": -0.0016343972
    },
    {
      "\n": -0.0040910672
    },
    {
      " put": -0.01679616
    },
    {
      "obj": -0.39797047
    },
    {
      "('": -0.0050512147
    },
    {
      "cup": -0.0004155434
    },
    {
      "')": -0.0048054475
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 4.943901777267456
[(" # 0: walk in to bathroom\n walk('bathroom')\n # 1: find toilet\n find('toilet')\n # 2: sit on toilet\n assert('close' to 'toilet')\n else: find('toilet')\n sit('toilet')\n # 3: switch on the toilet\n switchon('toilet')\n # 4: Done\ndef clean_the_floor():\n # 0: walk to bathroom\n walk('bathroom')\n # 1: find sponge\n find('sponge')\n # 2: grab sponge\n grab('sponge')\n # 3: find detergent\n find('detergent')\n # 4: pour detergent on sponge\n assert('close' to 'sponge')\n else: find('sponge')\n pour('detergent')\n # 5: wipe floor with sponge\n wipe('floor')\n # 6: drop sponge\n drop('sponge')\n # 7: Done", <OpenAIObject at 0x7f9f200ffc70> JSON: {
  "text_offset": [
    3163,
    3165,
    3167,
    3168,
    3173,
    3176,
    3179,
    3188,
    3189,
    3194,
    3196,
    3200,
    3204,
    3206,
    3207,
    3209,
    3211,
    3212,
    3217,
    3224,
    3225,
    3230,
    3232,
    3234,
    3238,
    3240,
    3241,
    3243,
    3245,
    3246,
    3250,
    3253,
    3260,
    3261,
    3268,
    3270,
    3275,
    3276,
    3279,
    3281,
    3283,
    3287,
    3289,
    3290,
    3295,
    3296,
    3301,
    3303,
    3305,
    3309,
    3311,
    3312,
    3316,
    3318,
    3320,
    3324,
    3326,
    3327,
    3329,
    3331,
    3332,
    3339,
    3342,
    3346,
    3353,
    3354,
    3361,
    3363,
    3365,
    3367,
    3371,
    3373,
    3374,
    3376,
    3378,
    3379,
    3384,
    3385,
    3388,
    3394,
    3395,
    3398,
    3399,
    3404,
    3407,
    3408,
    3410,
    3412,
    3413,
    3418,
    3421,
    3430,
    3431,
    3436,
    3438,
    3442,
    3446,
    3448,
    3449,
    3451,
    3453,
    3454,
    3459,
    3466,
    3467,
    3472,
    3474,
    3476,
    3480,
    3482,
    3483,
    3485,
    3487,
    3488,
    3493,
    3500,
    3501,
    3506,
    3508,
    3510,
    3514,
    3516,
    3517,
    3519,
    3521,
    3522,
    3527,
    3533,
    3537,
    3538,
    3543,
    3545,
    3546,
    3550,
    3554,
    3556,
    3557,
    3559,
    3561,
    3562,
    3567,
    3573,
    3577,
    3580,
    3587,
    3588,
    3595,
    3597,
    3602,
    3603,
    3606,
    3608,
    3610,
    3614,
    3616,
    3617,
    3622,
    3623,
    3628,
    3630,
    3632,
    3636,
    3638,
    3639,
    3644,
    3646,
    3647,
    3651,
    3655,
    3657,
    3658,
    3660,
    3662,
    3663,
    3668,
    3674,
    3679,
    3686,
    3687,
    3692,
    3694,
    3699,
    3701,
    3702,
    3704,
    3706,
    3707,
    3712,
    3719,
    3720,
    3725,
    3727,
    3729,
    3733,
    3735,
    3736,
    3738,
    3740,
    3741
  ],
  "token_logprobs": [
    -0.014818699,
    -0.007888802,
    -0.0024512205,
    -0.12002227,
    -1.5583211,
    -0.04585958,
    -0.21436052,
    -0.019629339,
    -0.0032624374,
    -0.0039279307,
    -0.0024562397,
    -0.00017151104,
    -0.0012804255,
    -0.0055603124,
    -0.001791009,
    -0.0026621672,
    -0.0004894227,
    -0.07431667,
    -0.054912645,
    -0.022907726,
    -0.46201423,
    -0.00079491606,
    -0.0007104543,
    -0.00023333247,
    -0.00206387,
    -0.0053558876,
    -0.020824013,
    -0.004715373,
    -0.0006314847,
    -0.5900146,
    -0.07025249,
    -0.45735434,
    -0.027330205,
    -1.0253825,
    -0.001457516,
    -0.0028150533,
    -0.0037138495,
    -0.0008075043,
    -0.001998888,
    -0.0011522978,
    -0.00017258391,
    -0.004480765,
    -0.004203892,
    -0.0016828775,
    -0.0013112199,
    -0.0057277917,
    -0.001620247,
    -0.0005565166,
    -0.00013216372,
    -0.0015163721,
    -0.005844036,
    -0.20026144,
    -0.0010058093,
    -0.00027589937,
    -1.9621319e-05,
    -0.0006290987,
    -0.019555727,
    -0.030595552,
    -0.009590591,
    -0.0016418003,
    -4.5574765,
    -0.21914004,
    -0.7742623,
    -1.5014625,
    -0.5663398,
    -0.20604938,
    -0.0023011372,
    -0.0008384657,
    -0.0011183412,
    -0.0005272344,
    -0.0027089023,
    -0.03965566,
    -0.027066285,
    -0.00525378,
    -0.0012927782,
    -2.5400848,
    -0.102906935,
    -1.6445827,
    -2.8781502,
    -0.0020917018,
    -2.8182838,
    -0.0010254984,
    -1.1377198,
    -0.027318256,
    -0.018274903,
    -0.0023608822,
    -0.003634283,
    -0.0014839577,
    -0.5278047,
    -0.5328606,
    -1.0686226,
    -0.025121741,
    -0.002362078,
    -0.0021697131,
    -0.0020547893,
    -8.709908e-05,
    -0.00067866227,
    -0.007877803,
    -0.0012657441,
    -0.0023866321,
    -0.00060882105,
    -0.06130224,
    -0.7340861,
    -0.034106568,
    -0.04059997,
    -0.00086029776,
    -0.00025777495,
    -0.0002588497,
    -0.0005433961,
    -0.0050377348,
    -0.008878445,
    -0.002970416,
    -0.0011900119,
    -0.03584923,
    -0.15401627,
    -0.02189905,
    -0.62495756,
    -0.0010780066,
    -7.839496e-05,
    -0.00028555995,
    -0.00032347863,
    -0.0044403505,
    -0.3372844,
    -0.0058197537,
    -0.0011856547,
    -1.5896397,
    -0.03846052,
    -0.0010561679,
    -0.025948858,
    -0.030632548,
    -0.0009530693,
    -0.0002360752,
    -0.0002948601,
    -0.0006097756,
    -0.0011648871,
    -0.004728068,
    -0.006510346,
    -0.0055467663,
    -0.0011122569,
    -0.15609896,
    -0.034592975,
    -0.0010830789,
    -0.31173927,
    -0.21027058,
    -0.011706083,
    -0.968562,
    -0.002558363,
    -0.43353495,
    -0.0038159795,
    -0.00069208303,
    -0.002240859,
    -1.156398,
    -0.00049228565,
    -0.027304351,
    -0.006983269,
    -0.005175529,
    -0.0019990054,
    -0.4650703,
    -0.0016791754,
    -0.0015395334,
    -0.00045537692,
    -0.0034181685,
    -0.0055257883,
    -0.79413456,
    -0.0027108155,
    -0.060397677,
    -0.00019177745,
    -0.0005125633,
    -1.5450486,
    -0.018828556,
    -0.15297751,
    -0.0031844599,
    -0.00068218034,
    -0.3634327,
    -1.7394289,
    -0.5696109,
    -0.03438697,
    -0.022465806,
    -0.5734692,
    -0.0021333357,
    -0.15121149,
    -0.053489294,
    -0.014597012,
    -0.024013873,
    -0.0032031164,
    -0.0011965778,
    -1.5073866,
    -0.09271813,
    -0.0920853,
    -0.17852348,
    -0.0010891662,
    -0.00056987547,
    -3.8217877e-05,
    -0.0006982875,
    -0.018604035,
    -0.00467447,
    -0.006438716,
    -0.0016420396,
    -0.1382456
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " in",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " toilet",
    "\n",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " sit",
    " on",
    " toilet",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "to",
    "ilet",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " sit",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " switch",
    " on",
    " the",
    " toilet",
    "\n",
    " switch",
    "on",
    "('",
    "to",
    "ilet",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " Done",
    "\n",
    "def",
    " clean",
    "_",
    "the",
    "_",
    "floor",
    "():",
    "\n",
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " bathroom",
    "\n",
    " walk",
    "('",
    "bath",
    "room",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " sponge",
    "\n",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " grab",
    " sponge",
    "\n",
    " grab",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 3",
    ":",
    " find",
    " deter",
    "gent",
    "\n",
    " find",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 4",
    ":",
    " pour",
    " deter",
    "gent",
    " on",
    " sponge",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "sp",
    "onge",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " pour",
    "('",
    "d",
    "eter",
    "gent",
    "')",
    "\n",
    " #",
    " 5",
    ":",
    " wipe",
    " floor",
    " with",
    " sponge",
    "\n",
    " wipe",
    "('",
    "floor",
    "')",
    "\n",
    " #",
    " 6",
    ":",
    " drop",
    " sponge",
    "\n",
    " drop",
    "('",
    "sp",
    "onge",
    "')",
    "\n",
    " #",
    " 7",
    ":",
    " Done"
  ],
  "top_logprobs": [
    {
      " #": -0.014818699
    },
    {
      " 0": -0.007888802
    },
    {
      ":": -0.0024512205
    },
    {
      " walk": -0.12002227
    },
    {
      " to": -0.2932636
    },
    {
      " to": -0.04585958
    },
    {
      " bathroom": -0.21436052
    },
    {
      "\n": -0.019629339
    },
    {
      " walk": -0.0032624374
    },
    {
      "('": -0.0039279307
    },
    {
      "bath": -0.0024562397
    },
    {
      "room": -0.00017151104
    },
    {
      "')": -0.0012804255
    },
    {
      "\n": -0.0055603124
    },
    {
      " #": -0.001791009
    },
    {
      " 1": -0.0026621672
    },
    {
      ":": -0.0004894227
    },
    {
      " find": -0.07431667
    },
    {
      " toilet": -0.054912645
    },
    {
      "\n": -0.022907726
    },
    {
      " find": -0.46201423
    },
    {
      "('": -0.00079491606
    },
    {
      "to": -0.0007104543
    },
    {
      "ilet": -0.00023333247
    },
    {
      "')": -0.00206387
    },
    {
      "\n": -0.0053558876
    },
    {
      " #": -0.020824013
    },
    {
      " 2": -0.004715373
    },
    {
      ":": -0.0006314847
    },
    {
      " sit": -0.5900146
    },
    {
      " on": -0.07025249
    },
    {
      " toilet": -0.45735434
    },
    {
      "\n": -0.027330205
    },
    {
      " tur": -0.96071565
    },
    {
      "('": -0.001457516
    },
    {
      "close": -0.0028150533
    },
    {
      "'": -0.0037138495
    },
    {
      " to": -0.0008075043
    },
    {
      " '": -0.001998888
    },
    {
      "to": -0.0011522978
    },
    {
      "ilet": -0.00017258391
    },
    {
      "')": -0.004480765
    },
    {
      "\n": -0.004203892
    },
    {
      " else": -0.0016828775
    },
    {
      ":": -0.0013112199
    },
    {
      " find": -0.0057277917
    },
    {
      "('": -0.001620247
    },
    {
      "to": -0.0005565166
    },
    {
      "ilet": -0.00013216372
    },
    {
      "')": -0.0015163721
    },
    {
      "\n": -0.005844036
    },
    {
      " sit": -0.20026144
    },
    {
      "('": -0.0010058093
    },
    {
      "to": -0.00027589937
    },
    {
      "ilet": -1.9621319e-05
    },
    {
      "')": -0.0006290987
    },
    {
      "\n": -0.019555727
    },
    {
      " #": -0.030595552
    },
    {
      " 3": -0.009590591
    },
    {
      ":": -0.0016418003
    },
    {
      " flush": -1.536374
    },
    {
      " on": -0.21914004
    },
    {
      " the": -0.7742623
    },
    {
      " light": -0.6317401
    },
    {
      "\n": -0.5663398
    },
    {
      " switch": -0.20604938
    },
    {
      "on": -0.0023011372
    },
    {
      "('": -0.0008384657
    },
    {
      "to": -0.0011183412
    },
    {
      "ilet": -0.0005272344
    },
    {
      "')": -0.0027089023
    },
    {
      "\n": -0.03965566
    },
    {
      " #": -0.027066285
    },
    {
      " 4": -0.00525378
    },
    {
      ":": -0.0012927782
    },
    {
      " do": -1.5206958
    },
    {
      "\n": -0.102906935
    },
    {
      "def": -1.6445827
    },
    {
      " wash": -1.0193665
    },
    {
      "_": -0.0020917018
    },
    {
      "room": -1.4202452
    },
    {
      "_": -0.0010254984
    },
    {
      "floor": -1.1377198
    },
    {
      "():": -0.027318256
    },
    {
      "\n": -0.018274903
    },
    {
      " #": -0.0023608822
    },
    {
      " 0": -0.003634283
    },
    {
      ":": -0.0014839577
    },
    {
      " walk": -0.5278047
    },
    {
      " to": -0.5328606
    },
    {
      " bathroom": -1.0686226
    },
    {
      "\n": -0.025121741
    },
    {
      " walk": -0.002362078
    },
    {
      "('": -0.0021697131
    },
    {
      "bath": -0.0020547893
    },
    {
      "room": -8.709908e-05
    },
    {
      "')": -0.00067866227
    },
    {
      "\n": -0.007877803
    },
    {
      " #": -0.0012657441
    },
    {
      " 1": -0.0023866321
    },
    {
      ":": -0.00060882105
    },
    {
      " find": -0.06130224
    },
    {
      " sponge": -0.7340861
    },
    {
      "\n": -0.034106568
    },
    {
      " find": -0.04059997
    },
    {
      "('": -0.00086029776
    },
    {
      "sp": -0.00025777495
    },
    {
      "onge": -0.0002588497
    },
    {
      "')": -0.0005433961
    },
    {
      "\n": -0.0050377348
    },
    {
      " #": -0.008878445
    },
    {
      " 2": -0.002970416
    },
    {
      ":": -0.0011900119
    },
    {
      " grab": -0.03584923
    },
    {
      " sponge": -0.15401627
    },
    {
      "\n": -0.02189905
    },
    {
      " grab": -0.62495756
    },
    {
      "('": -0.0010780066
    },
    {
      "sp": -7.839496e-05
    },
    {
      "onge": -0.00028555995
    },
    {
      "')": -0.00032347863
    },
    {
      "\n": -0.0044403505
    },
    {
      " #": -0.3372844
    },
    {
      " 3": -0.0058197537
    },
    {
      ":": -0.0011856547
    },
    {
      " pour": -0.898903
    },
    {
      " deter": -0.03846052
    },
    {
      "gent": -0.0010561679
    },
    {
      "\n": -0.025948858
    },
    {
      " find": -0.030632548
    },
    {
      "('": -0.0009530693
    },
    {
      "d": -0.0002360752
    },
    {
      "eter": -0.0002948601
    },
    {
      "gent": -0.0006097756
    },
    {
      "')": -0.0011648871
    },
    {
      "\n": -0.004728068
    },
    {
      " #": -0.006510346
    },
    {
      " 4": -0.0055467663
    },
    {
      ":": -0.0011122569
    },
    {
      " pour": -0.15609896
    },
    {
      " deter": -0.034592975
    },
    {
      "gent": -0.0010830789
    },
    {
      " on": -0.31173927
    },
    {
      " sponge": -0.21027058
    },
    {
      "\n": -0.011706083
    },
    {
      " pour": -0.522763
    },
    {
      "('": -0.002558363
    },
    {
      "close": -0.43353495
    },
    {
      "'": -0.0038159795
    },
    {
      " to": -0.00069208303
    },
    {
      " '": -0.002240859
    },
    {
      "d": -0.37890357
    },
    {
      "onge": -0.00049228565
    },
    {
      "')": -0.027304351
    },
    {
      "\n": -0.006983269
    },
    {
      " else": -0.005175529
    },
    {
      ":": -0.0019990054
    },
    {
      " find": -0.4650703
    },
    {
      "('": -0.0016791754
    },
    {
      "sp": -0.0015395334
    },
    {
      "onge": -0.00045537692
    },
    {
      "')": -0.0034181685
    },
    {
      "\n": -0.0055257883
    },
    {
      " pour": -0.79413456
    },
    {
      "('": -0.0027108155
    },
    {
      "d": -0.060397677
    },
    {
      "eter": -0.00019177745
    },
    {
      "gent": -0.0005125633
    },
    {
      "',": -0.5513868
    },
    {
      "\n": -0.018828556
    },
    {
      " #": -0.15297751
    },
    {
      " 5": -0.0031844599
    },
    {
      ":": -0.00068218034
    },
    {
      " wipe": -0.3634327
    },
    {
      " the": -0.23069419
    },
    {
      " with": -0.5696109
    },
    {
      " sponge": -0.03438697
    },
    {
      "\n": -0.022465806
    },
    {
      " wipe": -0.5734692
    },
    {
      "('": -0.0021333357
    },
    {
      "floor": -0.15121149
    },
    {
      "')": -0.053489294
    },
    {
      "\n": -0.014597012
    },
    {
      " #": -0.024013873
    },
    {
      " 6": -0.0032031164
    },
    {
      ":": -0.0011965778
    },
    {
      " put": -0.87002206
    },
    {
      " sponge": -0.09271813
    },
    {
      "\n": -0.0920853
    },
    {
      " drop": -0.17852348
    },
    {
      "('": -0.0010891662
    },
    {
      "sp": -0.00056987547
    },
    {
      "onge": -3.8217877e-05
    },
    {
      "')": -0.0006982875
    },
    {
      "\n": -0.018604035
    },
    {
      " #": -0.00467447
    },
    {
      " 7": -0.006438716
    },
    {
      ":": -0.0016420396
    },
    {
      " Done": -0.1382456
    }
  ]
})]
Using openai api key: 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, Sampling 1, Left 1
Openai api inference time: 2.357426166534424
[(" # 0: walk to the bedroom\n walk('bedroom')\n # 1: find the phone\n walk('phone')\n find('phone')\n # 2: pick up the phone\n assert('close' to 'phone')\n else: find('phone')\n grab('phone')\n assert('phone' in 'hands')\n else: grab('phone')\n turnto('phone')\n assert('phone' in 'hands')\n else: grab('phone')\n pointat('phone')", <OpenAIObject at 0x7f9f2017c4a0> JSON: {
  "text_offset": [
    3164,
    3166,
    3168,
    3169,
    3174,
    3177,
    3181,
    3189,
    3190,
    3195,
    3197,
    3204,
    3206,
    3207,
    3209,
    3211,
    3212,
    3217,
    3221,
    3227,
    3228,
    3233,
    3235,
    3240,
    3242,
    3243,
    3248,
    3250,
    3255,
    3257,
    3258,
    3260,
    3262,
    3263,
    3268,
    3271,
    3275,
    3281,
    3282,
    3289,
    3291,
    3296,
    3297,
    3300,
    3302,
    3307,
    3309,
    3310,
    3315,
    3316,
    3321,
    3323,
    3328,
    3330,
    3331,
    3336,
    3338,
    3343,
    3345,
    3346,
    3353,
    3355,
    3360,
    3361,
    3364,
    3366,
    3371,
    3373,
    3374,
    3379,
    3380,
    3385,
    3387,
    3392,
    3394,
    3395,
    3399,
    3401,
    3402,
    3404,
    3409,
    3411,
    3412,
    3419,
    3421,
    3426,
    3427,
    3430,
    3432,
    3437,
    3439,
    3440,
    3445,
    3446,
    3451,
    3453,
    3458,
    3460,
    3461,
    3467,
    3469,
    3471,
    3476
  ],
  "token_logprobs": [
    -0.017136991,
    -0.008376798,
    -0.0017956665,
    -0.83066505,
    -0.23864299,
    -2.7513485,
    -0.4078593,
    -0.029238237,
    -0.005416351,
    -0.004556147,
    -0.002249163,
    -0.0013898262,
    -0.010873533,
    -0.0015068215,
    -0.0031388376,
    -0.00068039127,
    -0.047396015,
    -0.64461637,
    -0.24131367,
    -0.027564107,
    -1.5977526,
    -0.0013461339,
    -0.0077715507,
    -0.0013531193,
    -0.0057435585,
    -0.011922122,
    -0.00077738106,
    -0.0002915213,
    -0.0006312454,
    -0.005619592,
    -0.006279756,
    -0.0054459004,
    -0.0012735011,
    -0.8960342,
    -0.01958612,
    -0.04345607,
    -0.0010784833,
    -0.016313124,
    -0.5962989,
    -0.0015149398,
    -0.007583372,
    -0.0026915683,
    -0.0009087415,
    -0.0021741332,
    -0.000604766,
    -0.004920506,
    -0.0057063308,
    -0.0018226585,
    -0.0013868432,
    -0.0075626513,
    -0.0015527881,
    -0.00036360786,
    -0.00129624,
    -0.007264154,
    -0.10809553,
    -0.00092150713,
    -0.00017783002,
    -0.0016380983,
    -0.047392514,
    -0.4497176,
    -0.0018630251,
    -0.014133473,
    -0.0023446914,
    -0.028028272,
    -0.0047178883,
    -0.01524963,
    -0.018084675,
    -0.020728227,
    -0.0039452836,
    -0.0032491006,
    -0.005802788,
    -0.0014845538,
    -0.00027315848,
    -0.00212784,
    -1.2076287,
    -0.9113539,
    -3.583558e-05,
    -0.00016495361,
    -0.00054709346,
    -0.00035144386,
    -0.0014002724,
    -0.09741952,
    -0.9799663,
    -0.00050421304,
    -0.0062610423,
    -0.00089054485,
    -0.002361958,
    -0.0009897592,
    -0.0012081532,
    -0.0015246698,
    -0.0057704737,
    -0.00083267794,
    -0.0011394074,
    -0.0017227007,
    -0.00079515536,
    -0.00037362418,
    -0.0017599595,
    -0.25394788,
    -0.04977913,
    -0.00062635314,
    -0.00042651527,
    -0.00017377506,
    -0.0015164923
  ],
  "tokens": [
    " #",
    " 0",
    ":",
    " walk",
    " to",
    " the",
    " bedroom",
    "\n",
    " walk",
    "('",
    "bedroom",
    "')",
    "\n",
    " #",
    " 1",
    ":",
    " find",
    " the",
    " phone",
    "\n",
    " walk",
    "('",
    "phone",
    "')",
    "\n",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " #",
    " 2",
    ":",
    " pick",
    " up",
    " the",
    " phone",
    "\n",
    " assert",
    "('",
    "close",
    "'",
    " to",
    " '",
    "phone",
    "')",
    "\n",
    " else",
    ":",
    " find",
    "('",
    "phone",
    "')",
    "\n",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " assert",
    "('",
    "phone",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " tur",
    "nt",
    "o",
    "('",
    "phone",
    "')",
    "\n",
    " assert",
    "('",
    "phone",
    "'",
    " in",
    " '",
    "hands",
    "')",
    "\n",
    " else",
    ":",
    " grab",
    "('",
    "phone",
    "')",
    "\n",
    " point",
    "at",
    "('",
    "phone",
    "')"
  ],
  "top_logprobs": [
    {
      " #": -0.017136991
    },
    {
      " 0": -0.008376798
    },
    {
      ":": -0.0017956665
    },
    {
      " find": -0.7179589
    },
    {
      " to": -0.23864299
    },
    {
      " bedroom": -0.3129863
    },
    {
      " bedroom": -0.4078593
    },
    {
      "\n": -0.029238237
    },
    {
      " walk": -0.005416351
    },
    {
      "('": -0.004556147
    },
    {
      "bedroom": -0.002249163
    },
    {
      "')": -0.0013898262
    },
    {
      "\n": -0.010873533
    },
    {
      " #": -0.0015068215
    },
    {
      " 1": -0.0031388376
    },
    {
      ":": -0.00068039127
    },
    {
      " find": -0.047396015
    },
    {
      " the": -0.64461637
    },
    {
      " phone": -0.24131367
    },
    {
      "\n": -0.027564107
    },
    {
      " find": -0.2723715
    },
    {
      "('": -0.0013461339
    },
    {
      "phone": -0.0077715507
    },
    {
      "')": -0.0013531193
    },
    {
      "\n": -0.0057435585
    },
    {
      " find": -0.011922122
    },
    {
      "('": -0.00077738106
    },
    {
      "phone": -0.0002915213
    },
    {
      "')": -0.0006312454
    },
    {
      "\n": -0.005619592
    },
    {
      " #": -0.006279756
    },
    {
      " 2": -0.0054459004
    },
    {
      ":": -0.0012735011
    },
    {
      " grab": -0.5676879
    },
    {
      " up": -0.01958612
    },
    {
      " the": -0.04345607
    },
    {
      " phone": -0.0010784833
    },
    {
      "\n": -0.016313124
    },
    {
      " assert": -0.5962989
    },
    {
      "('": -0.0015149398
    },
    {
      "close": -0.007583372
    },
    {
      "'": -0.0026915683
    },
    {
      " to": -0.0009087415
    },
    {
      " '": -0.0021741332
    },
    {
      "phone": -0.000604766
    },
    {
      "')": -0.004920506
    },
    {
      "\n": -0.0057063308
    },
    {
      " else": -0.0018226585
    },
    {
      ":": -0.0013868432
    },
    {
      " find": -0.0075626513
    },
    {
      "('": -0.0015527881
    },
    {
      "phone": -0.00036360786
    },
    {
      "')": -0.00129624
    },
    {
      "\n": -0.007264154
    },
    {
      " grab": -0.10809553
    },
    {
      "('": -0.00092150713
    },
    {
      "phone": -0.00017783002
    },
    {
      "')": -0.0016380983
    },
    {
      "\n": -0.047392514
    },
    {
      " assert": -0.4497176
    },
    {
      "('": -0.0018630251
    },
    {
      "phone": -0.014133473
    },
    {
      "'": -0.0023446914
    },
    {
      " in": -0.028028272
    },
    {
      " '": -0.0047178883
    },
    {
      "hands": -0.01524963
    },
    {
      "')": -0.018084675
    },
    {
      "\n": -0.020728227
    },
    {
      " else": -0.0039452836
    },
    {
      ":": -0.0032491006
    },
    {
      " grab": -0.005802788
    },
    {
      "('": -0.0014845538
    },
    {
      "phone": -0.00027315848
    },
    {
      "')": -0.00212784
    },
    {
      "<|endoftext|>": -0.36454436
    },
    {
      " tur": -0.9113539
    },
    {
      "nt": -3.583558e-05
    },
    {
      "o": -0.00016495361
    },
    {
      "('": -0.00054709346
    },
    {
      "phone": -0.00035144386
    },
    {
      "')": -0.0014002724
    },
    {
      "\n": -0.09741952
    },
    {
      " assert": -0.9799663
    },
    {
      "('": -0.00050421304
    },
    {
      "phone": -0.0062610423
    },
    {
      "'": -0.00089054485
    },
    {
      " in": -0.002361958
    },
    {
      " '": -0.0009897592
    },
    {
      "hands": -0.0012081532
    },
    {
      "')": -0.0015246698
    },
    {
      "\n": -0.0057704737
    },
    {
      " else": -0.00083267794
    },
    {
      ":": -0.0011394074
    },
    {
      " grab": -0.0017227007
    },
    {
      "('": -0.00079515536
    },
    {
      "phone": -0.00037362418
    },
    {
      "')": -0.0017599595
    },
    {
      "\n": -0.25394788
    },
    {
      " point": -0.04977913
    },
    {
      "at": -0.00062635314
    },
    {
      "('": -0.00042651527
    },
    {
      "phone": -0.00017377506
    },
    {
      "')": -0.0015164923
    }
  ]
})]
experiment time1 on environment scene5
Pick up spare change on dresser {'script': ['[Walk] <bedroom> (1)', '[Walk] <dresser> (1)', '[Find] <dresser> (1)', '[Find] <spare_change> (1)', '[Grab] <spare_change> (1)', '[Putin] <spare_change> (1) <pocket> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <dresser> (1)', '[Find] <dresser> (1)', '[Find] <spare_change> (1)', '[Grab] <spare_change> (1)', "assert('close' to 'pocket')", 'else: [Find] <pocket> (1)', '[Putin] <spare_change> (1) <pocket> (1)']}
Turn on TV {'script': ['[Walk] <tvstand> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', '[Touch] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)'], 'assert_script': ['[Walk] <tvstand> (1)', '[Find] <television> (1)', "assert('close' to 'tv')", 'else: [Find] <tv> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', "assert('close' to 'remote_control')", 'else: [Find] <remote_control> (1)', '[Touch] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']}
Wash sink {'script': ['[Find] <sponge> (1)', '[Grab] <sponge> (1)', '[Turnto] <sponge> (1)', '[Pointat] <sponge> (1)', '[Find] <detergent> (1)', '[Grab] <detergent> (1)', '[Turnto] <detergent> (1)', '[Lookat] <detergent> (1)', '[Pour] <detergent> (1)', '[Turnto] <sink> (1)', '[Wash] <sink> (1)', '[Wipe] <sink> (1)', '[Putobjback] <sponge> (1)'], 'assert_script': ['[Find] <sponge> (1)', "assert('close' to 'sponge')", 'else: [Find] <sponge> (1)', '[Grab] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Turnto] <sponge> (1)', "assert('sponge' in 'hands')", 'else: [Grab] <sponge> (1)', '[Pointat] <sponge> (1)', '[Find] <detergent> (1)', '[Grab] <detergent> (1)', "assert('detergent' in 'hands')", 'else: [Grab] <detergent> (1)', '[Turnto] <detergent> (1)', '[Lookat] <detergent> (1)', "assert('close' to 'sponge')", 'else: [Find] <sponge> (1)', "assert('detergent' in 'hands')", 'else: [Grab] <detergent> (1)', '[Pour] <detergent> (1)', '[Turnto] <sink> (1)', "assert('close' to 'sink')", 'else: [Find] <sink> (1)', '[Wash] <sink> (1)', '[Wipe] <sink> (1)', '[Putobjback] <sponge> (1)']}
Hang up jacket {'script': ['[Find] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', '[Find] <jacket> (1)', '[Puton] <jacket> (1)', '[Putback] <hanger> (1) <closet> (1)'], 'assert_script': ['[Find] <closet> (1)', '[Find] <hanger> (1)', '[Grab] <hanger> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Find] <jacket> (1)', "assert('close' to 'hanger')", 'else: [Find] <hanger> (1)', "assert('hanger' in 'hands')", 'else: [Grab] <hanger> (1)', '[Puton] <jacket> (1)', "assert('close' to 'closet')", 'else: [Find] <closet> (1)', '[Putback] <hanger> (1) <closet> (1)']}
Read newspaper {'script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', '[Sit] <chair> (1)', '[Open] <newspaper> (1)', '[Read] <newspaper> (1)'], 'assert_script': ['[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Find] <chair> (1)', "assert('close' to 'chair')", 'else: [Find] <chair> (1)', '[Sit] <chair> (1)', "assert('newspaper' in 'hands')", 'else: [Grab] <newspaper> (1)', '[Open] <newspaper> (1)', '[Read] <newspaper> (1)']}
Clean toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <sponge> (1)', '[Grab] <detergent> (1)', '[Pour] <detergent> (1) <sponge> (1)', '[Wipe] <toilet> (1) <sponge> (1)', '[Flush] <toilet> (1)', '[Putback] <sponge> (1) <detergent> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Grab] <sponge> (1)', '[Grab] <detergent> (1)', '[Pour] <detergent> (1) <sponge> (1)', '[Wipe] <toilet> (1) <sponge> (1)', '[Flush] <toilet> (1)', '[Putback] <sponge> (1) <detergent> (1)']}
Start computer {'script': ['[Find] <computer> (1)', '[Open] <computer> (1)', '[Switchon] <computer> (1)', '[Wait] <computer> (1)'], 'assert_script': ['[Find] <computer> (1)', '[Open] <computer> (1)', '[Switchon] <computer> (1)', '[Wait] <computer> (1)']}
Put alarm clock in bedroom {'script': ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Find] <nightstand> (1)', '[Puton] <alarm_clock> (1)', '[Lookat] <alarm_clock> (1)'], 'assert_script': ['[Find] <alarm_clock> (1)', '[Grab] <alarm_clock> (1)', "assert('alarm_clock' in 'hands')", 'else: [Grab] <alarm_clock> (1)', '[Walk] <bedroom> (1)', '[Find] <nightstand> (1)', '[Puton] <alarm_clock> (1)', '[Lookat] <alarm_clock> (1)']}
Look at mirror {'script': ['[Walk] <bathroom> (1)', '[Find] <mirror> (1)', '[Turnto] <mirror> (1)', '[Lookat] <mirror> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <mirror> (1)', '[Turnto] <mirror> (1)', '[Lookat] <mirror> (1)']}
Take nap {'script': ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', '[Sit] <bed> (1)', '[Lie] <bed> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Find] <bed> (1)', '[Turnto] <bed> (1)', '[Lookat] <bed> (1)', "assert('close' to 'bed')", 'else: [Find] <bed> (1)', 'else: [Turnto] <bed> (1)', '[Sit] <bed> (1)', '[Lie] <bed> (1)']}
Wash face {'script': ['[Find] <sink> (1)', '[Find] <faucet> (1)', '[Turnto] <faucet> (1)', '[Switchon] <faucet> (1)', '[Pour] <water> (1)', '[Wipe] <face> (1)', '[Switchoff] <faucet> (1)'], 'assert_script': ['[Find] <sink> (1)', '[Find] <faucet> (1)', "assert('close' to 'faucet')", 'else: [Find] <faucet> (1)', '[Turnto] <faucet> (1)', '[Switchon] <faucet> (1)', '[Pour] <water> (1)', '[Wipe] <face> (1)', '[Switchoff] <faucet> (1)']}
Sleep {'script': ['[Lay] <bed> (1)', '[Close] <eyes> (1)', '[Open] <eyes> (1)'], 'assert_script': ['[Lay] <bed> (1)', '[Close] <eyes> (1)', '[Open] <eyes> (1)']}
Read news {'script': ['[Walk] <home_office> (1)', '[Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', '[Putback] <newspaper> (1)'], 'assert_script': ['[Walk] <home_office> (1)', '[Find] <newspaper> (1)', "assert('close' to 'newspaper')", 'else: [Find] <newspaper> (1)', '[Grab] <newspaper> (1)', '[Turnto] <newspaper> (1)', '[Lookat] <newspaper> (1)', '[Read] <newspaper> (1)', "assert('close' to 'newspaper')", 'else: [Find] <newspaper> (1)', '[Putback] <newspaper> (1)']}
Put on your shoes {'script': ['[Find] <shoes> (1)', '[Grab] <shoes> (1)', '[Turnto] <shoes> (1)', '[Pointat] <shoes> (1)', '[Puton] <shoes> (1)', '[Lookat] <shoes> (1)'], 'assert_script': ['[Find] <shoes> (1)', "assert('close' to 'shoes')", 'else: [Find] <shoes> (1)', '[Grab] <shoes> (1)', "assert('shoes' in 'hands')", 'else: [Grab] <shoes> (1)', '[Turnto] <shoes> (1)', "assert('shoes' in 'hands')", 'else: [Grab] <shoes> (1)', '[Pointat] <shoes> (1)', "assert('shoes' in 'hands')", 'else: [Grab] <shoes> (1)', '[Puton] <shoes> (1)', '[Lookat] <shoes> (1)']}
Hand washing {'script': ['[Walk] <kitchen> (1)', '[Find] <sink> (1)', '[Pour] <detergent> (1)', '[Switchon] <faucet> (1)', '[Grab] <sponge> (1)', '[Wash] <sponge> (1)', '[Switchoff] <faucet> (1)', '[Wipe] <sponge> (1)', '[Drop] <sponge> (1)'], 'assert_script': ['[Walk] <kitchen> (1)', '[Find] <sink> (1)', '[Pour] <detergent> (1)', '[Switchon] <faucet> (1)', '[Grab] <sponge> (1)', '[Wash] <sponge> (1)', '[Switchoff] <faucet> (1)', '[Wipe] <sponge> (1)', '[Drop] <sponge> (1)']}
Drink {'script': ['[Find] <cup> (1)', '[Grab] <cup> (1)', '[Turnto] <cup> (1)', '[Pour] <drink> (1)', '[Drink] <cup> (1)', '[Putback] <cup> (1)'], 'assert_script': ['[Find] <cup> (1)', "assert('close' to 'cup')", 'else: [Find] <cup> (1)', '[Grab] <cup> (1)', "assert('cup' in 'hands')", 'else: [Grab] <cup> (1)', '[Turnto] <cup> (1)', '[Pour] <drink> (1)', '[Drink] <cup> (1)', "assert('cup' in 'hands')", 'else: [Grab] <cup> (1)', '[Putback] <cup> (1)']}
Go to toilet {'script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Switchon] <toilet> (1)', '[Walk] <bathroom> (1)', '[Find] <sponge> (1)', '[Grab] <sponge> (1)', '[Find] <detergent> (1)', '[Pour] <detergent> (1)', '[Wipe] <floor> (1)', '[Drop] <sponge> (1)'], 'assert_script': ['[Walk] <bathroom> (1)', '[Find] <toilet> (1)', "assert('close' to 'toilet')", 'else: [Find] <toilet> (1)', '[Sit] <toilet> (1)', '[Switchon] <toilet> (1)', '[Walk] <bathroom> (1)', '[Find] <sponge> (1)', '[Grab] <sponge> (1)', '[Find] <detergent> (1)', "assert('close' to 'sponge')", 'else: [Find] <sponge> (1)', '[Pour] <detergent> (1)', '[Wipe] <floor> (1)', '[Drop] <sponge> (1)']}
Pick up phone {'script': ['[Walk] <bedroom> (1)', '[Walk] <phone> (1)', '[Find] <phone> (1)', '[Grab] <phone> (1)', '[Turnto] <phone> (1)', '[Pointat] <phone> (1)'], 'assert_script': ['[Walk] <bedroom> (1)', '[Walk] <phone> (1)', '[Find] <phone> (1)', "assert('close' to 'phone')", 'else: [Find] <phone> (1)', '[Grab] <phone> (1)', "assert('phone' in 'hands')", 'else: [Grab] <phone> (1)', '[Turnto] <phone> (1)', "assert('phone' in 'hands')", 'else: [Grab] <phone> (1)', '[Pointat] <phone> (1)']}
experiment time1 on environment scene5
Pick up spare change on dresser
script before ['[Walk] <bedroom> (1)', '[Walk] <dresser> (1)', '[Find] <dresser> (1)', '[Find] <spare_change> (1)', '[Grab] <spare_change> (1)', '[Putin] <spare_change> (1) <pocket> (1)']
illegal action ('spare_change', 1) does not exist in the environment  be deleted
illegal action ('spare_change', 1) does not exist in the environment  be deleted
illegal action ('pocket', 1) does not exist in the environment  be deleted
illegal action ('spare_change', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Turn on TV
script before ['[Walk] <tvstand> (1)', '[Find] <television> (1)', '[Switchon] <television> (1)', '[Find] <remote_control> (1)', '[Touch] <remote_control> (1)', '[Turnto] <television> (1)', '[Lookat] <television> (1)']
illegal action ('tv', 1) does not exist in the environment  be deleted
illegal action Unknown action "END"  be deleted
Wash sink
script before ['[Find] <sponge> (1)', '[Grab] <sponge> (1)', '[Turnto] <sponge> (1)', '[Pointat] <sponge> (1)', '[Find] <detergent> (1)', '[Grab] <detergent> (1)', '[Turnto] <detergent> (1)', '[Lookat] <detergent> (1)', '[Pour] <detergent> (1)', '[Turnto] <sink> (1)', '[Wash] <sink> (1)', '[Wipe] <sink> (1)', '[Putobjback] <sponge> (1)']
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
illegal action ('sponge', 1) does not exist in the environment  be deleted
